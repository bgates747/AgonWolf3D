PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 88 C1 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B             0012*      ; and 3 ; modulo 4
04005B FE 03       0013*      cp 3
04005D C2 62 00 04 0014*      jp nz,@play
040061 AF          0015*      xor a
040062             0016*  @play:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; ############################################################
04008C             0044*  ; VDU SOUND API
04008C             0045*  ; ############################################################
04008C             0046*  ; Command 0: Play note
04008C             0047*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0048*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0049*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0050*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0051*      rst.lil $18
04008C             0052*      jr @PLAY_NOTE_END
04008C             0053*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0054*                   db channel                  ; Channel, 0 (commented out)
04008C             0055*                   db 0                        ; Play note command
04008C             0056*                   db volume                   ; Volume
04008C             0057*                   dw frequency                ; Frequency
04008C             0058*                   dw duration                 ; Duration
04008C             0059*  @PLAY_NOTE_END:
04008C             0060*      ENDMACRO
04008C             0061*  
04008C             0062*      MACRO MUTE_CHANNEL channel
04008C             0063*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0064*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0065*      rst.lil $18
04008C             0066*      jr @MUTE_CHANNEL_END
04008C             0067*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0068*                     db channel                ; Channel, 0 (commented out)
04008C             0069*                     db 2                      ; Set volume command
04008C             0070*                     db 0                      ; Volume (mute)
04008C             0071*  @MUTE_CHANNEL_END:
04008C             0072*      ENDMACRO
04008C             0073*  
04008C             0074*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0075*  vdu_play_note:
04008C 79          0076*      ld a,c
04008D 32 AD 00 04 0077*      ld (@channel),a
040091 78          0078*      ld a,b
040092 32 AF 00 04 0079*      ld (@volume),a
040096 22 B0 00 04 0080*      ld (@frequency),hl
04009A ED 53 B2 00 0081*      ld (@duration),de
       04          
04009F 21 AA 00 04 0082*      ld hl,@cmd
0400A3 01 0A 00 00 0083*      ld bc,@end-@cmd
0400A7 5B DF       0084*      rst.lil $18
0400A9 C9          0085*      ret
0400AA 17 00 85    0086*  @cmd:       db 23, 0, 0x85
0400AD 00          0087*  @channel:   db 0x00
0400AE 00          0088*              db 0x00 ; play note command
0400AF 00          0089*  @volume:    db 0x00
0400B0 00 00       0090*  @frequency: dw 0x0000
0400B2 00 00       0091*  @duration:  dw 0x0000
0400B4 00          0092*  @end:       db 0x00 ; padding
0400B5             0093*  
0400B5             0094*  ; Command 1: Status
0400B5             0095*  ; VDU 23, 0, &85, channel, 1
0400B5             0096*  ; inputs: a = channel
0400B5             0097*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0098*  ; Bit 	Name 	Meaning
0400B5             0099*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0100*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0101*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0102*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0103*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0104*  
0400B5             0105*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0106*  vdu_channel_status:
0400B5 32 C7 00 04 0107*      ld (@channel),a
0400B9 21 C4 00 04 0108*      ld hl,@cmd
0400BD 01 05 00 00 0109*      ld bc,@end-@cmd
0400C1 5B DF       0110*      rst.lil $18
0400C3 C9          0111*      ret
0400C4 17 00 85    0112*  @cmd:       db 23, 0, 0x85
0400C7 00          0113*  @channel:   db 0x00
0400C8 01          0114*              db 0x01 ; get channel status command
0400C9             0115*  @end:
0400C9             0116*  
0400C9             0117*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0118*  ; inputs: c = channel, b = volume
0400C9             0119*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0120*  
0400C9             0121*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0122*  
0400C9             0123*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0124*  vdu_channel_volume:
0400C9 79          0125*      ld a,c
0400CA 32 E1 00 04 0126*      ld (@channel),a
0400CE 78          0127*      ld a,b
0400CF 32 E3 00 04 0128*      ld (@volume),a
0400D3 21 DE 00 04 0129*      ld hl,@cmd
0400D7 01 06 00 00 0130*      ld bc,@end-@cmd
0400DB 5B DF       0131*      rst.lil $18
0400DD C9          0132*      ret
0400DE 17 00 85    0133*  @cmd:       db 23, 0, 0x85
0400E1 00          0134*  @channel:   db 0x00
0400E2 02          0135*              db 0x02 ; set volume command
0400E3 00          0136*  @volume:    db 0x00
0400E4             0137*  @end:
0400E4             0138*  
0400E4             0139*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0140*  
0400E4             0141*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0142*  
0400E4             0143*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0144*  
0400E4             0145*  ; Returns 1 on success, 0 for failure.
0400E4             0146*  vdu_channel_frequency:
0400E4 79          0147*      ld a,c
0400E5 32 FC 00 04 0148*      ld (@channel),a
0400E9 ED 53 FE 00 0149*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0150*      ld hl,@cmd
0400F2 01 07 00 00 0151*      ld bc,@end-@cmd
0400F6 5B DF       0152*      rst.lil $18
0400F8 C9          0153*      ret
0400F9 17 00 85    0154*  @cmd:       db 23, 0, 0x85
0400FC 00          0155*  @channel:   db 0x00
0400FD 03          0156*              db 0x03 ; set frequency command
0400FE 00 00       0157*  @frequency: dw 0x0000
040100 00          0158*  @end:       db 0x00 ; padding
040101             0159*  
040101             0160*  
040101             0161*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0162*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0163*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0164*  
040101             0165*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0166*  
040101             0167*  ; By default a channel is set to use waveform 0 (square wave).
040101             0168*  
040101             0169*  ; Valid waveform values are as follows:
040101             0170*  ; Value 	Waveform
040101             0171*  ; 0 	Square wave
040101             0172*  ; 1 	Triangle wave
040101             0173*  ; 2 	Sawtooth wave
040101             0174*  ; 3 	Sine wave
040101             0175*  ; 4 	Noise (simple white noise with no frequency support)
040101             0176*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0177*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0178*  
040101             0179*  vdu_channel_waveform:
040101 79          0180*      ld a,c
040102 32 27 01 04 0181*      ld (@channel),a
040106 78          0182*      ld a,b
040107 32 29 01 04 0183*      ld (@waveform),a
04010B FE 08       0184*      cp 8 ; check if the waveform is a sample
04010D 28 06       0185*      jr z, @sample
04010F 01 06 00 00 0186*      ld bc,@bufferId-@cmd
040113 18 08       0187*      jr @sendToVdu
040115             0188*  @sample:
040115 22 2A 01 04 0189*      ld (@bufferId),hl
040119 01 08 00 00 0190*      ld bc,@end-@cmd
04011D             0191*  @sendToVdu:
04011D 21 24 01 04 0192*      ld hl,@cmd
040121 5B DF       0193*      rst.lil $18
040123 C9          0194*      ret
040124 17 00 85    0195*  @cmd:       db 23, 0, 0x85
040127 00          0196*  @channel:   db 0x00
040128 04          0197*              db 0x04 ; set waveform command
040129 00          0198*  @waveform:  db 0x00
04012A 00 00       0199*  @bufferId:  dw 0x0000
04012C 00          0200*  @end:       db 0x00 ; padding
04012D             0201*  
04012D             0202*  
04012D             0203*  
04012D             0204*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0205*  ; inputs: hl = bufferId; a = format
04012D             0206*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0207*  ; Value 	Description
04012D             0208*  ; 0 	8-bit signed, 16KHz
04012D             0209*  ; 1 	8-bit unsigned, 16KHz
04012D             0210*  vdu_buffer_to_sound:
04012D 22 46 01 04 0211*      ld (@bufferId),hl
040131 32 48 01 04 0212*      ld (@format),a
040135 21 40 01 04 0213*      ld hl,@cmd
040139 01 09 00 00 0214*      ld bc,@end-@cmd
04013D 5B DF       0215*      rst.lil $18
04013F C9          0216*      ret
040140 17 00 85    0217*  @cmd:       db 23, 0, 0x85
040143 00          0218*              db 0x00 ; a magic number that is always 0
040144 05          0219*              db 0x05 ; buffer to sound command
040145 02          0220*              db 0x02 ; a magic number that is always 2
040146 00 00       0221*  @bufferId:  dw 0x0000
040148 00          0222*  @format:    db 0x00
040149             0223*  @end:
040149             0224*  
040149             0225*  
040149             0226*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0227*  vdu_play_sample:
040149             0228*      ; populate input parameters
040149 79          0229*      ld a,c
04014A 32 74 01 04 0230*      ld (@channel0),a
04014E 32 7C 01 04 0231*      ld (@channel1),a
040152 78          0232*      ld a,b
040153 32 7E 01 04 0233*      ld (@volume),a
040157 ED 53 7F 01 0234*      ld (@frequency),de
       04          
04015C 22 77 01 04 0235*      ld (@bufferId),hl
040160             0236*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0237*      ld a,23
040162 32 79 01 04 0238*      ld (@cmd1),a
040166             0239*      ; prep the vdu command string
040166 21 71 01 04 0240*      ld hl, @cmd0
04016A 01 12 00 00 0241*      ld bc, @end - @cmd0
04016E 5B DF       0242*      rst.lil $18
040170 C9          0243*      ret
040171 17 00 85    0244*  @cmd0:       db 23, 0, 0x85
040174 00          0245*  @channel0:   db 0x00
040175 04          0246*               db 0x04 ; set waveform command
040176 08          0247*  @waveform:   db 0x08 ; sample
040177 00 00       0248*  @bufferId:   dw 0x0000
040179 17 00 85    0249*  @cmd1:       db 23, 0, 0x85
04017C 00          0250*  @channel1:   db 0x00
04017D 00          0251*               db 0x00 ; play note command
04017E 00          0252*  @volume:     db 0x00
04017F 00 00       0253*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0254*  @duration:   dw 0x0000 ; milliseconds
040183 00          0255*  @end:        db 0x00 ; padding
040184             0256*  
040184             0257*  
040184             0258*  vdu_enable_channels:
040184 C9          0259*      RET ; DEBUG
040185             0260*  ; enable all the channels
040185 21 90 01 04 0261*      ld hl, enable_channels_cmd
040189 01 91 00 00 0262*      ld bc, enable_channels_end - enable_channels_cmd
04018D 5B DF       0263*      rst.lil $18
04018F C9          0264*      ret
040190             0265*  enable_channels_cmd:
040190 17 00 85 03 0266*      db 23, 0, $85, 3, 8
       08          
040195 17 00 85 04 0267*      db 23, 0, $85, 4, 8
       08          
04019A 17 00 85 05 0268*      db 23, 0, $85, 5, 8
       08          
04019F 17 00 85 06 0269*      db 23, 0, $85, 6, 8
       08          
0401A4 17 00 85 07 0270*      db 23, 0, $85, 7, 8
       08          
0401A9 17 00 85 08 0271*      db 23, 0, $85, 8, 8
       08          
0401AE 17 00 85 09 0272*      db 23, 0, $85, 9, 8
       08          
0401B3 17 00 85 0A 0273*      db 23, 0, $85, 10, 8
       08          
0401B8 17 00 85 0B 0274*      db 23, 0, $85, 11, 8
       08          
0401BD 17 00 85 0C 0275*      db 23, 0, $85, 12, 8
       08          
0401C2 17 00 85 0D 0276*      db 23, 0, $85, 13, 8
       08          
0401C7 17 00 85 0E 0277*      db 23, 0, $85, 14, 8
       08          
0401CC 17 00 85 0F 0278*      db 23, 0, $85, 15, 8
       08          
0401D1 17 00 85 10 0279*      db 23, 0, $85, 16, 8
       08          
0401D6 17 00 85 11 0280*      db 23, 0, $85, 17, 8
       08          
0401DB 17 00 85 12 0281*      db 23, 0, $85, 18, 8
       08          
0401E0 17 00 85 13 0282*      db 23, 0, $85, 19, 8
       08          
0401E5 17 00 85 14 0283*      db 23, 0, $85, 20, 8
       08          
0401EA 17 00 85 15 0284*      db 23, 0, $85, 21, 8
       08          
0401EF 17 00 85 16 0285*      db 23, 0, $85, 22, 8
       08          
0401F4 17 00 85 17 0286*      db 23, 0, $85, 23, 8
       08          
0401F9 17 00 85 18 0287*      db 23, 0, $85, 24, 8
       08          
0401FE 17 00 85 19 0288*      db 23, 0, $85, 25, 8
       08          
040203 17 00 85 1A 0289*      db 23, 0, $85, 26, 8
       08          
040208 17 00 85 1B 0290*      db 23, 0, $85, 27, 8
       08          
04020D 17 00 85 1C 0291*      db 23, 0, $85, 28, 8
       08          
040212 17 00 85 1D 0292*      db 23, 0, $85, 29, 8
       08          
040217 17 00 85 1E 0293*      db 23, 0, $85, 30, 8
       08          
04021C 17 00 85 1F 0294*      db 23, 0, $85, 31, 8
       08          
040221             0295*  enable_channels_end:
040221             0013   	include "src/asm/images.asm"
040221             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040221             0002*  
040221             0003*  ; cube buffer ids:
040221             0004*  BUF_10_004: equ 0x0100
040221             0005*  BUF_10_009: equ 0x0101
040221             0006*  BUF_10_010: equ 0x0102
040221             0007*  BUF_10_011: equ 0x0103
040221             0008*  BUF_10_012: equ 0x0104
040221             0009*  BUF_10_013: equ 0x0105
040221             0010*  BUF_10_014: equ 0x0106
040221             0011*  BUF_10_015: equ 0x0107
040221             0012*  BUF_10_016: equ 0x0108
040221             0013*  BUF_10_020: equ 0x0109
040221             0014*  BUF_10_024: equ 0x010A
040221             0015*  BUF_10_025: equ 0x010B
040221             0016*  BUF_10_026: equ 0x010C
040221             0017*  BUF_10_027: equ 0x010D
040221             0018*  BUF_10_028: equ 0x010E
040221             0019*  BUF_10_029: equ 0x010F
040221             0020*  BUF_10_032: equ 0x0110
040221             0021*  BUF_10_035: equ 0x0111
040221             0022*  BUF_10_036: equ 0x0112
040221             0023*  BUF_10_037: equ 0x0113
040221             0024*  BUF_10_038: equ 0x0114
040221             0025*  BUF_10_040: equ 0x0115
040221             0026*  BUF_10_042: equ 0x0116
040221             0027*  BUF_10_043: equ 0x0117
040221             0028*  BUF_10_044: equ 0x0118
040221             0029*  BUF_11_004: equ 0x0119
040221             0030*  BUF_11_009: equ 0x011A
040221             0031*  BUF_11_010: equ 0x011B
040221             0032*  BUF_11_011: equ 0x011C
040221             0033*  BUF_11_012: equ 0x011D
040221             0034*  BUF_11_013: equ 0x011E
040221             0035*  BUF_11_014: equ 0x011F
040221             0036*  BUF_11_015: equ 0x0120
040221             0037*  BUF_11_016: equ 0x0121
040221             0038*  BUF_11_020: equ 0x0122
040221             0039*  BUF_11_024: equ 0x0123
040221             0040*  BUF_11_025: equ 0x0124
040221             0041*  BUF_11_026: equ 0x0125
040221             0042*  BUF_11_027: equ 0x0126
040221             0043*  BUF_11_028: equ 0x0127
040221             0044*  BUF_11_029: equ 0x0128
040221             0045*  BUF_11_032: equ 0x0129
040221             0046*  BUF_11_035: equ 0x012A
040221             0047*  BUF_11_036: equ 0x012B
040221             0048*  BUF_11_037: equ 0x012C
040221             0049*  BUF_11_038: equ 0x012D
040221             0050*  BUF_11_040: equ 0x012E
040221             0051*  BUF_11_042: equ 0x012F
040221             0052*  BUF_11_043: equ 0x0130
040221             0053*  BUF_11_044: equ 0x0131
040221             0054*  BUF_12_004: equ 0x0132
040221             0055*  BUF_12_009: equ 0x0133
040221             0056*  BUF_12_010: equ 0x0134
040221             0057*  BUF_12_011: equ 0x0135
040221             0058*  BUF_12_012: equ 0x0136
040221             0059*  BUF_12_013: equ 0x0137
040221             0060*  BUF_12_014: equ 0x0138
040221             0061*  BUF_12_015: equ 0x0139
040221             0062*  BUF_12_016: equ 0x013A
040221             0063*  BUF_12_020: equ 0x013B
040221             0064*  BUF_12_024: equ 0x013C
040221             0065*  BUF_12_025: equ 0x013D
040221             0066*  BUF_12_026: equ 0x013E
040221             0067*  BUF_12_027: equ 0x013F
040221             0068*  BUF_12_028: equ 0x0140
040221             0069*  BUF_12_029: equ 0x0141
040221             0070*  BUF_12_032: equ 0x0142
040221             0071*  BUF_12_035: equ 0x0143
040221             0072*  BUF_12_036: equ 0x0144
040221             0073*  BUF_12_037: equ 0x0145
040221             0074*  BUF_12_038: equ 0x0146
040221             0075*  BUF_12_040: equ 0x0147
040221             0076*  BUF_12_042: equ 0x0148
040221             0077*  BUF_12_043: equ 0x0149
040221             0078*  BUF_12_044: equ 0x014A
040221             0079*  BUF_13_004: equ 0x014B
040221             0080*  BUF_13_009: equ 0x014C
040221             0081*  BUF_13_010: equ 0x014D
040221             0082*  BUF_13_011: equ 0x014E
040221             0083*  BUF_13_012: equ 0x014F
040221             0084*  BUF_13_013: equ 0x0150
040221             0085*  BUF_13_014: equ 0x0151
040221             0086*  BUF_13_015: equ 0x0152
040221             0087*  BUF_13_016: equ 0x0153
040221             0088*  BUF_13_020: equ 0x0154
040221             0089*  BUF_13_024: equ 0x0155
040221             0090*  BUF_13_025: equ 0x0156
040221             0091*  BUF_13_026: equ 0x0157
040221             0092*  BUF_13_027: equ 0x0158
040221             0093*  BUF_13_028: equ 0x0159
040221             0094*  BUF_13_029: equ 0x015A
040221             0095*  BUF_13_032: equ 0x015B
040221             0096*  BUF_13_035: equ 0x015C
040221             0097*  BUF_13_036: equ 0x015D
040221             0098*  BUF_13_037: equ 0x015E
040221             0099*  BUF_13_038: equ 0x015F
040221             0100*  BUF_13_040: equ 0x0160
040221             0101*  BUF_13_042: equ 0x0161
040221             0102*  BUF_13_043: equ 0x0162
040221             0103*  BUF_13_044: equ 0x0163
040221             0104*  BUF_14_004: equ 0x0164
040221             0105*  BUF_14_009: equ 0x0165
040221             0106*  BUF_14_010: equ 0x0166
040221             0107*  BUF_14_011: equ 0x0167
040221             0108*  BUF_14_012: equ 0x0168
040221             0109*  BUF_14_013: equ 0x0169
040221             0110*  BUF_14_014: equ 0x016A
040221             0111*  BUF_14_015: equ 0x016B
040221             0112*  BUF_14_016: equ 0x016C
040221             0113*  BUF_14_020: equ 0x016D
040221             0114*  BUF_14_024: equ 0x016E
040221             0115*  BUF_14_025: equ 0x016F
040221             0116*  BUF_14_026: equ 0x0170
040221             0117*  BUF_14_027: equ 0x0171
040221             0118*  BUF_14_028: equ 0x0172
040221             0119*  BUF_14_029: equ 0x0173
040221             0120*  BUF_14_032: equ 0x0174
040221             0121*  BUF_14_035: equ 0x0175
040221             0122*  BUF_14_036: equ 0x0176
040221             0123*  BUF_14_037: equ 0x0177
040221             0124*  BUF_14_038: equ 0x0178
040221             0125*  BUF_14_040: equ 0x0179
040221             0126*  BUF_14_042: equ 0x017A
040221             0127*  BUF_14_043: equ 0x017B
040221             0128*  BUF_14_044: equ 0x017C
040221             0129*  BUF_15_004: equ 0x017D
040221             0130*  BUF_15_009: equ 0x017E
040221             0131*  BUF_15_010: equ 0x017F
040221             0132*  BUF_15_011: equ 0x0180
040221             0133*  BUF_15_012: equ 0x0181
040221             0134*  BUF_15_013: equ 0x0182
040221             0135*  BUF_15_014: equ 0x0183
040221             0136*  BUF_15_015: equ 0x0184
040221             0137*  BUF_15_016: equ 0x0185
040221             0138*  BUF_15_020: equ 0x0186
040221             0139*  BUF_15_024: equ 0x0187
040221             0140*  BUF_15_025: equ 0x0188
040221             0141*  BUF_15_026: equ 0x0189
040221             0142*  BUF_15_027: equ 0x018A
040221             0143*  BUF_15_028: equ 0x018B
040221             0144*  BUF_15_029: equ 0x018C
040221             0145*  BUF_15_032: equ 0x018D
040221             0146*  BUF_15_035: equ 0x018E
040221             0147*  BUF_15_036: equ 0x018F
040221             0148*  BUF_15_037: equ 0x0190
040221             0149*  BUF_15_038: equ 0x0191
040221             0150*  BUF_15_040: equ 0x0192
040221             0151*  BUF_15_042: equ 0x0193
040221             0152*  BUF_15_043: equ 0x0194
040221             0153*  BUF_15_044: equ 0x0195
040221             0154*  BUF_16_004: equ 0x0196
040221             0155*  BUF_16_009: equ 0x0197
040221             0156*  BUF_16_010: equ 0x0198
040221             0157*  BUF_16_011: equ 0x0199
040221             0158*  BUF_16_012: equ 0x019A
040221             0159*  BUF_16_013: equ 0x019B
040221             0160*  BUF_16_014: equ 0x019C
040221             0161*  BUF_16_015: equ 0x019D
040221             0162*  BUF_16_016: equ 0x019E
040221             0163*  BUF_16_020: equ 0x019F
040221             0164*  BUF_16_024: equ 0x01A0
040221             0165*  BUF_16_025: equ 0x01A1
040221             0166*  BUF_16_026: equ 0x01A2
040221             0167*  BUF_16_027: equ 0x01A3
040221             0168*  BUF_16_028: equ 0x01A4
040221             0169*  BUF_16_029: equ 0x01A5
040221             0170*  BUF_16_032: equ 0x01A6
040221             0171*  BUF_16_035: equ 0x01A7
040221             0172*  BUF_16_036: equ 0x01A8
040221             0173*  BUF_16_037: equ 0x01A9
040221             0174*  BUF_16_038: equ 0x01AA
040221             0175*  BUF_16_040: equ 0x01AB
040221             0176*  BUF_16_042: equ 0x01AC
040221             0177*  BUF_16_043: equ 0x01AD
040221             0178*  BUF_16_044: equ 0x01AE
040221             0179*  BUF_17_004: equ 0x01AF
040221             0180*  BUF_17_009: equ 0x01B0
040221             0181*  BUF_17_010: equ 0x01B1
040221             0182*  BUF_17_011: equ 0x01B2
040221             0183*  BUF_17_012: equ 0x01B3
040221             0184*  BUF_17_013: equ 0x01B4
040221             0185*  BUF_17_014: equ 0x01B5
040221             0186*  BUF_17_015: equ 0x01B6
040221             0187*  BUF_17_016: equ 0x01B7
040221             0188*  BUF_17_020: equ 0x01B8
040221             0189*  BUF_17_024: equ 0x01B9
040221             0190*  BUF_17_025: equ 0x01BA
040221             0191*  BUF_17_026: equ 0x01BB
040221             0192*  BUF_17_027: equ 0x01BC
040221             0193*  BUF_17_028: equ 0x01BD
040221             0194*  BUF_17_029: equ 0x01BE
040221             0195*  BUF_17_032: equ 0x01BF
040221             0196*  BUF_17_035: equ 0x01C0
040221             0197*  BUF_17_036: equ 0x01C1
040221             0198*  BUF_17_037: equ 0x01C2
040221             0199*  BUF_17_038: equ 0x01C3
040221             0200*  BUF_17_040: equ 0x01C4
040221             0201*  BUF_17_042: equ 0x01C5
040221             0202*  BUF_17_043: equ 0x01C6
040221             0203*  BUF_17_044: equ 0x01C7
040221             0204*  BUF_57_004: equ 0x01C8
040221             0205*  BUF_57_009: equ 0x01C9
040221             0206*  BUF_57_010: equ 0x01CA
040221             0207*  BUF_57_011: equ 0x01CB
040221             0208*  BUF_57_012: equ 0x01CC
040221             0209*  BUF_57_013: equ 0x01CD
040221             0210*  BUF_57_014: equ 0x01CE
040221             0211*  BUF_57_015: equ 0x01CF
040221             0212*  BUF_57_016: equ 0x01D0
040221             0213*  BUF_57_020: equ 0x01D1
040221             0214*  BUF_57_024: equ 0x01D2
040221             0215*  BUF_57_025: equ 0x01D3
040221             0216*  BUF_57_026: equ 0x01D4
040221             0217*  BUF_57_027: equ 0x01D5
040221             0218*  BUF_57_028: equ 0x01D6
040221             0219*  BUF_57_029: equ 0x01D7
040221             0220*  BUF_57_032: equ 0x01D8
040221             0221*  BUF_57_035: equ 0x01D9
040221             0222*  BUF_57_036: equ 0x01DA
040221             0223*  BUF_57_037: equ 0x01DB
040221             0224*  BUF_57_038: equ 0x01DC
040221             0225*  BUF_57_040: equ 0x01DD
040221             0226*  BUF_57_042: equ 0x01DE
040221             0227*  BUF_57_043: equ 0x01DF
040221             0228*  BUF_57_044: equ 0x01E0
040221             0229*  BUF_58_004: equ 0x01E1
040221             0230*  BUF_58_009: equ 0x01E2
040221             0231*  BUF_58_010: equ 0x01E3
040221             0232*  BUF_58_011: equ 0x01E4
040221             0233*  BUF_58_012: equ 0x01E5
040221             0234*  BUF_58_013: equ 0x01E6
040221             0235*  BUF_58_014: equ 0x01E7
040221             0236*  BUF_58_015: equ 0x01E8
040221             0237*  BUF_58_016: equ 0x01E9
040221             0238*  BUF_58_020: equ 0x01EA
040221             0239*  BUF_58_024: equ 0x01EB
040221             0240*  BUF_58_025: equ 0x01EC
040221             0241*  BUF_58_026: equ 0x01ED
040221             0242*  BUF_58_027: equ 0x01EE
040221             0243*  BUF_58_028: equ 0x01EF
040221             0244*  BUF_58_029: equ 0x01F0
040221             0245*  BUF_58_032: equ 0x01F1
040221             0246*  BUF_58_035: equ 0x01F2
040221             0247*  BUF_58_036: equ 0x01F3
040221             0248*  BUF_58_037: equ 0x01F4
040221             0249*  BUF_58_038: equ 0x01F5
040221             0250*  BUF_58_040: equ 0x01F6
040221             0251*  BUF_58_042: equ 0x01F7
040221             0252*  BUF_58_043: equ 0x01F8
040221             0253*  BUF_58_044: equ 0x01F9
040221             0254*  BUF_59_004: equ 0x01FA
040221             0255*  BUF_59_009: equ 0x01FB
040221             0256*  BUF_59_010: equ 0x01FC
040221             0257*  BUF_59_011: equ 0x01FD
040221             0258*  BUF_59_012: equ 0x01FE
040221             0259*  BUF_59_013: equ 0x01FF
040221             0260*  BUF_59_014: equ 0x0200
040221             0261*  BUF_59_015: equ 0x0201
040221             0262*  BUF_59_016: equ 0x0202
040221             0263*  BUF_59_020: equ 0x0203
040221             0264*  BUF_59_024: equ 0x0204
040221             0265*  BUF_59_025: equ 0x0205
040221             0266*  BUF_59_026: equ 0x0206
040221             0267*  BUF_59_027: equ 0x0207
040221             0268*  BUF_59_028: equ 0x0208
040221             0269*  BUF_59_029: equ 0x0209
040221             0270*  BUF_59_032: equ 0x020A
040221             0271*  BUF_59_035: equ 0x020B
040221             0272*  BUF_59_036: equ 0x020C
040221             0273*  BUF_59_037: equ 0x020D
040221             0274*  BUF_59_038: equ 0x020E
040221             0275*  BUF_59_040: equ 0x020F
040221             0276*  BUF_59_042: equ 0x0210
040221             0277*  BUF_59_043: equ 0x0211
040221             0278*  BUF_59_044: equ 0x0212
040221             0279*  
040221             0280*  cube_num_panels: equ 275
040221             0281*  
040221             0282*  ; cube buffer id reverse lookup:
040221             0283*  cube_buffer_id_lut:
040221 00 01 00    0284*  	dl BUF_10_004
040224 01 01 00    0285*  	dl BUF_10_009
040227 02 01 00    0286*  	dl BUF_10_010
04022A 03 01 00    0287*  	dl BUF_10_011
04022D 04 01 00    0288*  	dl BUF_10_012
040230 05 01 00    0289*  	dl BUF_10_013
040233 06 01 00    0290*  	dl BUF_10_014
040236 07 01 00    0291*  	dl BUF_10_015
040239 08 01 00    0292*  	dl BUF_10_016
04023C 09 01 00    0293*  	dl BUF_10_020
04023F 0A 01 00    0294*  	dl BUF_10_024
040242 0B 01 00    0295*  	dl BUF_10_025
040245 0C 01 00    0296*  	dl BUF_10_026
040248 0D 01 00    0297*  	dl BUF_10_027
04024B 0E 01 00    0298*  	dl BUF_10_028
04024E 0F 01 00    0299*  	dl BUF_10_029
040251 10 01 00    0300*  	dl BUF_10_032
040254 11 01 00    0301*  	dl BUF_10_035
040257 12 01 00    0302*  	dl BUF_10_036
04025A 13 01 00    0303*  	dl BUF_10_037
04025D 14 01 00    0304*  	dl BUF_10_038
040260 15 01 00    0305*  	dl BUF_10_040
040263 16 01 00    0306*  	dl BUF_10_042
040266 17 01 00    0307*  	dl BUF_10_043
040269 18 01 00    0308*  	dl BUF_10_044
04026C 19 01 00    0309*  	dl BUF_11_004
04026F 1A 01 00    0310*  	dl BUF_11_009
040272 1B 01 00    0311*  	dl BUF_11_010
040275 1C 01 00    0312*  	dl BUF_11_011
040278 1D 01 00    0313*  	dl BUF_11_012
04027B 1E 01 00    0314*  	dl BUF_11_013
04027E 1F 01 00    0315*  	dl BUF_11_014
040281 20 01 00    0316*  	dl BUF_11_015
040284 21 01 00    0317*  	dl BUF_11_016
040287 22 01 00    0318*  	dl BUF_11_020
04028A 23 01 00    0319*  	dl BUF_11_024
04028D 24 01 00    0320*  	dl BUF_11_025
040290 25 01 00    0321*  	dl BUF_11_026
040293 26 01 00    0322*  	dl BUF_11_027
040296 27 01 00    0323*  	dl BUF_11_028
040299 28 01 00    0324*  	dl BUF_11_029
04029C 29 01 00    0325*  	dl BUF_11_032
04029F 2A 01 00    0326*  	dl BUF_11_035
0402A2 2B 01 00    0327*  	dl BUF_11_036
0402A5 2C 01 00    0328*  	dl BUF_11_037
0402A8 2D 01 00    0329*  	dl BUF_11_038
0402AB 2E 01 00    0330*  	dl BUF_11_040
0402AE 2F 01 00    0331*  	dl BUF_11_042
0402B1 30 01 00    0332*  	dl BUF_11_043
0402B4 31 01 00    0333*  	dl BUF_11_044
0402B7 32 01 00    0334*  	dl BUF_12_004
0402BA 33 01 00    0335*  	dl BUF_12_009
0402BD 34 01 00    0336*  	dl BUF_12_010
0402C0 35 01 00    0337*  	dl BUF_12_011
0402C3 36 01 00    0338*  	dl BUF_12_012
0402C6 37 01 00    0339*  	dl BUF_12_013
0402C9 38 01 00    0340*  	dl BUF_12_014
0402CC 39 01 00    0341*  	dl BUF_12_015
0402CF 3A 01 00    0342*  	dl BUF_12_016
0402D2 3B 01 00    0343*  	dl BUF_12_020
0402D5 3C 01 00    0344*  	dl BUF_12_024
0402D8 3D 01 00    0345*  	dl BUF_12_025
0402DB 3E 01 00    0346*  	dl BUF_12_026
0402DE 3F 01 00    0347*  	dl BUF_12_027
0402E1 40 01 00    0348*  	dl BUF_12_028
0402E4 41 01 00    0349*  	dl BUF_12_029
0402E7 42 01 00    0350*  	dl BUF_12_032
0402EA 43 01 00    0351*  	dl BUF_12_035
0402ED 44 01 00    0352*  	dl BUF_12_036
0402F0 45 01 00    0353*  	dl BUF_12_037
0402F3 46 01 00    0354*  	dl BUF_12_038
0402F6 47 01 00    0355*  	dl BUF_12_040
0402F9 48 01 00    0356*  	dl BUF_12_042
0402FC 49 01 00    0357*  	dl BUF_12_043
0402FF 4A 01 00    0358*  	dl BUF_12_044
040302 4B 01 00    0359*  	dl BUF_13_004
040305 4C 01 00    0360*  	dl BUF_13_009
040308 4D 01 00    0361*  	dl BUF_13_010
04030B 4E 01 00    0362*  	dl BUF_13_011
04030E 4F 01 00    0363*  	dl BUF_13_012
040311 50 01 00    0364*  	dl BUF_13_013
040314 51 01 00    0365*  	dl BUF_13_014
040317 52 01 00    0366*  	dl BUF_13_015
04031A 53 01 00    0367*  	dl BUF_13_016
04031D 54 01 00    0368*  	dl BUF_13_020
040320 55 01 00    0369*  	dl BUF_13_024
040323 56 01 00    0370*  	dl BUF_13_025
040326 57 01 00    0371*  	dl BUF_13_026
040329 58 01 00    0372*  	dl BUF_13_027
04032C 59 01 00    0373*  	dl BUF_13_028
04032F 5A 01 00    0374*  	dl BUF_13_029
040332 5B 01 00    0375*  	dl BUF_13_032
040335 5C 01 00    0376*  	dl BUF_13_035
040338 5D 01 00    0377*  	dl BUF_13_036
04033B 5E 01 00    0378*  	dl BUF_13_037
04033E 5F 01 00    0379*  	dl BUF_13_038
040341 60 01 00    0380*  	dl BUF_13_040
040344 61 01 00    0381*  	dl BUF_13_042
040347 62 01 00    0382*  	dl BUF_13_043
04034A 63 01 00    0383*  	dl BUF_13_044
04034D 64 01 00    0384*  	dl BUF_14_004
040350 65 01 00    0385*  	dl BUF_14_009
040353 66 01 00    0386*  	dl BUF_14_010
040356 67 01 00    0387*  	dl BUF_14_011
040359 68 01 00    0388*  	dl BUF_14_012
04035C 69 01 00    0389*  	dl BUF_14_013
04035F 6A 01 00    0390*  	dl BUF_14_014
040362 6B 01 00    0391*  	dl BUF_14_015
040365 6C 01 00    0392*  	dl BUF_14_016
040368 6D 01 00    0393*  	dl BUF_14_020
04036B 6E 01 00    0394*  	dl BUF_14_024
04036E 6F 01 00    0395*  	dl BUF_14_025
040371 70 01 00    0396*  	dl BUF_14_026
040374 71 01 00    0397*  	dl BUF_14_027
040377 72 01 00    0398*  	dl BUF_14_028
04037A 73 01 00    0399*  	dl BUF_14_029
04037D 74 01 00    0400*  	dl BUF_14_032
040380 75 01 00    0401*  	dl BUF_14_035
040383 76 01 00    0402*  	dl BUF_14_036
040386 77 01 00    0403*  	dl BUF_14_037
040389 78 01 00    0404*  	dl BUF_14_038
04038C 79 01 00    0405*  	dl BUF_14_040
04038F 7A 01 00    0406*  	dl BUF_14_042
040392 7B 01 00    0407*  	dl BUF_14_043
040395 7C 01 00    0408*  	dl BUF_14_044
040398 7D 01 00    0409*  	dl BUF_15_004
04039B 7E 01 00    0410*  	dl BUF_15_009
04039E 7F 01 00    0411*  	dl BUF_15_010
0403A1 80 01 00    0412*  	dl BUF_15_011
0403A4 81 01 00    0413*  	dl BUF_15_012
0403A7 82 01 00    0414*  	dl BUF_15_013
0403AA 83 01 00    0415*  	dl BUF_15_014
0403AD 84 01 00    0416*  	dl BUF_15_015
0403B0 85 01 00    0417*  	dl BUF_15_016
0403B3 86 01 00    0418*  	dl BUF_15_020
0403B6 87 01 00    0419*  	dl BUF_15_024
0403B9 88 01 00    0420*  	dl BUF_15_025
0403BC 89 01 00    0421*  	dl BUF_15_026
0403BF 8A 01 00    0422*  	dl BUF_15_027
0403C2 8B 01 00    0423*  	dl BUF_15_028
0403C5 8C 01 00    0424*  	dl BUF_15_029
0403C8 8D 01 00    0425*  	dl BUF_15_032
0403CB 8E 01 00    0426*  	dl BUF_15_035
0403CE 8F 01 00    0427*  	dl BUF_15_036
0403D1 90 01 00    0428*  	dl BUF_15_037
0403D4 91 01 00    0429*  	dl BUF_15_038
0403D7 92 01 00    0430*  	dl BUF_15_040
0403DA 93 01 00    0431*  	dl BUF_15_042
0403DD 94 01 00    0432*  	dl BUF_15_043
0403E0 95 01 00    0433*  	dl BUF_15_044
0403E3 96 01 00    0434*  	dl BUF_16_004
0403E6 97 01 00    0435*  	dl BUF_16_009
0403E9 98 01 00    0436*  	dl BUF_16_010
0403EC 99 01 00    0437*  	dl BUF_16_011
0403EF 9A 01 00    0438*  	dl BUF_16_012
0403F2 9B 01 00    0439*  	dl BUF_16_013
0403F5 9C 01 00    0440*  	dl BUF_16_014
0403F8 9D 01 00    0441*  	dl BUF_16_015
0403FB 9E 01 00    0442*  	dl BUF_16_016
0403FE 9F 01 00    0443*  	dl BUF_16_020
040401 A0 01 00    0444*  	dl BUF_16_024
040404 A1 01 00    0445*  	dl BUF_16_025
040407 A2 01 00    0446*  	dl BUF_16_026
04040A A3 01 00    0447*  	dl BUF_16_027
04040D A4 01 00    0448*  	dl BUF_16_028
040410 A5 01 00    0449*  	dl BUF_16_029
040413 A6 01 00    0450*  	dl BUF_16_032
040416 A7 01 00    0451*  	dl BUF_16_035
040419 A8 01 00    0452*  	dl BUF_16_036
04041C A9 01 00    0453*  	dl BUF_16_037
04041F AA 01 00    0454*  	dl BUF_16_038
040422 AB 01 00    0455*  	dl BUF_16_040
040425 AC 01 00    0456*  	dl BUF_16_042
040428 AD 01 00    0457*  	dl BUF_16_043
04042B AE 01 00    0458*  	dl BUF_16_044
04042E AF 01 00    0459*  	dl BUF_17_004
040431 B0 01 00    0460*  	dl BUF_17_009
040434 B1 01 00    0461*  	dl BUF_17_010
040437 B2 01 00    0462*  	dl BUF_17_011
04043A B3 01 00    0463*  	dl BUF_17_012
04043D B4 01 00    0464*  	dl BUF_17_013
040440 B5 01 00    0465*  	dl BUF_17_014
040443 B6 01 00    0466*  	dl BUF_17_015
040446 B7 01 00    0467*  	dl BUF_17_016
040449 B8 01 00    0468*  	dl BUF_17_020
04044C B9 01 00    0469*  	dl BUF_17_024
04044F BA 01 00    0470*  	dl BUF_17_025
040452 BB 01 00    0471*  	dl BUF_17_026
040455 BC 01 00    0472*  	dl BUF_17_027
040458 BD 01 00    0473*  	dl BUF_17_028
04045B BE 01 00    0474*  	dl BUF_17_029
04045E BF 01 00    0475*  	dl BUF_17_032
040461 C0 01 00    0476*  	dl BUF_17_035
040464 C1 01 00    0477*  	dl BUF_17_036
040467 C2 01 00    0478*  	dl BUF_17_037
04046A C3 01 00    0479*  	dl BUF_17_038
04046D C4 01 00    0480*  	dl BUF_17_040
040470 C5 01 00    0481*  	dl BUF_17_042
040473 C6 01 00    0482*  	dl BUF_17_043
040476 C7 01 00    0483*  	dl BUF_17_044
040479 C8 01 00    0484*  	dl BUF_57_004
04047C C9 01 00    0485*  	dl BUF_57_009
04047F CA 01 00    0486*  	dl BUF_57_010
040482 CB 01 00    0487*  	dl BUF_57_011
040485 CC 01 00    0488*  	dl BUF_57_012
040488 CD 01 00    0489*  	dl BUF_57_013
04048B CE 01 00    0490*  	dl BUF_57_014
04048E CF 01 00    0491*  	dl BUF_57_015
040491 D0 01 00    0492*  	dl BUF_57_016
040494 D1 01 00    0493*  	dl BUF_57_020
040497 D2 01 00    0494*  	dl BUF_57_024
04049A D3 01 00    0495*  	dl BUF_57_025
04049D D4 01 00    0496*  	dl BUF_57_026
0404A0 D5 01 00    0497*  	dl BUF_57_027
0404A3 D6 01 00    0498*  	dl BUF_57_028
0404A6 D7 01 00    0499*  	dl BUF_57_029
0404A9 D8 01 00    0500*  	dl BUF_57_032
0404AC D9 01 00    0501*  	dl BUF_57_035
0404AF DA 01 00    0502*  	dl BUF_57_036
0404B2 DB 01 00    0503*  	dl BUF_57_037
0404B5 DC 01 00    0504*  	dl BUF_57_038
0404B8 DD 01 00    0505*  	dl BUF_57_040
0404BB DE 01 00    0506*  	dl BUF_57_042
0404BE DF 01 00    0507*  	dl BUF_57_043
0404C1 E0 01 00    0508*  	dl BUF_57_044
0404C4 E1 01 00    0509*  	dl BUF_58_004
0404C7 E2 01 00    0510*  	dl BUF_58_009
0404CA E3 01 00    0511*  	dl BUF_58_010
0404CD E4 01 00    0512*  	dl BUF_58_011
0404D0 E5 01 00    0513*  	dl BUF_58_012
0404D3 E6 01 00    0514*  	dl BUF_58_013
0404D6 E7 01 00    0515*  	dl BUF_58_014
0404D9 E8 01 00    0516*  	dl BUF_58_015
0404DC E9 01 00    0517*  	dl BUF_58_016
0404DF EA 01 00    0518*  	dl BUF_58_020
0404E2 EB 01 00    0519*  	dl BUF_58_024
0404E5 EC 01 00    0520*  	dl BUF_58_025
0404E8 ED 01 00    0521*  	dl BUF_58_026
0404EB EE 01 00    0522*  	dl BUF_58_027
0404EE EF 01 00    0523*  	dl BUF_58_028
0404F1 F0 01 00    0524*  	dl BUF_58_029
0404F4 F1 01 00    0525*  	dl BUF_58_032
0404F7 F2 01 00    0526*  	dl BUF_58_035
0404FA F3 01 00    0527*  	dl BUF_58_036
0404FD F4 01 00    0528*  	dl BUF_58_037
040500 F5 01 00    0529*  	dl BUF_58_038
040503 F6 01 00    0530*  	dl BUF_58_040
040506 F7 01 00    0531*  	dl BUF_58_042
040509 F8 01 00    0532*  	dl BUF_58_043
04050C F9 01 00    0533*  	dl BUF_58_044
04050F FA 01 00    0534*  	dl BUF_59_004
040512 FB 01 00    0535*  	dl BUF_59_009
040515 FC 01 00    0536*  	dl BUF_59_010
040518 FD 01 00    0537*  	dl BUF_59_011
04051B FE 01 00    0538*  	dl BUF_59_012
04051E FF 01 00    0539*  	dl BUF_59_013
040521 00 02 00    0540*  	dl BUF_59_014
040524 01 02 00    0541*  	dl BUF_59_015
040527 02 02 00    0542*  	dl BUF_59_016
04052A 03 02 00    0543*  	dl BUF_59_020
04052D 04 02 00    0544*  	dl BUF_59_024
040530 05 02 00    0545*  	dl BUF_59_025
040533 06 02 00    0546*  	dl BUF_59_026
040536 07 02 00    0547*  	dl BUF_59_027
040539 08 02 00    0548*  	dl BUF_59_028
04053C 09 02 00    0549*  	dl BUF_59_029
04053F 0A 02 00    0550*  	dl BUF_59_032
040542 0B 02 00    0551*  	dl BUF_59_035
040545 0C 02 00    0552*  	dl BUF_59_036
040548 0D 02 00    0553*  	dl BUF_59_037
04054B 0E 02 00    0554*  	dl BUF_59_038
04054E 0F 02 00    0555*  	dl BUF_59_040
040551 10 02 00    0556*  	dl BUF_59_042
040554 11 02 00    0557*  	dl BUF_59_043
040557 12 02 00    0558*  	dl BUF_59_044
04055A             0559*  
04055A             0560*  ; cube load routines jump table:
04055A             0561*  cube_load_panels_table:
04055A 93 08 04    0562*  	dl ld_10_004
04055D BD 08 04    0563*  	dl ld_10_009
040560 E7 08 04    0564*  	dl ld_10_010
040563 11 09 04    0565*  	dl ld_10_011
040566 3B 09 04    0566*  	dl ld_10_012
040569 65 09 04    0567*  	dl ld_10_013
04056C 8F 09 04    0568*  	dl ld_10_014
04056F B9 09 04    0569*  	dl ld_10_015
040572 E3 09 04    0570*  	dl ld_10_016
040575 0D 0A 04    0571*  	dl ld_10_020
040578 37 0A 04    0572*  	dl ld_10_024
04057B 61 0A 04    0573*  	dl ld_10_025
04057E 8B 0A 04    0574*  	dl ld_10_026
040581 B5 0A 04    0575*  	dl ld_10_027
040584 DF 0A 04    0576*  	dl ld_10_028
040587 09 0B 04    0577*  	dl ld_10_029
04058A 33 0B 04    0578*  	dl ld_10_032
04058D 5D 0B 04    0579*  	dl ld_10_035
040590 87 0B 04    0580*  	dl ld_10_036
040593 B1 0B 04    0581*  	dl ld_10_037
040596 DB 0B 04    0582*  	dl ld_10_038
040599 05 0C 04    0583*  	dl ld_10_040
04059C 2F 0C 04    0584*  	dl ld_10_042
04059F 59 0C 04    0585*  	dl ld_10_043
0405A2 83 0C 04    0586*  	dl ld_10_044
0405A5 AD 0C 04    0587*  	dl ld_11_004
0405A8 D7 0C 04    0588*  	dl ld_11_009
0405AB 01 0D 04    0589*  	dl ld_11_010
0405AE 2B 0D 04    0590*  	dl ld_11_011
0405B1 55 0D 04    0591*  	dl ld_11_012
0405B4 7F 0D 04    0592*  	dl ld_11_013
0405B7 A9 0D 04    0593*  	dl ld_11_014
0405BA D3 0D 04    0594*  	dl ld_11_015
0405BD FD 0D 04    0595*  	dl ld_11_016
0405C0 27 0E 04    0596*  	dl ld_11_020
0405C3 51 0E 04    0597*  	dl ld_11_024
0405C6 7B 0E 04    0598*  	dl ld_11_025
0405C9 A5 0E 04    0599*  	dl ld_11_026
0405CC CF 0E 04    0600*  	dl ld_11_027
0405CF F9 0E 04    0601*  	dl ld_11_028
0405D2 23 0F 04    0602*  	dl ld_11_029
0405D5 4D 0F 04    0603*  	dl ld_11_032
0405D8 77 0F 04    0604*  	dl ld_11_035
0405DB A1 0F 04    0605*  	dl ld_11_036
0405DE CB 0F 04    0606*  	dl ld_11_037
0405E1 F5 0F 04    0607*  	dl ld_11_038
0405E4 1F 10 04    0608*  	dl ld_11_040
0405E7 49 10 04    0609*  	dl ld_11_042
0405EA 73 10 04    0610*  	dl ld_11_043
0405ED 9D 10 04    0611*  	dl ld_11_044
0405F0 C7 10 04    0612*  	dl ld_12_004
0405F3 F1 10 04    0613*  	dl ld_12_009
0405F6 1B 11 04    0614*  	dl ld_12_010
0405F9 45 11 04    0615*  	dl ld_12_011
0405FC 6F 11 04    0616*  	dl ld_12_012
0405FF 99 11 04    0617*  	dl ld_12_013
040602 C3 11 04    0618*  	dl ld_12_014
040605 ED 11 04    0619*  	dl ld_12_015
040608 17 12 04    0620*  	dl ld_12_016
04060B 41 12 04    0621*  	dl ld_12_020
04060E 6B 12 04    0622*  	dl ld_12_024
040611 95 12 04    0623*  	dl ld_12_025
040614 BF 12 04    0624*  	dl ld_12_026
040617 E9 12 04    0625*  	dl ld_12_027
04061A 13 13 04    0626*  	dl ld_12_028
04061D 3D 13 04    0627*  	dl ld_12_029
040620 67 13 04    0628*  	dl ld_12_032
040623 91 13 04    0629*  	dl ld_12_035
040626 BB 13 04    0630*  	dl ld_12_036
040629 E5 13 04    0631*  	dl ld_12_037
04062C 0F 14 04    0632*  	dl ld_12_038
04062F 39 14 04    0633*  	dl ld_12_040
040632 63 14 04    0634*  	dl ld_12_042
040635 8D 14 04    0635*  	dl ld_12_043
040638 B7 14 04    0636*  	dl ld_12_044
04063B E1 14 04    0637*  	dl ld_13_004
04063E 0B 15 04    0638*  	dl ld_13_009
040641 35 15 04    0639*  	dl ld_13_010
040644 5F 15 04    0640*  	dl ld_13_011
040647 89 15 04    0641*  	dl ld_13_012
04064A B3 15 04    0642*  	dl ld_13_013
04064D DD 15 04    0643*  	dl ld_13_014
040650 07 16 04    0644*  	dl ld_13_015
040653 31 16 04    0645*  	dl ld_13_016
040656 5B 16 04    0646*  	dl ld_13_020
040659 85 16 04    0647*  	dl ld_13_024
04065C AF 16 04    0648*  	dl ld_13_025
04065F D9 16 04    0649*  	dl ld_13_026
040662 03 17 04    0650*  	dl ld_13_027
040665 2D 17 04    0651*  	dl ld_13_028
040668 57 17 04    0652*  	dl ld_13_029
04066B 81 17 04    0653*  	dl ld_13_032
04066E AB 17 04    0654*  	dl ld_13_035
040671 D5 17 04    0655*  	dl ld_13_036
040674 FF 17 04    0656*  	dl ld_13_037
040677 29 18 04    0657*  	dl ld_13_038
04067A 53 18 04    0658*  	dl ld_13_040
04067D 7D 18 04    0659*  	dl ld_13_042
040680 A7 18 04    0660*  	dl ld_13_043
040683 D1 18 04    0661*  	dl ld_13_044
040686 FB 18 04    0662*  	dl ld_14_004
040689 25 19 04    0663*  	dl ld_14_009
04068C 4F 19 04    0664*  	dl ld_14_010
04068F 79 19 04    0665*  	dl ld_14_011
040692 A3 19 04    0666*  	dl ld_14_012
040695 CD 19 04    0667*  	dl ld_14_013
040698 F7 19 04    0668*  	dl ld_14_014
04069B 21 1A 04    0669*  	dl ld_14_015
04069E 4B 1A 04    0670*  	dl ld_14_016
0406A1 75 1A 04    0671*  	dl ld_14_020
0406A4 9F 1A 04    0672*  	dl ld_14_024
0406A7 C9 1A 04    0673*  	dl ld_14_025
0406AA F3 1A 04    0674*  	dl ld_14_026
0406AD 1D 1B 04    0675*  	dl ld_14_027
0406B0 47 1B 04    0676*  	dl ld_14_028
0406B3 71 1B 04    0677*  	dl ld_14_029
0406B6 9B 1B 04    0678*  	dl ld_14_032
0406B9 C5 1B 04    0679*  	dl ld_14_035
0406BC EF 1B 04    0680*  	dl ld_14_036
0406BF 19 1C 04    0681*  	dl ld_14_037
0406C2 43 1C 04    0682*  	dl ld_14_038
0406C5 6D 1C 04    0683*  	dl ld_14_040
0406C8 97 1C 04    0684*  	dl ld_14_042
0406CB C1 1C 04    0685*  	dl ld_14_043
0406CE EB 1C 04    0686*  	dl ld_14_044
0406D1 15 1D 04    0687*  	dl ld_15_004
0406D4 3F 1D 04    0688*  	dl ld_15_009
0406D7 69 1D 04    0689*  	dl ld_15_010
0406DA 93 1D 04    0690*  	dl ld_15_011
0406DD BD 1D 04    0691*  	dl ld_15_012
0406E0 E7 1D 04    0692*  	dl ld_15_013
0406E3 11 1E 04    0693*  	dl ld_15_014
0406E6 3B 1E 04    0694*  	dl ld_15_015
0406E9 65 1E 04    0695*  	dl ld_15_016
0406EC 8F 1E 04    0696*  	dl ld_15_020
0406EF B9 1E 04    0697*  	dl ld_15_024
0406F2 E3 1E 04    0698*  	dl ld_15_025
0406F5 0D 1F 04    0699*  	dl ld_15_026
0406F8 37 1F 04    0700*  	dl ld_15_027
0406FB 61 1F 04    0701*  	dl ld_15_028
0406FE 8B 1F 04    0702*  	dl ld_15_029
040701 B5 1F 04    0703*  	dl ld_15_032
040704 DF 1F 04    0704*  	dl ld_15_035
040707 09 20 04    0705*  	dl ld_15_036
04070A 33 20 04    0706*  	dl ld_15_037
04070D 5D 20 04    0707*  	dl ld_15_038
040710 87 20 04    0708*  	dl ld_15_040
040713 B1 20 04    0709*  	dl ld_15_042
040716 DB 20 04    0710*  	dl ld_15_043
040719 05 21 04    0711*  	dl ld_15_044
04071C 2F 21 04    0712*  	dl ld_16_004
04071F 59 21 04    0713*  	dl ld_16_009
040722 83 21 04    0714*  	dl ld_16_010
040725 AD 21 04    0715*  	dl ld_16_011
040728 D7 21 04    0716*  	dl ld_16_012
04072B 01 22 04    0717*  	dl ld_16_013
04072E 2B 22 04    0718*  	dl ld_16_014
040731 55 22 04    0719*  	dl ld_16_015
040734 7F 22 04    0720*  	dl ld_16_016
040737 A9 22 04    0721*  	dl ld_16_020
04073A D3 22 04    0722*  	dl ld_16_024
04073D FD 22 04    0723*  	dl ld_16_025
040740 27 23 04    0724*  	dl ld_16_026
040743 51 23 04    0725*  	dl ld_16_027
040746 7B 23 04    0726*  	dl ld_16_028
040749 A5 23 04    0727*  	dl ld_16_029
04074C CF 23 04    0728*  	dl ld_16_032
04074F F9 23 04    0729*  	dl ld_16_035
040752 23 24 04    0730*  	dl ld_16_036
040755 4D 24 04    0731*  	dl ld_16_037
040758 77 24 04    0732*  	dl ld_16_038
04075B A1 24 04    0733*  	dl ld_16_040
04075E CB 24 04    0734*  	dl ld_16_042
040761 F5 24 04    0735*  	dl ld_16_043
040764 1F 25 04    0736*  	dl ld_16_044
040767 49 25 04    0737*  	dl ld_17_004
04076A 73 25 04    0738*  	dl ld_17_009
04076D 9D 25 04    0739*  	dl ld_17_010
040770 C7 25 04    0740*  	dl ld_17_011
040773 F1 25 04    0741*  	dl ld_17_012
040776 1B 26 04    0742*  	dl ld_17_013
040779 45 26 04    0743*  	dl ld_17_014
04077C 6F 26 04    0744*  	dl ld_17_015
04077F 99 26 04    0745*  	dl ld_17_016
040782 C3 26 04    0746*  	dl ld_17_020
040785 ED 26 04    0747*  	dl ld_17_024
040788 17 27 04    0748*  	dl ld_17_025
04078B 41 27 04    0749*  	dl ld_17_026
04078E 6B 27 04    0750*  	dl ld_17_027
040791 95 27 04    0751*  	dl ld_17_028
040794 BF 27 04    0752*  	dl ld_17_029
040797 E9 27 04    0753*  	dl ld_17_032
04079A 13 28 04    0754*  	dl ld_17_035
04079D 3D 28 04    0755*  	dl ld_17_036
0407A0 67 28 04    0756*  	dl ld_17_037
0407A3 91 28 04    0757*  	dl ld_17_038
0407A6 BB 28 04    0758*  	dl ld_17_040
0407A9 E5 28 04    0759*  	dl ld_17_042
0407AC 0F 29 04    0760*  	dl ld_17_043
0407AF 39 29 04    0761*  	dl ld_17_044
0407B2 63 29 04    0762*  	dl ld_57_004
0407B5 8D 29 04    0763*  	dl ld_57_009
0407B8 B7 29 04    0764*  	dl ld_57_010
0407BB E1 29 04    0765*  	dl ld_57_011
0407BE 0B 2A 04    0766*  	dl ld_57_012
0407C1 35 2A 04    0767*  	dl ld_57_013
0407C4 5F 2A 04    0768*  	dl ld_57_014
0407C7 89 2A 04    0769*  	dl ld_57_015
0407CA B3 2A 04    0770*  	dl ld_57_016
0407CD DD 2A 04    0771*  	dl ld_57_020
0407D0 07 2B 04    0772*  	dl ld_57_024
0407D3 31 2B 04    0773*  	dl ld_57_025
0407D6 5B 2B 04    0774*  	dl ld_57_026
0407D9 85 2B 04    0775*  	dl ld_57_027
0407DC AF 2B 04    0776*  	dl ld_57_028
0407DF D9 2B 04    0777*  	dl ld_57_029
0407E2 03 2C 04    0778*  	dl ld_57_032
0407E5 2D 2C 04    0779*  	dl ld_57_035
0407E8 57 2C 04    0780*  	dl ld_57_036
0407EB 81 2C 04    0781*  	dl ld_57_037
0407EE AB 2C 04    0782*  	dl ld_57_038
0407F1 D5 2C 04    0783*  	dl ld_57_040
0407F4 FF 2C 04    0784*  	dl ld_57_042
0407F7 29 2D 04    0785*  	dl ld_57_043
0407FA 53 2D 04    0786*  	dl ld_57_044
0407FD 7D 2D 04    0787*  	dl ld_58_004
040800 A7 2D 04    0788*  	dl ld_58_009
040803 D1 2D 04    0789*  	dl ld_58_010
040806 FB 2D 04    0790*  	dl ld_58_011
040809 25 2E 04    0791*  	dl ld_58_012
04080C 4F 2E 04    0792*  	dl ld_58_013
04080F 79 2E 04    0793*  	dl ld_58_014
040812 A3 2E 04    0794*  	dl ld_58_015
040815 CD 2E 04    0795*  	dl ld_58_016
040818 F7 2E 04    0796*  	dl ld_58_020
04081B 21 2F 04    0797*  	dl ld_58_024
04081E 4B 2F 04    0798*  	dl ld_58_025
040821 75 2F 04    0799*  	dl ld_58_026
040824 9F 2F 04    0800*  	dl ld_58_027
040827 C9 2F 04    0801*  	dl ld_58_028
04082A F3 2F 04    0802*  	dl ld_58_029
04082D 1D 30 04    0803*  	dl ld_58_032
040830 47 30 04    0804*  	dl ld_58_035
040833 71 30 04    0805*  	dl ld_58_036
040836 9B 30 04    0806*  	dl ld_58_037
040839 C5 30 04    0807*  	dl ld_58_038
04083C EF 30 04    0808*  	dl ld_58_040
04083F 19 31 04    0809*  	dl ld_58_042
040842 43 31 04    0810*  	dl ld_58_043
040845 6D 31 04    0811*  	dl ld_58_044
040848 97 31 04    0812*  	dl ld_59_004
04084B C1 31 04    0813*  	dl ld_59_009
04084E EB 31 04    0814*  	dl ld_59_010
040851 15 32 04    0815*  	dl ld_59_011
040854 3F 32 04    0816*  	dl ld_59_012
040857 69 32 04    0817*  	dl ld_59_013
04085A 93 32 04    0818*  	dl ld_59_014
04085D BD 32 04    0819*  	dl ld_59_015
040860 E7 32 04    0820*  	dl ld_59_016
040863 11 33 04    0821*  	dl ld_59_020
040866 3B 33 04    0822*  	dl ld_59_024
040869 65 33 04    0823*  	dl ld_59_025
04086C 8F 33 04    0824*  	dl ld_59_026
04086F B9 33 04    0825*  	dl ld_59_027
040872 E3 33 04    0826*  	dl ld_59_028
040875 0D 34 04    0827*  	dl ld_59_029
040878 37 34 04    0828*  	dl ld_59_032
04087B 61 34 04    0829*  	dl ld_59_035
04087E 8B 34 04    0830*  	dl ld_59_036
040881 B5 34 04    0831*  	dl ld_59_037
040884 DF 34 04    0832*  	dl ld_59_038
040887 09 35 04    0833*  	dl ld_59_040
04088A 33 35 04    0834*  	dl ld_59_042
04088D 5D 35 04    0835*  	dl ld_59_043
040890 87 35 04    0836*  	dl ld_59_044
040893             0837*  
040893             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040893             0839*  
040893             0840*  ld_10_004:
040893 21 B1 35 04 0841*  	ld hl,F10_004
040897 22 D3 B7 04 0842*  	ld (cur_filename),hl
04089B 11 21 C4 04 0843*  	ld de,filedata
04089F 01 00 00 01 0844*  	ld bc,65536
0408A3 3E 01       0845*  	ld a,mos_load
0408A5 5B CF       0846*  	RST.LIL 08h
0408A7 21 00 01 00 0847*  	ld hl,BUF_10_004
0408AB 01 24 00 00 0848*  	ld bc,36
0408AF 11 23 00 00 0849*  	ld de,35
0408B3 DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B8 CD 4E B9 04 0851*  	call vdu_load_img
0408BC C9          0852*  	ret
0408BD             0853*  
0408BD             0854*  ld_10_009:
0408BD 21 C5 35 04 0855*  	ld hl,F10_009
0408C1 22 D3 B7 04 0856*  	ld (cur_filename),hl
0408C5 11 21 C4 04 0857*  	ld de,filedata
0408C9 01 00 00 01 0858*  	ld bc,65536
0408CD 3E 01       0859*  	ld a,mos_load
0408CF 5B CF       0860*  	RST.LIL 08h
0408D1 21 01 01 00 0861*  	ld hl,BUF_10_009
0408D5 01 23 00 00 0862*  	ld bc,35
0408D9 11 2D 00 00 0863*  	ld de,45
0408DD DD 21 27 06 0864*  	ld ix,1575
       00          
0408E2 CD 4E B9 04 0865*  	call vdu_load_img
0408E6 C9          0866*  	ret
0408E7             0867*  
0408E7             0868*  ld_10_010:
0408E7 21 D9 35 04 0869*  	ld hl,F10_010
0408EB 22 D3 B7 04 0870*  	ld (cur_filename),hl
0408EF 11 21 C4 04 0871*  	ld de,filedata
0408F3 01 00 00 01 0872*  	ld bc,65536
0408F7 3E 01       0873*  	ld a,mos_load
0408F9 5B CF       0874*  	RST.LIL 08h
0408FB 21 02 01 00 0875*  	ld hl,BUF_10_010
0408FF 01 19 00 00 0876*  	ld bc,25
040903 11 2D 00 00 0877*  	ld de,45
040907 DD 21 65 04 0878*  	ld ix,1125
       00          
04090C CD 4E B9 04 0879*  	call vdu_load_img
040910 C9          0880*  	ret
040911             0881*  
040911             0882*  ld_10_011:
040911 21 ED 35 04 0883*  	ld hl,F10_011
040915 22 D3 B7 04 0884*  	ld (cur_filename),hl
040919 11 21 C4 04 0885*  	ld de,filedata
04091D 01 00 00 01 0886*  	ld bc,65536
040921 3E 01       0887*  	ld a,mos_load
040923 5B CF       0888*  	RST.LIL 08h
040925 21 03 01 00 0889*  	ld hl,BUF_10_011
040929 01 0F 00 00 0890*  	ld bc,15
04092D 11 2D 00 00 0891*  	ld de,45
040931 DD 21 A3 02 0892*  	ld ix,675
       00          
040936 CD 4E B9 04 0893*  	call vdu_load_img
04093A C9          0894*  	ret
04093B             0895*  
04093B             0896*  ld_10_012:
04093B 21 01 36 04 0897*  	ld hl,F10_012
04093F 22 D3 B7 04 0898*  	ld (cur_filename),hl
040943 11 21 C4 04 0899*  	ld de,filedata
040947 01 00 00 01 0900*  	ld bc,65536
04094B 3E 01       0901*  	ld a,mos_load
04094D 5B CF       0902*  	RST.LIL 08h
04094F 21 04 01 00 0903*  	ld hl,BUF_10_012
040953 01 05 00 00 0904*  	ld bc,5
040957 11 2D 00 00 0905*  	ld de,45
04095B DD 21 E1 00 0906*  	ld ix,225
       00          
040960 CD 4E B9 04 0907*  	call vdu_load_img
040964 C9          0908*  	ret
040965             0909*  
040965             0910*  ld_10_013:
040965 21 15 36 04 0911*  	ld hl,F10_013
040969 22 D3 B7 04 0912*  	ld (cur_filename),hl
04096D 11 21 C4 04 0913*  	ld de,filedata
040971 01 00 00 01 0914*  	ld bc,65536
040975 3E 01       0915*  	ld a,mos_load
040977 5B CF       0916*  	RST.LIL 08h
040979 21 05 01 00 0917*  	ld hl,BUF_10_013
04097D 01 05 00 00 0918*  	ld bc,5
040981 11 2B 00 00 0919*  	ld de,43
040985 DD 21 D7 00 0920*  	ld ix,215
       00          
04098A CD 4E B9 04 0921*  	call vdu_load_img
04098E C9          0922*  	ret
04098F             0923*  
04098F             0924*  ld_10_014:
04098F 21 29 36 04 0925*  	ld hl,F10_014
040993 22 D3 B7 04 0926*  	ld (cur_filename),hl
040997 11 21 C4 04 0927*  	ld de,filedata
04099B 01 00 00 01 0928*  	ld bc,65536
04099F 3E 01       0929*  	ld a,mos_load
0409A1 5B CF       0930*  	RST.LIL 08h
0409A3 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A7 01 0F 00 00 0932*  	ld bc,15
0409AB 11 2D 00 00 0933*  	ld de,45
0409AF DD 21 A3 02 0934*  	ld ix,675
       00          
0409B4 CD 4E B9 04 0935*  	call vdu_load_img
0409B8 C9          0936*  	ret
0409B9             0937*  
0409B9             0938*  ld_10_015:
0409B9 21 3D 36 04 0939*  	ld hl,F10_015
0409BD 22 D3 B7 04 0940*  	ld (cur_filename),hl
0409C1 11 21 C4 04 0941*  	ld de,filedata
0409C5 01 00 00 01 0942*  	ld bc,65536
0409C9 3E 01       0943*  	ld a,mos_load
0409CB 5B CF       0944*  	RST.LIL 08h
0409CD 21 07 01 00 0945*  	ld hl,BUF_10_015
0409D1 01 19 00 00 0946*  	ld bc,25
0409D5 11 2D 00 00 0947*  	ld de,45
0409D9 DD 21 65 04 0948*  	ld ix,1125
       00          
0409DE CD 4E B9 04 0949*  	call vdu_load_img
0409E2 C9          0950*  	ret
0409E3             0951*  
0409E3             0952*  ld_10_016:
0409E3 21 51 36 04 0953*  	ld hl,F10_016
0409E7 22 D3 B7 04 0954*  	ld (cur_filename),hl
0409EB 11 21 C4 04 0955*  	ld de,filedata
0409EF 01 00 00 01 0956*  	ld bc,65536
0409F3 3E 01       0957*  	ld a,mos_load
0409F5 5B CF       0958*  	RST.LIL 08h
0409F7 21 08 01 00 0959*  	ld hl,BUF_10_016
0409FB 01 23 00 00 0960*  	ld bc,35
0409FF 11 2D 00 00 0961*  	ld de,45
040A03 DD 21 27 06 0962*  	ld ix,1575
       00          
040A08 CD 4E B9 04 0963*  	call vdu_load_img
040A0C C9          0964*  	ret
040A0D             0965*  
040A0D             0966*  ld_10_020:
040A0D 21 65 36 04 0967*  	ld hl,F10_020
040A11 22 D3 B7 04 0968*  	ld (cur_filename),hl
040A15 11 21 C4 04 0969*  	ld de,filedata
040A19 01 00 00 01 0970*  	ld bc,65536
040A1D 3E 01       0971*  	ld a,mos_load
040A1F 5B CF       0972*  	RST.LIL 08h
040A21 21 09 01 00 0973*  	ld hl,BUF_10_020
040A25 01 2E 00 00 0974*  	ld bc,46
040A29 11 2D 00 00 0975*  	ld de,45
040A2D DD 21 16 08 0976*  	ld ix,2070
       00          
040A32 CD 4E B9 04 0977*  	call vdu_load_img
040A36 C9          0978*  	ret
040A37             0979*  
040A37             0980*  ld_10_024:
040A37 21 79 36 04 0981*  	ld hl,F10_024
040A3B 22 D3 B7 04 0982*  	ld (cur_filename),hl
040A3F 11 21 C4 04 0983*  	ld de,filedata
040A43 01 00 00 01 0984*  	ld bc,65536
040A47 3E 01       0985*  	ld a,mos_load
040A49 5B CF       0986*  	RST.LIL 08h
040A4B 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A4F 01 2E 00 00 0988*  	ld bc,46
040A53 11 40 00 00 0989*  	ld de,64
040A57 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A5C CD 4E B9 04 0991*  	call vdu_load_img
040A60 C9          0992*  	ret
040A61             0993*  
040A61             0994*  ld_10_025:
040A61 21 8D 36 04 0995*  	ld hl,F10_025
040A65 22 D3 B7 04 0996*  	ld (cur_filename),hl
040A69 11 21 C4 04 0997*  	ld de,filedata
040A6D 01 00 00 01 0998*  	ld bc,65536
040A71 3E 01       0999*  	ld a,mos_load
040A73 5B CF       1000*  	RST.LIL 08h
040A75 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A79 01 1C 00 00 1002*  	ld bc,28
040A7D 11 40 00 00 1003*  	ld de,64
040A81 DD 21 00 07 1004*  	ld ix,1792
       00          
040A86 CD 4E B9 04 1005*  	call vdu_load_img
040A8A C9          1006*  	ret
040A8B             1007*  
040A8B             1008*  ld_10_026:
040A8B 21 A1 36 04 1009*  	ld hl,F10_026
040A8F 22 D3 B7 04 1010*  	ld (cur_filename),hl
040A93 11 21 C4 04 1011*  	ld de,filedata
040A97 01 00 00 01 1012*  	ld bc,65536
040A9B 3E 01       1013*  	ld a,mos_load
040A9D 5B CF       1014*  	RST.LIL 08h
040A9F 21 0C 01 00 1015*  	ld hl,BUF_10_026
040AA3 01 09 00 00 1016*  	ld bc,9
040AA7 11 40 00 00 1017*  	ld de,64
040AAB DD 21 40 02 1018*  	ld ix,576
       00          
040AB0 CD 4E B9 04 1019*  	call vdu_load_img
040AB4 C9          1020*  	ret
040AB5             1021*  
040AB5             1022*  ld_10_027:
040AB5 21 B5 36 04 1023*  	ld hl,F10_027
040AB9 22 D3 B7 04 1024*  	ld (cur_filename),hl
040ABD 11 21 C4 04 1025*  	ld de,filedata
040AC1 01 00 00 01 1026*  	ld bc,65536
040AC5 3E 01       1027*  	ld a,mos_load
040AC7 5B CF       1028*  	RST.LIL 08h
040AC9 21 0D 01 00 1029*  	ld hl,BUF_10_027
040ACD 01 0A 00 00 1030*  	ld bc,10
040AD1 11 3E 00 00 1031*  	ld de,62
040AD5 DD 21 6C 02 1032*  	ld ix,620
       00          
040ADA CD 4E B9 04 1033*  	call vdu_load_img
040ADE C9          1034*  	ret
040ADF             1035*  
040ADF             1036*  ld_10_028:
040ADF 21 C9 36 04 1037*  	ld hl,F10_028
040AE3 22 D3 B7 04 1038*  	ld (cur_filename),hl
040AE7 11 21 C4 04 1039*  	ld de,filedata
040AEB 01 00 00 01 1040*  	ld bc,65536
040AEF 3E 01       1041*  	ld a,mos_load
040AF1 5B CF       1042*  	RST.LIL 08h
040AF3 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF7 01 1C 00 00 1044*  	ld bc,28
040AFB 11 40 00 00 1045*  	ld de,64
040AFF DD 21 00 07 1046*  	ld ix,1792
       00          
040B04 CD 4E B9 04 1047*  	call vdu_load_img
040B08 C9          1048*  	ret
040B09             1049*  
040B09             1050*  ld_10_029:
040B09 21 DD 36 04 1051*  	ld hl,F10_029
040B0D 22 D3 B7 04 1052*  	ld (cur_filename),hl
040B11 11 21 C4 04 1053*  	ld de,filedata
040B15 01 00 00 01 1054*  	ld bc,65536
040B19 3E 01       1055*  	ld a,mos_load
040B1B 5B CF       1056*  	RST.LIL 08h
040B1D 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B21 01 2F 00 00 1058*  	ld bc,47
040B25 11 40 00 00 1059*  	ld de,64
040B29 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B2E CD 4E B9 04 1061*  	call vdu_load_img
040B32 C9          1062*  	ret
040B33             1063*  
040B33             1064*  ld_10_032:
040B33 21 F1 36 04 1065*  	ld hl,F10_032
040B37 22 D3 B7 04 1066*  	ld (cur_filename),hl
040B3B 11 21 C4 04 1067*  	ld de,filedata
040B3F 01 00 00 01 1068*  	ld bc,65536
040B43 3E 01       1069*  	ld a,mos_load
040B45 5B CF       1070*  	RST.LIL 08h
040B47 21 10 01 00 1071*  	ld hl,BUF_10_032
040B4B 01 41 00 00 1072*  	ld bc,65
040B4F 11 40 00 00 1073*  	ld de,64
040B53 DD 21 40 10 1074*  	ld ix,4160
       00          
040B58 CD 4E B9 04 1075*  	call vdu_load_img
040B5C C9          1076*  	ret
040B5D             1077*  
040B5D             1078*  ld_10_035:
040B5D 21 05 37 04 1079*  	ld hl,F10_035
040B61 22 D3 B7 04 1080*  	ld (cur_filename),hl
040B65 11 21 C4 04 1081*  	ld de,filedata
040B69 01 00 00 01 1082*  	ld bc,65536
040B6D 3E 01       1083*  	ld a,mos_load
040B6F 5B CF       1084*  	RST.LIL 08h
040B71 21 11 01 00 1085*  	ld hl,BUF_10_035
040B75 01 3F 00 00 1086*  	ld bc,63
040B79 11 6B 00 00 1087*  	ld de,107
040B7D DD 21 55 1A 1088*  	ld ix,6741
       00          
040B82 CD 4E B9 04 1089*  	call vdu_load_img
040B86 C9          1090*  	ret
040B87             1091*  
040B87             1092*  ld_10_036:
040B87 21 19 37 04 1093*  	ld hl,F10_036
040B8B 22 D3 B7 04 1094*  	ld (cur_filename),hl
040B8F 11 21 C4 04 1095*  	ld de,filedata
040B93 01 00 00 01 1096*  	ld bc,65536
040B97 3E 01       1097*  	ld a,mos_load
040B99 5B CF       1098*  	RST.LIL 08h
040B9B 21 12 01 00 1099*  	ld hl,BUF_10_036
040B9F 01 16 00 00 1100*  	ld bc,22
040BA3 11 6B 00 00 1101*  	ld de,107
040BA7 DD 21 32 09 1102*  	ld ix,2354
       00          
040BAC CD 4E B9 04 1103*  	call vdu_load_img
040BB0 C9          1104*  	ret
040BB1             1105*  
040BB1             1106*  ld_10_037:
040BB1 21 2D 37 04 1107*  	ld hl,F10_037
040BB5 22 D3 B7 04 1108*  	ld (cur_filename),hl
040BB9 11 21 C4 04 1109*  	ld de,filedata
040BBD 01 00 00 01 1110*  	ld bc,65536
040BC1 3E 01       1111*  	ld a,mos_load
040BC3 5B CF       1112*  	RST.LIL 08h
040BC5 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC9 01 15 00 00 1114*  	ld bc,21
040BCD 11 69 00 00 1115*  	ld de,105
040BD1 DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD6 CD 4E B9 04 1117*  	call vdu_load_img
040BDA C9          1118*  	ret
040BDB             1119*  
040BDB             1120*  ld_10_038:
040BDB 21 41 37 04 1121*  	ld hl,F10_038
040BDF 22 D3 B7 04 1122*  	ld (cur_filename),hl
040BE3 11 21 C4 04 1123*  	ld de,filedata
040BE7 01 00 00 01 1124*  	ld bc,65536
040BEB 3E 01       1125*  	ld a,mos_load
040BED 5B CF       1126*  	RST.LIL 08h
040BEF 21 14 01 00 1127*  	ld hl,BUF_10_038
040BF3 01 3F 00 00 1128*  	ld bc,63
040BF7 11 6B 00 00 1129*  	ld de,107
040BFB DD 21 55 1A 1130*  	ld ix,6741
       00          
040C00 CD 4E B9 04 1131*  	call vdu_load_img
040C04 C9          1132*  	ret
040C05             1133*  
040C05             1134*  ld_10_040:
040C05 21 55 37 04 1135*  	ld hl,F10_040
040C09 22 D3 B7 04 1136*  	ld (cur_filename),hl
040C0D 11 21 C4 04 1137*  	ld de,filedata
040C11 01 00 00 01 1138*  	ld bc,65536
040C15 3E 01       1139*  	ld a,mos_load
040C17 5B CF       1140*  	RST.LIL 08h
040C19 21 15 01 00 1141*  	ld hl,BUF_10_040
040C1D 01 6C 00 00 1142*  	ld bc,108
040C21 11 6B 00 00 1143*  	ld de,107
040C25 DD 21 24 2D 1144*  	ld ix,11556
       00          
040C2A CD 4E B9 04 1145*  	call vdu_load_img
040C2E C9          1146*  	ret
040C2F             1147*  
040C2F             1148*  ld_10_042:
040C2F 21 69 37 04 1149*  	ld hl,F10_042
040C33 22 D3 B7 04 1150*  	ld (cur_filename),hl
040C37 11 21 C4 04 1151*  	ld de,filedata
040C3B 01 00 00 01 1152*  	ld bc,65536
040C3F 3E 01       1153*  	ld a,mos_load
040C41 5B CF       1154*  	RST.LIL 08h
040C43 21 16 01 00 1155*  	ld hl,BUF_10_042
040C47 01 6A 00 00 1156*  	ld bc,106
040C4B 11 A0 00 00 1157*  	ld de,160
040C4F DD 21 40 42 1158*  	ld ix,16960
       00          
040C54 CD 4E B9 04 1159*  	call vdu_load_img
040C58 C9          1160*  	ret
040C59             1161*  
040C59             1162*  ld_10_043:
040C59 21 7D 37 04 1163*  	ld hl,F10_043
040C5D 22 D3 B7 04 1164*  	ld (cur_filename),hl
040C61 11 21 C4 04 1165*  	ld de,filedata
040C65 01 00 00 01 1166*  	ld bc,65536
040C69 3E 01       1167*  	ld a,mos_load
040C6B 5B CF       1168*  	RST.LIL 08h
040C6D 21 17 01 00 1169*  	ld hl,BUF_10_043
040C71 01 6B 00 00 1170*  	ld bc,107
040C75 11 A0 00 00 1171*  	ld de,160
040C79 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C7E CD 4E B9 04 1173*  	call vdu_load_img
040C82 C9          1174*  	ret
040C83             1175*  
040C83             1176*  ld_10_044:
040C83 21 91 37 04 1177*  	ld hl,F10_044
040C87 22 D3 B7 04 1178*  	ld (cur_filename),hl
040C8B 11 21 C4 04 1179*  	ld de,filedata
040C8F 01 00 00 01 1180*  	ld bc,65536
040C93 3E 01       1181*  	ld a,mos_load
040C95 5B CF       1182*  	RST.LIL 08h
040C97 21 18 01 00 1183*  	ld hl,BUF_10_044
040C9B 01 40 01 00 1184*  	ld bc,320
040C9F 11 A0 00 00 1185*  	ld de,160
040CA3 DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA8 CD 4E B9 04 1187*  	call vdu_load_img
040CAC C9          1188*  	ret
040CAD             1189*  
040CAD             1190*  ld_11_004:
040CAD 21 A5 37 04 1191*  	ld hl,F11_004
040CB1 22 D3 B7 04 1192*  	ld (cur_filename),hl
040CB5 11 21 C4 04 1193*  	ld de,filedata
040CB9 01 00 00 01 1194*  	ld bc,65536
040CBD 3E 01       1195*  	ld a,mos_load
040CBF 5B CF       1196*  	RST.LIL 08h
040CC1 21 19 01 00 1197*  	ld hl,BUF_11_004
040CC5 01 24 00 00 1198*  	ld bc,36
040CC9 11 23 00 00 1199*  	ld de,35
040CCD DD 21 EC 04 1200*  	ld ix,1260
       00          
040CD2 CD 4E B9 04 1201*  	call vdu_load_img
040CD6 C9          1202*  	ret
040CD7             1203*  
040CD7             1204*  ld_11_009:
040CD7 21 B9 37 04 1205*  	ld hl,F11_009
040CDB 22 D3 B7 04 1206*  	ld (cur_filename),hl
040CDF 11 21 C4 04 1207*  	ld de,filedata
040CE3 01 00 00 01 1208*  	ld bc,65536
040CE7 3E 01       1209*  	ld a,mos_load
040CE9 5B CF       1210*  	RST.LIL 08h
040CEB 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CEF 01 23 00 00 1212*  	ld bc,35
040CF3 11 2D 00 00 1213*  	ld de,45
040CF7 DD 21 27 06 1214*  	ld ix,1575
       00          
040CFC CD 4E B9 04 1215*  	call vdu_load_img
040D00 C9          1216*  	ret
040D01             1217*  
040D01             1218*  ld_11_010:
040D01 21 CD 37 04 1219*  	ld hl,F11_010
040D05 22 D3 B7 04 1220*  	ld (cur_filename),hl
040D09 11 21 C4 04 1221*  	ld de,filedata
040D0D 01 00 00 01 1222*  	ld bc,65536
040D11 3E 01       1223*  	ld a,mos_load
040D13 5B CF       1224*  	RST.LIL 08h
040D15 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D19 01 19 00 00 1226*  	ld bc,25
040D1D 11 2D 00 00 1227*  	ld de,45
040D21 DD 21 65 04 1228*  	ld ix,1125
       00          
040D26 CD 4E B9 04 1229*  	call vdu_load_img
040D2A C9          1230*  	ret
040D2B             1231*  
040D2B             1232*  ld_11_011:
040D2B 21 E1 37 04 1233*  	ld hl,F11_011
040D2F 22 D3 B7 04 1234*  	ld (cur_filename),hl
040D33 11 21 C4 04 1235*  	ld de,filedata
040D37 01 00 00 01 1236*  	ld bc,65536
040D3B 3E 01       1237*  	ld a,mos_load
040D3D 5B CF       1238*  	RST.LIL 08h
040D3F 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D43 01 0F 00 00 1240*  	ld bc,15
040D47 11 2D 00 00 1241*  	ld de,45
040D4B DD 21 A3 02 1242*  	ld ix,675
       00          
040D50 CD 4E B9 04 1243*  	call vdu_load_img
040D54 C9          1244*  	ret
040D55             1245*  
040D55             1246*  ld_11_012:
040D55 21 F5 37 04 1247*  	ld hl,F11_012
040D59 22 D3 B7 04 1248*  	ld (cur_filename),hl
040D5D 11 21 C4 04 1249*  	ld de,filedata
040D61 01 00 00 01 1250*  	ld bc,65536
040D65 3E 01       1251*  	ld a,mos_load
040D67 5B CF       1252*  	RST.LIL 08h
040D69 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D6D 01 05 00 00 1254*  	ld bc,5
040D71 11 2D 00 00 1255*  	ld de,45
040D75 DD 21 E1 00 1256*  	ld ix,225
       00          
040D7A CD 4E B9 04 1257*  	call vdu_load_img
040D7E C9          1258*  	ret
040D7F             1259*  
040D7F             1260*  ld_11_013:
040D7F 21 09 38 04 1261*  	ld hl,F11_013
040D83 22 D3 B7 04 1262*  	ld (cur_filename),hl
040D87 11 21 C4 04 1263*  	ld de,filedata
040D8B 01 00 00 01 1264*  	ld bc,65536
040D8F 3E 01       1265*  	ld a,mos_load
040D91 5B CF       1266*  	RST.LIL 08h
040D93 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D97 01 05 00 00 1268*  	ld bc,5
040D9B 11 2B 00 00 1269*  	ld de,43
040D9F DD 21 D7 00 1270*  	ld ix,215
       00          
040DA4 CD 4E B9 04 1271*  	call vdu_load_img
040DA8 C9          1272*  	ret
040DA9             1273*  
040DA9             1274*  ld_11_014:
040DA9 21 1D 38 04 1275*  	ld hl,F11_014
040DAD 22 D3 B7 04 1276*  	ld (cur_filename),hl
040DB1 11 21 C4 04 1277*  	ld de,filedata
040DB5 01 00 00 01 1278*  	ld bc,65536
040DB9 3E 01       1279*  	ld a,mos_load
040DBB 5B CF       1280*  	RST.LIL 08h
040DBD 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DC1 01 0F 00 00 1282*  	ld bc,15
040DC5 11 2D 00 00 1283*  	ld de,45
040DC9 DD 21 A3 02 1284*  	ld ix,675
       00          
040DCE CD 4E B9 04 1285*  	call vdu_load_img
040DD2 C9          1286*  	ret
040DD3             1287*  
040DD3             1288*  ld_11_015:
040DD3 21 31 38 04 1289*  	ld hl,F11_015
040DD7 22 D3 B7 04 1290*  	ld (cur_filename),hl
040DDB 11 21 C4 04 1291*  	ld de,filedata
040DDF 01 00 00 01 1292*  	ld bc,65536
040DE3 3E 01       1293*  	ld a,mos_load
040DE5 5B CF       1294*  	RST.LIL 08h
040DE7 21 20 01 00 1295*  	ld hl,BUF_11_015
040DEB 01 19 00 00 1296*  	ld bc,25
040DEF 11 2D 00 00 1297*  	ld de,45
040DF3 DD 21 65 04 1298*  	ld ix,1125
       00          
040DF8 CD 4E B9 04 1299*  	call vdu_load_img
040DFC C9          1300*  	ret
040DFD             1301*  
040DFD             1302*  ld_11_016:
040DFD 21 45 38 04 1303*  	ld hl,F11_016
040E01 22 D3 B7 04 1304*  	ld (cur_filename),hl
040E05 11 21 C4 04 1305*  	ld de,filedata
040E09 01 00 00 01 1306*  	ld bc,65536
040E0D 3E 01       1307*  	ld a,mos_load
040E0F 5B CF       1308*  	RST.LIL 08h
040E11 21 21 01 00 1309*  	ld hl,BUF_11_016
040E15 01 23 00 00 1310*  	ld bc,35
040E19 11 2D 00 00 1311*  	ld de,45
040E1D DD 21 27 06 1312*  	ld ix,1575
       00          
040E22 CD 4E B9 04 1313*  	call vdu_load_img
040E26 C9          1314*  	ret
040E27             1315*  
040E27             1316*  ld_11_020:
040E27 21 59 38 04 1317*  	ld hl,F11_020
040E2B 22 D3 B7 04 1318*  	ld (cur_filename),hl
040E2F 11 21 C4 04 1319*  	ld de,filedata
040E33 01 00 00 01 1320*  	ld bc,65536
040E37 3E 01       1321*  	ld a,mos_load
040E39 5B CF       1322*  	RST.LIL 08h
040E3B 21 22 01 00 1323*  	ld hl,BUF_11_020
040E3F 01 2E 00 00 1324*  	ld bc,46
040E43 11 2D 00 00 1325*  	ld de,45
040E47 DD 21 16 08 1326*  	ld ix,2070
       00          
040E4C CD 4E B9 04 1327*  	call vdu_load_img
040E50 C9          1328*  	ret
040E51             1329*  
040E51             1330*  ld_11_024:
040E51 21 6D 38 04 1331*  	ld hl,F11_024
040E55 22 D3 B7 04 1332*  	ld (cur_filename),hl
040E59 11 21 C4 04 1333*  	ld de,filedata
040E5D 01 00 00 01 1334*  	ld bc,65536
040E61 3E 01       1335*  	ld a,mos_load
040E63 5B CF       1336*  	RST.LIL 08h
040E65 21 23 01 00 1337*  	ld hl,BUF_11_024
040E69 01 2E 00 00 1338*  	ld bc,46
040E6D 11 40 00 00 1339*  	ld de,64
040E71 DD 21 80 0B 1340*  	ld ix,2944
       00          
040E76 CD 4E B9 04 1341*  	call vdu_load_img
040E7A C9          1342*  	ret
040E7B             1343*  
040E7B             1344*  ld_11_025:
040E7B 21 81 38 04 1345*  	ld hl,F11_025
040E7F 22 D3 B7 04 1346*  	ld (cur_filename),hl
040E83 11 21 C4 04 1347*  	ld de,filedata
040E87 01 00 00 01 1348*  	ld bc,65536
040E8B 3E 01       1349*  	ld a,mos_load
040E8D 5B CF       1350*  	RST.LIL 08h
040E8F 21 24 01 00 1351*  	ld hl,BUF_11_025
040E93 01 1C 00 00 1352*  	ld bc,28
040E97 11 40 00 00 1353*  	ld de,64
040E9B DD 21 00 07 1354*  	ld ix,1792
       00          
040EA0 CD 4E B9 04 1355*  	call vdu_load_img
040EA4 C9          1356*  	ret
040EA5             1357*  
040EA5             1358*  ld_11_026:
040EA5 21 95 38 04 1359*  	ld hl,F11_026
040EA9 22 D3 B7 04 1360*  	ld (cur_filename),hl
040EAD 11 21 C4 04 1361*  	ld de,filedata
040EB1 01 00 00 01 1362*  	ld bc,65536
040EB5 3E 01       1363*  	ld a,mos_load
040EB7 5B CF       1364*  	RST.LIL 08h
040EB9 21 25 01 00 1365*  	ld hl,BUF_11_026
040EBD 01 09 00 00 1366*  	ld bc,9
040EC1 11 40 00 00 1367*  	ld de,64
040EC5 DD 21 40 02 1368*  	ld ix,576
       00          
040ECA CD 4E B9 04 1369*  	call vdu_load_img
040ECE C9          1370*  	ret
040ECF             1371*  
040ECF             1372*  ld_11_027:
040ECF 21 A9 38 04 1373*  	ld hl,F11_027
040ED3 22 D3 B7 04 1374*  	ld (cur_filename),hl
040ED7 11 21 C4 04 1375*  	ld de,filedata
040EDB 01 00 00 01 1376*  	ld bc,65536
040EDF 3E 01       1377*  	ld a,mos_load
040EE1 5B CF       1378*  	RST.LIL 08h
040EE3 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE7 01 0A 00 00 1380*  	ld bc,10
040EEB 11 3E 00 00 1381*  	ld de,62
040EEF DD 21 6C 02 1382*  	ld ix,620
       00          
040EF4 CD 4E B9 04 1383*  	call vdu_load_img
040EF8 C9          1384*  	ret
040EF9             1385*  
040EF9             1386*  ld_11_028:
040EF9 21 BD 38 04 1387*  	ld hl,F11_028
040EFD 22 D3 B7 04 1388*  	ld (cur_filename),hl
040F01 11 21 C4 04 1389*  	ld de,filedata
040F05 01 00 00 01 1390*  	ld bc,65536
040F09 3E 01       1391*  	ld a,mos_load
040F0B 5B CF       1392*  	RST.LIL 08h
040F0D 21 27 01 00 1393*  	ld hl,BUF_11_028
040F11 01 1C 00 00 1394*  	ld bc,28
040F15 11 40 00 00 1395*  	ld de,64
040F19 DD 21 00 07 1396*  	ld ix,1792
       00          
040F1E CD 4E B9 04 1397*  	call vdu_load_img
040F22 C9          1398*  	ret
040F23             1399*  
040F23             1400*  ld_11_029:
040F23 21 D1 38 04 1401*  	ld hl,F11_029
040F27 22 D3 B7 04 1402*  	ld (cur_filename),hl
040F2B 11 21 C4 04 1403*  	ld de,filedata
040F2F 01 00 00 01 1404*  	ld bc,65536
040F33 3E 01       1405*  	ld a,mos_load
040F35 5B CF       1406*  	RST.LIL 08h
040F37 21 28 01 00 1407*  	ld hl,BUF_11_029
040F3B 01 2F 00 00 1408*  	ld bc,47
040F3F 11 40 00 00 1409*  	ld de,64
040F43 DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F48 CD 4E B9 04 1411*  	call vdu_load_img
040F4C C9          1412*  	ret
040F4D             1413*  
040F4D             1414*  ld_11_032:
040F4D 21 E5 38 04 1415*  	ld hl,F11_032
040F51 22 D3 B7 04 1416*  	ld (cur_filename),hl
040F55 11 21 C4 04 1417*  	ld de,filedata
040F59 01 00 00 01 1418*  	ld bc,65536
040F5D 3E 01       1419*  	ld a,mos_load
040F5F 5B CF       1420*  	RST.LIL 08h
040F61 21 29 01 00 1421*  	ld hl,BUF_11_032
040F65 01 41 00 00 1422*  	ld bc,65
040F69 11 40 00 00 1423*  	ld de,64
040F6D DD 21 40 10 1424*  	ld ix,4160
       00          
040F72 CD 4E B9 04 1425*  	call vdu_load_img
040F76 C9          1426*  	ret
040F77             1427*  
040F77             1428*  ld_11_035:
040F77 21 F9 38 04 1429*  	ld hl,F11_035
040F7B 22 D3 B7 04 1430*  	ld (cur_filename),hl
040F7F 11 21 C4 04 1431*  	ld de,filedata
040F83 01 00 00 01 1432*  	ld bc,65536
040F87 3E 01       1433*  	ld a,mos_load
040F89 5B CF       1434*  	RST.LIL 08h
040F8B 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F8F 01 3F 00 00 1436*  	ld bc,63
040F93 11 6B 00 00 1437*  	ld de,107
040F97 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F9C CD 4E B9 04 1439*  	call vdu_load_img
040FA0 C9          1440*  	ret
040FA1             1441*  
040FA1             1442*  ld_11_036:
040FA1 21 0D 39 04 1443*  	ld hl,F11_036
040FA5 22 D3 B7 04 1444*  	ld (cur_filename),hl
040FA9 11 21 C4 04 1445*  	ld de,filedata
040FAD 01 00 00 01 1446*  	ld bc,65536
040FB1 3E 01       1447*  	ld a,mos_load
040FB3 5B CF       1448*  	RST.LIL 08h
040FB5 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB9 01 16 00 00 1450*  	ld bc,22
040FBD 11 6B 00 00 1451*  	ld de,107
040FC1 DD 21 32 09 1452*  	ld ix,2354
       00          
040FC6 CD 4E B9 04 1453*  	call vdu_load_img
040FCA C9          1454*  	ret
040FCB             1455*  
040FCB             1456*  ld_11_037:
040FCB 21 21 39 04 1457*  	ld hl,F11_037
040FCF 22 D3 B7 04 1458*  	ld (cur_filename),hl
040FD3 11 21 C4 04 1459*  	ld de,filedata
040FD7 01 00 00 01 1460*  	ld bc,65536
040FDB 3E 01       1461*  	ld a,mos_load
040FDD 5B CF       1462*  	RST.LIL 08h
040FDF 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FE3 01 15 00 00 1464*  	ld bc,21
040FE7 11 69 00 00 1465*  	ld de,105
040FEB DD 21 9D 08 1466*  	ld ix,2205
       00          
040FF0 CD 4E B9 04 1467*  	call vdu_load_img
040FF4 C9          1468*  	ret
040FF5             1469*  
040FF5             1470*  ld_11_038:
040FF5 21 35 39 04 1471*  	ld hl,F11_038
040FF9 22 D3 B7 04 1472*  	ld (cur_filename),hl
040FFD 11 21 C4 04 1473*  	ld de,filedata
041001 01 00 00 01 1474*  	ld bc,65536
041005 3E 01       1475*  	ld a,mos_load
041007 5B CF       1476*  	RST.LIL 08h
041009 21 2D 01 00 1477*  	ld hl,BUF_11_038
04100D 01 3F 00 00 1478*  	ld bc,63
041011 11 6B 00 00 1479*  	ld de,107
041015 DD 21 55 1A 1480*  	ld ix,6741
       00          
04101A CD 4E B9 04 1481*  	call vdu_load_img
04101E C9          1482*  	ret
04101F             1483*  
04101F             1484*  ld_11_040:
04101F 21 49 39 04 1485*  	ld hl,F11_040
041023 22 D3 B7 04 1486*  	ld (cur_filename),hl
041027 11 21 C4 04 1487*  	ld de,filedata
04102B 01 00 00 01 1488*  	ld bc,65536
04102F 3E 01       1489*  	ld a,mos_load
041031 5B CF       1490*  	RST.LIL 08h
041033 21 2E 01 00 1491*  	ld hl,BUF_11_040
041037 01 6C 00 00 1492*  	ld bc,108
04103B 11 6B 00 00 1493*  	ld de,107
04103F DD 21 24 2D 1494*  	ld ix,11556
       00          
041044 CD 4E B9 04 1495*  	call vdu_load_img
041048 C9          1496*  	ret
041049             1497*  
041049             1498*  ld_11_042:
041049 21 5D 39 04 1499*  	ld hl,F11_042
04104D 22 D3 B7 04 1500*  	ld (cur_filename),hl
041051 11 21 C4 04 1501*  	ld de,filedata
041055 01 00 00 01 1502*  	ld bc,65536
041059 3E 01       1503*  	ld a,mos_load
04105B 5B CF       1504*  	RST.LIL 08h
04105D 21 2F 01 00 1505*  	ld hl,BUF_11_042
041061 01 6A 00 00 1506*  	ld bc,106
041065 11 A0 00 00 1507*  	ld de,160
041069 DD 21 40 42 1508*  	ld ix,16960
       00          
04106E CD 4E B9 04 1509*  	call vdu_load_img
041072 C9          1510*  	ret
041073             1511*  
041073             1512*  ld_11_043:
041073 21 71 39 04 1513*  	ld hl,F11_043
041077 22 D3 B7 04 1514*  	ld (cur_filename),hl
04107B 11 21 C4 04 1515*  	ld de,filedata
04107F 01 00 00 01 1516*  	ld bc,65536
041083 3E 01       1517*  	ld a,mos_load
041085 5B CF       1518*  	RST.LIL 08h
041087 21 30 01 00 1519*  	ld hl,BUF_11_043
04108B 01 6B 00 00 1520*  	ld bc,107
04108F 11 A0 00 00 1521*  	ld de,160
041093 DD 21 E0 42 1522*  	ld ix,17120
       00          
041098 CD 4E B9 04 1523*  	call vdu_load_img
04109C C9          1524*  	ret
04109D             1525*  
04109D             1526*  ld_11_044:
04109D 21 85 39 04 1527*  	ld hl,F11_044
0410A1 22 D3 B7 04 1528*  	ld (cur_filename),hl
0410A5 11 21 C4 04 1529*  	ld de,filedata
0410A9 01 00 00 01 1530*  	ld bc,65536
0410AD 3E 01       1531*  	ld a,mos_load
0410AF 5B CF       1532*  	RST.LIL 08h
0410B1 21 31 01 00 1533*  	ld hl,BUF_11_044
0410B5 01 40 01 00 1534*  	ld bc,320
0410B9 11 A0 00 00 1535*  	ld de,160
0410BD DD 21 00 C8 1536*  	ld ix,51200
       00          
0410C2 CD 4E B9 04 1537*  	call vdu_load_img
0410C6 C9          1538*  	ret
0410C7             1539*  
0410C7             1540*  ld_12_004:
0410C7 21 99 39 04 1541*  	ld hl,F12_004
0410CB 22 D3 B7 04 1542*  	ld (cur_filename),hl
0410CF 11 21 C4 04 1543*  	ld de,filedata
0410D3 01 00 00 01 1544*  	ld bc,65536
0410D7 3E 01       1545*  	ld a,mos_load
0410D9 5B CF       1546*  	RST.LIL 08h
0410DB 21 32 01 00 1547*  	ld hl,BUF_12_004
0410DF 01 24 00 00 1548*  	ld bc,36
0410E3 11 23 00 00 1549*  	ld de,35
0410E7 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410EC CD 4E B9 04 1551*  	call vdu_load_img
0410F0 C9          1552*  	ret
0410F1             1553*  
0410F1             1554*  ld_12_009:
0410F1 21 AD 39 04 1555*  	ld hl,F12_009
0410F5 22 D3 B7 04 1556*  	ld (cur_filename),hl
0410F9 11 21 C4 04 1557*  	ld de,filedata
0410FD 01 00 00 01 1558*  	ld bc,65536
041101 3E 01       1559*  	ld a,mos_load
041103 5B CF       1560*  	RST.LIL 08h
041105 21 33 01 00 1561*  	ld hl,BUF_12_009
041109 01 23 00 00 1562*  	ld bc,35
04110D 11 2D 00 00 1563*  	ld de,45
041111 DD 21 27 06 1564*  	ld ix,1575
       00          
041116 CD 4E B9 04 1565*  	call vdu_load_img
04111A C9          1566*  	ret
04111B             1567*  
04111B             1568*  ld_12_010:
04111B 21 C1 39 04 1569*  	ld hl,F12_010
04111F 22 D3 B7 04 1570*  	ld (cur_filename),hl
041123 11 21 C4 04 1571*  	ld de,filedata
041127 01 00 00 01 1572*  	ld bc,65536
04112B 3E 01       1573*  	ld a,mos_load
04112D 5B CF       1574*  	RST.LIL 08h
04112F 21 34 01 00 1575*  	ld hl,BUF_12_010
041133 01 19 00 00 1576*  	ld bc,25
041137 11 2D 00 00 1577*  	ld de,45
04113B DD 21 65 04 1578*  	ld ix,1125
       00          
041140 CD 4E B9 04 1579*  	call vdu_load_img
041144 C9          1580*  	ret
041145             1581*  
041145             1582*  ld_12_011:
041145 21 D5 39 04 1583*  	ld hl,F12_011
041149 22 D3 B7 04 1584*  	ld (cur_filename),hl
04114D 11 21 C4 04 1585*  	ld de,filedata
041151 01 00 00 01 1586*  	ld bc,65536
041155 3E 01       1587*  	ld a,mos_load
041157 5B CF       1588*  	RST.LIL 08h
041159 21 35 01 00 1589*  	ld hl,BUF_12_011
04115D 01 0F 00 00 1590*  	ld bc,15
041161 11 2D 00 00 1591*  	ld de,45
041165 DD 21 A3 02 1592*  	ld ix,675
       00          
04116A CD 4E B9 04 1593*  	call vdu_load_img
04116E C9          1594*  	ret
04116F             1595*  
04116F             1596*  ld_12_012:
04116F 21 E9 39 04 1597*  	ld hl,F12_012
041173 22 D3 B7 04 1598*  	ld (cur_filename),hl
041177 11 21 C4 04 1599*  	ld de,filedata
04117B 01 00 00 01 1600*  	ld bc,65536
04117F 3E 01       1601*  	ld a,mos_load
041181 5B CF       1602*  	RST.LIL 08h
041183 21 36 01 00 1603*  	ld hl,BUF_12_012
041187 01 05 00 00 1604*  	ld bc,5
04118B 11 2D 00 00 1605*  	ld de,45
04118F DD 21 E1 00 1606*  	ld ix,225
       00          
041194 CD 4E B9 04 1607*  	call vdu_load_img
041198 C9          1608*  	ret
041199             1609*  
041199             1610*  ld_12_013:
041199 21 FD 39 04 1611*  	ld hl,F12_013
04119D 22 D3 B7 04 1612*  	ld (cur_filename),hl
0411A1 11 21 C4 04 1613*  	ld de,filedata
0411A5 01 00 00 01 1614*  	ld bc,65536
0411A9 3E 01       1615*  	ld a,mos_load
0411AB 5B CF       1616*  	RST.LIL 08h
0411AD 21 37 01 00 1617*  	ld hl,BUF_12_013
0411B1 01 05 00 00 1618*  	ld bc,5
0411B5 11 2B 00 00 1619*  	ld de,43
0411B9 DD 21 D7 00 1620*  	ld ix,215
       00          
0411BE CD 4E B9 04 1621*  	call vdu_load_img
0411C2 C9          1622*  	ret
0411C3             1623*  
0411C3             1624*  ld_12_014:
0411C3 21 11 3A 04 1625*  	ld hl,F12_014
0411C7 22 D3 B7 04 1626*  	ld (cur_filename),hl
0411CB 11 21 C4 04 1627*  	ld de,filedata
0411CF 01 00 00 01 1628*  	ld bc,65536
0411D3 3E 01       1629*  	ld a,mos_load
0411D5 5B CF       1630*  	RST.LIL 08h
0411D7 21 38 01 00 1631*  	ld hl,BUF_12_014
0411DB 01 0F 00 00 1632*  	ld bc,15
0411DF 11 2D 00 00 1633*  	ld de,45
0411E3 DD 21 A3 02 1634*  	ld ix,675
       00          
0411E8 CD 4E B9 04 1635*  	call vdu_load_img
0411EC C9          1636*  	ret
0411ED             1637*  
0411ED             1638*  ld_12_015:
0411ED 21 25 3A 04 1639*  	ld hl,F12_015
0411F1 22 D3 B7 04 1640*  	ld (cur_filename),hl
0411F5 11 21 C4 04 1641*  	ld de,filedata
0411F9 01 00 00 01 1642*  	ld bc,65536
0411FD 3E 01       1643*  	ld a,mos_load
0411FF 5B CF       1644*  	RST.LIL 08h
041201 21 39 01 00 1645*  	ld hl,BUF_12_015
041205 01 19 00 00 1646*  	ld bc,25
041209 11 2D 00 00 1647*  	ld de,45
04120D DD 21 65 04 1648*  	ld ix,1125
       00          
041212 CD 4E B9 04 1649*  	call vdu_load_img
041216 C9          1650*  	ret
041217             1651*  
041217             1652*  ld_12_016:
041217 21 39 3A 04 1653*  	ld hl,F12_016
04121B 22 D3 B7 04 1654*  	ld (cur_filename),hl
04121F 11 21 C4 04 1655*  	ld de,filedata
041223 01 00 00 01 1656*  	ld bc,65536
041227 3E 01       1657*  	ld a,mos_load
041229 5B CF       1658*  	RST.LIL 08h
04122B 21 3A 01 00 1659*  	ld hl,BUF_12_016
04122F 01 23 00 00 1660*  	ld bc,35
041233 11 2D 00 00 1661*  	ld de,45
041237 DD 21 27 06 1662*  	ld ix,1575
       00          
04123C CD 4E B9 04 1663*  	call vdu_load_img
041240 C9          1664*  	ret
041241             1665*  
041241             1666*  ld_12_020:
041241 21 4D 3A 04 1667*  	ld hl,F12_020
041245 22 D3 B7 04 1668*  	ld (cur_filename),hl
041249 11 21 C4 04 1669*  	ld de,filedata
04124D 01 00 00 01 1670*  	ld bc,65536
041251 3E 01       1671*  	ld a,mos_load
041253 5B CF       1672*  	RST.LIL 08h
041255 21 3B 01 00 1673*  	ld hl,BUF_12_020
041259 01 2E 00 00 1674*  	ld bc,46
04125D 11 2D 00 00 1675*  	ld de,45
041261 DD 21 16 08 1676*  	ld ix,2070
       00          
041266 CD 4E B9 04 1677*  	call vdu_load_img
04126A C9          1678*  	ret
04126B             1679*  
04126B             1680*  ld_12_024:
04126B 21 61 3A 04 1681*  	ld hl,F12_024
04126F 22 D3 B7 04 1682*  	ld (cur_filename),hl
041273 11 21 C4 04 1683*  	ld de,filedata
041277 01 00 00 01 1684*  	ld bc,65536
04127B 3E 01       1685*  	ld a,mos_load
04127D 5B CF       1686*  	RST.LIL 08h
04127F 21 3C 01 00 1687*  	ld hl,BUF_12_024
041283 01 2E 00 00 1688*  	ld bc,46
041287 11 40 00 00 1689*  	ld de,64
04128B DD 21 80 0B 1690*  	ld ix,2944
       00          
041290 CD 4E B9 04 1691*  	call vdu_load_img
041294 C9          1692*  	ret
041295             1693*  
041295             1694*  ld_12_025:
041295 21 75 3A 04 1695*  	ld hl,F12_025
041299 22 D3 B7 04 1696*  	ld (cur_filename),hl
04129D 11 21 C4 04 1697*  	ld de,filedata
0412A1 01 00 00 01 1698*  	ld bc,65536
0412A5 3E 01       1699*  	ld a,mos_load
0412A7 5B CF       1700*  	RST.LIL 08h
0412A9 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412AD 01 1C 00 00 1702*  	ld bc,28
0412B1 11 40 00 00 1703*  	ld de,64
0412B5 DD 21 00 07 1704*  	ld ix,1792
       00          
0412BA CD 4E B9 04 1705*  	call vdu_load_img
0412BE C9          1706*  	ret
0412BF             1707*  
0412BF             1708*  ld_12_026:
0412BF 21 89 3A 04 1709*  	ld hl,F12_026
0412C3 22 D3 B7 04 1710*  	ld (cur_filename),hl
0412C7 11 21 C4 04 1711*  	ld de,filedata
0412CB 01 00 00 01 1712*  	ld bc,65536
0412CF 3E 01       1713*  	ld a,mos_load
0412D1 5B CF       1714*  	RST.LIL 08h
0412D3 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D7 01 09 00 00 1716*  	ld bc,9
0412DB 11 40 00 00 1717*  	ld de,64
0412DF DD 21 40 02 1718*  	ld ix,576
       00          
0412E4 CD 4E B9 04 1719*  	call vdu_load_img
0412E8 C9          1720*  	ret
0412E9             1721*  
0412E9             1722*  ld_12_027:
0412E9 21 9D 3A 04 1723*  	ld hl,F12_027
0412ED 22 D3 B7 04 1724*  	ld (cur_filename),hl
0412F1 11 21 C4 04 1725*  	ld de,filedata
0412F5 01 00 00 01 1726*  	ld bc,65536
0412F9 3E 01       1727*  	ld a,mos_load
0412FB 5B CF       1728*  	RST.LIL 08h
0412FD 21 3F 01 00 1729*  	ld hl,BUF_12_027
041301 01 0A 00 00 1730*  	ld bc,10
041305 11 3E 00 00 1731*  	ld de,62
041309 DD 21 6C 02 1732*  	ld ix,620
       00          
04130E CD 4E B9 04 1733*  	call vdu_load_img
041312 C9          1734*  	ret
041313             1735*  
041313             1736*  ld_12_028:
041313 21 B1 3A 04 1737*  	ld hl,F12_028
041317 22 D3 B7 04 1738*  	ld (cur_filename),hl
04131B 11 21 C4 04 1739*  	ld de,filedata
04131F 01 00 00 01 1740*  	ld bc,65536
041323 3E 01       1741*  	ld a,mos_load
041325 5B CF       1742*  	RST.LIL 08h
041327 21 40 01 00 1743*  	ld hl,BUF_12_028
04132B 01 1C 00 00 1744*  	ld bc,28
04132F 11 40 00 00 1745*  	ld de,64
041333 DD 21 00 07 1746*  	ld ix,1792
       00          
041338 CD 4E B9 04 1747*  	call vdu_load_img
04133C C9          1748*  	ret
04133D             1749*  
04133D             1750*  ld_12_029:
04133D 21 C5 3A 04 1751*  	ld hl,F12_029
041341 22 D3 B7 04 1752*  	ld (cur_filename),hl
041345 11 21 C4 04 1753*  	ld de,filedata
041349 01 00 00 01 1754*  	ld bc,65536
04134D 3E 01       1755*  	ld a,mos_load
04134F 5B CF       1756*  	RST.LIL 08h
041351 21 41 01 00 1757*  	ld hl,BUF_12_029
041355 01 2F 00 00 1758*  	ld bc,47
041359 11 40 00 00 1759*  	ld de,64
04135D DD 21 C0 0B 1760*  	ld ix,3008
       00          
041362 CD 4E B9 04 1761*  	call vdu_load_img
041366 C9          1762*  	ret
041367             1763*  
041367             1764*  ld_12_032:
041367 21 D9 3A 04 1765*  	ld hl,F12_032
04136B 22 D3 B7 04 1766*  	ld (cur_filename),hl
04136F 11 21 C4 04 1767*  	ld de,filedata
041373 01 00 00 01 1768*  	ld bc,65536
041377 3E 01       1769*  	ld a,mos_load
041379 5B CF       1770*  	RST.LIL 08h
04137B 21 42 01 00 1771*  	ld hl,BUF_12_032
04137F 01 41 00 00 1772*  	ld bc,65
041383 11 40 00 00 1773*  	ld de,64
041387 DD 21 40 10 1774*  	ld ix,4160
       00          
04138C CD 4E B9 04 1775*  	call vdu_load_img
041390 C9          1776*  	ret
041391             1777*  
041391             1778*  ld_12_035:
041391 21 ED 3A 04 1779*  	ld hl,F12_035
041395 22 D3 B7 04 1780*  	ld (cur_filename),hl
041399 11 21 C4 04 1781*  	ld de,filedata
04139D 01 00 00 01 1782*  	ld bc,65536
0413A1 3E 01       1783*  	ld a,mos_load
0413A3 5B CF       1784*  	RST.LIL 08h
0413A5 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A9 01 3F 00 00 1786*  	ld bc,63
0413AD 11 6B 00 00 1787*  	ld de,107
0413B1 DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B6 CD 4E B9 04 1789*  	call vdu_load_img
0413BA C9          1790*  	ret
0413BB             1791*  
0413BB             1792*  ld_12_036:
0413BB 21 01 3B 04 1793*  	ld hl,F12_036
0413BF 22 D3 B7 04 1794*  	ld (cur_filename),hl
0413C3 11 21 C4 04 1795*  	ld de,filedata
0413C7 01 00 00 01 1796*  	ld bc,65536
0413CB 3E 01       1797*  	ld a,mos_load
0413CD 5B CF       1798*  	RST.LIL 08h
0413CF 21 44 01 00 1799*  	ld hl,BUF_12_036
0413D3 01 16 00 00 1800*  	ld bc,22
0413D7 11 6B 00 00 1801*  	ld de,107
0413DB DD 21 32 09 1802*  	ld ix,2354
       00          
0413E0 CD 4E B9 04 1803*  	call vdu_load_img
0413E4 C9          1804*  	ret
0413E5             1805*  
0413E5             1806*  ld_12_037:
0413E5 21 15 3B 04 1807*  	ld hl,F12_037
0413E9 22 D3 B7 04 1808*  	ld (cur_filename),hl
0413ED 11 21 C4 04 1809*  	ld de,filedata
0413F1 01 00 00 01 1810*  	ld bc,65536
0413F5 3E 01       1811*  	ld a,mos_load
0413F7 5B CF       1812*  	RST.LIL 08h
0413F9 21 45 01 00 1813*  	ld hl,BUF_12_037
0413FD 01 15 00 00 1814*  	ld bc,21
041401 11 69 00 00 1815*  	ld de,105
041405 DD 21 9D 08 1816*  	ld ix,2205
       00          
04140A CD 4E B9 04 1817*  	call vdu_load_img
04140E C9          1818*  	ret
04140F             1819*  
04140F             1820*  ld_12_038:
04140F 21 29 3B 04 1821*  	ld hl,F12_038
041413 22 D3 B7 04 1822*  	ld (cur_filename),hl
041417 11 21 C4 04 1823*  	ld de,filedata
04141B 01 00 00 01 1824*  	ld bc,65536
04141F 3E 01       1825*  	ld a,mos_load
041421 5B CF       1826*  	RST.LIL 08h
041423 21 46 01 00 1827*  	ld hl,BUF_12_038
041427 01 3F 00 00 1828*  	ld bc,63
04142B 11 6B 00 00 1829*  	ld de,107
04142F DD 21 55 1A 1830*  	ld ix,6741
       00          
041434 CD 4E B9 04 1831*  	call vdu_load_img
041438 C9          1832*  	ret
041439             1833*  
041439             1834*  ld_12_040:
041439 21 3D 3B 04 1835*  	ld hl,F12_040
04143D 22 D3 B7 04 1836*  	ld (cur_filename),hl
041441 11 21 C4 04 1837*  	ld de,filedata
041445 01 00 00 01 1838*  	ld bc,65536
041449 3E 01       1839*  	ld a,mos_load
04144B 5B CF       1840*  	RST.LIL 08h
04144D 21 47 01 00 1841*  	ld hl,BUF_12_040
041451 01 6C 00 00 1842*  	ld bc,108
041455 11 6B 00 00 1843*  	ld de,107
041459 DD 21 24 2D 1844*  	ld ix,11556
       00          
04145E CD 4E B9 04 1845*  	call vdu_load_img
041462 C9          1846*  	ret
041463             1847*  
041463             1848*  ld_12_042:
041463 21 51 3B 04 1849*  	ld hl,F12_042
041467 22 D3 B7 04 1850*  	ld (cur_filename),hl
04146B 11 21 C4 04 1851*  	ld de,filedata
04146F 01 00 00 01 1852*  	ld bc,65536
041473 3E 01       1853*  	ld a,mos_load
041475 5B CF       1854*  	RST.LIL 08h
041477 21 48 01 00 1855*  	ld hl,BUF_12_042
04147B 01 6A 00 00 1856*  	ld bc,106
04147F 11 A0 00 00 1857*  	ld de,160
041483 DD 21 40 42 1858*  	ld ix,16960
       00          
041488 CD 4E B9 04 1859*  	call vdu_load_img
04148C C9          1860*  	ret
04148D             1861*  
04148D             1862*  ld_12_043:
04148D 21 65 3B 04 1863*  	ld hl,F12_043
041491 22 D3 B7 04 1864*  	ld (cur_filename),hl
041495 11 21 C4 04 1865*  	ld de,filedata
041499 01 00 00 01 1866*  	ld bc,65536
04149D 3E 01       1867*  	ld a,mos_load
04149F 5B CF       1868*  	RST.LIL 08h
0414A1 21 49 01 00 1869*  	ld hl,BUF_12_043
0414A5 01 6B 00 00 1870*  	ld bc,107
0414A9 11 A0 00 00 1871*  	ld de,160
0414AD DD 21 E0 42 1872*  	ld ix,17120
       00          
0414B2 CD 4E B9 04 1873*  	call vdu_load_img
0414B6 C9          1874*  	ret
0414B7             1875*  
0414B7             1876*  ld_12_044:
0414B7 21 79 3B 04 1877*  	ld hl,F12_044
0414BB 22 D3 B7 04 1878*  	ld (cur_filename),hl
0414BF 11 21 C4 04 1879*  	ld de,filedata
0414C3 01 00 00 01 1880*  	ld bc,65536
0414C7 3E 01       1881*  	ld a,mos_load
0414C9 5B CF       1882*  	RST.LIL 08h
0414CB 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414CF 01 40 01 00 1884*  	ld bc,320
0414D3 11 A0 00 00 1885*  	ld de,160
0414D7 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414DC CD 4E B9 04 1887*  	call vdu_load_img
0414E0 C9          1888*  	ret
0414E1             1889*  
0414E1             1890*  ld_13_004:
0414E1 21 8D 3B 04 1891*  	ld hl,F13_004
0414E5 22 D3 B7 04 1892*  	ld (cur_filename),hl
0414E9 11 21 C4 04 1893*  	ld de,filedata
0414ED 01 00 00 01 1894*  	ld bc,65536
0414F1 3E 01       1895*  	ld a,mos_load
0414F3 5B CF       1896*  	RST.LIL 08h
0414F5 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F9 01 24 00 00 1898*  	ld bc,36
0414FD 11 23 00 00 1899*  	ld de,35
041501 DD 21 EC 04 1900*  	ld ix,1260
       00          
041506 CD 4E B9 04 1901*  	call vdu_load_img
04150A C9          1902*  	ret
04150B             1903*  
04150B             1904*  ld_13_009:
04150B 21 A1 3B 04 1905*  	ld hl,F13_009
04150F 22 D3 B7 04 1906*  	ld (cur_filename),hl
041513 11 21 C4 04 1907*  	ld de,filedata
041517 01 00 00 01 1908*  	ld bc,65536
04151B 3E 01       1909*  	ld a,mos_load
04151D 5B CF       1910*  	RST.LIL 08h
04151F 21 4C 01 00 1911*  	ld hl,BUF_13_009
041523 01 23 00 00 1912*  	ld bc,35
041527 11 2D 00 00 1913*  	ld de,45
04152B DD 21 27 06 1914*  	ld ix,1575
       00          
041530 CD 4E B9 04 1915*  	call vdu_load_img
041534 C9          1916*  	ret
041535             1917*  
041535             1918*  ld_13_010:
041535 21 B5 3B 04 1919*  	ld hl,F13_010
041539 22 D3 B7 04 1920*  	ld (cur_filename),hl
04153D 11 21 C4 04 1921*  	ld de,filedata
041541 01 00 00 01 1922*  	ld bc,65536
041545 3E 01       1923*  	ld a,mos_load
041547 5B CF       1924*  	RST.LIL 08h
041549 21 4D 01 00 1925*  	ld hl,BUF_13_010
04154D 01 19 00 00 1926*  	ld bc,25
041551 11 2D 00 00 1927*  	ld de,45
041555 DD 21 65 04 1928*  	ld ix,1125
       00          
04155A CD 4E B9 04 1929*  	call vdu_load_img
04155E C9          1930*  	ret
04155F             1931*  
04155F             1932*  ld_13_011:
04155F 21 C9 3B 04 1933*  	ld hl,F13_011
041563 22 D3 B7 04 1934*  	ld (cur_filename),hl
041567 11 21 C4 04 1935*  	ld de,filedata
04156B 01 00 00 01 1936*  	ld bc,65536
04156F 3E 01       1937*  	ld a,mos_load
041571 5B CF       1938*  	RST.LIL 08h
041573 21 4E 01 00 1939*  	ld hl,BUF_13_011
041577 01 0F 00 00 1940*  	ld bc,15
04157B 11 2D 00 00 1941*  	ld de,45
04157F DD 21 A3 02 1942*  	ld ix,675
       00          
041584 CD 4E B9 04 1943*  	call vdu_load_img
041588 C9          1944*  	ret
041589             1945*  
041589             1946*  ld_13_012:
041589 21 DD 3B 04 1947*  	ld hl,F13_012
04158D 22 D3 B7 04 1948*  	ld (cur_filename),hl
041591 11 21 C4 04 1949*  	ld de,filedata
041595 01 00 00 01 1950*  	ld bc,65536
041599 3E 01       1951*  	ld a,mos_load
04159B 5B CF       1952*  	RST.LIL 08h
04159D 21 4F 01 00 1953*  	ld hl,BUF_13_012
0415A1 01 05 00 00 1954*  	ld bc,5
0415A5 11 2D 00 00 1955*  	ld de,45
0415A9 DD 21 E1 00 1956*  	ld ix,225
       00          
0415AE CD 4E B9 04 1957*  	call vdu_load_img
0415B2 C9          1958*  	ret
0415B3             1959*  
0415B3             1960*  ld_13_013:
0415B3 21 F1 3B 04 1961*  	ld hl,F13_013
0415B7 22 D3 B7 04 1962*  	ld (cur_filename),hl
0415BB 11 21 C4 04 1963*  	ld de,filedata
0415BF 01 00 00 01 1964*  	ld bc,65536
0415C3 3E 01       1965*  	ld a,mos_load
0415C5 5B CF       1966*  	RST.LIL 08h
0415C7 21 50 01 00 1967*  	ld hl,BUF_13_013
0415CB 01 05 00 00 1968*  	ld bc,5
0415CF 11 2B 00 00 1969*  	ld de,43
0415D3 DD 21 D7 00 1970*  	ld ix,215
       00          
0415D8 CD 4E B9 04 1971*  	call vdu_load_img
0415DC C9          1972*  	ret
0415DD             1973*  
0415DD             1974*  ld_13_014:
0415DD 21 05 3C 04 1975*  	ld hl,F13_014
0415E1 22 D3 B7 04 1976*  	ld (cur_filename),hl
0415E5 11 21 C4 04 1977*  	ld de,filedata
0415E9 01 00 00 01 1978*  	ld bc,65536
0415ED 3E 01       1979*  	ld a,mos_load
0415EF 5B CF       1980*  	RST.LIL 08h
0415F1 21 51 01 00 1981*  	ld hl,BUF_13_014
0415F5 01 0F 00 00 1982*  	ld bc,15
0415F9 11 2D 00 00 1983*  	ld de,45
0415FD DD 21 A3 02 1984*  	ld ix,675
       00          
041602 CD 4E B9 04 1985*  	call vdu_load_img
041606 C9          1986*  	ret
041607             1987*  
041607             1988*  ld_13_015:
041607 21 19 3C 04 1989*  	ld hl,F13_015
04160B 22 D3 B7 04 1990*  	ld (cur_filename),hl
04160F 11 21 C4 04 1991*  	ld de,filedata
041613 01 00 00 01 1992*  	ld bc,65536
041617 3E 01       1993*  	ld a,mos_load
041619 5B CF       1994*  	RST.LIL 08h
04161B 21 52 01 00 1995*  	ld hl,BUF_13_015
04161F 01 19 00 00 1996*  	ld bc,25
041623 11 2D 00 00 1997*  	ld de,45
041627 DD 21 65 04 1998*  	ld ix,1125
       00          
04162C CD 4E B9 04 1999*  	call vdu_load_img
041630 C9          2000*  	ret
041631             2001*  
041631             2002*  ld_13_016:
041631 21 2D 3C 04 2003*  	ld hl,F13_016
041635 22 D3 B7 04 2004*  	ld (cur_filename),hl
041639 11 21 C4 04 2005*  	ld de,filedata
04163D 01 00 00 01 2006*  	ld bc,65536
041641 3E 01       2007*  	ld a,mos_load
041643 5B CF       2008*  	RST.LIL 08h
041645 21 53 01 00 2009*  	ld hl,BUF_13_016
041649 01 23 00 00 2010*  	ld bc,35
04164D 11 2D 00 00 2011*  	ld de,45
041651 DD 21 27 06 2012*  	ld ix,1575
       00          
041656 CD 4E B9 04 2013*  	call vdu_load_img
04165A C9          2014*  	ret
04165B             2015*  
04165B             2016*  ld_13_020:
04165B 21 41 3C 04 2017*  	ld hl,F13_020
04165F 22 D3 B7 04 2018*  	ld (cur_filename),hl
041663 11 21 C4 04 2019*  	ld de,filedata
041667 01 00 00 01 2020*  	ld bc,65536
04166B 3E 01       2021*  	ld a,mos_load
04166D 5B CF       2022*  	RST.LIL 08h
04166F 21 54 01 00 2023*  	ld hl,BUF_13_020
041673 01 2E 00 00 2024*  	ld bc,46
041677 11 2D 00 00 2025*  	ld de,45
04167B DD 21 16 08 2026*  	ld ix,2070
       00          
041680 CD 4E B9 04 2027*  	call vdu_load_img
041684 C9          2028*  	ret
041685             2029*  
041685             2030*  ld_13_024:
041685 21 55 3C 04 2031*  	ld hl,F13_024
041689 22 D3 B7 04 2032*  	ld (cur_filename),hl
04168D 11 21 C4 04 2033*  	ld de,filedata
041691 01 00 00 01 2034*  	ld bc,65536
041695 3E 01       2035*  	ld a,mos_load
041697 5B CF       2036*  	RST.LIL 08h
041699 21 55 01 00 2037*  	ld hl,BUF_13_024
04169D 01 2E 00 00 2038*  	ld bc,46
0416A1 11 40 00 00 2039*  	ld de,64
0416A5 DD 21 80 0B 2040*  	ld ix,2944
       00          
0416AA CD 4E B9 04 2041*  	call vdu_load_img
0416AE C9          2042*  	ret
0416AF             2043*  
0416AF             2044*  ld_13_025:
0416AF 21 69 3C 04 2045*  	ld hl,F13_025
0416B3 22 D3 B7 04 2046*  	ld (cur_filename),hl
0416B7 11 21 C4 04 2047*  	ld de,filedata
0416BB 01 00 00 01 2048*  	ld bc,65536
0416BF 3E 01       2049*  	ld a,mos_load
0416C1 5B CF       2050*  	RST.LIL 08h
0416C3 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C7 01 1C 00 00 2052*  	ld bc,28
0416CB 11 40 00 00 2053*  	ld de,64
0416CF DD 21 00 07 2054*  	ld ix,1792
       00          
0416D4 CD 4E B9 04 2055*  	call vdu_load_img
0416D8 C9          2056*  	ret
0416D9             2057*  
0416D9             2058*  ld_13_026:
0416D9 21 7D 3C 04 2059*  	ld hl,F13_026
0416DD 22 D3 B7 04 2060*  	ld (cur_filename),hl
0416E1 11 21 C4 04 2061*  	ld de,filedata
0416E5 01 00 00 01 2062*  	ld bc,65536
0416E9 3E 01       2063*  	ld a,mos_load
0416EB 5B CF       2064*  	RST.LIL 08h
0416ED 21 57 01 00 2065*  	ld hl,BUF_13_026
0416F1 01 09 00 00 2066*  	ld bc,9
0416F5 11 40 00 00 2067*  	ld de,64
0416F9 DD 21 40 02 2068*  	ld ix,576
       00          
0416FE CD 4E B9 04 2069*  	call vdu_load_img
041702 C9          2070*  	ret
041703             2071*  
041703             2072*  ld_13_027:
041703 21 91 3C 04 2073*  	ld hl,F13_027
041707 22 D3 B7 04 2074*  	ld (cur_filename),hl
04170B 11 21 C4 04 2075*  	ld de,filedata
04170F 01 00 00 01 2076*  	ld bc,65536
041713 3E 01       2077*  	ld a,mos_load
041715 5B CF       2078*  	RST.LIL 08h
041717 21 58 01 00 2079*  	ld hl,BUF_13_027
04171B 01 0A 00 00 2080*  	ld bc,10
04171F 11 3E 00 00 2081*  	ld de,62
041723 DD 21 6C 02 2082*  	ld ix,620
       00          
041728 CD 4E B9 04 2083*  	call vdu_load_img
04172C C9          2084*  	ret
04172D             2085*  
04172D             2086*  ld_13_028:
04172D 21 A5 3C 04 2087*  	ld hl,F13_028
041731 22 D3 B7 04 2088*  	ld (cur_filename),hl
041735 11 21 C4 04 2089*  	ld de,filedata
041739 01 00 00 01 2090*  	ld bc,65536
04173D 3E 01       2091*  	ld a,mos_load
04173F 5B CF       2092*  	RST.LIL 08h
041741 21 59 01 00 2093*  	ld hl,BUF_13_028
041745 01 1C 00 00 2094*  	ld bc,28
041749 11 40 00 00 2095*  	ld de,64
04174D DD 21 00 07 2096*  	ld ix,1792
       00          
041752 CD 4E B9 04 2097*  	call vdu_load_img
041756 C9          2098*  	ret
041757             2099*  
041757             2100*  ld_13_029:
041757 21 B9 3C 04 2101*  	ld hl,F13_029
04175B 22 D3 B7 04 2102*  	ld (cur_filename),hl
04175F 11 21 C4 04 2103*  	ld de,filedata
041763 01 00 00 01 2104*  	ld bc,65536
041767 3E 01       2105*  	ld a,mos_load
041769 5B CF       2106*  	RST.LIL 08h
04176B 21 5A 01 00 2107*  	ld hl,BUF_13_029
04176F 01 2F 00 00 2108*  	ld bc,47
041773 11 40 00 00 2109*  	ld de,64
041777 DD 21 C0 0B 2110*  	ld ix,3008
       00          
04177C CD 4E B9 04 2111*  	call vdu_load_img
041780 C9          2112*  	ret
041781             2113*  
041781             2114*  ld_13_032:
041781 21 CD 3C 04 2115*  	ld hl,F13_032
041785 22 D3 B7 04 2116*  	ld (cur_filename),hl
041789 11 21 C4 04 2117*  	ld de,filedata
04178D 01 00 00 01 2118*  	ld bc,65536
041791 3E 01       2119*  	ld a,mos_load
041793 5B CF       2120*  	RST.LIL 08h
041795 21 5B 01 00 2121*  	ld hl,BUF_13_032
041799 01 41 00 00 2122*  	ld bc,65
04179D 11 40 00 00 2123*  	ld de,64
0417A1 DD 21 40 10 2124*  	ld ix,4160
       00          
0417A6 CD 4E B9 04 2125*  	call vdu_load_img
0417AA C9          2126*  	ret
0417AB             2127*  
0417AB             2128*  ld_13_035:
0417AB 21 E1 3C 04 2129*  	ld hl,F13_035
0417AF 22 D3 B7 04 2130*  	ld (cur_filename),hl
0417B3 11 21 C4 04 2131*  	ld de,filedata
0417B7 01 00 00 01 2132*  	ld bc,65536
0417BB 3E 01       2133*  	ld a,mos_load
0417BD 5B CF       2134*  	RST.LIL 08h
0417BF 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417C3 01 3F 00 00 2136*  	ld bc,63
0417C7 11 6B 00 00 2137*  	ld de,107
0417CB DD 21 55 1A 2138*  	ld ix,6741
       00          
0417D0 CD 4E B9 04 2139*  	call vdu_load_img
0417D4 C9          2140*  	ret
0417D5             2141*  
0417D5             2142*  ld_13_036:
0417D5 21 F5 3C 04 2143*  	ld hl,F13_036
0417D9 22 D3 B7 04 2144*  	ld (cur_filename),hl
0417DD 11 21 C4 04 2145*  	ld de,filedata
0417E1 01 00 00 01 2146*  	ld bc,65536
0417E5 3E 01       2147*  	ld a,mos_load
0417E7 5B CF       2148*  	RST.LIL 08h
0417E9 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417ED 01 16 00 00 2150*  	ld bc,22
0417F1 11 6B 00 00 2151*  	ld de,107
0417F5 DD 21 32 09 2152*  	ld ix,2354
       00          
0417FA CD 4E B9 04 2153*  	call vdu_load_img
0417FE C9          2154*  	ret
0417FF             2155*  
0417FF             2156*  ld_13_037:
0417FF 21 09 3D 04 2157*  	ld hl,F13_037
041803 22 D3 B7 04 2158*  	ld (cur_filename),hl
041807 11 21 C4 04 2159*  	ld de,filedata
04180B 01 00 00 01 2160*  	ld bc,65536
04180F 3E 01       2161*  	ld a,mos_load
041811 5B CF       2162*  	RST.LIL 08h
041813 21 5E 01 00 2163*  	ld hl,BUF_13_037
041817 01 15 00 00 2164*  	ld bc,21
04181B 11 69 00 00 2165*  	ld de,105
04181F DD 21 9D 08 2166*  	ld ix,2205
       00          
041824 CD 4E B9 04 2167*  	call vdu_load_img
041828 C9          2168*  	ret
041829             2169*  
041829             2170*  ld_13_038:
041829 21 1D 3D 04 2171*  	ld hl,F13_038
04182D 22 D3 B7 04 2172*  	ld (cur_filename),hl
041831 11 21 C4 04 2173*  	ld de,filedata
041835 01 00 00 01 2174*  	ld bc,65536
041839 3E 01       2175*  	ld a,mos_load
04183B 5B CF       2176*  	RST.LIL 08h
04183D 21 5F 01 00 2177*  	ld hl,BUF_13_038
041841 01 3F 00 00 2178*  	ld bc,63
041845 11 6B 00 00 2179*  	ld de,107
041849 DD 21 55 1A 2180*  	ld ix,6741
       00          
04184E CD 4E B9 04 2181*  	call vdu_load_img
041852 C9          2182*  	ret
041853             2183*  
041853             2184*  ld_13_040:
041853 21 31 3D 04 2185*  	ld hl,F13_040
041857 22 D3 B7 04 2186*  	ld (cur_filename),hl
04185B 11 21 C4 04 2187*  	ld de,filedata
04185F 01 00 00 01 2188*  	ld bc,65536
041863 3E 01       2189*  	ld a,mos_load
041865 5B CF       2190*  	RST.LIL 08h
041867 21 60 01 00 2191*  	ld hl,BUF_13_040
04186B 01 6C 00 00 2192*  	ld bc,108
04186F 11 6B 00 00 2193*  	ld de,107
041873 DD 21 24 2D 2194*  	ld ix,11556
       00          
041878 CD 4E B9 04 2195*  	call vdu_load_img
04187C C9          2196*  	ret
04187D             2197*  
04187D             2198*  ld_13_042:
04187D 21 45 3D 04 2199*  	ld hl,F13_042
041881 22 D3 B7 04 2200*  	ld (cur_filename),hl
041885 11 21 C4 04 2201*  	ld de,filedata
041889 01 00 00 01 2202*  	ld bc,65536
04188D 3E 01       2203*  	ld a,mos_load
04188F 5B CF       2204*  	RST.LIL 08h
041891 21 61 01 00 2205*  	ld hl,BUF_13_042
041895 01 6A 00 00 2206*  	ld bc,106
041899 11 A0 00 00 2207*  	ld de,160
04189D DD 21 40 42 2208*  	ld ix,16960
       00          
0418A2 CD 4E B9 04 2209*  	call vdu_load_img
0418A6 C9          2210*  	ret
0418A7             2211*  
0418A7             2212*  ld_13_043:
0418A7 21 59 3D 04 2213*  	ld hl,F13_043
0418AB 22 D3 B7 04 2214*  	ld (cur_filename),hl
0418AF 11 21 C4 04 2215*  	ld de,filedata
0418B3 01 00 00 01 2216*  	ld bc,65536
0418B7 3E 01       2217*  	ld a,mos_load
0418B9 5B CF       2218*  	RST.LIL 08h
0418BB 21 62 01 00 2219*  	ld hl,BUF_13_043
0418BF 01 6B 00 00 2220*  	ld bc,107
0418C3 11 A0 00 00 2221*  	ld de,160
0418C7 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418CC CD 4E B9 04 2223*  	call vdu_load_img
0418D0 C9          2224*  	ret
0418D1             2225*  
0418D1             2226*  ld_13_044:
0418D1 21 6D 3D 04 2227*  	ld hl,F13_044
0418D5 22 D3 B7 04 2228*  	ld (cur_filename),hl
0418D9 11 21 C4 04 2229*  	ld de,filedata
0418DD 01 00 00 01 2230*  	ld bc,65536
0418E1 3E 01       2231*  	ld a,mos_load
0418E3 5B CF       2232*  	RST.LIL 08h
0418E5 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E9 01 40 01 00 2234*  	ld bc,320
0418ED 11 A0 00 00 2235*  	ld de,160
0418F1 DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F6 CD 4E B9 04 2237*  	call vdu_load_img
0418FA C9          2238*  	ret
0418FB             2239*  
0418FB             2240*  ld_14_004:
0418FB 21 81 3D 04 2241*  	ld hl,F14_004
0418FF 22 D3 B7 04 2242*  	ld (cur_filename),hl
041903 11 21 C4 04 2243*  	ld de,filedata
041907 01 00 00 01 2244*  	ld bc,65536
04190B 3E 01       2245*  	ld a,mos_load
04190D 5B CF       2246*  	RST.LIL 08h
04190F 21 64 01 00 2247*  	ld hl,BUF_14_004
041913 01 24 00 00 2248*  	ld bc,36
041917 11 23 00 00 2249*  	ld de,35
04191B DD 21 EC 04 2250*  	ld ix,1260
       00          
041920 CD 4E B9 04 2251*  	call vdu_load_img
041924 C9          2252*  	ret
041925             2253*  
041925             2254*  ld_14_009:
041925 21 95 3D 04 2255*  	ld hl,F14_009
041929 22 D3 B7 04 2256*  	ld (cur_filename),hl
04192D 11 21 C4 04 2257*  	ld de,filedata
041931 01 00 00 01 2258*  	ld bc,65536
041935 3E 01       2259*  	ld a,mos_load
041937 5B CF       2260*  	RST.LIL 08h
041939 21 65 01 00 2261*  	ld hl,BUF_14_009
04193D 01 23 00 00 2262*  	ld bc,35
041941 11 2D 00 00 2263*  	ld de,45
041945 DD 21 27 06 2264*  	ld ix,1575
       00          
04194A CD 4E B9 04 2265*  	call vdu_load_img
04194E C9          2266*  	ret
04194F             2267*  
04194F             2268*  ld_14_010:
04194F 21 A9 3D 04 2269*  	ld hl,F14_010
041953 22 D3 B7 04 2270*  	ld (cur_filename),hl
041957 11 21 C4 04 2271*  	ld de,filedata
04195B 01 00 00 01 2272*  	ld bc,65536
04195F 3E 01       2273*  	ld a,mos_load
041961 5B CF       2274*  	RST.LIL 08h
041963 21 66 01 00 2275*  	ld hl,BUF_14_010
041967 01 19 00 00 2276*  	ld bc,25
04196B 11 2D 00 00 2277*  	ld de,45
04196F DD 21 65 04 2278*  	ld ix,1125
       00          
041974 CD 4E B9 04 2279*  	call vdu_load_img
041978 C9          2280*  	ret
041979             2281*  
041979             2282*  ld_14_011:
041979 21 BD 3D 04 2283*  	ld hl,F14_011
04197D 22 D3 B7 04 2284*  	ld (cur_filename),hl
041981 11 21 C4 04 2285*  	ld de,filedata
041985 01 00 00 01 2286*  	ld bc,65536
041989 3E 01       2287*  	ld a,mos_load
04198B 5B CF       2288*  	RST.LIL 08h
04198D 21 67 01 00 2289*  	ld hl,BUF_14_011
041991 01 0F 00 00 2290*  	ld bc,15
041995 11 2D 00 00 2291*  	ld de,45
041999 DD 21 A3 02 2292*  	ld ix,675
       00          
04199E CD 4E B9 04 2293*  	call vdu_load_img
0419A2 C9          2294*  	ret
0419A3             2295*  
0419A3             2296*  ld_14_012:
0419A3 21 D1 3D 04 2297*  	ld hl,F14_012
0419A7 22 D3 B7 04 2298*  	ld (cur_filename),hl
0419AB 11 21 C4 04 2299*  	ld de,filedata
0419AF 01 00 00 01 2300*  	ld bc,65536
0419B3 3E 01       2301*  	ld a,mos_load
0419B5 5B CF       2302*  	RST.LIL 08h
0419B7 21 68 01 00 2303*  	ld hl,BUF_14_012
0419BB 01 05 00 00 2304*  	ld bc,5
0419BF 11 2D 00 00 2305*  	ld de,45
0419C3 DD 21 E1 00 2306*  	ld ix,225
       00          
0419C8 CD 4E B9 04 2307*  	call vdu_load_img
0419CC C9          2308*  	ret
0419CD             2309*  
0419CD             2310*  ld_14_013:
0419CD 21 E5 3D 04 2311*  	ld hl,F14_013
0419D1 22 D3 B7 04 2312*  	ld (cur_filename),hl
0419D5 11 21 C4 04 2313*  	ld de,filedata
0419D9 01 00 00 01 2314*  	ld bc,65536
0419DD 3E 01       2315*  	ld a,mos_load
0419DF 5B CF       2316*  	RST.LIL 08h
0419E1 21 69 01 00 2317*  	ld hl,BUF_14_013
0419E5 01 05 00 00 2318*  	ld bc,5
0419E9 11 2B 00 00 2319*  	ld de,43
0419ED DD 21 D7 00 2320*  	ld ix,215
       00          
0419F2 CD 4E B9 04 2321*  	call vdu_load_img
0419F6 C9          2322*  	ret
0419F7             2323*  
0419F7             2324*  ld_14_014:
0419F7 21 F9 3D 04 2325*  	ld hl,F14_014
0419FB 22 D3 B7 04 2326*  	ld (cur_filename),hl
0419FF 11 21 C4 04 2327*  	ld de,filedata
041A03 01 00 00 01 2328*  	ld bc,65536
041A07 3E 01       2329*  	ld a,mos_load
041A09 5B CF       2330*  	RST.LIL 08h
041A0B 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A0F 01 0F 00 00 2332*  	ld bc,15
041A13 11 2D 00 00 2333*  	ld de,45
041A17 DD 21 A3 02 2334*  	ld ix,675
       00          
041A1C CD 4E B9 04 2335*  	call vdu_load_img
041A20 C9          2336*  	ret
041A21             2337*  
041A21             2338*  ld_14_015:
041A21 21 0D 3E 04 2339*  	ld hl,F14_015
041A25 22 D3 B7 04 2340*  	ld (cur_filename),hl
041A29 11 21 C4 04 2341*  	ld de,filedata
041A2D 01 00 00 01 2342*  	ld bc,65536
041A31 3E 01       2343*  	ld a,mos_load
041A33 5B CF       2344*  	RST.LIL 08h
041A35 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A39 01 19 00 00 2346*  	ld bc,25
041A3D 11 2D 00 00 2347*  	ld de,45
041A41 DD 21 65 04 2348*  	ld ix,1125
       00          
041A46 CD 4E B9 04 2349*  	call vdu_load_img
041A4A C9          2350*  	ret
041A4B             2351*  
041A4B             2352*  ld_14_016:
041A4B 21 21 3E 04 2353*  	ld hl,F14_016
041A4F 22 D3 B7 04 2354*  	ld (cur_filename),hl
041A53 11 21 C4 04 2355*  	ld de,filedata
041A57 01 00 00 01 2356*  	ld bc,65536
041A5B 3E 01       2357*  	ld a,mos_load
041A5D 5B CF       2358*  	RST.LIL 08h
041A5F 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A63 01 23 00 00 2360*  	ld bc,35
041A67 11 2D 00 00 2361*  	ld de,45
041A6B DD 21 27 06 2362*  	ld ix,1575
       00          
041A70 CD 4E B9 04 2363*  	call vdu_load_img
041A74 C9          2364*  	ret
041A75             2365*  
041A75             2366*  ld_14_020:
041A75 21 35 3E 04 2367*  	ld hl,F14_020
041A79 22 D3 B7 04 2368*  	ld (cur_filename),hl
041A7D 11 21 C4 04 2369*  	ld de,filedata
041A81 01 00 00 01 2370*  	ld bc,65536
041A85 3E 01       2371*  	ld a,mos_load
041A87 5B CF       2372*  	RST.LIL 08h
041A89 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A8D 01 2E 00 00 2374*  	ld bc,46
041A91 11 2D 00 00 2375*  	ld de,45
041A95 DD 21 16 08 2376*  	ld ix,2070
       00          
041A9A CD 4E B9 04 2377*  	call vdu_load_img
041A9E C9          2378*  	ret
041A9F             2379*  
041A9F             2380*  ld_14_024:
041A9F 21 49 3E 04 2381*  	ld hl,F14_024
041AA3 22 D3 B7 04 2382*  	ld (cur_filename),hl
041AA7 11 21 C4 04 2383*  	ld de,filedata
041AAB 01 00 00 01 2384*  	ld bc,65536
041AAF 3E 01       2385*  	ld a,mos_load
041AB1 5B CF       2386*  	RST.LIL 08h
041AB3 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB7 01 2E 00 00 2388*  	ld bc,46
041ABB 11 40 00 00 2389*  	ld de,64
041ABF DD 21 80 0B 2390*  	ld ix,2944
       00          
041AC4 CD 4E B9 04 2391*  	call vdu_load_img
041AC8 C9          2392*  	ret
041AC9             2393*  
041AC9             2394*  ld_14_025:
041AC9 21 5D 3E 04 2395*  	ld hl,F14_025
041ACD 22 D3 B7 04 2396*  	ld (cur_filename),hl
041AD1 11 21 C4 04 2397*  	ld de,filedata
041AD5 01 00 00 01 2398*  	ld bc,65536
041AD9 3E 01       2399*  	ld a,mos_load
041ADB 5B CF       2400*  	RST.LIL 08h
041ADD 21 6F 01 00 2401*  	ld hl,BUF_14_025
041AE1 01 1C 00 00 2402*  	ld bc,28
041AE5 11 40 00 00 2403*  	ld de,64
041AE9 DD 21 00 07 2404*  	ld ix,1792
       00          
041AEE CD 4E B9 04 2405*  	call vdu_load_img
041AF2 C9          2406*  	ret
041AF3             2407*  
041AF3             2408*  ld_14_026:
041AF3 21 71 3E 04 2409*  	ld hl,F14_026
041AF7 22 D3 B7 04 2410*  	ld (cur_filename),hl
041AFB 11 21 C4 04 2411*  	ld de,filedata
041AFF 01 00 00 01 2412*  	ld bc,65536
041B03 3E 01       2413*  	ld a,mos_load
041B05 5B CF       2414*  	RST.LIL 08h
041B07 21 70 01 00 2415*  	ld hl,BUF_14_026
041B0B 01 09 00 00 2416*  	ld bc,9
041B0F 11 40 00 00 2417*  	ld de,64
041B13 DD 21 40 02 2418*  	ld ix,576
       00          
041B18 CD 4E B9 04 2419*  	call vdu_load_img
041B1C C9          2420*  	ret
041B1D             2421*  
041B1D             2422*  ld_14_027:
041B1D 21 85 3E 04 2423*  	ld hl,F14_027
041B21 22 D3 B7 04 2424*  	ld (cur_filename),hl
041B25 11 21 C4 04 2425*  	ld de,filedata
041B29 01 00 00 01 2426*  	ld bc,65536
041B2D 3E 01       2427*  	ld a,mos_load
041B2F 5B CF       2428*  	RST.LIL 08h
041B31 21 71 01 00 2429*  	ld hl,BUF_14_027
041B35 01 0A 00 00 2430*  	ld bc,10
041B39 11 3E 00 00 2431*  	ld de,62
041B3D DD 21 6C 02 2432*  	ld ix,620
       00          
041B42 CD 4E B9 04 2433*  	call vdu_load_img
041B46 C9          2434*  	ret
041B47             2435*  
041B47             2436*  ld_14_028:
041B47 21 99 3E 04 2437*  	ld hl,F14_028
041B4B 22 D3 B7 04 2438*  	ld (cur_filename),hl
041B4F 11 21 C4 04 2439*  	ld de,filedata
041B53 01 00 00 01 2440*  	ld bc,65536
041B57 3E 01       2441*  	ld a,mos_load
041B59 5B CF       2442*  	RST.LIL 08h
041B5B 21 72 01 00 2443*  	ld hl,BUF_14_028
041B5F 01 1C 00 00 2444*  	ld bc,28
041B63 11 40 00 00 2445*  	ld de,64
041B67 DD 21 00 07 2446*  	ld ix,1792
       00          
041B6C CD 4E B9 04 2447*  	call vdu_load_img
041B70 C9          2448*  	ret
041B71             2449*  
041B71             2450*  ld_14_029:
041B71 21 AD 3E 04 2451*  	ld hl,F14_029
041B75 22 D3 B7 04 2452*  	ld (cur_filename),hl
041B79 11 21 C4 04 2453*  	ld de,filedata
041B7D 01 00 00 01 2454*  	ld bc,65536
041B81 3E 01       2455*  	ld a,mos_load
041B83 5B CF       2456*  	RST.LIL 08h
041B85 21 73 01 00 2457*  	ld hl,BUF_14_029
041B89 01 2F 00 00 2458*  	ld bc,47
041B8D 11 40 00 00 2459*  	ld de,64
041B91 DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B96 CD 4E B9 04 2461*  	call vdu_load_img
041B9A C9          2462*  	ret
041B9B             2463*  
041B9B             2464*  ld_14_032:
041B9B 21 C1 3E 04 2465*  	ld hl,F14_032
041B9F 22 D3 B7 04 2466*  	ld (cur_filename),hl
041BA3 11 21 C4 04 2467*  	ld de,filedata
041BA7 01 00 00 01 2468*  	ld bc,65536
041BAB 3E 01       2469*  	ld a,mos_load
041BAD 5B CF       2470*  	RST.LIL 08h
041BAF 21 74 01 00 2471*  	ld hl,BUF_14_032
041BB3 01 41 00 00 2472*  	ld bc,65
041BB7 11 40 00 00 2473*  	ld de,64
041BBB DD 21 40 10 2474*  	ld ix,4160
       00          
041BC0 CD 4E B9 04 2475*  	call vdu_load_img
041BC4 C9          2476*  	ret
041BC5             2477*  
041BC5             2478*  ld_14_035:
041BC5 21 D5 3E 04 2479*  	ld hl,F14_035
041BC9 22 D3 B7 04 2480*  	ld (cur_filename),hl
041BCD 11 21 C4 04 2481*  	ld de,filedata
041BD1 01 00 00 01 2482*  	ld bc,65536
041BD5 3E 01       2483*  	ld a,mos_load
041BD7 5B CF       2484*  	RST.LIL 08h
041BD9 21 75 01 00 2485*  	ld hl,BUF_14_035
041BDD 01 3F 00 00 2486*  	ld bc,63
041BE1 11 6B 00 00 2487*  	ld de,107
041BE5 DD 21 55 1A 2488*  	ld ix,6741
       00          
041BEA CD 4E B9 04 2489*  	call vdu_load_img
041BEE C9          2490*  	ret
041BEF             2491*  
041BEF             2492*  ld_14_036:
041BEF 21 E9 3E 04 2493*  	ld hl,F14_036
041BF3 22 D3 B7 04 2494*  	ld (cur_filename),hl
041BF7 11 21 C4 04 2495*  	ld de,filedata
041BFB 01 00 00 01 2496*  	ld bc,65536
041BFF 3E 01       2497*  	ld a,mos_load
041C01 5B CF       2498*  	RST.LIL 08h
041C03 21 76 01 00 2499*  	ld hl,BUF_14_036
041C07 01 16 00 00 2500*  	ld bc,22
041C0B 11 6B 00 00 2501*  	ld de,107
041C0F DD 21 32 09 2502*  	ld ix,2354
       00          
041C14 CD 4E B9 04 2503*  	call vdu_load_img
041C18 C9          2504*  	ret
041C19             2505*  
041C19             2506*  ld_14_037:
041C19 21 FD 3E 04 2507*  	ld hl,F14_037
041C1D 22 D3 B7 04 2508*  	ld (cur_filename),hl
041C21 11 21 C4 04 2509*  	ld de,filedata
041C25 01 00 00 01 2510*  	ld bc,65536
041C29 3E 01       2511*  	ld a,mos_load
041C2B 5B CF       2512*  	RST.LIL 08h
041C2D 21 77 01 00 2513*  	ld hl,BUF_14_037
041C31 01 15 00 00 2514*  	ld bc,21
041C35 11 69 00 00 2515*  	ld de,105
041C39 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C3E CD 4E B9 04 2517*  	call vdu_load_img
041C42 C9          2518*  	ret
041C43             2519*  
041C43             2520*  ld_14_038:
041C43 21 11 3F 04 2521*  	ld hl,F14_038
041C47 22 D3 B7 04 2522*  	ld (cur_filename),hl
041C4B 11 21 C4 04 2523*  	ld de,filedata
041C4F 01 00 00 01 2524*  	ld bc,65536
041C53 3E 01       2525*  	ld a,mos_load
041C55 5B CF       2526*  	RST.LIL 08h
041C57 21 78 01 00 2527*  	ld hl,BUF_14_038
041C5B 01 3F 00 00 2528*  	ld bc,63
041C5F 11 6B 00 00 2529*  	ld de,107
041C63 DD 21 55 1A 2530*  	ld ix,6741
       00          
041C68 CD 4E B9 04 2531*  	call vdu_load_img
041C6C C9          2532*  	ret
041C6D             2533*  
041C6D             2534*  ld_14_040:
041C6D 21 25 3F 04 2535*  	ld hl,F14_040
041C71 22 D3 B7 04 2536*  	ld (cur_filename),hl
041C75 11 21 C4 04 2537*  	ld de,filedata
041C79 01 00 00 01 2538*  	ld bc,65536
041C7D 3E 01       2539*  	ld a,mos_load
041C7F 5B CF       2540*  	RST.LIL 08h
041C81 21 79 01 00 2541*  	ld hl,BUF_14_040
041C85 01 6C 00 00 2542*  	ld bc,108
041C89 11 6B 00 00 2543*  	ld de,107
041C8D DD 21 24 2D 2544*  	ld ix,11556
       00          
041C92 CD 4E B9 04 2545*  	call vdu_load_img
041C96 C9          2546*  	ret
041C97             2547*  
041C97             2548*  ld_14_042:
041C97 21 39 3F 04 2549*  	ld hl,F14_042
041C9B 22 D3 B7 04 2550*  	ld (cur_filename),hl
041C9F 11 21 C4 04 2551*  	ld de,filedata
041CA3 01 00 00 01 2552*  	ld bc,65536
041CA7 3E 01       2553*  	ld a,mos_load
041CA9 5B CF       2554*  	RST.LIL 08h
041CAB 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CAF 01 6A 00 00 2556*  	ld bc,106
041CB3 11 A0 00 00 2557*  	ld de,160
041CB7 DD 21 40 42 2558*  	ld ix,16960
       00          
041CBC CD 4E B9 04 2559*  	call vdu_load_img
041CC0 C9          2560*  	ret
041CC1             2561*  
041CC1             2562*  ld_14_043:
041CC1 21 4D 3F 04 2563*  	ld hl,F14_043
041CC5 22 D3 B7 04 2564*  	ld (cur_filename),hl
041CC9 11 21 C4 04 2565*  	ld de,filedata
041CCD 01 00 00 01 2566*  	ld bc,65536
041CD1 3E 01       2567*  	ld a,mos_load
041CD3 5B CF       2568*  	RST.LIL 08h
041CD5 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD9 01 6B 00 00 2570*  	ld bc,107
041CDD 11 A0 00 00 2571*  	ld de,160
041CE1 DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE6 CD 4E B9 04 2573*  	call vdu_load_img
041CEA C9          2574*  	ret
041CEB             2575*  
041CEB             2576*  ld_14_044:
041CEB 21 61 3F 04 2577*  	ld hl,F14_044
041CEF 22 D3 B7 04 2578*  	ld (cur_filename),hl
041CF3 11 21 C4 04 2579*  	ld de,filedata
041CF7 01 00 00 01 2580*  	ld bc,65536
041CFB 3E 01       2581*  	ld a,mos_load
041CFD 5B CF       2582*  	RST.LIL 08h
041CFF 21 7C 01 00 2583*  	ld hl,BUF_14_044
041D03 01 40 01 00 2584*  	ld bc,320
041D07 11 A0 00 00 2585*  	ld de,160
041D0B DD 21 00 C8 2586*  	ld ix,51200
       00          
041D10 CD 4E B9 04 2587*  	call vdu_load_img
041D14 C9          2588*  	ret
041D15             2589*  
041D15             2590*  ld_15_004:
041D15 21 75 3F 04 2591*  	ld hl,F15_004
041D19 22 D3 B7 04 2592*  	ld (cur_filename),hl
041D1D 11 21 C4 04 2593*  	ld de,filedata
041D21 01 00 00 01 2594*  	ld bc,65536
041D25 3E 01       2595*  	ld a,mos_load
041D27 5B CF       2596*  	RST.LIL 08h
041D29 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D2D 01 24 00 00 2598*  	ld bc,36
041D31 11 23 00 00 2599*  	ld de,35
041D35 DD 21 EC 04 2600*  	ld ix,1260
       00          
041D3A CD 4E B9 04 2601*  	call vdu_load_img
041D3E C9          2602*  	ret
041D3F             2603*  
041D3F             2604*  ld_15_009:
041D3F 21 89 3F 04 2605*  	ld hl,F15_009
041D43 22 D3 B7 04 2606*  	ld (cur_filename),hl
041D47 11 21 C4 04 2607*  	ld de,filedata
041D4B 01 00 00 01 2608*  	ld bc,65536
041D4F 3E 01       2609*  	ld a,mos_load
041D51 5B CF       2610*  	RST.LIL 08h
041D53 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D57 01 23 00 00 2612*  	ld bc,35
041D5B 11 2D 00 00 2613*  	ld de,45
041D5F DD 21 27 06 2614*  	ld ix,1575
       00          
041D64 CD 4E B9 04 2615*  	call vdu_load_img
041D68 C9          2616*  	ret
041D69             2617*  
041D69             2618*  ld_15_010:
041D69 21 9D 3F 04 2619*  	ld hl,F15_010
041D6D 22 D3 B7 04 2620*  	ld (cur_filename),hl
041D71 11 21 C4 04 2621*  	ld de,filedata
041D75 01 00 00 01 2622*  	ld bc,65536
041D79 3E 01       2623*  	ld a,mos_load
041D7B 5B CF       2624*  	RST.LIL 08h
041D7D 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D81 01 19 00 00 2626*  	ld bc,25
041D85 11 2D 00 00 2627*  	ld de,45
041D89 DD 21 65 04 2628*  	ld ix,1125
       00          
041D8E CD 4E B9 04 2629*  	call vdu_load_img
041D92 C9          2630*  	ret
041D93             2631*  
041D93             2632*  ld_15_011:
041D93 21 B1 3F 04 2633*  	ld hl,F15_011
041D97 22 D3 B7 04 2634*  	ld (cur_filename),hl
041D9B 11 21 C4 04 2635*  	ld de,filedata
041D9F 01 00 00 01 2636*  	ld bc,65536
041DA3 3E 01       2637*  	ld a,mos_load
041DA5 5B CF       2638*  	RST.LIL 08h
041DA7 21 80 01 00 2639*  	ld hl,BUF_15_011
041DAB 01 0F 00 00 2640*  	ld bc,15
041DAF 11 2D 00 00 2641*  	ld de,45
041DB3 DD 21 A3 02 2642*  	ld ix,675
       00          
041DB8 CD 4E B9 04 2643*  	call vdu_load_img
041DBC C9          2644*  	ret
041DBD             2645*  
041DBD             2646*  ld_15_012:
041DBD 21 C5 3F 04 2647*  	ld hl,F15_012
041DC1 22 D3 B7 04 2648*  	ld (cur_filename),hl
041DC5 11 21 C4 04 2649*  	ld de,filedata
041DC9 01 00 00 01 2650*  	ld bc,65536
041DCD 3E 01       2651*  	ld a,mos_load
041DCF 5B CF       2652*  	RST.LIL 08h
041DD1 21 81 01 00 2653*  	ld hl,BUF_15_012
041DD5 01 05 00 00 2654*  	ld bc,5
041DD9 11 2D 00 00 2655*  	ld de,45
041DDD DD 21 E1 00 2656*  	ld ix,225
       00          
041DE2 CD 4E B9 04 2657*  	call vdu_load_img
041DE6 C9          2658*  	ret
041DE7             2659*  
041DE7             2660*  ld_15_013:
041DE7 21 D9 3F 04 2661*  	ld hl,F15_013
041DEB 22 D3 B7 04 2662*  	ld (cur_filename),hl
041DEF 11 21 C4 04 2663*  	ld de,filedata
041DF3 01 00 00 01 2664*  	ld bc,65536
041DF7 3E 01       2665*  	ld a,mos_load
041DF9 5B CF       2666*  	RST.LIL 08h
041DFB 21 82 01 00 2667*  	ld hl,BUF_15_013
041DFF 01 05 00 00 2668*  	ld bc,5
041E03 11 2B 00 00 2669*  	ld de,43
041E07 DD 21 D7 00 2670*  	ld ix,215
       00          
041E0C CD 4E B9 04 2671*  	call vdu_load_img
041E10 C9          2672*  	ret
041E11             2673*  
041E11             2674*  ld_15_014:
041E11 21 ED 3F 04 2675*  	ld hl,F15_014
041E15 22 D3 B7 04 2676*  	ld (cur_filename),hl
041E19 11 21 C4 04 2677*  	ld de,filedata
041E1D 01 00 00 01 2678*  	ld bc,65536
041E21 3E 01       2679*  	ld a,mos_load
041E23 5B CF       2680*  	RST.LIL 08h
041E25 21 83 01 00 2681*  	ld hl,BUF_15_014
041E29 01 0F 00 00 2682*  	ld bc,15
041E2D 11 2D 00 00 2683*  	ld de,45
041E31 DD 21 A3 02 2684*  	ld ix,675
       00          
041E36 CD 4E B9 04 2685*  	call vdu_load_img
041E3A C9          2686*  	ret
041E3B             2687*  
041E3B             2688*  ld_15_015:
041E3B 21 01 40 04 2689*  	ld hl,F15_015
041E3F 22 D3 B7 04 2690*  	ld (cur_filename),hl
041E43 11 21 C4 04 2691*  	ld de,filedata
041E47 01 00 00 01 2692*  	ld bc,65536
041E4B 3E 01       2693*  	ld a,mos_load
041E4D 5B CF       2694*  	RST.LIL 08h
041E4F 21 84 01 00 2695*  	ld hl,BUF_15_015
041E53 01 19 00 00 2696*  	ld bc,25
041E57 11 2D 00 00 2697*  	ld de,45
041E5B DD 21 65 04 2698*  	ld ix,1125
       00          
041E60 CD 4E B9 04 2699*  	call vdu_load_img
041E64 C9          2700*  	ret
041E65             2701*  
041E65             2702*  ld_15_016:
041E65 21 15 40 04 2703*  	ld hl,F15_016
041E69 22 D3 B7 04 2704*  	ld (cur_filename),hl
041E6D 11 21 C4 04 2705*  	ld de,filedata
041E71 01 00 00 01 2706*  	ld bc,65536
041E75 3E 01       2707*  	ld a,mos_load
041E77 5B CF       2708*  	RST.LIL 08h
041E79 21 85 01 00 2709*  	ld hl,BUF_15_016
041E7D 01 23 00 00 2710*  	ld bc,35
041E81 11 2D 00 00 2711*  	ld de,45
041E85 DD 21 27 06 2712*  	ld ix,1575
       00          
041E8A CD 4E B9 04 2713*  	call vdu_load_img
041E8E C9          2714*  	ret
041E8F             2715*  
041E8F             2716*  ld_15_020:
041E8F 21 29 40 04 2717*  	ld hl,F15_020
041E93 22 D3 B7 04 2718*  	ld (cur_filename),hl
041E97 11 21 C4 04 2719*  	ld de,filedata
041E9B 01 00 00 01 2720*  	ld bc,65536
041E9F 3E 01       2721*  	ld a,mos_load
041EA1 5B CF       2722*  	RST.LIL 08h
041EA3 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA7 01 2E 00 00 2724*  	ld bc,46
041EAB 11 2D 00 00 2725*  	ld de,45
041EAF DD 21 16 08 2726*  	ld ix,2070
       00          
041EB4 CD 4E B9 04 2727*  	call vdu_load_img
041EB8 C9          2728*  	ret
041EB9             2729*  
041EB9             2730*  ld_15_024:
041EB9 21 3D 40 04 2731*  	ld hl,F15_024
041EBD 22 D3 B7 04 2732*  	ld (cur_filename),hl
041EC1 11 21 C4 04 2733*  	ld de,filedata
041EC5 01 00 00 01 2734*  	ld bc,65536
041EC9 3E 01       2735*  	ld a,mos_load
041ECB 5B CF       2736*  	RST.LIL 08h
041ECD 21 87 01 00 2737*  	ld hl,BUF_15_024
041ED1 01 2E 00 00 2738*  	ld bc,46
041ED5 11 40 00 00 2739*  	ld de,64
041ED9 DD 21 80 0B 2740*  	ld ix,2944
       00          
041EDE CD 4E B9 04 2741*  	call vdu_load_img
041EE2 C9          2742*  	ret
041EE3             2743*  
041EE3             2744*  ld_15_025:
041EE3 21 51 40 04 2745*  	ld hl,F15_025
041EE7 22 D3 B7 04 2746*  	ld (cur_filename),hl
041EEB 11 21 C4 04 2747*  	ld de,filedata
041EEF 01 00 00 01 2748*  	ld bc,65536
041EF3 3E 01       2749*  	ld a,mos_load
041EF5 5B CF       2750*  	RST.LIL 08h
041EF7 21 88 01 00 2751*  	ld hl,BUF_15_025
041EFB 01 1C 00 00 2752*  	ld bc,28
041EFF 11 40 00 00 2753*  	ld de,64
041F03 DD 21 00 07 2754*  	ld ix,1792
       00          
041F08 CD 4E B9 04 2755*  	call vdu_load_img
041F0C C9          2756*  	ret
041F0D             2757*  
041F0D             2758*  ld_15_026:
041F0D 21 65 40 04 2759*  	ld hl,F15_026
041F11 22 D3 B7 04 2760*  	ld (cur_filename),hl
041F15 11 21 C4 04 2761*  	ld de,filedata
041F19 01 00 00 01 2762*  	ld bc,65536
041F1D 3E 01       2763*  	ld a,mos_load
041F1F 5B CF       2764*  	RST.LIL 08h
041F21 21 89 01 00 2765*  	ld hl,BUF_15_026
041F25 01 09 00 00 2766*  	ld bc,9
041F29 11 40 00 00 2767*  	ld de,64
041F2D DD 21 40 02 2768*  	ld ix,576
       00          
041F32 CD 4E B9 04 2769*  	call vdu_load_img
041F36 C9          2770*  	ret
041F37             2771*  
041F37             2772*  ld_15_027:
041F37 21 79 40 04 2773*  	ld hl,F15_027
041F3B 22 D3 B7 04 2774*  	ld (cur_filename),hl
041F3F 11 21 C4 04 2775*  	ld de,filedata
041F43 01 00 00 01 2776*  	ld bc,65536
041F47 3E 01       2777*  	ld a,mos_load
041F49 5B CF       2778*  	RST.LIL 08h
041F4B 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F4F 01 0A 00 00 2780*  	ld bc,10
041F53 11 3E 00 00 2781*  	ld de,62
041F57 DD 21 6C 02 2782*  	ld ix,620
       00          
041F5C CD 4E B9 04 2783*  	call vdu_load_img
041F60 C9          2784*  	ret
041F61             2785*  
041F61             2786*  ld_15_028:
041F61 21 8D 40 04 2787*  	ld hl,F15_028
041F65 22 D3 B7 04 2788*  	ld (cur_filename),hl
041F69 11 21 C4 04 2789*  	ld de,filedata
041F6D 01 00 00 01 2790*  	ld bc,65536
041F71 3E 01       2791*  	ld a,mos_load
041F73 5B CF       2792*  	RST.LIL 08h
041F75 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F79 01 1C 00 00 2794*  	ld bc,28
041F7D 11 40 00 00 2795*  	ld de,64
041F81 DD 21 00 07 2796*  	ld ix,1792
       00          
041F86 CD 4E B9 04 2797*  	call vdu_load_img
041F8A C9          2798*  	ret
041F8B             2799*  
041F8B             2800*  ld_15_029:
041F8B 21 A1 40 04 2801*  	ld hl,F15_029
041F8F 22 D3 B7 04 2802*  	ld (cur_filename),hl
041F93 11 21 C4 04 2803*  	ld de,filedata
041F97 01 00 00 01 2804*  	ld bc,65536
041F9B 3E 01       2805*  	ld a,mos_load
041F9D 5B CF       2806*  	RST.LIL 08h
041F9F 21 8C 01 00 2807*  	ld hl,BUF_15_029
041FA3 01 2F 00 00 2808*  	ld bc,47
041FA7 11 40 00 00 2809*  	ld de,64
041FAB DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FB0 CD 4E B9 04 2811*  	call vdu_load_img
041FB4 C9          2812*  	ret
041FB5             2813*  
041FB5             2814*  ld_15_032:
041FB5 21 B5 40 04 2815*  	ld hl,F15_032
041FB9 22 D3 B7 04 2816*  	ld (cur_filename),hl
041FBD 11 21 C4 04 2817*  	ld de,filedata
041FC1 01 00 00 01 2818*  	ld bc,65536
041FC5 3E 01       2819*  	ld a,mos_load
041FC7 5B CF       2820*  	RST.LIL 08h
041FC9 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FCD 01 41 00 00 2822*  	ld bc,65
041FD1 11 40 00 00 2823*  	ld de,64
041FD5 DD 21 40 10 2824*  	ld ix,4160
       00          
041FDA CD 4E B9 04 2825*  	call vdu_load_img
041FDE C9          2826*  	ret
041FDF             2827*  
041FDF             2828*  ld_15_035:
041FDF 21 C9 40 04 2829*  	ld hl,F15_035
041FE3 22 D3 B7 04 2830*  	ld (cur_filename),hl
041FE7 11 21 C4 04 2831*  	ld de,filedata
041FEB 01 00 00 01 2832*  	ld bc,65536
041FEF 3E 01       2833*  	ld a,mos_load
041FF1 5B CF       2834*  	RST.LIL 08h
041FF3 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF7 01 3F 00 00 2836*  	ld bc,63
041FFB 11 6B 00 00 2837*  	ld de,107
041FFF DD 21 55 1A 2838*  	ld ix,6741
       00          
042004 CD 4E B9 04 2839*  	call vdu_load_img
042008 C9          2840*  	ret
042009             2841*  
042009             2842*  ld_15_036:
042009 21 DD 40 04 2843*  	ld hl,F15_036
04200D 22 D3 B7 04 2844*  	ld (cur_filename),hl
042011 11 21 C4 04 2845*  	ld de,filedata
042015 01 00 00 01 2846*  	ld bc,65536
042019 3E 01       2847*  	ld a,mos_load
04201B 5B CF       2848*  	RST.LIL 08h
04201D 21 8F 01 00 2849*  	ld hl,BUF_15_036
042021 01 16 00 00 2850*  	ld bc,22
042025 11 6B 00 00 2851*  	ld de,107
042029 DD 21 32 09 2852*  	ld ix,2354
       00          
04202E CD 4E B9 04 2853*  	call vdu_load_img
042032 C9          2854*  	ret
042033             2855*  
042033             2856*  ld_15_037:
042033 21 F1 40 04 2857*  	ld hl,F15_037
042037 22 D3 B7 04 2858*  	ld (cur_filename),hl
04203B 11 21 C4 04 2859*  	ld de,filedata
04203F 01 00 00 01 2860*  	ld bc,65536
042043 3E 01       2861*  	ld a,mos_load
042045 5B CF       2862*  	RST.LIL 08h
042047 21 90 01 00 2863*  	ld hl,BUF_15_037
04204B 01 15 00 00 2864*  	ld bc,21
04204F 11 69 00 00 2865*  	ld de,105
042053 DD 21 9D 08 2866*  	ld ix,2205
       00          
042058 CD 4E B9 04 2867*  	call vdu_load_img
04205C C9          2868*  	ret
04205D             2869*  
04205D             2870*  ld_15_038:
04205D 21 05 41 04 2871*  	ld hl,F15_038
042061 22 D3 B7 04 2872*  	ld (cur_filename),hl
042065 11 21 C4 04 2873*  	ld de,filedata
042069 01 00 00 01 2874*  	ld bc,65536
04206D 3E 01       2875*  	ld a,mos_load
04206F 5B CF       2876*  	RST.LIL 08h
042071 21 91 01 00 2877*  	ld hl,BUF_15_038
042075 01 3F 00 00 2878*  	ld bc,63
042079 11 6B 00 00 2879*  	ld de,107
04207D DD 21 55 1A 2880*  	ld ix,6741
       00          
042082 CD 4E B9 04 2881*  	call vdu_load_img
042086 C9          2882*  	ret
042087             2883*  
042087             2884*  ld_15_040:
042087 21 19 41 04 2885*  	ld hl,F15_040
04208B 22 D3 B7 04 2886*  	ld (cur_filename),hl
04208F 11 21 C4 04 2887*  	ld de,filedata
042093 01 00 00 01 2888*  	ld bc,65536
042097 3E 01       2889*  	ld a,mos_load
042099 5B CF       2890*  	RST.LIL 08h
04209B 21 92 01 00 2891*  	ld hl,BUF_15_040
04209F 01 6C 00 00 2892*  	ld bc,108
0420A3 11 6B 00 00 2893*  	ld de,107
0420A7 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420AC CD 4E B9 04 2895*  	call vdu_load_img
0420B0 C9          2896*  	ret
0420B1             2897*  
0420B1             2898*  ld_15_042:
0420B1 21 2D 41 04 2899*  	ld hl,F15_042
0420B5 22 D3 B7 04 2900*  	ld (cur_filename),hl
0420B9 11 21 C4 04 2901*  	ld de,filedata
0420BD 01 00 00 01 2902*  	ld bc,65536
0420C1 3E 01       2903*  	ld a,mos_load
0420C3 5B CF       2904*  	RST.LIL 08h
0420C5 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C9 01 6A 00 00 2906*  	ld bc,106
0420CD 11 A0 00 00 2907*  	ld de,160
0420D1 DD 21 40 42 2908*  	ld ix,16960
       00          
0420D6 CD 4E B9 04 2909*  	call vdu_load_img
0420DA C9          2910*  	ret
0420DB             2911*  
0420DB             2912*  ld_15_043:
0420DB 21 41 41 04 2913*  	ld hl,F15_043
0420DF 22 D3 B7 04 2914*  	ld (cur_filename),hl
0420E3 11 21 C4 04 2915*  	ld de,filedata
0420E7 01 00 00 01 2916*  	ld bc,65536
0420EB 3E 01       2917*  	ld a,mos_load
0420ED 5B CF       2918*  	RST.LIL 08h
0420EF 21 94 01 00 2919*  	ld hl,BUF_15_043
0420F3 01 6B 00 00 2920*  	ld bc,107
0420F7 11 A0 00 00 2921*  	ld de,160
0420FB DD 21 E0 42 2922*  	ld ix,17120
       00          
042100 CD 4E B9 04 2923*  	call vdu_load_img
042104 C9          2924*  	ret
042105             2925*  
042105             2926*  ld_15_044:
042105 21 55 41 04 2927*  	ld hl,F15_044
042109 22 D3 B7 04 2928*  	ld (cur_filename),hl
04210D 11 21 C4 04 2929*  	ld de,filedata
042111 01 00 00 01 2930*  	ld bc,65536
042115 3E 01       2931*  	ld a,mos_load
042117 5B CF       2932*  	RST.LIL 08h
042119 21 95 01 00 2933*  	ld hl,BUF_15_044
04211D 01 40 01 00 2934*  	ld bc,320
042121 11 A0 00 00 2935*  	ld de,160
042125 DD 21 00 C8 2936*  	ld ix,51200
       00          
04212A CD 4E B9 04 2937*  	call vdu_load_img
04212E C9          2938*  	ret
04212F             2939*  
04212F             2940*  ld_16_004:
04212F 21 69 41 04 2941*  	ld hl,F16_004
042133 22 D3 B7 04 2942*  	ld (cur_filename),hl
042137 11 21 C4 04 2943*  	ld de,filedata
04213B 01 00 00 01 2944*  	ld bc,65536
04213F 3E 01       2945*  	ld a,mos_load
042141 5B CF       2946*  	RST.LIL 08h
042143 21 96 01 00 2947*  	ld hl,BUF_16_004
042147 01 24 00 00 2948*  	ld bc,36
04214B 11 23 00 00 2949*  	ld de,35
04214F DD 21 EC 04 2950*  	ld ix,1260
       00          
042154 CD 4E B9 04 2951*  	call vdu_load_img
042158 C9          2952*  	ret
042159             2953*  
042159             2954*  ld_16_009:
042159 21 7D 41 04 2955*  	ld hl,F16_009
04215D 22 D3 B7 04 2956*  	ld (cur_filename),hl
042161 11 21 C4 04 2957*  	ld de,filedata
042165 01 00 00 01 2958*  	ld bc,65536
042169 3E 01       2959*  	ld a,mos_load
04216B 5B CF       2960*  	RST.LIL 08h
04216D 21 97 01 00 2961*  	ld hl,BUF_16_009
042171 01 23 00 00 2962*  	ld bc,35
042175 11 2D 00 00 2963*  	ld de,45
042179 DD 21 27 06 2964*  	ld ix,1575
       00          
04217E CD 4E B9 04 2965*  	call vdu_load_img
042182 C9          2966*  	ret
042183             2967*  
042183             2968*  ld_16_010:
042183 21 91 41 04 2969*  	ld hl,F16_010
042187 22 D3 B7 04 2970*  	ld (cur_filename),hl
04218B 11 21 C4 04 2971*  	ld de,filedata
04218F 01 00 00 01 2972*  	ld bc,65536
042193 3E 01       2973*  	ld a,mos_load
042195 5B CF       2974*  	RST.LIL 08h
042197 21 98 01 00 2975*  	ld hl,BUF_16_010
04219B 01 19 00 00 2976*  	ld bc,25
04219F 11 2D 00 00 2977*  	ld de,45
0421A3 DD 21 65 04 2978*  	ld ix,1125
       00          
0421A8 CD 4E B9 04 2979*  	call vdu_load_img
0421AC C9          2980*  	ret
0421AD             2981*  
0421AD             2982*  ld_16_011:
0421AD 21 A5 41 04 2983*  	ld hl,F16_011
0421B1 22 D3 B7 04 2984*  	ld (cur_filename),hl
0421B5 11 21 C4 04 2985*  	ld de,filedata
0421B9 01 00 00 01 2986*  	ld bc,65536
0421BD 3E 01       2987*  	ld a,mos_load
0421BF 5B CF       2988*  	RST.LIL 08h
0421C1 21 99 01 00 2989*  	ld hl,BUF_16_011
0421C5 01 0F 00 00 2990*  	ld bc,15
0421C9 11 2D 00 00 2991*  	ld de,45
0421CD DD 21 A3 02 2992*  	ld ix,675
       00          
0421D2 CD 4E B9 04 2993*  	call vdu_load_img
0421D6 C9          2994*  	ret
0421D7             2995*  
0421D7             2996*  ld_16_012:
0421D7 21 B9 41 04 2997*  	ld hl,F16_012
0421DB 22 D3 B7 04 2998*  	ld (cur_filename),hl
0421DF 11 21 C4 04 2999*  	ld de,filedata
0421E3 01 00 00 01 3000*  	ld bc,65536
0421E7 3E 01       3001*  	ld a,mos_load
0421E9 5B CF       3002*  	RST.LIL 08h
0421EB 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421EF 01 05 00 00 3004*  	ld bc,5
0421F3 11 2D 00 00 3005*  	ld de,45
0421F7 DD 21 E1 00 3006*  	ld ix,225
       00          
0421FC CD 4E B9 04 3007*  	call vdu_load_img
042200 C9          3008*  	ret
042201             3009*  
042201             3010*  ld_16_013:
042201 21 CD 41 04 3011*  	ld hl,F16_013
042205 22 D3 B7 04 3012*  	ld (cur_filename),hl
042209 11 21 C4 04 3013*  	ld de,filedata
04220D 01 00 00 01 3014*  	ld bc,65536
042211 3E 01       3015*  	ld a,mos_load
042213 5B CF       3016*  	RST.LIL 08h
042215 21 9B 01 00 3017*  	ld hl,BUF_16_013
042219 01 05 00 00 3018*  	ld bc,5
04221D 11 2B 00 00 3019*  	ld de,43
042221 DD 21 D7 00 3020*  	ld ix,215
       00          
042226 CD 4E B9 04 3021*  	call vdu_load_img
04222A C9          3022*  	ret
04222B             3023*  
04222B             3024*  ld_16_014:
04222B 21 E1 41 04 3025*  	ld hl,F16_014
04222F 22 D3 B7 04 3026*  	ld (cur_filename),hl
042233 11 21 C4 04 3027*  	ld de,filedata
042237 01 00 00 01 3028*  	ld bc,65536
04223B 3E 01       3029*  	ld a,mos_load
04223D 5B CF       3030*  	RST.LIL 08h
04223F 21 9C 01 00 3031*  	ld hl,BUF_16_014
042243 01 0F 00 00 3032*  	ld bc,15
042247 11 2D 00 00 3033*  	ld de,45
04224B DD 21 A3 02 3034*  	ld ix,675
       00          
042250 CD 4E B9 04 3035*  	call vdu_load_img
042254 C9          3036*  	ret
042255             3037*  
042255             3038*  ld_16_015:
042255 21 F5 41 04 3039*  	ld hl,F16_015
042259 22 D3 B7 04 3040*  	ld (cur_filename),hl
04225D 11 21 C4 04 3041*  	ld de,filedata
042261 01 00 00 01 3042*  	ld bc,65536
042265 3E 01       3043*  	ld a,mos_load
042267 5B CF       3044*  	RST.LIL 08h
042269 21 9D 01 00 3045*  	ld hl,BUF_16_015
04226D 01 19 00 00 3046*  	ld bc,25
042271 11 2D 00 00 3047*  	ld de,45
042275 DD 21 65 04 3048*  	ld ix,1125
       00          
04227A CD 4E B9 04 3049*  	call vdu_load_img
04227E C9          3050*  	ret
04227F             3051*  
04227F             3052*  ld_16_016:
04227F 21 09 42 04 3053*  	ld hl,F16_016
042283 22 D3 B7 04 3054*  	ld (cur_filename),hl
042287 11 21 C4 04 3055*  	ld de,filedata
04228B 01 00 00 01 3056*  	ld bc,65536
04228F 3E 01       3057*  	ld a,mos_load
042291 5B CF       3058*  	RST.LIL 08h
042293 21 9E 01 00 3059*  	ld hl,BUF_16_016
042297 01 23 00 00 3060*  	ld bc,35
04229B 11 2D 00 00 3061*  	ld de,45
04229F DD 21 27 06 3062*  	ld ix,1575
       00          
0422A4 CD 4E B9 04 3063*  	call vdu_load_img
0422A8 C9          3064*  	ret
0422A9             3065*  
0422A9             3066*  ld_16_020:
0422A9 21 1D 42 04 3067*  	ld hl,F16_020
0422AD 22 D3 B7 04 3068*  	ld (cur_filename),hl
0422B1 11 21 C4 04 3069*  	ld de,filedata
0422B5 01 00 00 01 3070*  	ld bc,65536
0422B9 3E 01       3071*  	ld a,mos_load
0422BB 5B CF       3072*  	RST.LIL 08h
0422BD 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422C1 01 2E 00 00 3074*  	ld bc,46
0422C5 11 2D 00 00 3075*  	ld de,45
0422C9 DD 21 16 08 3076*  	ld ix,2070
       00          
0422CE CD 4E B9 04 3077*  	call vdu_load_img
0422D2 C9          3078*  	ret
0422D3             3079*  
0422D3             3080*  ld_16_024:
0422D3 21 31 42 04 3081*  	ld hl,F16_024
0422D7 22 D3 B7 04 3082*  	ld (cur_filename),hl
0422DB 11 21 C4 04 3083*  	ld de,filedata
0422DF 01 00 00 01 3084*  	ld bc,65536
0422E3 3E 01       3085*  	ld a,mos_load
0422E5 5B CF       3086*  	RST.LIL 08h
0422E7 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422EB 01 2E 00 00 3088*  	ld bc,46
0422EF 11 40 00 00 3089*  	ld de,64
0422F3 DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F8 CD 4E B9 04 3091*  	call vdu_load_img
0422FC C9          3092*  	ret
0422FD             3093*  
0422FD             3094*  ld_16_025:
0422FD 21 45 42 04 3095*  	ld hl,F16_025
042301 22 D3 B7 04 3096*  	ld (cur_filename),hl
042305 11 21 C4 04 3097*  	ld de,filedata
042309 01 00 00 01 3098*  	ld bc,65536
04230D 3E 01       3099*  	ld a,mos_load
04230F 5B CF       3100*  	RST.LIL 08h
042311 21 A1 01 00 3101*  	ld hl,BUF_16_025
042315 01 1C 00 00 3102*  	ld bc,28
042319 11 40 00 00 3103*  	ld de,64
04231D DD 21 00 07 3104*  	ld ix,1792
       00          
042322 CD 4E B9 04 3105*  	call vdu_load_img
042326 C9          3106*  	ret
042327             3107*  
042327             3108*  ld_16_026:
042327 21 59 42 04 3109*  	ld hl,F16_026
04232B 22 D3 B7 04 3110*  	ld (cur_filename),hl
04232F 11 21 C4 04 3111*  	ld de,filedata
042333 01 00 00 01 3112*  	ld bc,65536
042337 3E 01       3113*  	ld a,mos_load
042339 5B CF       3114*  	RST.LIL 08h
04233B 21 A2 01 00 3115*  	ld hl,BUF_16_026
04233F 01 09 00 00 3116*  	ld bc,9
042343 11 40 00 00 3117*  	ld de,64
042347 DD 21 40 02 3118*  	ld ix,576
       00          
04234C CD 4E B9 04 3119*  	call vdu_load_img
042350 C9          3120*  	ret
042351             3121*  
042351             3122*  ld_16_027:
042351 21 6D 42 04 3123*  	ld hl,F16_027
042355 22 D3 B7 04 3124*  	ld (cur_filename),hl
042359 11 21 C4 04 3125*  	ld de,filedata
04235D 01 00 00 01 3126*  	ld bc,65536
042361 3E 01       3127*  	ld a,mos_load
042363 5B CF       3128*  	RST.LIL 08h
042365 21 A3 01 00 3129*  	ld hl,BUF_16_027
042369 01 0A 00 00 3130*  	ld bc,10
04236D 11 3E 00 00 3131*  	ld de,62
042371 DD 21 6C 02 3132*  	ld ix,620
       00          
042376 CD 4E B9 04 3133*  	call vdu_load_img
04237A C9          3134*  	ret
04237B             3135*  
04237B             3136*  ld_16_028:
04237B 21 81 42 04 3137*  	ld hl,F16_028
04237F 22 D3 B7 04 3138*  	ld (cur_filename),hl
042383 11 21 C4 04 3139*  	ld de,filedata
042387 01 00 00 01 3140*  	ld bc,65536
04238B 3E 01       3141*  	ld a,mos_load
04238D 5B CF       3142*  	RST.LIL 08h
04238F 21 A4 01 00 3143*  	ld hl,BUF_16_028
042393 01 1C 00 00 3144*  	ld bc,28
042397 11 40 00 00 3145*  	ld de,64
04239B DD 21 00 07 3146*  	ld ix,1792
       00          
0423A0 CD 4E B9 04 3147*  	call vdu_load_img
0423A4 C9          3148*  	ret
0423A5             3149*  
0423A5             3150*  ld_16_029:
0423A5 21 95 42 04 3151*  	ld hl,F16_029
0423A9 22 D3 B7 04 3152*  	ld (cur_filename),hl
0423AD 11 21 C4 04 3153*  	ld de,filedata
0423B1 01 00 00 01 3154*  	ld bc,65536
0423B5 3E 01       3155*  	ld a,mos_load
0423B7 5B CF       3156*  	RST.LIL 08h
0423B9 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423BD 01 2F 00 00 3158*  	ld bc,47
0423C1 11 40 00 00 3159*  	ld de,64
0423C5 DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423CA CD 4E B9 04 3161*  	call vdu_load_img
0423CE C9          3162*  	ret
0423CF             3163*  
0423CF             3164*  ld_16_032:
0423CF 21 A9 42 04 3165*  	ld hl,F16_032
0423D3 22 D3 B7 04 3166*  	ld (cur_filename),hl
0423D7 11 21 C4 04 3167*  	ld de,filedata
0423DB 01 00 00 01 3168*  	ld bc,65536
0423DF 3E 01       3169*  	ld a,mos_load
0423E1 5B CF       3170*  	RST.LIL 08h
0423E3 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E7 01 41 00 00 3172*  	ld bc,65
0423EB 11 40 00 00 3173*  	ld de,64
0423EF DD 21 40 10 3174*  	ld ix,4160
       00          
0423F4 CD 4E B9 04 3175*  	call vdu_load_img
0423F8 C9          3176*  	ret
0423F9             3177*  
0423F9             3178*  ld_16_035:
0423F9 21 BD 42 04 3179*  	ld hl,F16_035
0423FD 22 D3 B7 04 3180*  	ld (cur_filename),hl
042401 11 21 C4 04 3181*  	ld de,filedata
042405 01 00 00 01 3182*  	ld bc,65536
042409 3E 01       3183*  	ld a,mos_load
04240B 5B CF       3184*  	RST.LIL 08h
04240D 21 A7 01 00 3185*  	ld hl,BUF_16_035
042411 01 3F 00 00 3186*  	ld bc,63
042415 11 6B 00 00 3187*  	ld de,107
042419 DD 21 55 1A 3188*  	ld ix,6741
       00          
04241E CD 4E B9 04 3189*  	call vdu_load_img
042422 C9          3190*  	ret
042423             3191*  
042423             3192*  ld_16_036:
042423 21 D1 42 04 3193*  	ld hl,F16_036
042427 22 D3 B7 04 3194*  	ld (cur_filename),hl
04242B 11 21 C4 04 3195*  	ld de,filedata
04242F 01 00 00 01 3196*  	ld bc,65536
042433 3E 01       3197*  	ld a,mos_load
042435 5B CF       3198*  	RST.LIL 08h
042437 21 A8 01 00 3199*  	ld hl,BUF_16_036
04243B 01 16 00 00 3200*  	ld bc,22
04243F 11 6B 00 00 3201*  	ld de,107
042443 DD 21 32 09 3202*  	ld ix,2354
       00          
042448 CD 4E B9 04 3203*  	call vdu_load_img
04244C C9          3204*  	ret
04244D             3205*  
04244D             3206*  ld_16_037:
04244D 21 E5 42 04 3207*  	ld hl,F16_037
042451 22 D3 B7 04 3208*  	ld (cur_filename),hl
042455 11 21 C4 04 3209*  	ld de,filedata
042459 01 00 00 01 3210*  	ld bc,65536
04245D 3E 01       3211*  	ld a,mos_load
04245F 5B CF       3212*  	RST.LIL 08h
042461 21 A9 01 00 3213*  	ld hl,BUF_16_037
042465 01 15 00 00 3214*  	ld bc,21
042469 11 69 00 00 3215*  	ld de,105
04246D DD 21 9D 08 3216*  	ld ix,2205
       00          
042472 CD 4E B9 04 3217*  	call vdu_load_img
042476 C9          3218*  	ret
042477             3219*  
042477             3220*  ld_16_038:
042477 21 F9 42 04 3221*  	ld hl,F16_038
04247B 22 D3 B7 04 3222*  	ld (cur_filename),hl
04247F 11 21 C4 04 3223*  	ld de,filedata
042483 01 00 00 01 3224*  	ld bc,65536
042487 3E 01       3225*  	ld a,mos_load
042489 5B CF       3226*  	RST.LIL 08h
04248B 21 AA 01 00 3227*  	ld hl,BUF_16_038
04248F 01 3F 00 00 3228*  	ld bc,63
042493 11 6B 00 00 3229*  	ld de,107
042497 DD 21 55 1A 3230*  	ld ix,6741
       00          
04249C CD 4E B9 04 3231*  	call vdu_load_img
0424A0 C9          3232*  	ret
0424A1             3233*  
0424A1             3234*  ld_16_040:
0424A1 21 0D 43 04 3235*  	ld hl,F16_040
0424A5 22 D3 B7 04 3236*  	ld (cur_filename),hl
0424A9 11 21 C4 04 3237*  	ld de,filedata
0424AD 01 00 00 01 3238*  	ld bc,65536
0424B1 3E 01       3239*  	ld a,mos_load
0424B3 5B CF       3240*  	RST.LIL 08h
0424B5 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B9 01 6C 00 00 3242*  	ld bc,108
0424BD 11 6B 00 00 3243*  	ld de,107
0424C1 DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C6 CD 4E B9 04 3245*  	call vdu_load_img
0424CA C9          3246*  	ret
0424CB             3247*  
0424CB             3248*  ld_16_042:
0424CB 21 21 43 04 3249*  	ld hl,F16_042
0424CF 22 D3 B7 04 3250*  	ld (cur_filename),hl
0424D3 11 21 C4 04 3251*  	ld de,filedata
0424D7 01 00 00 01 3252*  	ld bc,65536
0424DB 3E 01       3253*  	ld a,mos_load
0424DD 5B CF       3254*  	RST.LIL 08h
0424DF 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424E3 01 6A 00 00 3256*  	ld bc,106
0424E7 11 A0 00 00 3257*  	ld de,160
0424EB DD 21 40 42 3258*  	ld ix,16960
       00          
0424F0 CD 4E B9 04 3259*  	call vdu_load_img
0424F4 C9          3260*  	ret
0424F5             3261*  
0424F5             3262*  ld_16_043:
0424F5 21 35 43 04 3263*  	ld hl,F16_043
0424F9 22 D3 B7 04 3264*  	ld (cur_filename),hl
0424FD 11 21 C4 04 3265*  	ld de,filedata
042501 01 00 00 01 3266*  	ld bc,65536
042505 3E 01       3267*  	ld a,mos_load
042507 5B CF       3268*  	RST.LIL 08h
042509 21 AD 01 00 3269*  	ld hl,BUF_16_043
04250D 01 6B 00 00 3270*  	ld bc,107
042511 11 A0 00 00 3271*  	ld de,160
042515 DD 21 E0 42 3272*  	ld ix,17120
       00          
04251A CD 4E B9 04 3273*  	call vdu_load_img
04251E C9          3274*  	ret
04251F             3275*  
04251F             3276*  ld_16_044:
04251F 21 49 43 04 3277*  	ld hl,F16_044
042523 22 D3 B7 04 3278*  	ld (cur_filename),hl
042527 11 21 C4 04 3279*  	ld de,filedata
04252B 01 00 00 01 3280*  	ld bc,65536
04252F 3E 01       3281*  	ld a,mos_load
042531 5B CF       3282*  	RST.LIL 08h
042533 21 AE 01 00 3283*  	ld hl,BUF_16_044
042537 01 40 01 00 3284*  	ld bc,320
04253B 11 A0 00 00 3285*  	ld de,160
04253F DD 21 00 C8 3286*  	ld ix,51200
       00          
042544 CD 4E B9 04 3287*  	call vdu_load_img
042548 C9          3288*  	ret
042549             3289*  
042549             3290*  ld_17_004:
042549 21 5D 43 04 3291*  	ld hl,F17_004
04254D 22 D3 B7 04 3292*  	ld (cur_filename),hl
042551 11 21 C4 04 3293*  	ld de,filedata
042555 01 00 00 01 3294*  	ld bc,65536
042559 3E 01       3295*  	ld a,mos_load
04255B 5B CF       3296*  	RST.LIL 08h
04255D 21 AF 01 00 3297*  	ld hl,BUF_17_004
042561 01 24 00 00 3298*  	ld bc,36
042565 11 23 00 00 3299*  	ld de,35
042569 DD 21 EC 04 3300*  	ld ix,1260
       00          
04256E CD 4E B9 04 3301*  	call vdu_load_img
042572 C9          3302*  	ret
042573             3303*  
042573             3304*  ld_17_009:
042573 21 71 43 04 3305*  	ld hl,F17_009
042577 22 D3 B7 04 3306*  	ld (cur_filename),hl
04257B 11 21 C4 04 3307*  	ld de,filedata
04257F 01 00 00 01 3308*  	ld bc,65536
042583 3E 01       3309*  	ld a,mos_load
042585 5B CF       3310*  	RST.LIL 08h
042587 21 B0 01 00 3311*  	ld hl,BUF_17_009
04258B 01 23 00 00 3312*  	ld bc,35
04258F 11 2D 00 00 3313*  	ld de,45
042593 DD 21 27 06 3314*  	ld ix,1575
       00          
042598 CD 4E B9 04 3315*  	call vdu_load_img
04259C C9          3316*  	ret
04259D             3317*  
04259D             3318*  ld_17_010:
04259D 21 85 43 04 3319*  	ld hl,F17_010
0425A1 22 D3 B7 04 3320*  	ld (cur_filename),hl
0425A5 11 21 C4 04 3321*  	ld de,filedata
0425A9 01 00 00 01 3322*  	ld bc,65536
0425AD 3E 01       3323*  	ld a,mos_load
0425AF 5B CF       3324*  	RST.LIL 08h
0425B1 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425B5 01 19 00 00 3326*  	ld bc,25
0425B9 11 2D 00 00 3327*  	ld de,45
0425BD DD 21 65 04 3328*  	ld ix,1125
       00          
0425C2 CD 4E B9 04 3329*  	call vdu_load_img
0425C6 C9          3330*  	ret
0425C7             3331*  
0425C7             3332*  ld_17_011:
0425C7 21 99 43 04 3333*  	ld hl,F17_011
0425CB 22 D3 B7 04 3334*  	ld (cur_filename),hl
0425CF 11 21 C4 04 3335*  	ld de,filedata
0425D3 01 00 00 01 3336*  	ld bc,65536
0425D7 3E 01       3337*  	ld a,mos_load
0425D9 5B CF       3338*  	RST.LIL 08h
0425DB 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425DF 01 0F 00 00 3340*  	ld bc,15
0425E3 11 2D 00 00 3341*  	ld de,45
0425E7 DD 21 A3 02 3342*  	ld ix,675
       00          
0425EC CD 4E B9 04 3343*  	call vdu_load_img
0425F0 C9          3344*  	ret
0425F1             3345*  
0425F1             3346*  ld_17_012:
0425F1 21 AD 43 04 3347*  	ld hl,F17_012
0425F5 22 D3 B7 04 3348*  	ld (cur_filename),hl
0425F9 11 21 C4 04 3349*  	ld de,filedata
0425FD 01 00 00 01 3350*  	ld bc,65536
042601 3E 01       3351*  	ld a,mos_load
042603 5B CF       3352*  	RST.LIL 08h
042605 21 B3 01 00 3353*  	ld hl,BUF_17_012
042609 01 05 00 00 3354*  	ld bc,5
04260D 11 2D 00 00 3355*  	ld de,45
042611 DD 21 E1 00 3356*  	ld ix,225
       00          
042616 CD 4E B9 04 3357*  	call vdu_load_img
04261A C9          3358*  	ret
04261B             3359*  
04261B             3360*  ld_17_013:
04261B 21 C1 43 04 3361*  	ld hl,F17_013
04261F 22 D3 B7 04 3362*  	ld (cur_filename),hl
042623 11 21 C4 04 3363*  	ld de,filedata
042627 01 00 00 01 3364*  	ld bc,65536
04262B 3E 01       3365*  	ld a,mos_load
04262D 5B CF       3366*  	RST.LIL 08h
04262F 21 B4 01 00 3367*  	ld hl,BUF_17_013
042633 01 05 00 00 3368*  	ld bc,5
042637 11 2B 00 00 3369*  	ld de,43
04263B DD 21 D7 00 3370*  	ld ix,215
       00          
042640 CD 4E B9 04 3371*  	call vdu_load_img
042644 C9          3372*  	ret
042645             3373*  
042645             3374*  ld_17_014:
042645 21 D5 43 04 3375*  	ld hl,F17_014
042649 22 D3 B7 04 3376*  	ld (cur_filename),hl
04264D 11 21 C4 04 3377*  	ld de,filedata
042651 01 00 00 01 3378*  	ld bc,65536
042655 3E 01       3379*  	ld a,mos_load
042657 5B CF       3380*  	RST.LIL 08h
042659 21 B5 01 00 3381*  	ld hl,BUF_17_014
04265D 01 0F 00 00 3382*  	ld bc,15
042661 11 2D 00 00 3383*  	ld de,45
042665 DD 21 A3 02 3384*  	ld ix,675
       00          
04266A CD 4E B9 04 3385*  	call vdu_load_img
04266E C9          3386*  	ret
04266F             3387*  
04266F             3388*  ld_17_015:
04266F 21 E9 43 04 3389*  	ld hl,F17_015
042673 22 D3 B7 04 3390*  	ld (cur_filename),hl
042677 11 21 C4 04 3391*  	ld de,filedata
04267B 01 00 00 01 3392*  	ld bc,65536
04267F 3E 01       3393*  	ld a,mos_load
042681 5B CF       3394*  	RST.LIL 08h
042683 21 B6 01 00 3395*  	ld hl,BUF_17_015
042687 01 19 00 00 3396*  	ld bc,25
04268B 11 2D 00 00 3397*  	ld de,45
04268F DD 21 65 04 3398*  	ld ix,1125
       00          
042694 CD 4E B9 04 3399*  	call vdu_load_img
042698 C9          3400*  	ret
042699             3401*  
042699             3402*  ld_17_016:
042699 21 FD 43 04 3403*  	ld hl,F17_016
04269D 22 D3 B7 04 3404*  	ld (cur_filename),hl
0426A1 11 21 C4 04 3405*  	ld de,filedata
0426A5 01 00 00 01 3406*  	ld bc,65536
0426A9 3E 01       3407*  	ld a,mos_load
0426AB 5B CF       3408*  	RST.LIL 08h
0426AD 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426B1 01 23 00 00 3410*  	ld bc,35
0426B5 11 2D 00 00 3411*  	ld de,45
0426B9 DD 21 27 06 3412*  	ld ix,1575
       00          
0426BE CD 4E B9 04 3413*  	call vdu_load_img
0426C2 C9          3414*  	ret
0426C3             3415*  
0426C3             3416*  ld_17_020:
0426C3 21 11 44 04 3417*  	ld hl,F17_020
0426C7 22 D3 B7 04 3418*  	ld (cur_filename),hl
0426CB 11 21 C4 04 3419*  	ld de,filedata
0426CF 01 00 00 01 3420*  	ld bc,65536
0426D3 3E 01       3421*  	ld a,mos_load
0426D5 5B CF       3422*  	RST.LIL 08h
0426D7 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426DB 01 2E 00 00 3424*  	ld bc,46
0426DF 11 2D 00 00 3425*  	ld de,45
0426E3 DD 21 16 08 3426*  	ld ix,2070
       00          
0426E8 CD 4E B9 04 3427*  	call vdu_load_img
0426EC C9          3428*  	ret
0426ED             3429*  
0426ED             3430*  ld_17_024:
0426ED 21 25 44 04 3431*  	ld hl,F17_024
0426F1 22 D3 B7 04 3432*  	ld (cur_filename),hl
0426F5 11 21 C4 04 3433*  	ld de,filedata
0426F9 01 00 00 01 3434*  	ld bc,65536
0426FD 3E 01       3435*  	ld a,mos_load
0426FF 5B CF       3436*  	RST.LIL 08h
042701 21 B9 01 00 3437*  	ld hl,BUF_17_024
042705 01 2E 00 00 3438*  	ld bc,46
042709 11 40 00 00 3439*  	ld de,64
04270D DD 21 80 0B 3440*  	ld ix,2944
       00          
042712 CD 4E B9 04 3441*  	call vdu_load_img
042716 C9          3442*  	ret
042717             3443*  
042717             3444*  ld_17_025:
042717 21 39 44 04 3445*  	ld hl,F17_025
04271B 22 D3 B7 04 3446*  	ld (cur_filename),hl
04271F 11 21 C4 04 3447*  	ld de,filedata
042723 01 00 00 01 3448*  	ld bc,65536
042727 3E 01       3449*  	ld a,mos_load
042729 5B CF       3450*  	RST.LIL 08h
04272B 21 BA 01 00 3451*  	ld hl,BUF_17_025
04272F 01 1C 00 00 3452*  	ld bc,28
042733 11 40 00 00 3453*  	ld de,64
042737 DD 21 00 07 3454*  	ld ix,1792
       00          
04273C CD 4E B9 04 3455*  	call vdu_load_img
042740 C9          3456*  	ret
042741             3457*  
042741             3458*  ld_17_026:
042741 21 4D 44 04 3459*  	ld hl,F17_026
042745 22 D3 B7 04 3460*  	ld (cur_filename),hl
042749 11 21 C4 04 3461*  	ld de,filedata
04274D 01 00 00 01 3462*  	ld bc,65536
042751 3E 01       3463*  	ld a,mos_load
042753 5B CF       3464*  	RST.LIL 08h
042755 21 BB 01 00 3465*  	ld hl,BUF_17_026
042759 01 09 00 00 3466*  	ld bc,9
04275D 11 40 00 00 3467*  	ld de,64
042761 DD 21 40 02 3468*  	ld ix,576
       00          
042766 CD 4E B9 04 3469*  	call vdu_load_img
04276A C9          3470*  	ret
04276B             3471*  
04276B             3472*  ld_17_027:
04276B 21 61 44 04 3473*  	ld hl,F17_027
04276F 22 D3 B7 04 3474*  	ld (cur_filename),hl
042773 11 21 C4 04 3475*  	ld de,filedata
042777 01 00 00 01 3476*  	ld bc,65536
04277B 3E 01       3477*  	ld a,mos_load
04277D 5B CF       3478*  	RST.LIL 08h
04277F 21 BC 01 00 3479*  	ld hl,BUF_17_027
042783 01 0A 00 00 3480*  	ld bc,10
042787 11 3E 00 00 3481*  	ld de,62
04278B DD 21 6C 02 3482*  	ld ix,620
       00          
042790 CD 4E B9 04 3483*  	call vdu_load_img
042794 C9          3484*  	ret
042795             3485*  
042795             3486*  ld_17_028:
042795 21 75 44 04 3487*  	ld hl,F17_028
042799 22 D3 B7 04 3488*  	ld (cur_filename),hl
04279D 11 21 C4 04 3489*  	ld de,filedata
0427A1 01 00 00 01 3490*  	ld bc,65536
0427A5 3E 01       3491*  	ld a,mos_load
0427A7 5B CF       3492*  	RST.LIL 08h
0427A9 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427AD 01 1C 00 00 3494*  	ld bc,28
0427B1 11 40 00 00 3495*  	ld de,64
0427B5 DD 21 00 07 3496*  	ld ix,1792
       00          
0427BA CD 4E B9 04 3497*  	call vdu_load_img
0427BE C9          3498*  	ret
0427BF             3499*  
0427BF             3500*  ld_17_029:
0427BF 21 89 44 04 3501*  	ld hl,F17_029
0427C3 22 D3 B7 04 3502*  	ld (cur_filename),hl
0427C7 11 21 C4 04 3503*  	ld de,filedata
0427CB 01 00 00 01 3504*  	ld bc,65536
0427CF 3E 01       3505*  	ld a,mos_load
0427D1 5B CF       3506*  	RST.LIL 08h
0427D3 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D7 01 2F 00 00 3508*  	ld bc,47
0427DB 11 40 00 00 3509*  	ld de,64
0427DF DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427E4 CD 4E B9 04 3511*  	call vdu_load_img
0427E8 C9          3512*  	ret
0427E9             3513*  
0427E9             3514*  ld_17_032:
0427E9 21 9D 44 04 3515*  	ld hl,F17_032
0427ED 22 D3 B7 04 3516*  	ld (cur_filename),hl
0427F1 11 21 C4 04 3517*  	ld de,filedata
0427F5 01 00 00 01 3518*  	ld bc,65536
0427F9 3E 01       3519*  	ld a,mos_load
0427FB 5B CF       3520*  	RST.LIL 08h
0427FD 21 BF 01 00 3521*  	ld hl,BUF_17_032
042801 01 41 00 00 3522*  	ld bc,65
042805 11 40 00 00 3523*  	ld de,64
042809 DD 21 40 10 3524*  	ld ix,4160
       00          
04280E CD 4E B9 04 3525*  	call vdu_load_img
042812 C9          3526*  	ret
042813             3527*  
042813             3528*  ld_17_035:
042813 21 B1 44 04 3529*  	ld hl,F17_035
042817 22 D3 B7 04 3530*  	ld (cur_filename),hl
04281B 11 21 C4 04 3531*  	ld de,filedata
04281F 01 00 00 01 3532*  	ld bc,65536
042823 3E 01       3533*  	ld a,mos_load
042825 5B CF       3534*  	RST.LIL 08h
042827 21 C0 01 00 3535*  	ld hl,BUF_17_035
04282B 01 3F 00 00 3536*  	ld bc,63
04282F 11 6B 00 00 3537*  	ld de,107
042833 DD 21 55 1A 3538*  	ld ix,6741
       00          
042838 CD 4E B9 04 3539*  	call vdu_load_img
04283C C9          3540*  	ret
04283D             3541*  
04283D             3542*  ld_17_036:
04283D 21 C5 44 04 3543*  	ld hl,F17_036
042841 22 D3 B7 04 3544*  	ld (cur_filename),hl
042845 11 21 C4 04 3545*  	ld de,filedata
042849 01 00 00 01 3546*  	ld bc,65536
04284D 3E 01       3547*  	ld a,mos_load
04284F 5B CF       3548*  	RST.LIL 08h
042851 21 C1 01 00 3549*  	ld hl,BUF_17_036
042855 01 16 00 00 3550*  	ld bc,22
042859 11 6B 00 00 3551*  	ld de,107
04285D DD 21 32 09 3552*  	ld ix,2354
       00          
042862 CD 4E B9 04 3553*  	call vdu_load_img
042866 C9          3554*  	ret
042867             3555*  
042867             3556*  ld_17_037:
042867 21 D9 44 04 3557*  	ld hl,F17_037
04286B 22 D3 B7 04 3558*  	ld (cur_filename),hl
04286F 11 21 C4 04 3559*  	ld de,filedata
042873 01 00 00 01 3560*  	ld bc,65536
042877 3E 01       3561*  	ld a,mos_load
042879 5B CF       3562*  	RST.LIL 08h
04287B 21 C2 01 00 3563*  	ld hl,BUF_17_037
04287F 01 15 00 00 3564*  	ld bc,21
042883 11 69 00 00 3565*  	ld de,105
042887 DD 21 9D 08 3566*  	ld ix,2205
       00          
04288C CD 4E B9 04 3567*  	call vdu_load_img
042890 C9          3568*  	ret
042891             3569*  
042891             3570*  ld_17_038:
042891 21 ED 44 04 3571*  	ld hl,F17_038
042895 22 D3 B7 04 3572*  	ld (cur_filename),hl
042899 11 21 C4 04 3573*  	ld de,filedata
04289D 01 00 00 01 3574*  	ld bc,65536
0428A1 3E 01       3575*  	ld a,mos_load
0428A3 5B CF       3576*  	RST.LIL 08h
0428A5 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A9 01 3F 00 00 3578*  	ld bc,63
0428AD 11 6B 00 00 3579*  	ld de,107
0428B1 DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B6 CD 4E B9 04 3581*  	call vdu_load_img
0428BA C9          3582*  	ret
0428BB             3583*  
0428BB             3584*  ld_17_040:
0428BB 21 01 45 04 3585*  	ld hl,F17_040
0428BF 22 D3 B7 04 3586*  	ld (cur_filename),hl
0428C3 11 21 C4 04 3587*  	ld de,filedata
0428C7 01 00 00 01 3588*  	ld bc,65536
0428CB 3E 01       3589*  	ld a,mos_load
0428CD 5B CF       3590*  	RST.LIL 08h
0428CF 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428D3 01 6C 00 00 3592*  	ld bc,108
0428D7 11 6B 00 00 3593*  	ld de,107
0428DB DD 21 24 2D 3594*  	ld ix,11556
       00          
0428E0 CD 4E B9 04 3595*  	call vdu_load_img
0428E4 C9          3596*  	ret
0428E5             3597*  
0428E5             3598*  ld_17_042:
0428E5 21 15 45 04 3599*  	ld hl,F17_042
0428E9 22 D3 B7 04 3600*  	ld (cur_filename),hl
0428ED 11 21 C4 04 3601*  	ld de,filedata
0428F1 01 00 00 01 3602*  	ld bc,65536
0428F5 3E 01       3603*  	ld a,mos_load
0428F7 5B CF       3604*  	RST.LIL 08h
0428F9 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428FD 01 6A 00 00 3606*  	ld bc,106
042901 11 A0 00 00 3607*  	ld de,160
042905 DD 21 40 42 3608*  	ld ix,16960
       00          
04290A CD 4E B9 04 3609*  	call vdu_load_img
04290E C9          3610*  	ret
04290F             3611*  
04290F             3612*  ld_17_043:
04290F 21 29 45 04 3613*  	ld hl,F17_043
042913 22 D3 B7 04 3614*  	ld (cur_filename),hl
042917 11 21 C4 04 3615*  	ld de,filedata
04291B 01 00 00 01 3616*  	ld bc,65536
04291F 3E 01       3617*  	ld a,mos_load
042921 5B CF       3618*  	RST.LIL 08h
042923 21 C6 01 00 3619*  	ld hl,BUF_17_043
042927 01 6B 00 00 3620*  	ld bc,107
04292B 11 A0 00 00 3621*  	ld de,160
04292F DD 21 E0 42 3622*  	ld ix,17120
       00          
042934 CD 4E B9 04 3623*  	call vdu_load_img
042938 C9          3624*  	ret
042939             3625*  
042939             3626*  ld_17_044:
042939 21 3D 45 04 3627*  	ld hl,F17_044
04293D 22 D3 B7 04 3628*  	ld (cur_filename),hl
042941 11 21 C4 04 3629*  	ld de,filedata
042945 01 00 00 01 3630*  	ld bc,65536
042949 3E 01       3631*  	ld a,mos_load
04294B 5B CF       3632*  	RST.LIL 08h
04294D 21 C7 01 00 3633*  	ld hl,BUF_17_044
042951 01 40 01 00 3634*  	ld bc,320
042955 11 A0 00 00 3635*  	ld de,160
042959 DD 21 00 C8 3636*  	ld ix,51200
       00          
04295E CD 4E B9 04 3637*  	call vdu_load_img
042962 C9          3638*  	ret
042963             3639*  
042963             3640*  ld_57_004:
042963 21 51 45 04 3641*  	ld hl,F57_004
042967 22 D3 B7 04 3642*  	ld (cur_filename),hl
04296B 11 21 C4 04 3643*  	ld de,filedata
04296F 01 00 00 01 3644*  	ld bc,65536
042973 3E 01       3645*  	ld a,mos_load
042975 5B CF       3646*  	RST.LIL 08h
042977 21 C8 01 00 3647*  	ld hl,BUF_57_004
04297B 01 24 00 00 3648*  	ld bc,36
04297F 11 23 00 00 3649*  	ld de,35
042983 DD 21 EC 04 3650*  	ld ix,1260
       00          
042988 CD 4E B9 04 3651*  	call vdu_load_img
04298C C9          3652*  	ret
04298D             3653*  
04298D             3654*  ld_57_009:
04298D 21 65 45 04 3655*  	ld hl,F57_009
042991 22 D3 B7 04 3656*  	ld (cur_filename),hl
042995 11 21 C4 04 3657*  	ld de,filedata
042999 01 00 00 01 3658*  	ld bc,65536
04299D 3E 01       3659*  	ld a,mos_load
04299F 5B CF       3660*  	RST.LIL 08h
0429A1 21 C9 01 00 3661*  	ld hl,BUF_57_009
0429A5 01 23 00 00 3662*  	ld bc,35
0429A9 11 2D 00 00 3663*  	ld de,45
0429AD DD 21 27 06 3664*  	ld ix,1575
       00          
0429B2 CD 4E B9 04 3665*  	call vdu_load_img
0429B6 C9          3666*  	ret
0429B7             3667*  
0429B7             3668*  ld_57_010:
0429B7 21 79 45 04 3669*  	ld hl,F57_010
0429BB 22 D3 B7 04 3670*  	ld (cur_filename),hl
0429BF 11 21 C4 04 3671*  	ld de,filedata
0429C3 01 00 00 01 3672*  	ld bc,65536
0429C7 3E 01       3673*  	ld a,mos_load
0429C9 5B CF       3674*  	RST.LIL 08h
0429CB 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429CF 01 19 00 00 3676*  	ld bc,25
0429D3 11 2D 00 00 3677*  	ld de,45
0429D7 DD 21 65 04 3678*  	ld ix,1125
       00          
0429DC CD 4E B9 04 3679*  	call vdu_load_img
0429E0 C9          3680*  	ret
0429E1             3681*  
0429E1             3682*  ld_57_011:
0429E1 21 8D 45 04 3683*  	ld hl,F57_011
0429E5 22 D3 B7 04 3684*  	ld (cur_filename),hl
0429E9 11 21 C4 04 3685*  	ld de,filedata
0429ED 01 00 00 01 3686*  	ld bc,65536
0429F1 3E 01       3687*  	ld a,mos_load
0429F3 5B CF       3688*  	RST.LIL 08h
0429F5 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F9 01 0F 00 00 3690*  	ld bc,15
0429FD 11 2D 00 00 3691*  	ld de,45
042A01 DD 21 A3 02 3692*  	ld ix,675
       00          
042A06 CD 4E B9 04 3693*  	call vdu_load_img
042A0A C9          3694*  	ret
042A0B             3695*  
042A0B             3696*  ld_57_012:
042A0B 21 A1 45 04 3697*  	ld hl,F57_012
042A0F 22 D3 B7 04 3698*  	ld (cur_filename),hl
042A13 11 21 C4 04 3699*  	ld de,filedata
042A17 01 00 00 01 3700*  	ld bc,65536
042A1B 3E 01       3701*  	ld a,mos_load
042A1D 5B CF       3702*  	RST.LIL 08h
042A1F 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A23 01 05 00 00 3704*  	ld bc,5
042A27 11 2D 00 00 3705*  	ld de,45
042A2B DD 21 E1 00 3706*  	ld ix,225
       00          
042A30 CD 4E B9 04 3707*  	call vdu_load_img
042A34 C9          3708*  	ret
042A35             3709*  
042A35             3710*  ld_57_013:
042A35 21 B5 45 04 3711*  	ld hl,F57_013
042A39 22 D3 B7 04 3712*  	ld (cur_filename),hl
042A3D 11 21 C4 04 3713*  	ld de,filedata
042A41 01 00 00 01 3714*  	ld bc,65536
042A45 3E 01       3715*  	ld a,mos_load
042A47 5B CF       3716*  	RST.LIL 08h
042A49 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A4D 01 05 00 00 3718*  	ld bc,5
042A51 11 2B 00 00 3719*  	ld de,43
042A55 DD 21 D7 00 3720*  	ld ix,215
       00          
042A5A CD 4E B9 04 3721*  	call vdu_load_img
042A5E C9          3722*  	ret
042A5F             3723*  
042A5F             3724*  ld_57_014:
042A5F 21 C9 45 04 3725*  	ld hl,F57_014
042A63 22 D3 B7 04 3726*  	ld (cur_filename),hl
042A67 11 21 C4 04 3727*  	ld de,filedata
042A6B 01 00 00 01 3728*  	ld bc,65536
042A6F 3E 01       3729*  	ld a,mos_load
042A71 5B CF       3730*  	RST.LIL 08h
042A73 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A77 01 0F 00 00 3732*  	ld bc,15
042A7B 11 2D 00 00 3733*  	ld de,45
042A7F DD 21 A3 02 3734*  	ld ix,675
       00          
042A84 CD 4E B9 04 3735*  	call vdu_load_img
042A88 C9          3736*  	ret
042A89             3737*  
042A89             3738*  ld_57_015:
042A89 21 DD 45 04 3739*  	ld hl,F57_015
042A8D 22 D3 B7 04 3740*  	ld (cur_filename),hl
042A91 11 21 C4 04 3741*  	ld de,filedata
042A95 01 00 00 01 3742*  	ld bc,65536
042A99 3E 01       3743*  	ld a,mos_load
042A9B 5B CF       3744*  	RST.LIL 08h
042A9D 21 CF 01 00 3745*  	ld hl,BUF_57_015
042AA1 01 19 00 00 3746*  	ld bc,25
042AA5 11 2D 00 00 3747*  	ld de,45
042AA9 DD 21 65 04 3748*  	ld ix,1125
       00          
042AAE CD 4E B9 04 3749*  	call vdu_load_img
042AB2 C9          3750*  	ret
042AB3             3751*  
042AB3             3752*  ld_57_016:
042AB3 21 F1 45 04 3753*  	ld hl,F57_016
042AB7 22 D3 B7 04 3754*  	ld (cur_filename),hl
042ABB 11 21 C4 04 3755*  	ld de,filedata
042ABF 01 00 00 01 3756*  	ld bc,65536
042AC3 3E 01       3757*  	ld a,mos_load
042AC5 5B CF       3758*  	RST.LIL 08h
042AC7 21 D0 01 00 3759*  	ld hl,BUF_57_016
042ACB 01 23 00 00 3760*  	ld bc,35
042ACF 11 2D 00 00 3761*  	ld de,45
042AD3 DD 21 27 06 3762*  	ld ix,1575
       00          
042AD8 CD 4E B9 04 3763*  	call vdu_load_img
042ADC C9          3764*  	ret
042ADD             3765*  
042ADD             3766*  ld_57_020:
042ADD 21 05 46 04 3767*  	ld hl,F57_020
042AE1 22 D3 B7 04 3768*  	ld (cur_filename),hl
042AE5 11 21 C4 04 3769*  	ld de,filedata
042AE9 01 00 00 01 3770*  	ld bc,65536
042AED 3E 01       3771*  	ld a,mos_load
042AEF 5B CF       3772*  	RST.LIL 08h
042AF1 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AF5 01 2E 00 00 3774*  	ld bc,46
042AF9 11 2D 00 00 3775*  	ld de,45
042AFD DD 21 16 08 3776*  	ld ix,2070
       00          
042B02 CD 4E B9 04 3777*  	call vdu_load_img
042B06 C9          3778*  	ret
042B07             3779*  
042B07             3780*  ld_57_024:
042B07 21 19 46 04 3781*  	ld hl,F57_024
042B0B 22 D3 B7 04 3782*  	ld (cur_filename),hl
042B0F 11 21 C4 04 3783*  	ld de,filedata
042B13 01 00 00 01 3784*  	ld bc,65536
042B17 3E 01       3785*  	ld a,mos_load
042B19 5B CF       3786*  	RST.LIL 08h
042B1B 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B1F 01 2E 00 00 3788*  	ld bc,46
042B23 11 40 00 00 3789*  	ld de,64
042B27 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B2C CD 4E B9 04 3791*  	call vdu_load_img
042B30 C9          3792*  	ret
042B31             3793*  
042B31             3794*  ld_57_025:
042B31 21 2D 46 04 3795*  	ld hl,F57_025
042B35 22 D3 B7 04 3796*  	ld (cur_filename),hl
042B39 11 21 C4 04 3797*  	ld de,filedata
042B3D 01 00 00 01 3798*  	ld bc,65536
042B41 3E 01       3799*  	ld a,mos_load
042B43 5B CF       3800*  	RST.LIL 08h
042B45 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B49 01 1C 00 00 3802*  	ld bc,28
042B4D 11 40 00 00 3803*  	ld de,64
042B51 DD 21 00 07 3804*  	ld ix,1792
       00          
042B56 CD 4E B9 04 3805*  	call vdu_load_img
042B5A C9          3806*  	ret
042B5B             3807*  
042B5B             3808*  ld_57_026:
042B5B 21 41 46 04 3809*  	ld hl,F57_026
042B5F 22 D3 B7 04 3810*  	ld (cur_filename),hl
042B63 11 21 C4 04 3811*  	ld de,filedata
042B67 01 00 00 01 3812*  	ld bc,65536
042B6B 3E 01       3813*  	ld a,mos_load
042B6D 5B CF       3814*  	RST.LIL 08h
042B6F 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B73 01 09 00 00 3816*  	ld bc,9
042B77 11 40 00 00 3817*  	ld de,64
042B7B DD 21 40 02 3818*  	ld ix,576
       00          
042B80 CD 4E B9 04 3819*  	call vdu_load_img
042B84 C9          3820*  	ret
042B85             3821*  
042B85             3822*  ld_57_027:
042B85 21 55 46 04 3823*  	ld hl,F57_027
042B89 22 D3 B7 04 3824*  	ld (cur_filename),hl
042B8D 11 21 C4 04 3825*  	ld de,filedata
042B91 01 00 00 01 3826*  	ld bc,65536
042B95 3E 01       3827*  	ld a,mos_load
042B97 5B CF       3828*  	RST.LIL 08h
042B99 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B9D 01 0A 00 00 3830*  	ld bc,10
042BA1 11 3E 00 00 3831*  	ld de,62
042BA5 DD 21 6C 02 3832*  	ld ix,620
       00          
042BAA CD 4E B9 04 3833*  	call vdu_load_img
042BAE C9          3834*  	ret
042BAF             3835*  
042BAF             3836*  ld_57_028:
042BAF 21 69 46 04 3837*  	ld hl,F57_028
042BB3 22 D3 B7 04 3838*  	ld (cur_filename),hl
042BB7 11 21 C4 04 3839*  	ld de,filedata
042BBB 01 00 00 01 3840*  	ld bc,65536
042BBF 3E 01       3841*  	ld a,mos_load
042BC1 5B CF       3842*  	RST.LIL 08h
042BC3 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC7 01 1C 00 00 3844*  	ld bc,28
042BCB 11 40 00 00 3845*  	ld de,64
042BCF DD 21 00 07 3846*  	ld ix,1792
       00          
042BD4 CD 4E B9 04 3847*  	call vdu_load_img
042BD8 C9          3848*  	ret
042BD9             3849*  
042BD9             3850*  ld_57_029:
042BD9 21 7D 46 04 3851*  	ld hl,F57_029
042BDD 22 D3 B7 04 3852*  	ld (cur_filename),hl
042BE1 11 21 C4 04 3853*  	ld de,filedata
042BE5 01 00 00 01 3854*  	ld bc,65536
042BE9 3E 01       3855*  	ld a,mos_load
042BEB 5B CF       3856*  	RST.LIL 08h
042BED 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BF1 01 2F 00 00 3858*  	ld bc,47
042BF5 11 40 00 00 3859*  	ld de,64
042BF9 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BFE CD 4E B9 04 3861*  	call vdu_load_img
042C02 C9          3862*  	ret
042C03             3863*  
042C03             3864*  ld_57_032:
042C03 21 91 46 04 3865*  	ld hl,F57_032
042C07 22 D3 B7 04 3866*  	ld (cur_filename),hl
042C0B 11 21 C4 04 3867*  	ld de,filedata
042C0F 01 00 00 01 3868*  	ld bc,65536
042C13 3E 01       3869*  	ld a,mos_load
042C15 5B CF       3870*  	RST.LIL 08h
042C17 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C1B 01 41 00 00 3872*  	ld bc,65
042C1F 11 40 00 00 3873*  	ld de,64
042C23 DD 21 40 10 3874*  	ld ix,4160
       00          
042C28 CD 4E B9 04 3875*  	call vdu_load_img
042C2C C9          3876*  	ret
042C2D             3877*  
042C2D             3878*  ld_57_035:
042C2D 21 A5 46 04 3879*  	ld hl,F57_035
042C31 22 D3 B7 04 3880*  	ld (cur_filename),hl
042C35 11 21 C4 04 3881*  	ld de,filedata
042C39 01 00 00 01 3882*  	ld bc,65536
042C3D 3E 01       3883*  	ld a,mos_load
042C3F 5B CF       3884*  	RST.LIL 08h
042C41 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C45 01 3F 00 00 3886*  	ld bc,63
042C49 11 6B 00 00 3887*  	ld de,107
042C4D DD 21 55 1A 3888*  	ld ix,6741
       00          
042C52 CD 4E B9 04 3889*  	call vdu_load_img
042C56 C9          3890*  	ret
042C57             3891*  
042C57             3892*  ld_57_036:
042C57 21 B9 46 04 3893*  	ld hl,F57_036
042C5B 22 D3 B7 04 3894*  	ld (cur_filename),hl
042C5F 11 21 C4 04 3895*  	ld de,filedata
042C63 01 00 00 01 3896*  	ld bc,65536
042C67 3E 01       3897*  	ld a,mos_load
042C69 5B CF       3898*  	RST.LIL 08h
042C6B 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C6F 01 16 00 00 3900*  	ld bc,22
042C73 11 6B 00 00 3901*  	ld de,107
042C77 DD 21 32 09 3902*  	ld ix,2354
       00          
042C7C CD 4E B9 04 3903*  	call vdu_load_img
042C80 C9          3904*  	ret
042C81             3905*  
042C81             3906*  ld_57_037:
042C81 21 CD 46 04 3907*  	ld hl,F57_037
042C85 22 D3 B7 04 3908*  	ld (cur_filename),hl
042C89 11 21 C4 04 3909*  	ld de,filedata
042C8D 01 00 00 01 3910*  	ld bc,65536
042C91 3E 01       3911*  	ld a,mos_load
042C93 5B CF       3912*  	RST.LIL 08h
042C95 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C99 01 15 00 00 3914*  	ld bc,21
042C9D 11 69 00 00 3915*  	ld de,105
042CA1 DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA6 CD 4E B9 04 3917*  	call vdu_load_img
042CAA C9          3918*  	ret
042CAB             3919*  
042CAB             3920*  ld_57_038:
042CAB 21 E1 46 04 3921*  	ld hl,F57_038
042CAF 22 D3 B7 04 3922*  	ld (cur_filename),hl
042CB3 11 21 C4 04 3923*  	ld de,filedata
042CB7 01 00 00 01 3924*  	ld bc,65536
042CBB 3E 01       3925*  	ld a,mos_load
042CBD 5B CF       3926*  	RST.LIL 08h
042CBF 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CC3 01 3F 00 00 3928*  	ld bc,63
042CC7 11 6B 00 00 3929*  	ld de,107
042CCB DD 21 55 1A 3930*  	ld ix,6741
       00          
042CD0 CD 4E B9 04 3931*  	call vdu_load_img
042CD4 C9          3932*  	ret
042CD5             3933*  
042CD5             3934*  ld_57_040:
042CD5 21 F5 46 04 3935*  	ld hl,F57_040
042CD9 22 D3 B7 04 3936*  	ld (cur_filename),hl
042CDD 11 21 C4 04 3937*  	ld de,filedata
042CE1 01 00 00 01 3938*  	ld bc,65536
042CE5 3E 01       3939*  	ld a,mos_load
042CE7 5B CF       3940*  	RST.LIL 08h
042CE9 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CED 01 6C 00 00 3942*  	ld bc,108
042CF1 11 6B 00 00 3943*  	ld de,107
042CF5 DD 21 24 2D 3944*  	ld ix,11556
       00          
042CFA CD 4E B9 04 3945*  	call vdu_load_img
042CFE C9          3946*  	ret
042CFF             3947*  
042CFF             3948*  ld_57_042:
042CFF 21 09 47 04 3949*  	ld hl,F57_042
042D03 22 D3 B7 04 3950*  	ld (cur_filename),hl
042D07 11 21 C4 04 3951*  	ld de,filedata
042D0B 01 00 00 01 3952*  	ld bc,65536
042D0F 3E 01       3953*  	ld a,mos_load
042D11 5B CF       3954*  	RST.LIL 08h
042D13 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D17 01 6A 00 00 3956*  	ld bc,106
042D1B 11 A0 00 00 3957*  	ld de,160
042D1F DD 21 40 42 3958*  	ld ix,16960
       00          
042D24 CD 4E B9 04 3959*  	call vdu_load_img
042D28 C9          3960*  	ret
042D29             3961*  
042D29             3962*  ld_57_043:
042D29 21 1D 47 04 3963*  	ld hl,F57_043
042D2D 22 D3 B7 04 3964*  	ld (cur_filename),hl
042D31 11 21 C4 04 3965*  	ld de,filedata
042D35 01 00 00 01 3966*  	ld bc,65536
042D39 3E 01       3967*  	ld a,mos_load
042D3B 5B CF       3968*  	RST.LIL 08h
042D3D 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D41 01 6B 00 00 3970*  	ld bc,107
042D45 11 A0 00 00 3971*  	ld de,160
042D49 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D4E CD 4E B9 04 3973*  	call vdu_load_img
042D52 C9          3974*  	ret
042D53             3975*  
042D53             3976*  ld_57_044:
042D53 21 31 47 04 3977*  	ld hl,F57_044
042D57 22 D3 B7 04 3978*  	ld (cur_filename),hl
042D5B 11 21 C4 04 3979*  	ld de,filedata
042D5F 01 00 00 01 3980*  	ld bc,65536
042D63 3E 01       3981*  	ld a,mos_load
042D65 5B CF       3982*  	RST.LIL 08h
042D67 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D6B 01 40 01 00 3984*  	ld bc,320
042D6F 11 A0 00 00 3985*  	ld de,160
042D73 DD 21 00 C8 3986*  	ld ix,51200
       00          
042D78 CD 4E B9 04 3987*  	call vdu_load_img
042D7C C9          3988*  	ret
042D7D             3989*  
042D7D             3990*  ld_58_004:
042D7D 21 45 47 04 3991*  	ld hl,F58_004
042D81 22 D3 B7 04 3992*  	ld (cur_filename),hl
042D85 11 21 C4 04 3993*  	ld de,filedata
042D89 01 00 00 01 3994*  	ld bc,65536
042D8D 3E 01       3995*  	ld a,mos_load
042D8F 5B CF       3996*  	RST.LIL 08h
042D91 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D95 01 24 00 00 3998*  	ld bc,36
042D99 11 23 00 00 3999*  	ld de,35
042D9D DD 21 EC 04 4000*  	ld ix,1260
       00          
042DA2 CD 4E B9 04 4001*  	call vdu_load_img
042DA6 C9          4002*  	ret
042DA7             4003*  
042DA7             4004*  ld_58_009:
042DA7 21 59 47 04 4005*  	ld hl,F58_009
042DAB 22 D3 B7 04 4006*  	ld (cur_filename),hl
042DAF 11 21 C4 04 4007*  	ld de,filedata
042DB3 01 00 00 01 4008*  	ld bc,65536
042DB7 3E 01       4009*  	ld a,mos_load
042DB9 5B CF       4010*  	RST.LIL 08h
042DBB 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DBF 01 23 00 00 4012*  	ld bc,35
042DC3 11 2D 00 00 4013*  	ld de,45
042DC7 DD 21 27 06 4014*  	ld ix,1575
       00          
042DCC CD 4E B9 04 4015*  	call vdu_load_img
042DD0 C9          4016*  	ret
042DD1             4017*  
042DD1             4018*  ld_58_010:
042DD1 21 6D 47 04 4019*  	ld hl,F58_010
042DD5 22 D3 B7 04 4020*  	ld (cur_filename),hl
042DD9 11 21 C4 04 4021*  	ld de,filedata
042DDD 01 00 00 01 4022*  	ld bc,65536
042DE1 3E 01       4023*  	ld a,mos_load
042DE3 5B CF       4024*  	RST.LIL 08h
042DE5 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE9 01 19 00 00 4026*  	ld bc,25
042DED 11 2D 00 00 4027*  	ld de,45
042DF1 DD 21 65 04 4028*  	ld ix,1125
       00          
042DF6 CD 4E B9 04 4029*  	call vdu_load_img
042DFA C9          4030*  	ret
042DFB             4031*  
042DFB             4032*  ld_58_011:
042DFB 21 81 47 04 4033*  	ld hl,F58_011
042DFF 22 D3 B7 04 4034*  	ld (cur_filename),hl
042E03 11 21 C4 04 4035*  	ld de,filedata
042E07 01 00 00 01 4036*  	ld bc,65536
042E0B 3E 01       4037*  	ld a,mos_load
042E0D 5B CF       4038*  	RST.LIL 08h
042E0F 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E13 01 0F 00 00 4040*  	ld bc,15
042E17 11 2D 00 00 4041*  	ld de,45
042E1B DD 21 A3 02 4042*  	ld ix,675
       00          
042E20 CD 4E B9 04 4043*  	call vdu_load_img
042E24 C9          4044*  	ret
042E25             4045*  
042E25             4046*  ld_58_012:
042E25 21 95 47 04 4047*  	ld hl,F58_012
042E29 22 D3 B7 04 4048*  	ld (cur_filename),hl
042E2D 11 21 C4 04 4049*  	ld de,filedata
042E31 01 00 00 01 4050*  	ld bc,65536
042E35 3E 01       4051*  	ld a,mos_load
042E37 5B CF       4052*  	RST.LIL 08h
042E39 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E3D 01 05 00 00 4054*  	ld bc,5
042E41 11 2D 00 00 4055*  	ld de,45
042E45 DD 21 E1 00 4056*  	ld ix,225
       00          
042E4A CD 4E B9 04 4057*  	call vdu_load_img
042E4E C9          4058*  	ret
042E4F             4059*  
042E4F             4060*  ld_58_013:
042E4F 21 A9 47 04 4061*  	ld hl,F58_013
042E53 22 D3 B7 04 4062*  	ld (cur_filename),hl
042E57 11 21 C4 04 4063*  	ld de,filedata
042E5B 01 00 00 01 4064*  	ld bc,65536
042E5F 3E 01       4065*  	ld a,mos_load
042E61 5B CF       4066*  	RST.LIL 08h
042E63 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E67 01 05 00 00 4068*  	ld bc,5
042E6B 11 2B 00 00 4069*  	ld de,43
042E6F DD 21 D7 00 4070*  	ld ix,215
       00          
042E74 CD 4E B9 04 4071*  	call vdu_load_img
042E78 C9          4072*  	ret
042E79             4073*  
042E79             4074*  ld_58_014:
042E79 21 BD 47 04 4075*  	ld hl,F58_014
042E7D 22 D3 B7 04 4076*  	ld (cur_filename),hl
042E81 11 21 C4 04 4077*  	ld de,filedata
042E85 01 00 00 01 4078*  	ld bc,65536
042E89 3E 01       4079*  	ld a,mos_load
042E8B 5B CF       4080*  	RST.LIL 08h
042E8D 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E91 01 0F 00 00 4082*  	ld bc,15
042E95 11 2D 00 00 4083*  	ld de,45
042E99 DD 21 A3 02 4084*  	ld ix,675
       00          
042E9E CD 4E B9 04 4085*  	call vdu_load_img
042EA2 C9          4086*  	ret
042EA3             4087*  
042EA3             4088*  ld_58_015:
042EA3 21 D1 47 04 4089*  	ld hl,F58_015
042EA7 22 D3 B7 04 4090*  	ld (cur_filename),hl
042EAB 11 21 C4 04 4091*  	ld de,filedata
042EAF 01 00 00 01 4092*  	ld bc,65536
042EB3 3E 01       4093*  	ld a,mos_load
042EB5 5B CF       4094*  	RST.LIL 08h
042EB7 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EBB 01 19 00 00 4096*  	ld bc,25
042EBF 11 2D 00 00 4097*  	ld de,45
042EC3 DD 21 65 04 4098*  	ld ix,1125
       00          
042EC8 CD 4E B9 04 4099*  	call vdu_load_img
042ECC C9          4100*  	ret
042ECD             4101*  
042ECD             4102*  ld_58_016:
042ECD 21 E5 47 04 4103*  	ld hl,F58_016
042ED1 22 D3 B7 04 4104*  	ld (cur_filename),hl
042ED5 11 21 C4 04 4105*  	ld de,filedata
042ED9 01 00 00 01 4106*  	ld bc,65536
042EDD 3E 01       4107*  	ld a,mos_load
042EDF 5B CF       4108*  	RST.LIL 08h
042EE1 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EE5 01 23 00 00 4110*  	ld bc,35
042EE9 11 2D 00 00 4111*  	ld de,45
042EED DD 21 27 06 4112*  	ld ix,1575
       00          
042EF2 CD 4E B9 04 4113*  	call vdu_load_img
042EF6 C9          4114*  	ret
042EF7             4115*  
042EF7             4116*  ld_58_020:
042EF7 21 F9 47 04 4117*  	ld hl,F58_020
042EFB 22 D3 B7 04 4118*  	ld (cur_filename),hl
042EFF 11 21 C4 04 4119*  	ld de,filedata
042F03 01 00 00 01 4120*  	ld bc,65536
042F07 3E 01       4121*  	ld a,mos_load
042F09 5B CF       4122*  	RST.LIL 08h
042F0B 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F0F 01 2E 00 00 4124*  	ld bc,46
042F13 11 2D 00 00 4125*  	ld de,45
042F17 DD 21 16 08 4126*  	ld ix,2070
       00          
042F1C CD 4E B9 04 4127*  	call vdu_load_img
042F20 C9          4128*  	ret
042F21             4129*  
042F21             4130*  ld_58_024:
042F21 21 0D 48 04 4131*  	ld hl,F58_024
042F25 22 D3 B7 04 4132*  	ld (cur_filename),hl
042F29 11 21 C4 04 4133*  	ld de,filedata
042F2D 01 00 00 01 4134*  	ld bc,65536
042F31 3E 01       4135*  	ld a,mos_load
042F33 5B CF       4136*  	RST.LIL 08h
042F35 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F39 01 2E 00 00 4138*  	ld bc,46
042F3D 11 40 00 00 4139*  	ld de,64
042F41 DD 21 80 0B 4140*  	ld ix,2944
       00          
042F46 CD 4E B9 04 4141*  	call vdu_load_img
042F4A C9          4142*  	ret
042F4B             4143*  
042F4B             4144*  ld_58_025:
042F4B 21 21 48 04 4145*  	ld hl,F58_025
042F4F 22 D3 B7 04 4146*  	ld (cur_filename),hl
042F53 11 21 C4 04 4147*  	ld de,filedata
042F57 01 00 00 01 4148*  	ld bc,65536
042F5B 3E 01       4149*  	ld a,mos_load
042F5D 5B CF       4150*  	RST.LIL 08h
042F5F 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F63 01 1C 00 00 4152*  	ld bc,28
042F67 11 40 00 00 4153*  	ld de,64
042F6B DD 21 00 07 4154*  	ld ix,1792
       00          
042F70 CD 4E B9 04 4155*  	call vdu_load_img
042F74 C9          4156*  	ret
042F75             4157*  
042F75             4158*  ld_58_026:
042F75 21 35 48 04 4159*  	ld hl,F58_026
042F79 22 D3 B7 04 4160*  	ld (cur_filename),hl
042F7D 11 21 C4 04 4161*  	ld de,filedata
042F81 01 00 00 01 4162*  	ld bc,65536
042F85 3E 01       4163*  	ld a,mos_load
042F87 5B CF       4164*  	RST.LIL 08h
042F89 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F8D 01 09 00 00 4166*  	ld bc,9
042F91 11 40 00 00 4167*  	ld de,64
042F95 DD 21 40 02 4168*  	ld ix,576
       00          
042F9A CD 4E B9 04 4169*  	call vdu_load_img
042F9E C9          4170*  	ret
042F9F             4171*  
042F9F             4172*  ld_58_027:
042F9F 21 49 48 04 4173*  	ld hl,F58_027
042FA3 22 D3 B7 04 4174*  	ld (cur_filename),hl
042FA7 11 21 C4 04 4175*  	ld de,filedata
042FAB 01 00 00 01 4176*  	ld bc,65536
042FAF 3E 01       4177*  	ld a,mos_load
042FB1 5B CF       4178*  	RST.LIL 08h
042FB3 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB7 01 0A 00 00 4180*  	ld bc,10
042FBB 11 3E 00 00 4181*  	ld de,62
042FBF DD 21 6C 02 4182*  	ld ix,620
       00          
042FC4 CD 4E B9 04 4183*  	call vdu_load_img
042FC8 C9          4184*  	ret
042FC9             4185*  
042FC9             4186*  ld_58_028:
042FC9 21 5D 48 04 4187*  	ld hl,F58_028
042FCD 22 D3 B7 04 4188*  	ld (cur_filename),hl
042FD1 11 21 C4 04 4189*  	ld de,filedata
042FD5 01 00 00 01 4190*  	ld bc,65536
042FD9 3E 01       4191*  	ld a,mos_load
042FDB 5B CF       4192*  	RST.LIL 08h
042FDD 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FE1 01 1C 00 00 4194*  	ld bc,28
042FE5 11 40 00 00 4195*  	ld de,64
042FE9 DD 21 00 07 4196*  	ld ix,1792
       00          
042FEE CD 4E B9 04 4197*  	call vdu_load_img
042FF2 C9          4198*  	ret
042FF3             4199*  
042FF3             4200*  ld_58_029:
042FF3 21 71 48 04 4201*  	ld hl,F58_029
042FF7 22 D3 B7 04 4202*  	ld (cur_filename),hl
042FFB 11 21 C4 04 4203*  	ld de,filedata
042FFF 01 00 00 01 4204*  	ld bc,65536
043003 3E 01       4205*  	ld a,mos_load
043005 5B CF       4206*  	RST.LIL 08h
043007 21 F0 01 00 4207*  	ld hl,BUF_58_029
04300B 01 2F 00 00 4208*  	ld bc,47
04300F 11 40 00 00 4209*  	ld de,64
043013 DD 21 C0 0B 4210*  	ld ix,3008
       00          
043018 CD 4E B9 04 4211*  	call vdu_load_img
04301C C9          4212*  	ret
04301D             4213*  
04301D             4214*  ld_58_032:
04301D 21 85 48 04 4215*  	ld hl,F58_032
043021 22 D3 B7 04 4216*  	ld (cur_filename),hl
043025 11 21 C4 04 4217*  	ld de,filedata
043029 01 00 00 01 4218*  	ld bc,65536
04302D 3E 01       4219*  	ld a,mos_load
04302F 5B CF       4220*  	RST.LIL 08h
043031 21 F1 01 00 4221*  	ld hl,BUF_58_032
043035 01 41 00 00 4222*  	ld bc,65
043039 11 40 00 00 4223*  	ld de,64
04303D DD 21 40 10 4224*  	ld ix,4160
       00          
043042 CD 4E B9 04 4225*  	call vdu_load_img
043046 C9          4226*  	ret
043047             4227*  
043047             4228*  ld_58_035:
043047 21 99 48 04 4229*  	ld hl,F58_035
04304B 22 D3 B7 04 4230*  	ld (cur_filename),hl
04304F 11 21 C4 04 4231*  	ld de,filedata
043053 01 00 00 01 4232*  	ld bc,65536
043057 3E 01       4233*  	ld a,mos_load
043059 5B CF       4234*  	RST.LIL 08h
04305B 21 F2 01 00 4235*  	ld hl,BUF_58_035
04305F 01 3F 00 00 4236*  	ld bc,63
043063 11 6B 00 00 4237*  	ld de,107
043067 DD 21 55 1A 4238*  	ld ix,6741
       00          
04306C CD 4E B9 04 4239*  	call vdu_load_img
043070 C9          4240*  	ret
043071             4241*  
043071             4242*  ld_58_036:
043071 21 AD 48 04 4243*  	ld hl,F58_036
043075 22 D3 B7 04 4244*  	ld (cur_filename),hl
043079 11 21 C4 04 4245*  	ld de,filedata
04307D 01 00 00 01 4246*  	ld bc,65536
043081 3E 01       4247*  	ld a,mos_load
043083 5B CF       4248*  	RST.LIL 08h
043085 21 F3 01 00 4249*  	ld hl,BUF_58_036
043089 01 16 00 00 4250*  	ld bc,22
04308D 11 6B 00 00 4251*  	ld de,107
043091 DD 21 32 09 4252*  	ld ix,2354
       00          
043096 CD 4E B9 04 4253*  	call vdu_load_img
04309A C9          4254*  	ret
04309B             4255*  
04309B             4256*  ld_58_037:
04309B 21 C1 48 04 4257*  	ld hl,F58_037
04309F 22 D3 B7 04 4258*  	ld (cur_filename),hl
0430A3 11 21 C4 04 4259*  	ld de,filedata
0430A7 01 00 00 01 4260*  	ld bc,65536
0430AB 3E 01       4261*  	ld a,mos_load
0430AD 5B CF       4262*  	RST.LIL 08h
0430AF 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430B3 01 15 00 00 4264*  	ld bc,21
0430B7 11 69 00 00 4265*  	ld de,105
0430BB DD 21 9D 08 4266*  	ld ix,2205
       00          
0430C0 CD 4E B9 04 4267*  	call vdu_load_img
0430C4 C9          4268*  	ret
0430C5             4269*  
0430C5             4270*  ld_58_038:
0430C5 21 D5 48 04 4271*  	ld hl,F58_038
0430C9 22 D3 B7 04 4272*  	ld (cur_filename),hl
0430CD 11 21 C4 04 4273*  	ld de,filedata
0430D1 01 00 00 01 4274*  	ld bc,65536
0430D5 3E 01       4275*  	ld a,mos_load
0430D7 5B CF       4276*  	RST.LIL 08h
0430D9 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430DD 01 3F 00 00 4278*  	ld bc,63
0430E1 11 6B 00 00 4279*  	ld de,107
0430E5 DD 21 55 1A 4280*  	ld ix,6741
       00          
0430EA CD 4E B9 04 4281*  	call vdu_load_img
0430EE C9          4282*  	ret
0430EF             4283*  
0430EF             4284*  ld_58_040:
0430EF 21 E9 48 04 4285*  	ld hl,F58_040
0430F3 22 D3 B7 04 4286*  	ld (cur_filename),hl
0430F7 11 21 C4 04 4287*  	ld de,filedata
0430FB 01 00 00 01 4288*  	ld bc,65536
0430FF 3E 01       4289*  	ld a,mos_load
043101 5B CF       4290*  	RST.LIL 08h
043103 21 F6 01 00 4291*  	ld hl,BUF_58_040
043107 01 6C 00 00 4292*  	ld bc,108
04310B 11 6B 00 00 4293*  	ld de,107
04310F DD 21 24 2D 4294*  	ld ix,11556
       00          
043114 CD 4E B9 04 4295*  	call vdu_load_img
043118 C9          4296*  	ret
043119             4297*  
043119             4298*  ld_58_042:
043119 21 FD 48 04 4299*  	ld hl,F58_042
04311D 22 D3 B7 04 4300*  	ld (cur_filename),hl
043121 11 21 C4 04 4301*  	ld de,filedata
043125 01 00 00 01 4302*  	ld bc,65536
043129 3E 01       4303*  	ld a,mos_load
04312B 5B CF       4304*  	RST.LIL 08h
04312D 21 F7 01 00 4305*  	ld hl,BUF_58_042
043131 01 6A 00 00 4306*  	ld bc,106
043135 11 A0 00 00 4307*  	ld de,160
043139 DD 21 40 42 4308*  	ld ix,16960
       00          
04313E CD 4E B9 04 4309*  	call vdu_load_img
043142 C9          4310*  	ret
043143             4311*  
043143             4312*  ld_58_043:
043143 21 11 49 04 4313*  	ld hl,F58_043
043147 22 D3 B7 04 4314*  	ld (cur_filename),hl
04314B 11 21 C4 04 4315*  	ld de,filedata
04314F 01 00 00 01 4316*  	ld bc,65536
043153 3E 01       4317*  	ld a,mos_load
043155 5B CF       4318*  	RST.LIL 08h
043157 21 F8 01 00 4319*  	ld hl,BUF_58_043
04315B 01 6B 00 00 4320*  	ld bc,107
04315F 11 A0 00 00 4321*  	ld de,160
043163 DD 21 E0 42 4322*  	ld ix,17120
       00          
043168 CD 4E B9 04 4323*  	call vdu_load_img
04316C C9          4324*  	ret
04316D             4325*  
04316D             4326*  ld_58_044:
04316D 21 25 49 04 4327*  	ld hl,F58_044
043171 22 D3 B7 04 4328*  	ld (cur_filename),hl
043175 11 21 C4 04 4329*  	ld de,filedata
043179 01 00 00 01 4330*  	ld bc,65536
04317D 3E 01       4331*  	ld a,mos_load
04317F 5B CF       4332*  	RST.LIL 08h
043181 21 F9 01 00 4333*  	ld hl,BUF_58_044
043185 01 40 01 00 4334*  	ld bc,320
043189 11 A0 00 00 4335*  	ld de,160
04318D DD 21 00 C8 4336*  	ld ix,51200
       00          
043192 CD 4E B9 04 4337*  	call vdu_load_img
043196 C9          4338*  	ret
043197             4339*  
043197             4340*  ld_59_004:
043197 21 39 49 04 4341*  	ld hl,F59_004
04319B 22 D3 B7 04 4342*  	ld (cur_filename),hl
04319F 11 21 C4 04 4343*  	ld de,filedata
0431A3 01 00 00 01 4344*  	ld bc,65536
0431A7 3E 01       4345*  	ld a,mos_load
0431A9 5B CF       4346*  	RST.LIL 08h
0431AB 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431AF 01 24 00 00 4348*  	ld bc,36
0431B3 11 23 00 00 4349*  	ld de,35
0431B7 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431BC CD 4E B9 04 4351*  	call vdu_load_img
0431C0 C9          4352*  	ret
0431C1             4353*  
0431C1             4354*  ld_59_009:
0431C1 21 4D 49 04 4355*  	ld hl,F59_009
0431C5 22 D3 B7 04 4356*  	ld (cur_filename),hl
0431C9 11 21 C4 04 4357*  	ld de,filedata
0431CD 01 00 00 01 4358*  	ld bc,65536
0431D1 3E 01       4359*  	ld a,mos_load
0431D3 5B CF       4360*  	RST.LIL 08h
0431D5 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D9 01 23 00 00 4362*  	ld bc,35
0431DD 11 2D 00 00 4363*  	ld de,45
0431E1 DD 21 27 06 4364*  	ld ix,1575
       00          
0431E6 CD 4E B9 04 4365*  	call vdu_load_img
0431EA C9          4366*  	ret
0431EB             4367*  
0431EB             4368*  ld_59_010:
0431EB 21 61 49 04 4369*  	ld hl,F59_010
0431EF 22 D3 B7 04 4370*  	ld (cur_filename),hl
0431F3 11 21 C4 04 4371*  	ld de,filedata
0431F7 01 00 00 01 4372*  	ld bc,65536
0431FB 3E 01       4373*  	ld a,mos_load
0431FD 5B CF       4374*  	RST.LIL 08h
0431FF 21 FC 01 00 4375*  	ld hl,BUF_59_010
043203 01 19 00 00 4376*  	ld bc,25
043207 11 2D 00 00 4377*  	ld de,45
04320B DD 21 65 04 4378*  	ld ix,1125
       00          
043210 CD 4E B9 04 4379*  	call vdu_load_img
043214 C9          4380*  	ret
043215             4381*  
043215             4382*  ld_59_011:
043215 21 75 49 04 4383*  	ld hl,F59_011
043219 22 D3 B7 04 4384*  	ld (cur_filename),hl
04321D 11 21 C4 04 4385*  	ld de,filedata
043221 01 00 00 01 4386*  	ld bc,65536
043225 3E 01       4387*  	ld a,mos_load
043227 5B CF       4388*  	RST.LIL 08h
043229 21 FD 01 00 4389*  	ld hl,BUF_59_011
04322D 01 0F 00 00 4390*  	ld bc,15
043231 11 2D 00 00 4391*  	ld de,45
043235 DD 21 A3 02 4392*  	ld ix,675
       00          
04323A CD 4E B9 04 4393*  	call vdu_load_img
04323E C9          4394*  	ret
04323F             4395*  
04323F             4396*  ld_59_012:
04323F 21 89 49 04 4397*  	ld hl,F59_012
043243 22 D3 B7 04 4398*  	ld (cur_filename),hl
043247 11 21 C4 04 4399*  	ld de,filedata
04324B 01 00 00 01 4400*  	ld bc,65536
04324F 3E 01       4401*  	ld a,mos_load
043251 5B CF       4402*  	RST.LIL 08h
043253 21 FE 01 00 4403*  	ld hl,BUF_59_012
043257 01 05 00 00 4404*  	ld bc,5
04325B 11 2D 00 00 4405*  	ld de,45
04325F DD 21 E1 00 4406*  	ld ix,225
       00          
043264 CD 4E B9 04 4407*  	call vdu_load_img
043268 C9          4408*  	ret
043269             4409*  
043269             4410*  ld_59_013:
043269 21 9D 49 04 4411*  	ld hl,F59_013
04326D 22 D3 B7 04 4412*  	ld (cur_filename),hl
043271 11 21 C4 04 4413*  	ld de,filedata
043275 01 00 00 01 4414*  	ld bc,65536
043279 3E 01       4415*  	ld a,mos_load
04327B 5B CF       4416*  	RST.LIL 08h
04327D 21 FF 01 00 4417*  	ld hl,BUF_59_013
043281 01 05 00 00 4418*  	ld bc,5
043285 11 2B 00 00 4419*  	ld de,43
043289 DD 21 D7 00 4420*  	ld ix,215
       00          
04328E CD 4E B9 04 4421*  	call vdu_load_img
043292 C9          4422*  	ret
043293             4423*  
043293             4424*  ld_59_014:
043293 21 B1 49 04 4425*  	ld hl,F59_014
043297 22 D3 B7 04 4426*  	ld (cur_filename),hl
04329B 11 21 C4 04 4427*  	ld de,filedata
04329F 01 00 00 01 4428*  	ld bc,65536
0432A3 3E 01       4429*  	ld a,mos_load
0432A5 5B CF       4430*  	RST.LIL 08h
0432A7 21 00 02 00 4431*  	ld hl,BUF_59_014
0432AB 01 0F 00 00 4432*  	ld bc,15
0432AF 11 2D 00 00 4433*  	ld de,45
0432B3 DD 21 A3 02 4434*  	ld ix,675
       00          
0432B8 CD 4E B9 04 4435*  	call vdu_load_img
0432BC C9          4436*  	ret
0432BD             4437*  
0432BD             4438*  ld_59_015:
0432BD 21 C5 49 04 4439*  	ld hl,F59_015
0432C1 22 D3 B7 04 4440*  	ld (cur_filename),hl
0432C5 11 21 C4 04 4441*  	ld de,filedata
0432C9 01 00 00 01 4442*  	ld bc,65536
0432CD 3E 01       4443*  	ld a,mos_load
0432CF 5B CF       4444*  	RST.LIL 08h
0432D1 21 01 02 00 4445*  	ld hl,BUF_59_015
0432D5 01 19 00 00 4446*  	ld bc,25
0432D9 11 2D 00 00 4447*  	ld de,45
0432DD DD 21 65 04 4448*  	ld ix,1125
       00          
0432E2 CD 4E B9 04 4449*  	call vdu_load_img
0432E6 C9          4450*  	ret
0432E7             4451*  
0432E7             4452*  ld_59_016:
0432E7 21 D9 49 04 4453*  	ld hl,F59_016
0432EB 22 D3 B7 04 4454*  	ld (cur_filename),hl
0432EF 11 21 C4 04 4455*  	ld de,filedata
0432F3 01 00 00 01 4456*  	ld bc,65536
0432F7 3E 01       4457*  	ld a,mos_load
0432F9 5B CF       4458*  	RST.LIL 08h
0432FB 21 02 02 00 4459*  	ld hl,BUF_59_016
0432FF 01 23 00 00 4460*  	ld bc,35
043303 11 2D 00 00 4461*  	ld de,45
043307 DD 21 27 06 4462*  	ld ix,1575
       00          
04330C CD 4E B9 04 4463*  	call vdu_load_img
043310 C9          4464*  	ret
043311             4465*  
043311             4466*  ld_59_020:
043311 21 ED 49 04 4467*  	ld hl,F59_020
043315 22 D3 B7 04 4468*  	ld (cur_filename),hl
043319 11 21 C4 04 4469*  	ld de,filedata
04331D 01 00 00 01 4470*  	ld bc,65536
043321 3E 01       4471*  	ld a,mos_load
043323 5B CF       4472*  	RST.LIL 08h
043325 21 03 02 00 4473*  	ld hl,BUF_59_020
043329 01 2E 00 00 4474*  	ld bc,46
04332D 11 2D 00 00 4475*  	ld de,45
043331 DD 21 16 08 4476*  	ld ix,2070
       00          
043336 CD 4E B9 04 4477*  	call vdu_load_img
04333A C9          4478*  	ret
04333B             4479*  
04333B             4480*  ld_59_024:
04333B 21 01 4A 04 4481*  	ld hl,F59_024
04333F 22 D3 B7 04 4482*  	ld (cur_filename),hl
043343 11 21 C4 04 4483*  	ld de,filedata
043347 01 00 00 01 4484*  	ld bc,65536
04334B 3E 01       4485*  	ld a,mos_load
04334D 5B CF       4486*  	RST.LIL 08h
04334F 21 04 02 00 4487*  	ld hl,BUF_59_024
043353 01 2E 00 00 4488*  	ld bc,46
043357 11 40 00 00 4489*  	ld de,64
04335B DD 21 80 0B 4490*  	ld ix,2944
       00          
043360 CD 4E B9 04 4491*  	call vdu_load_img
043364 C9          4492*  	ret
043365             4493*  
043365             4494*  ld_59_025:
043365 21 15 4A 04 4495*  	ld hl,F59_025
043369 22 D3 B7 04 4496*  	ld (cur_filename),hl
04336D 11 21 C4 04 4497*  	ld de,filedata
043371 01 00 00 01 4498*  	ld bc,65536
043375 3E 01       4499*  	ld a,mos_load
043377 5B CF       4500*  	RST.LIL 08h
043379 21 05 02 00 4501*  	ld hl,BUF_59_025
04337D 01 1C 00 00 4502*  	ld bc,28
043381 11 40 00 00 4503*  	ld de,64
043385 DD 21 00 07 4504*  	ld ix,1792
       00          
04338A CD 4E B9 04 4505*  	call vdu_load_img
04338E C9          4506*  	ret
04338F             4507*  
04338F             4508*  ld_59_026:
04338F 21 29 4A 04 4509*  	ld hl,F59_026
043393 22 D3 B7 04 4510*  	ld (cur_filename),hl
043397 11 21 C4 04 4511*  	ld de,filedata
04339B 01 00 00 01 4512*  	ld bc,65536
04339F 3E 01       4513*  	ld a,mos_load
0433A1 5B CF       4514*  	RST.LIL 08h
0433A3 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A7 01 09 00 00 4516*  	ld bc,9
0433AB 11 40 00 00 4517*  	ld de,64
0433AF DD 21 40 02 4518*  	ld ix,576
       00          
0433B4 CD 4E B9 04 4519*  	call vdu_load_img
0433B8 C9          4520*  	ret
0433B9             4521*  
0433B9             4522*  ld_59_027:
0433B9 21 3D 4A 04 4523*  	ld hl,F59_027
0433BD 22 D3 B7 04 4524*  	ld (cur_filename),hl
0433C1 11 21 C4 04 4525*  	ld de,filedata
0433C5 01 00 00 01 4526*  	ld bc,65536
0433C9 3E 01       4527*  	ld a,mos_load
0433CB 5B CF       4528*  	RST.LIL 08h
0433CD 21 07 02 00 4529*  	ld hl,BUF_59_027
0433D1 01 0A 00 00 4530*  	ld bc,10
0433D5 11 3E 00 00 4531*  	ld de,62
0433D9 DD 21 6C 02 4532*  	ld ix,620
       00          
0433DE CD 4E B9 04 4533*  	call vdu_load_img
0433E2 C9          4534*  	ret
0433E3             4535*  
0433E3             4536*  ld_59_028:
0433E3 21 51 4A 04 4537*  	ld hl,F59_028
0433E7 22 D3 B7 04 4538*  	ld (cur_filename),hl
0433EB 11 21 C4 04 4539*  	ld de,filedata
0433EF 01 00 00 01 4540*  	ld bc,65536
0433F3 3E 01       4541*  	ld a,mos_load
0433F5 5B CF       4542*  	RST.LIL 08h
0433F7 21 08 02 00 4543*  	ld hl,BUF_59_028
0433FB 01 1C 00 00 4544*  	ld bc,28
0433FF 11 40 00 00 4545*  	ld de,64
043403 DD 21 00 07 4546*  	ld ix,1792
       00          
043408 CD 4E B9 04 4547*  	call vdu_load_img
04340C C9          4548*  	ret
04340D             4549*  
04340D             4550*  ld_59_029:
04340D 21 65 4A 04 4551*  	ld hl,F59_029
043411 22 D3 B7 04 4552*  	ld (cur_filename),hl
043415 11 21 C4 04 4553*  	ld de,filedata
043419 01 00 00 01 4554*  	ld bc,65536
04341D 3E 01       4555*  	ld a,mos_load
04341F 5B CF       4556*  	RST.LIL 08h
043421 21 09 02 00 4557*  	ld hl,BUF_59_029
043425 01 2F 00 00 4558*  	ld bc,47
043429 11 40 00 00 4559*  	ld de,64
04342D DD 21 C0 0B 4560*  	ld ix,3008
       00          
043432 CD 4E B9 04 4561*  	call vdu_load_img
043436 C9          4562*  	ret
043437             4563*  
043437             4564*  ld_59_032:
043437 21 79 4A 04 4565*  	ld hl,F59_032
04343B 22 D3 B7 04 4566*  	ld (cur_filename),hl
04343F 11 21 C4 04 4567*  	ld de,filedata
043443 01 00 00 01 4568*  	ld bc,65536
043447 3E 01       4569*  	ld a,mos_load
043449 5B CF       4570*  	RST.LIL 08h
04344B 21 0A 02 00 4571*  	ld hl,BUF_59_032
04344F 01 41 00 00 4572*  	ld bc,65
043453 11 40 00 00 4573*  	ld de,64
043457 DD 21 40 10 4574*  	ld ix,4160
       00          
04345C CD 4E B9 04 4575*  	call vdu_load_img
043460 C9          4576*  	ret
043461             4577*  
043461             4578*  ld_59_035:
043461 21 8D 4A 04 4579*  	ld hl,F59_035
043465 22 D3 B7 04 4580*  	ld (cur_filename),hl
043469 11 21 C4 04 4581*  	ld de,filedata
04346D 01 00 00 01 4582*  	ld bc,65536
043471 3E 01       4583*  	ld a,mos_load
043473 5B CF       4584*  	RST.LIL 08h
043475 21 0B 02 00 4585*  	ld hl,BUF_59_035
043479 01 3F 00 00 4586*  	ld bc,63
04347D 11 6B 00 00 4587*  	ld de,107
043481 DD 21 55 1A 4588*  	ld ix,6741
       00          
043486 CD 4E B9 04 4589*  	call vdu_load_img
04348A C9          4590*  	ret
04348B             4591*  
04348B             4592*  ld_59_036:
04348B 21 A1 4A 04 4593*  	ld hl,F59_036
04348F 22 D3 B7 04 4594*  	ld (cur_filename),hl
043493 11 21 C4 04 4595*  	ld de,filedata
043497 01 00 00 01 4596*  	ld bc,65536
04349B 3E 01       4597*  	ld a,mos_load
04349D 5B CF       4598*  	RST.LIL 08h
04349F 21 0C 02 00 4599*  	ld hl,BUF_59_036
0434A3 01 16 00 00 4600*  	ld bc,22
0434A7 11 6B 00 00 4601*  	ld de,107
0434AB DD 21 32 09 4602*  	ld ix,2354
       00          
0434B0 CD 4E B9 04 4603*  	call vdu_load_img
0434B4 C9          4604*  	ret
0434B5             4605*  
0434B5             4606*  ld_59_037:
0434B5 21 B5 4A 04 4607*  	ld hl,F59_037
0434B9 22 D3 B7 04 4608*  	ld (cur_filename),hl
0434BD 11 21 C4 04 4609*  	ld de,filedata
0434C1 01 00 00 01 4610*  	ld bc,65536
0434C5 3E 01       4611*  	ld a,mos_load
0434C7 5B CF       4612*  	RST.LIL 08h
0434C9 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434CD 01 15 00 00 4614*  	ld bc,21
0434D1 11 69 00 00 4615*  	ld de,105
0434D5 DD 21 9D 08 4616*  	ld ix,2205
       00          
0434DA CD 4E B9 04 4617*  	call vdu_load_img
0434DE C9          4618*  	ret
0434DF             4619*  
0434DF             4620*  ld_59_038:
0434DF 21 C9 4A 04 4621*  	ld hl,F59_038
0434E3 22 D3 B7 04 4622*  	ld (cur_filename),hl
0434E7 11 21 C4 04 4623*  	ld de,filedata
0434EB 01 00 00 01 4624*  	ld bc,65536
0434EF 3E 01       4625*  	ld a,mos_load
0434F1 5B CF       4626*  	RST.LIL 08h
0434F3 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F7 01 3F 00 00 4628*  	ld bc,63
0434FB 11 6B 00 00 4629*  	ld de,107
0434FF DD 21 55 1A 4630*  	ld ix,6741
       00          
043504 CD 4E B9 04 4631*  	call vdu_load_img
043508 C9          4632*  	ret
043509             4633*  
043509             4634*  ld_59_040:
043509 21 DD 4A 04 4635*  	ld hl,F59_040
04350D 22 D3 B7 04 4636*  	ld (cur_filename),hl
043511 11 21 C4 04 4637*  	ld de,filedata
043515 01 00 00 01 4638*  	ld bc,65536
043519 3E 01       4639*  	ld a,mos_load
04351B 5B CF       4640*  	RST.LIL 08h
04351D 21 0F 02 00 4641*  	ld hl,BUF_59_040
043521 01 6C 00 00 4642*  	ld bc,108
043525 11 6B 00 00 4643*  	ld de,107
043529 DD 21 24 2D 4644*  	ld ix,11556
       00          
04352E CD 4E B9 04 4645*  	call vdu_load_img
043532 C9          4646*  	ret
043533             4647*  
043533             4648*  ld_59_042:
043533 21 F1 4A 04 4649*  	ld hl,F59_042
043537 22 D3 B7 04 4650*  	ld (cur_filename),hl
04353B 11 21 C4 04 4651*  	ld de,filedata
04353F 01 00 00 01 4652*  	ld bc,65536
043543 3E 01       4653*  	ld a,mos_load
043545 5B CF       4654*  	RST.LIL 08h
043547 21 10 02 00 4655*  	ld hl,BUF_59_042
04354B 01 6A 00 00 4656*  	ld bc,106
04354F 11 A0 00 00 4657*  	ld de,160
043553 DD 21 40 42 4658*  	ld ix,16960
       00          
043558 CD 4E B9 04 4659*  	call vdu_load_img
04355C C9          4660*  	ret
04355D             4661*  
04355D             4662*  ld_59_043:
04355D 21 05 4B 04 4663*  	ld hl,F59_043
043561 22 D3 B7 04 4664*  	ld (cur_filename),hl
043565 11 21 C4 04 4665*  	ld de,filedata
043569 01 00 00 01 4666*  	ld bc,65536
04356D 3E 01       4667*  	ld a,mos_load
04356F 5B CF       4668*  	RST.LIL 08h
043571 21 11 02 00 4669*  	ld hl,BUF_59_043
043575 01 6B 00 00 4670*  	ld bc,107
043579 11 A0 00 00 4671*  	ld de,160
04357D DD 21 E0 42 4672*  	ld ix,17120
       00          
043582 CD 4E B9 04 4673*  	call vdu_load_img
043586 C9          4674*  	ret
043587             4675*  
043587             4676*  ld_59_044:
043587 21 19 4B 04 4677*  	ld hl,F59_044
04358B 22 D3 B7 04 4678*  	ld (cur_filename),hl
04358F 11 21 C4 04 4679*  	ld de,filedata
043593 01 00 00 01 4680*  	ld bc,65536
043597 3E 01       4681*  	ld a,mos_load
043599 5B CF       4682*  	RST.LIL 08h
04359B 21 12 02 00 4683*  	ld hl,BUF_59_044
04359F 01 40 01 00 4684*  	ld bc,320
0435A3 11 A0 00 00 4685*  	ld de,160
0435A7 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435AC CD 4E B9 04 4687*  	call vdu_load_img
0435B0 C9          4688*  	ret
0435B1             4689*  
0435B1             4690*  ; File name lookups:
0435B1 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435C5 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D9 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435ED 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043601 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043615 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043629 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04363D 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043651 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043665 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043679 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04368D 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0436A1 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436B5 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C9 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436DD 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436F1 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043705 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043719 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04372D 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043741 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043755 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043769 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04377D 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043791 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0437A5 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B9 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437CD 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437E1 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437F5 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043809 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04381D 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043831 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043845 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043859 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04386D 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043881 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043895 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A9 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438BD 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438D1 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438E5 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F9 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04390D 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043921 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043935 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043949 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04395D 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043971 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043985 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043999 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439AD 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439C1 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439D5 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E9 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439FD 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A11 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A25 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A39 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A4D 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A61 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A75 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A89 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A9D 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AB1 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043AC5 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD9 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AED 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043B01 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B15 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B29 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B3D 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B51 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B65 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B79 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B8D 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043BA1 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BB5 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC9 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BDD 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BF1 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043C05 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C19 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C2D 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C41 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C55 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C69 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C7D 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C91 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043CA5 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB9 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CCD 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CE1 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CF5 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D09 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D1D 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D31 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D45 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D59 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D6D 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D81 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D95 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA9 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DBD 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DD1 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DE5 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF9 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E0D 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E21 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E35 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E49 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E5D 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E71 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E85 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E99 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EAD 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EC1 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ED5 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE9 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EFD 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F11 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F25 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F39 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F4D 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F61 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F75 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F89 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F9D 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FB1 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FC5 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD9 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FED 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044001 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044015 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044029 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04403D 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044051 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044065 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044079 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04408D 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0440A1 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440B5 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C9 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440DD 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440F1 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044105 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044119 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04412D 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044141 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044155 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044169 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04417D 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044191 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0441A5 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B9 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441CD 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441E1 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441F5 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044209 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04421D 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044231 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044245 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044259 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04426D 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044281 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044295 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A9 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442BD 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442D1 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442E5 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F9 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04430D 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044321 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044335 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044349 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04435D 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044371 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044385 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044399 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443AD 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443C1 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443D5 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E9 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443FD 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044411 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044425 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044439 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04444D 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044461 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044475 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044489 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04449D 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444B1 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444C5 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D9 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444ED 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044501 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044515 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044529 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04453D 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044551 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044565 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044579 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04458D 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0445A1 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445B5 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C9 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445DD 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445F1 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044605 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044619 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04462D 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044641 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044655 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044669 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04467D 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044691 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0446A5 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B9 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446CD 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446E1 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446F5 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044709 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04471D 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044731 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044745 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044759 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04476D 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044781 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044795 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A9 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447BD 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447D1 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447E5 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F9 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04480D 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044821 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044835 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044849 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04485D 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044871 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044885 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044899 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448AD 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448C1 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448D5 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E9 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448FD 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044911 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044925 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044939 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04494D 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044961 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044975 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044989 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04499D 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449B1 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449C5 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D9 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449ED 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044A01 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A15 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A29 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A3D 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A51 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A65 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A79 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A8D 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044AA1 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AB5 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC9 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044ADD 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AF1 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044B05 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B19 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B2D             4966*  
044B2D             4967*  ; sprite buffer ids:
044B2D             4968*  BUF_20_004: equ 0x0213
044B2D             4969*  BUF_20_020: equ 0x0214
044B2D             4970*  BUF_20_032: equ 0x0215
044B2D             4971*  BUF_20_040: equ 0x0216
044B2D             4972*  BUF_20_044: equ 0x0217
044B2D             4973*  BUF_21_004: equ 0x0218
044B2D             4974*  BUF_21_020: equ 0x0219
044B2D             4975*  BUF_21_032: equ 0x021A
044B2D             4976*  BUF_21_040: equ 0x021B
044B2D             4977*  BUF_21_044: equ 0x021C
044B2D             4978*  BUF_22_004: equ 0x021D
044B2D             4979*  BUF_22_020: equ 0x021E
044B2D             4980*  BUF_22_032: equ 0x021F
044B2D             4981*  BUF_22_040: equ 0x0220
044B2D             4982*  BUF_22_044: equ 0x0221
044B2D             4983*  BUF_23_004: equ 0x0222
044B2D             4984*  BUF_23_020: equ 0x0223
044B2D             4985*  BUF_23_032: equ 0x0224
044B2D             4986*  BUF_23_040: equ 0x0225
044B2D             4987*  BUF_23_044: equ 0x0226
044B2D             4988*  BUF_24_004: equ 0x0227
044B2D             4989*  BUF_24_020: equ 0x0228
044B2D             4990*  BUF_24_032: equ 0x0229
044B2D             4991*  BUF_24_040: equ 0x022A
044B2D             4992*  BUF_24_044: equ 0x022B
044B2D             4993*  BUF_40_004: equ 0x022C
044B2D             4994*  BUF_40_020: equ 0x022D
044B2D             4995*  BUF_40_032: equ 0x022E
044B2D             4996*  BUF_40_040: equ 0x022F
044B2D             4997*  BUF_40_044: equ 0x0230
044B2D             4998*  BUF_41_004: equ 0x0231
044B2D             4999*  BUF_41_020: equ 0x0232
044B2D             5000*  BUF_41_032: equ 0x0233
044B2D             5001*  BUF_41_040: equ 0x0234
044B2D             5002*  BUF_41_044: equ 0x0235
044B2D             5003*  BUF_42_004: equ 0x0236
044B2D             5004*  BUF_42_020: equ 0x0237
044B2D             5005*  BUF_42_032: equ 0x0238
044B2D             5006*  BUF_42_040: equ 0x0239
044B2D             5007*  BUF_42_044: equ 0x023A
044B2D             5008*  BUF_43_004: equ 0x023B
044B2D             5009*  BUF_43_020: equ 0x023C
044B2D             5010*  BUF_43_032: equ 0x023D
044B2D             5011*  BUF_43_040: equ 0x023E
044B2D             5012*  BUF_43_044: equ 0x023F
044B2D             5013*  BUF_44_004: equ 0x0240
044B2D             5014*  BUF_44_020: equ 0x0241
044B2D             5015*  BUF_44_032: equ 0x0242
044B2D             5016*  BUF_44_040: equ 0x0243
044B2D             5017*  BUF_44_044: equ 0x0244
044B2D             5018*  BUF_45_004: equ 0x0245
044B2D             5019*  BUF_45_020: equ 0x0246
044B2D             5020*  BUF_45_032: equ 0x0247
044B2D             5021*  BUF_45_040: equ 0x0248
044B2D             5022*  BUF_45_044: equ 0x0249
044B2D             5023*  BUF_46_004: equ 0x024A
044B2D             5024*  BUF_46_020: equ 0x024B
044B2D             5025*  BUF_46_032: equ 0x024C
044B2D             5026*  BUF_46_040: equ 0x024D
044B2D             5027*  BUF_46_044: equ 0x024E
044B2D             5028*  BUF_47_004: equ 0x024F
044B2D             5029*  BUF_47_020: equ 0x0250
044B2D             5030*  BUF_47_032: equ 0x0251
044B2D             5031*  BUF_47_040: equ 0x0252
044B2D             5032*  BUF_47_044: equ 0x0253
044B2D             5033*  BUF_48_004: equ 0x0254
044B2D             5034*  BUF_48_020: equ 0x0255
044B2D             5035*  BUF_48_032: equ 0x0256
044B2D             5036*  BUF_48_040: equ 0x0257
044B2D             5037*  BUF_48_044: equ 0x0258
044B2D             5038*  BUF_49_004: equ 0x0259
044B2D             5039*  BUF_49_020: equ 0x025A
044B2D             5040*  BUF_49_032: equ 0x025B
044B2D             5041*  BUF_49_040: equ 0x025C
044B2D             5042*  BUF_49_044: equ 0x025D
044B2D             5043*  BUF_50_004: equ 0x025E
044B2D             5044*  BUF_50_020: equ 0x025F
044B2D             5045*  BUF_50_032: equ 0x0260
044B2D             5046*  BUF_50_040: equ 0x0261
044B2D             5047*  BUF_50_044: equ 0x0262
044B2D             5048*  BUF_51_004: equ 0x0263
044B2D             5049*  BUF_51_020: equ 0x0264
044B2D             5050*  BUF_51_032: equ 0x0265
044B2D             5051*  BUF_51_040: equ 0x0266
044B2D             5052*  BUF_51_044: equ 0x0267
044B2D             5053*  BUF_52_004: equ 0x0268
044B2D             5054*  BUF_52_020: equ 0x0269
044B2D             5055*  BUF_52_032: equ 0x026A
044B2D             5056*  BUF_52_040: equ 0x026B
044B2D             5057*  BUF_52_044: equ 0x026C
044B2D             5058*  
044B2D             5059*  sprite_num_panels: equ 90
044B2D             5060*  
044B2D             5061*  ; sprite buffer id reverse lookup:
044B2D             5062*  sprite_buffer_id_lut:
044B2D 13 02 00    5063*  	dl BUF_20_004
044B30 14 02 00    5064*  	dl BUF_20_020
044B33 15 02 00    5065*  	dl BUF_20_032
044B36 16 02 00    5066*  	dl BUF_20_040
044B39 17 02 00    5067*  	dl BUF_20_044
044B3C 18 02 00    5068*  	dl BUF_21_004
044B3F 19 02 00    5069*  	dl BUF_21_020
044B42 1A 02 00    5070*  	dl BUF_21_032
044B45 1B 02 00    5071*  	dl BUF_21_040
044B48 1C 02 00    5072*  	dl BUF_21_044
044B4B 1D 02 00    5073*  	dl BUF_22_004
044B4E 1E 02 00    5074*  	dl BUF_22_020
044B51 1F 02 00    5075*  	dl BUF_22_032
044B54 20 02 00    5076*  	dl BUF_22_040
044B57 21 02 00    5077*  	dl BUF_22_044
044B5A 22 02 00    5078*  	dl BUF_23_004
044B5D 23 02 00    5079*  	dl BUF_23_020
044B60 24 02 00    5080*  	dl BUF_23_032
044B63 25 02 00    5081*  	dl BUF_23_040
044B66 26 02 00    5082*  	dl BUF_23_044
044B69 27 02 00    5083*  	dl BUF_24_004
044B6C 28 02 00    5084*  	dl BUF_24_020
044B6F 29 02 00    5085*  	dl BUF_24_032
044B72 2A 02 00    5086*  	dl BUF_24_040
044B75 2B 02 00    5087*  	dl BUF_24_044
044B78 2C 02 00    5088*  	dl BUF_40_004
044B7B 2D 02 00    5089*  	dl BUF_40_020
044B7E 2E 02 00    5090*  	dl BUF_40_032
044B81 2F 02 00    5091*  	dl BUF_40_040
044B84 30 02 00    5092*  	dl BUF_40_044
044B87 31 02 00    5093*  	dl BUF_41_004
044B8A 32 02 00    5094*  	dl BUF_41_020
044B8D 33 02 00    5095*  	dl BUF_41_032
044B90 34 02 00    5096*  	dl BUF_41_040
044B93 35 02 00    5097*  	dl BUF_41_044
044B96 36 02 00    5098*  	dl BUF_42_004
044B99 37 02 00    5099*  	dl BUF_42_020
044B9C 38 02 00    5100*  	dl BUF_42_032
044B9F 39 02 00    5101*  	dl BUF_42_040
044BA2 3A 02 00    5102*  	dl BUF_42_044
044BA5 3B 02 00    5103*  	dl BUF_43_004
044BA8 3C 02 00    5104*  	dl BUF_43_020
044BAB 3D 02 00    5105*  	dl BUF_43_032
044BAE 3E 02 00    5106*  	dl BUF_43_040
044BB1 3F 02 00    5107*  	dl BUF_43_044
044BB4 40 02 00    5108*  	dl BUF_44_004
044BB7 41 02 00    5109*  	dl BUF_44_020
044BBA 42 02 00    5110*  	dl BUF_44_032
044BBD 43 02 00    5111*  	dl BUF_44_040
044BC0 44 02 00    5112*  	dl BUF_44_044
044BC3 45 02 00    5113*  	dl BUF_45_004
044BC6 46 02 00    5114*  	dl BUF_45_020
044BC9 47 02 00    5115*  	dl BUF_45_032
044BCC 48 02 00    5116*  	dl BUF_45_040
044BCF 49 02 00    5117*  	dl BUF_45_044
044BD2 4A 02 00    5118*  	dl BUF_46_004
044BD5 4B 02 00    5119*  	dl BUF_46_020
044BD8 4C 02 00    5120*  	dl BUF_46_032
044BDB 4D 02 00    5121*  	dl BUF_46_040
044BDE 4E 02 00    5122*  	dl BUF_46_044
044BE1 4F 02 00    5123*  	dl BUF_47_004
044BE4 50 02 00    5124*  	dl BUF_47_020
044BE7 51 02 00    5125*  	dl BUF_47_032
044BEA 52 02 00    5126*  	dl BUF_47_040
044BED 53 02 00    5127*  	dl BUF_47_044
044BF0 54 02 00    5128*  	dl BUF_48_004
044BF3 55 02 00    5129*  	dl BUF_48_020
044BF6 56 02 00    5130*  	dl BUF_48_032
044BF9 57 02 00    5131*  	dl BUF_48_040
044BFC 58 02 00    5132*  	dl BUF_48_044
044BFF 59 02 00    5133*  	dl BUF_49_004
044C02 5A 02 00    5134*  	dl BUF_49_020
044C05 5B 02 00    5135*  	dl BUF_49_032
044C08 5C 02 00    5136*  	dl BUF_49_040
044C0B 5D 02 00    5137*  	dl BUF_49_044
044C0E 5E 02 00    5138*  	dl BUF_50_004
044C11 5F 02 00    5139*  	dl BUF_50_020
044C14 60 02 00    5140*  	dl BUF_50_032
044C17 61 02 00    5141*  	dl BUF_50_040
044C1A 62 02 00    5142*  	dl BUF_50_044
044C1D 63 02 00    5143*  	dl BUF_51_004
044C20 64 02 00    5144*  	dl BUF_51_020
044C23 65 02 00    5145*  	dl BUF_51_032
044C26 66 02 00    5146*  	dl BUF_51_040
044C29 67 02 00    5147*  	dl BUF_51_044
044C2C 68 02 00    5148*  	dl BUF_52_004
044C2F 69 02 00    5149*  	dl BUF_52_020
044C32 6A 02 00    5150*  	dl BUF_52_032
044C35 6B 02 00    5151*  	dl BUF_52_040
044C38 6C 02 00    5152*  	dl BUF_52_044
044C3B             5153*  
044C3B             5154*  ; sprite load routines jump table:
044C3B             5155*  sprite_load_panels_table:
044C3B 49 4D 04    5156*  	dl ld_20_004
044C3E 73 4D 04    5157*  	dl ld_20_020
044C41 9D 4D 04    5158*  	dl ld_20_032
044C44 C7 4D 04    5159*  	dl ld_20_040
044C47 F1 4D 04    5160*  	dl ld_20_044
044C4A 1B 4E 04    5161*  	dl ld_21_004
044C4D 45 4E 04    5162*  	dl ld_21_020
044C50 6F 4E 04    5163*  	dl ld_21_032
044C53 99 4E 04    5164*  	dl ld_21_040
044C56 C3 4E 04    5165*  	dl ld_21_044
044C59 ED 4E 04    5166*  	dl ld_22_004
044C5C 17 4F 04    5167*  	dl ld_22_020
044C5F 41 4F 04    5168*  	dl ld_22_032
044C62 6B 4F 04    5169*  	dl ld_22_040
044C65 95 4F 04    5170*  	dl ld_22_044
044C68 BF 4F 04    5171*  	dl ld_23_004
044C6B E9 4F 04    5172*  	dl ld_23_020
044C6E 13 50 04    5173*  	dl ld_23_032
044C71 3D 50 04    5174*  	dl ld_23_040
044C74 67 50 04    5175*  	dl ld_23_044
044C77 91 50 04    5176*  	dl ld_24_004
044C7A BB 50 04    5177*  	dl ld_24_020
044C7D E5 50 04    5178*  	dl ld_24_032
044C80 0F 51 04    5179*  	dl ld_24_040
044C83 39 51 04    5180*  	dl ld_24_044
044C86 63 51 04    5181*  	dl ld_40_004
044C89 8D 51 04    5182*  	dl ld_40_020
044C8C B7 51 04    5183*  	dl ld_40_032
044C8F E1 51 04    5184*  	dl ld_40_040
044C92 0B 52 04    5185*  	dl ld_40_044
044C95 35 52 04    5186*  	dl ld_41_004
044C98 5F 52 04    5187*  	dl ld_41_020
044C9B 89 52 04    5188*  	dl ld_41_032
044C9E B3 52 04    5189*  	dl ld_41_040
044CA1 DD 52 04    5190*  	dl ld_41_044
044CA4 07 53 04    5191*  	dl ld_42_004
044CA7 31 53 04    5192*  	dl ld_42_020
044CAA 5B 53 04    5193*  	dl ld_42_032
044CAD 85 53 04    5194*  	dl ld_42_040
044CB0 AF 53 04    5195*  	dl ld_42_044
044CB3 D9 53 04    5196*  	dl ld_43_004
044CB6 03 54 04    5197*  	dl ld_43_020
044CB9 2D 54 04    5198*  	dl ld_43_032
044CBC 57 54 04    5199*  	dl ld_43_040
044CBF 81 54 04    5200*  	dl ld_43_044
044CC2 AB 54 04    5201*  	dl ld_44_004
044CC5 D5 54 04    5202*  	dl ld_44_020
044CC8 FF 54 04    5203*  	dl ld_44_032
044CCB 29 55 04    5204*  	dl ld_44_040
044CCE 53 55 04    5205*  	dl ld_44_044
044CD1 7D 55 04    5206*  	dl ld_45_004
044CD4 A7 55 04    5207*  	dl ld_45_020
044CD7 D1 55 04    5208*  	dl ld_45_032
044CDA FB 55 04    5209*  	dl ld_45_040
044CDD 25 56 04    5210*  	dl ld_45_044
044CE0 4F 56 04    5211*  	dl ld_46_004
044CE3 79 56 04    5212*  	dl ld_46_020
044CE6 A3 56 04    5213*  	dl ld_46_032
044CE9 CD 56 04    5214*  	dl ld_46_040
044CEC F7 56 04    5215*  	dl ld_46_044
044CEF 21 57 04    5216*  	dl ld_47_004
044CF2 4B 57 04    5217*  	dl ld_47_020
044CF5 75 57 04    5218*  	dl ld_47_032
044CF8 9F 57 04    5219*  	dl ld_47_040
044CFB C9 57 04    5220*  	dl ld_47_044
044CFE F3 57 04    5221*  	dl ld_48_004
044D01 1D 58 04    5222*  	dl ld_48_020
044D04 47 58 04    5223*  	dl ld_48_032
044D07 71 58 04    5224*  	dl ld_48_040
044D0A 9B 58 04    5225*  	dl ld_48_044
044D0D C5 58 04    5226*  	dl ld_49_004
044D10 EF 58 04    5227*  	dl ld_49_020
044D13 19 59 04    5228*  	dl ld_49_032
044D16 43 59 04    5229*  	dl ld_49_040
044D19 6D 59 04    5230*  	dl ld_49_044
044D1C 97 59 04    5231*  	dl ld_50_004
044D1F C1 59 04    5232*  	dl ld_50_020
044D22 EB 59 04    5233*  	dl ld_50_032
044D25 15 5A 04    5234*  	dl ld_50_040
044D28 3F 5A 04    5235*  	dl ld_50_044
044D2B 69 5A 04    5236*  	dl ld_51_004
044D2E 93 5A 04    5237*  	dl ld_51_020
044D31 BD 5A 04    5238*  	dl ld_51_032
044D34 E7 5A 04    5239*  	dl ld_51_040
044D37 11 5B 04    5240*  	dl ld_51_044
044D3A 3B 5B 04    5241*  	dl ld_52_004
044D3D 65 5B 04    5242*  	dl ld_52_020
044D40 8F 5B 04    5243*  	dl ld_52_032
044D43 B9 5B 04    5244*  	dl ld_52_040
044D46 E3 5B 04    5245*  	dl ld_52_044
044D49             5246*  
044D49             5247*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D49             5248*  
044D49             5249*  ld_20_004:
044D49 21 0D 5C 04 5250*  	ld hl,F20_004
044D4D 22 D3 B7 04 5251*  	ld (cur_filename),hl
044D51 11 21 C4 04 5252*  	ld de,filedata
044D55 01 00 00 01 5253*  	ld bc,65536
044D59 3E 01       5254*  	ld a,mos_load
044D5B 5B CF       5255*  	RST.LIL 08h
044D5D 21 13 02 00 5256*  	ld hl,BUF_20_004
044D61 01 13 00 00 5257*  	ld bc,19
044D65 11 12 00 00 5258*  	ld de,18
044D69 DD 21 56 01 5259*  	ld ix,342
       00          
044D6E CD 4E B9 04 5260*  	call vdu_load_img
044D72 C9          5261*  	ret
044D73             5262*  
044D73             5263*  ld_20_020:
044D73 21 21 5C 04 5264*  	ld hl,F20_020
044D77 22 D3 B7 04 5265*  	ld (cur_filename),hl
044D7B 11 21 C4 04 5266*  	ld de,filedata
044D7F 01 00 00 01 5267*  	ld bc,65536
044D83 3E 01       5268*  	ld a,mos_load
044D85 5B CF       5269*  	RST.LIL 08h
044D87 21 14 02 00 5270*  	ld hl,BUF_20_020
044D8B 01 17 00 00 5271*  	ld bc,23
044D8F 11 17 00 00 5272*  	ld de,23
044D93 DD 21 11 02 5273*  	ld ix,529
       00          
044D98 CD 4E B9 04 5274*  	call vdu_load_img
044D9C C9          5275*  	ret
044D9D             5276*  
044D9D             5277*  ld_20_032:
044D9D 21 35 5C 04 5278*  	ld hl,F20_032
044DA1 22 D3 B7 04 5279*  	ld (cur_filename),hl
044DA5 11 21 C4 04 5280*  	ld de,filedata
044DA9 01 00 00 01 5281*  	ld bc,65536
044DAD 3E 01       5282*  	ld a,mos_load
044DAF 5B CF       5283*  	RST.LIL 08h
044DB1 21 15 02 00 5284*  	ld hl,BUF_20_032
044DB5 01 20 00 00 5285*  	ld bc,32
044DB9 11 22 00 00 5286*  	ld de,34
044DBD DD 21 40 04 5287*  	ld ix,1088
       00          
044DC2 CD 4E B9 04 5288*  	call vdu_load_img
044DC6 C9          5289*  	ret
044DC7             5290*  
044DC7             5291*  ld_20_040:
044DC7 21 49 5C 04 5292*  	ld hl,F20_040
044DCB 22 D3 B7 04 5293*  	ld (cur_filename),hl
044DCF 11 21 C4 04 5294*  	ld de,filedata
044DD3 01 00 00 01 5295*  	ld bc,65536
044DD7 3E 01       5296*  	ld a,mos_load
044DD9 5B CF       5297*  	RST.LIL 08h
044DDB 21 16 02 00 5298*  	ld hl,BUF_20_040
044DDF 01 36 00 00 5299*  	ld bc,54
044DE3 11 38 00 00 5300*  	ld de,56
044DE7 DD 21 D0 0B 5301*  	ld ix,3024
       00          
044DEC CD 4E B9 04 5302*  	call vdu_load_img
044DF0 C9          5303*  	ret
044DF1             5304*  
044DF1             5305*  ld_20_044:
044DF1 21 5D 5C 04 5306*  	ld hl,F20_044
044DF5 22 D3 B7 04 5307*  	ld (cur_filename),hl
044DF9 11 21 C4 04 5308*  	ld de,filedata
044DFD 01 00 00 01 5309*  	ld bc,65536
044E01 3E 01       5310*  	ld a,mos_load
044E03 5B CF       5311*  	RST.LIL 08h
044E05 21 17 02 00 5312*  	ld hl,BUF_20_044
044E09 01 6B 00 00 5313*  	ld bc,107
044E0D 11 5B 00 00 5314*  	ld de,91
044E11 DD 21 09 26 5315*  	ld ix,9737
       00          
044E16 CD 4E B9 04 5316*  	call vdu_load_img
044E1A C9          5317*  	ret
044E1B             5318*  
044E1B             5319*  ld_21_004:
044E1B 21 71 5C 04 5320*  	ld hl,F21_004
044E1F 22 D3 B7 04 5321*  	ld (cur_filename),hl
044E23 11 21 C4 04 5322*  	ld de,filedata
044E27 01 00 00 01 5323*  	ld bc,65536
044E2B 3E 01       5324*  	ld a,mos_load
044E2D 5B CF       5325*  	RST.LIL 08h
044E2F 21 18 02 00 5326*  	ld hl,BUF_21_004
044E33 01 0B 00 00 5327*  	ld bc,11
044E37 11 0B 00 00 5328*  	ld de,11
044E3B DD 21 79 00 5329*  	ld ix,121
       00          
044E40 CD 4E B9 04 5330*  	call vdu_load_img
044E44 C9          5331*  	ret
044E45             5332*  
044E45             5333*  ld_21_020:
044E45 21 85 5C 04 5334*  	ld hl,F21_020
044E49 22 D3 B7 04 5335*  	ld (cur_filename),hl
044E4D 11 21 C4 04 5336*  	ld de,filedata
044E51 01 00 00 01 5337*  	ld bc,65536
044E55 3E 01       5338*  	ld a,mos_load
044E57 5B CF       5339*  	RST.LIL 08h
044E59 21 19 02 00 5340*  	ld hl,BUF_21_020
044E5D 01 0E 00 00 5341*  	ld bc,14
044E61 11 0E 00 00 5342*  	ld de,14
044E65 DD 21 C4 00 5343*  	ld ix,196
       00          
044E6A CD 4E B9 04 5344*  	call vdu_load_img
044E6E C9          5345*  	ret
044E6F             5346*  
044E6F             5347*  ld_21_032:
044E6F 21 99 5C 04 5348*  	ld hl,F21_032
044E73 22 D3 B7 04 5349*  	ld (cur_filename),hl
044E77 11 21 C4 04 5350*  	ld de,filedata
044E7B 01 00 00 01 5351*  	ld bc,65536
044E7F 3E 01       5352*  	ld a,mos_load
044E81 5B CF       5353*  	RST.LIL 08h
044E83 21 1A 02 00 5354*  	ld hl,BUF_21_032
044E87 01 14 00 00 5355*  	ld bc,20
044E8B 11 16 00 00 5356*  	ld de,22
044E8F DD 21 B8 01 5357*  	ld ix,440
       00          
044E94 CD 4E B9 04 5358*  	call vdu_load_img
044E98 C9          5359*  	ret
044E99             5360*  
044E99             5361*  ld_21_040:
044E99 21 AD 5C 04 5362*  	ld hl,F21_040
044E9D 22 D3 B7 04 5363*  	ld (cur_filename),hl
044EA1 11 21 C4 04 5364*  	ld de,filedata
044EA5 01 00 00 01 5365*  	ld bc,65536
044EA9 3E 01       5366*  	ld a,mos_load
044EAB 5B CF       5367*  	RST.LIL 08h
044EAD 21 1B 02 00 5368*  	ld hl,BUF_21_040
044EB1 01 21 00 00 5369*  	ld bc,33
044EB5 11 24 00 00 5370*  	ld de,36
044EB9 DD 21 A4 04 5371*  	ld ix,1188
       00          
044EBE CD 4E B9 04 5372*  	call vdu_load_img
044EC2 C9          5373*  	ret
044EC3             5374*  
044EC3             5375*  ld_21_044:
044EC3 21 C1 5C 04 5376*  	ld hl,F21_044
044EC7 22 D3 B7 04 5377*  	ld (cur_filename),hl
044ECB 11 21 C4 04 5378*  	ld de,filedata
044ECF 01 00 00 01 5379*  	ld bc,65536
044ED3 3E 01       5380*  	ld a,mos_load
044ED5 5B CF       5381*  	RST.LIL 08h
044ED7 21 1C 02 00 5382*  	ld hl,BUF_21_044
044EDB 01 64 00 00 5383*  	ld bc,100
044EDF 11 1E 00 00 5384*  	ld de,30
044EE3 DD 21 B8 0B 5385*  	ld ix,3000
       00          
044EE8 CD 4E B9 04 5386*  	call vdu_load_img
044EEC C9          5387*  	ret
044EED             5388*  
044EED             5389*  ld_22_004:
044EED 21 D5 5C 04 5390*  	ld hl,F22_004
044EF1 22 D3 B7 04 5391*  	ld (cur_filename),hl
044EF5 11 21 C4 04 5392*  	ld de,filedata
044EF9 01 00 00 01 5393*  	ld bc,65536
044EFD 3E 01       5394*  	ld a,mos_load
044EFF 5B CF       5395*  	RST.LIL 08h
044F01 21 1D 02 00 5396*  	ld hl,BUF_22_004
044F05 01 11 00 00 5397*  	ld bc,17
044F09 11 0B 00 00 5398*  	ld de,11
044F0D DD 21 BB 00 5399*  	ld ix,187
       00          
044F12 CD 4E B9 04 5400*  	call vdu_load_img
044F16 C9          5401*  	ret
044F17             5402*  
044F17             5403*  ld_22_020:
044F17 21 E9 5C 04 5404*  	ld hl,F22_020
044F1B 22 D3 B7 04 5405*  	ld (cur_filename),hl
044F1F 11 21 C4 04 5406*  	ld de,filedata
044F23 01 00 00 01 5407*  	ld bc,65536
044F27 3E 01       5408*  	ld a,mos_load
044F29 5B CF       5409*  	RST.LIL 08h
044F2B 21 1E 02 00 5410*  	ld hl,BUF_22_020
044F2F 01 16 00 00 5411*  	ld bc,22
044F33 11 0E 00 00 5412*  	ld de,14
044F37 DD 21 34 01 5413*  	ld ix,308
       00          
044F3C CD 4E B9 04 5414*  	call vdu_load_img
044F40 C9          5415*  	ret
044F41             5416*  
044F41             5417*  ld_22_032:
044F41 21 FD 5C 04 5418*  	ld hl,F22_032
044F45 22 D3 B7 04 5419*  	ld (cur_filename),hl
044F49 11 21 C4 04 5420*  	ld de,filedata
044F4D 01 00 00 01 5421*  	ld bc,65536
044F51 3E 01       5422*  	ld a,mos_load
044F53 5B CF       5423*  	RST.LIL 08h
044F55 21 1F 02 00 5424*  	ld hl,BUF_22_032
044F59 01 1E 00 00 5425*  	ld bc,30
044F5D 11 16 00 00 5426*  	ld de,22
044F61 DD 21 94 02 5427*  	ld ix,660
       00          
044F66 CD 4E B9 04 5428*  	call vdu_load_img
044F6A C9          5429*  	ret
044F6B             5430*  
044F6B             5431*  ld_22_040:
044F6B 21 11 5D 04 5432*  	ld hl,F22_040
044F6F 22 D3 B7 04 5433*  	ld (cur_filename),hl
044F73 11 21 C4 04 5434*  	ld de,filedata
044F77 01 00 00 01 5435*  	ld bc,65536
044F7B 3E 01       5436*  	ld a,mos_load
044F7D 5B CF       5437*  	RST.LIL 08h
044F7F 21 20 02 00 5438*  	ld hl,BUF_22_040
044F83 01 33 00 00 5439*  	ld bc,51
044F87 11 24 00 00 5440*  	ld de,36
044F8B DD 21 2C 07 5441*  	ld ix,1836
       00          
044F90 CD 4E B9 04 5442*  	call vdu_load_img
044F94 C9          5443*  	ret
044F95             5444*  
044F95             5445*  ld_22_044:
044F95 21 25 5D 04 5446*  	ld hl,F22_044
044F99 22 D3 B7 04 5447*  	ld (cur_filename),hl
044F9D 11 21 C4 04 5448*  	ld de,filedata
044FA1 01 00 00 01 5449*  	ld bc,65536
044FA5 3E 01       5450*  	ld a,mos_load
044FA7 5B CF       5451*  	RST.LIL 08h
044FA9 21 21 02 00 5452*  	ld hl,BUF_22_044
044FAD 01 96 00 00 5453*  	ld bc,150
044FB1 11 1E 00 00 5454*  	ld de,30
044FB5 DD 21 94 11 5455*  	ld ix,4500
       00          
044FBA CD 4E B9 04 5456*  	call vdu_load_img
044FBE C9          5457*  	ret
044FBF             5458*  
044FBF             5459*  ld_23_004:
044FBF 21 39 5D 04 5460*  	ld hl,F23_004
044FC3 22 D3 B7 04 5461*  	ld (cur_filename),hl
044FC7 11 21 C4 04 5462*  	ld de,filedata
044FCB 01 00 00 01 5463*  	ld bc,65536
044FCF 3E 01       5464*  	ld a,mos_load
044FD1 5B CF       5465*  	RST.LIL 08h
044FD3 21 22 02 00 5466*  	ld hl,BUF_23_004
044FD7 01 0E 00 00 5467*  	ld bc,14
044FDB 11 06 00 00 5468*  	ld de,6
044FDF DD 21 54 00 5469*  	ld ix,84
       00          
044FE4 CD 4E B9 04 5470*  	call vdu_load_img
044FE8 C9          5471*  	ret
044FE9             5472*  
044FE9             5473*  ld_23_020:
044FE9 21 4D 5D 04 5474*  	ld hl,F23_020
044FED 22 D3 B7 04 5475*  	ld (cur_filename),hl
044FF1 11 21 C4 04 5476*  	ld de,filedata
044FF5 01 00 00 01 5477*  	ld bc,65536
044FF9 3E 01       5478*  	ld a,mos_load
044FFB 5B CF       5479*  	RST.LIL 08h
044FFD 21 23 02 00 5480*  	ld hl,BUF_23_020
045001 01 11 00 00 5481*  	ld bc,17
045005 11 08 00 00 5482*  	ld de,8
045009 DD 21 88 00 5483*  	ld ix,136
       00          
04500E CD 4E B9 04 5484*  	call vdu_load_img
045012 C9          5485*  	ret
045013             5486*  
045013             5487*  ld_23_032:
045013 21 61 5D 04 5488*  	ld hl,F23_032
045017 22 D3 B7 04 5489*  	ld (cur_filename),hl
04501B 11 21 C4 04 5490*  	ld de,filedata
04501F 01 00 00 01 5491*  	ld bc,65536
045023 3E 01       5492*  	ld a,mos_load
045025 5B CF       5493*  	RST.LIL 08h
045027 21 24 02 00 5494*  	ld hl,BUF_23_032
04502B 01 19 00 00 5495*  	ld bc,25
04502F 11 0B 00 00 5496*  	ld de,11
045033 DD 21 13 01 5497*  	ld ix,275
       00          
045038 CD 4E B9 04 5498*  	call vdu_load_img
04503C C9          5499*  	ret
04503D             5500*  
04503D             5501*  ld_23_040:
04503D 21 75 5D 04 5502*  	ld hl,F23_040
045041 22 D3 B7 04 5503*  	ld (cur_filename),hl
045045 11 21 C4 04 5504*  	ld de,filedata
045049 01 00 00 01 5505*  	ld bc,65536
04504D 3E 01       5506*  	ld a,mos_load
04504F 5B CF       5507*  	RST.LIL 08h
045051 21 25 02 00 5508*  	ld hl,BUF_23_040
045055 01 28 00 00 5509*  	ld bc,40
045059 11 12 00 00 5510*  	ld de,18
04505D DD 21 D0 02 5511*  	ld ix,720
       00          
045062 CD 4E B9 04 5512*  	call vdu_load_img
045066 C9          5513*  	ret
045067             5514*  
045067             5515*  ld_23_044:
045067 21 89 5D 04 5516*  	ld hl,F23_044
04506B 22 D3 B7 04 5517*  	ld (cur_filename),hl
04506F 11 21 C4 04 5518*  	ld de,filedata
045073 01 00 00 01 5519*  	ld bc,65536
045077 3E 01       5520*  	ld a,mos_load
045079 5B CF       5521*  	RST.LIL 08h
04507B 21 26 02 00 5522*  	ld hl,BUF_23_044
04507F 01 01 00 00 5523*  	ld bc,1
045083 11 01 00 00 5524*  	ld de,1
045087 DD 21 01 00 5525*  	ld ix,1
       00          
04508C CD 4E B9 04 5526*  	call vdu_load_img
045090 C9          5527*  	ret
045091             5528*  
045091             5529*  ld_24_004:
045091 21 9D 5D 04 5530*  	ld hl,F24_004
045095 22 D3 B7 04 5531*  	ld (cur_filename),hl
045099 11 21 C4 04 5532*  	ld de,filedata
04509D 01 00 00 01 5533*  	ld bc,65536
0450A1 3E 01       5534*  	ld a,mos_load
0450A3 5B CF       5535*  	RST.LIL 08h
0450A5 21 27 02 00 5536*  	ld hl,BUF_24_004
0450A9 01 0B 00 00 5537*  	ld bc,11
0450AD 11 0B 00 00 5538*  	ld de,11
0450B1 DD 21 79 00 5539*  	ld ix,121
       00          
0450B6 CD 4E B9 04 5540*  	call vdu_load_img
0450BA C9          5541*  	ret
0450BB             5542*  
0450BB             5543*  ld_24_020:
0450BB 21 B1 5D 04 5544*  	ld hl,F24_020
0450BF 22 D3 B7 04 5545*  	ld (cur_filename),hl
0450C3 11 21 C4 04 5546*  	ld de,filedata
0450C7 01 00 00 01 5547*  	ld bc,65536
0450CB 3E 01       5548*  	ld a,mos_load
0450CD 5B CF       5549*  	RST.LIL 08h
0450CF 21 28 02 00 5550*  	ld hl,BUF_24_020
0450D3 01 0E 00 00 5551*  	ld bc,14
0450D7 11 0E 00 00 5552*  	ld de,14
0450DB DD 21 C4 00 5553*  	ld ix,196
       00          
0450E0 CD 4E B9 04 5554*  	call vdu_load_img
0450E4 C9          5555*  	ret
0450E5             5556*  
0450E5             5557*  ld_24_032:
0450E5 21 C5 5D 04 5558*  	ld hl,F24_032
0450E9 22 D3 B7 04 5559*  	ld (cur_filename),hl
0450ED 11 21 C4 04 5560*  	ld de,filedata
0450F1 01 00 00 01 5561*  	ld bc,65536
0450F5 3E 01       5562*  	ld a,mos_load
0450F7 5B CF       5563*  	RST.LIL 08h
0450F9 21 29 02 00 5564*  	ld hl,BUF_24_032
0450FD 01 14 00 00 5565*  	ld bc,20
045101 11 16 00 00 5566*  	ld de,22
045105 DD 21 B8 01 5567*  	ld ix,440
       00          
04510A CD 4E B9 04 5568*  	call vdu_load_img
04510E C9          5569*  	ret
04510F             5570*  
04510F             5571*  ld_24_040:
04510F 21 D9 5D 04 5572*  	ld hl,F24_040
045113 22 D3 B7 04 5573*  	ld (cur_filename),hl
045117 11 21 C4 04 5574*  	ld de,filedata
04511B 01 00 00 01 5575*  	ld bc,65536
04511F 3E 01       5576*  	ld a,mos_load
045121 5B CF       5577*  	RST.LIL 08h
045123 21 2A 02 00 5578*  	ld hl,BUF_24_040
045127 01 21 00 00 5579*  	ld bc,33
04512B 11 24 00 00 5580*  	ld de,36
04512F DD 21 A4 04 5581*  	ld ix,1188
       00          
045134 CD 4E B9 04 5582*  	call vdu_load_img
045138 C9          5583*  	ret
045139             5584*  
045139             5585*  ld_24_044:
045139 21 ED 5D 04 5586*  	ld hl,F24_044
04513D 22 D3 B7 04 5587*  	ld (cur_filename),hl
045141 11 21 C4 04 5588*  	ld de,filedata
045145 01 00 00 01 5589*  	ld bc,65536
045149 3E 01       5590*  	ld a,mos_load
04514B 5B CF       5591*  	RST.LIL 08h
04514D 21 2B 02 00 5592*  	ld hl,BUF_24_044
045151 01 64 00 00 5593*  	ld bc,100
045155 11 1E 00 00 5594*  	ld de,30
045159 DD 21 B8 0B 5595*  	ld ix,3000
       00          
04515E CD 4E B9 04 5596*  	call vdu_load_img
045162 C9          5597*  	ret
045163             5598*  
045163             5599*  ld_40_004:
045163 21 01 5E 04 5600*  	ld hl,F40_004
045167 22 D3 B7 04 5601*  	ld (cur_filename),hl
04516B 11 21 C4 04 5602*  	ld de,filedata
04516F 01 00 00 01 5603*  	ld bc,65536
045173 3E 01       5604*  	ld a,mos_load
045175 5B CF       5605*  	RST.LIL 08h
045177 21 2C 02 00 5606*  	ld hl,BUF_40_004
04517B 01 0E 00 00 5607*  	ld bc,14
04517F 11 07 00 00 5608*  	ld de,7
045183 DD 21 62 00 5609*  	ld ix,98
       00          
045188 CD 4E B9 04 5610*  	call vdu_load_img
04518C C9          5611*  	ret
04518D             5612*  
04518D             5613*  ld_40_020:
04518D 21 15 5E 04 5614*  	ld hl,F40_020
045191 22 D3 B7 04 5615*  	ld (cur_filename),hl
045195 11 21 C4 04 5616*  	ld de,filedata
045199 01 00 00 01 5617*  	ld bc,65536
04519D 3E 01       5618*  	ld a,mos_load
04519F 5B CF       5619*  	RST.LIL 08h
0451A1 21 2D 02 00 5620*  	ld hl,BUF_40_020
0451A5 01 12 00 00 5621*  	ld bc,18
0451A9 11 0A 00 00 5622*  	ld de,10
0451AD DD 21 B4 00 5623*  	ld ix,180
       00          
0451B2 CD 4E B9 04 5624*  	call vdu_load_img
0451B6 C9          5625*  	ret
0451B7             5626*  
0451B7             5627*  ld_40_032:
0451B7 21 29 5E 04 5628*  	ld hl,F40_032
0451BB 22 D3 B7 04 5629*  	ld (cur_filename),hl
0451BF 11 21 C4 04 5630*  	ld de,filedata
0451C3 01 00 00 01 5631*  	ld bc,65536
0451C7 3E 01       5632*  	ld a,mos_load
0451C9 5B CF       5633*  	RST.LIL 08h
0451CB 21 2E 02 00 5634*  	ld hl,BUF_40_032
0451CF 01 1A 00 00 5635*  	ld bc,26
0451D3 11 0D 00 00 5636*  	ld de,13
0451D7 DD 21 52 01 5637*  	ld ix,338
       00          
0451DC CD 4E B9 04 5638*  	call vdu_load_img
0451E0 C9          5639*  	ret
0451E1             5640*  
0451E1             5641*  ld_40_040:
0451E1 21 3D 5E 04 5642*  	ld hl,F40_040
0451E5 22 D3 B7 04 5643*  	ld (cur_filename),hl
0451E9 11 21 C4 04 5644*  	ld de,filedata
0451ED 01 00 00 01 5645*  	ld bc,65536
0451F1 3E 01       5646*  	ld a,mos_load
0451F3 5B CF       5647*  	RST.LIL 08h
0451F5 21 2F 02 00 5648*  	ld hl,BUF_40_040
0451F9 01 2B 00 00 5649*  	ld bc,43
0451FD 11 17 00 00 5650*  	ld de,23
045201 DD 21 DD 03 5651*  	ld ix,989
       00          
045206 CD 4E B9 04 5652*  	call vdu_load_img
04520A C9          5653*  	ret
04520B             5654*  
04520B             5655*  ld_40_044:
04520B 21 51 5E 04 5656*  	ld hl,F40_044
04520F 22 D3 B7 04 5657*  	ld (cur_filename),hl
045213 11 21 C4 04 5658*  	ld de,filedata
045217 01 00 00 01 5659*  	ld bc,65536
04521B 3E 01       5660*  	ld a,mos_load
04521D 5B CF       5661*  	RST.LIL 08h
04521F 21 30 02 00 5662*  	ld hl,BUF_40_044
045223 01 01 00 00 5663*  	ld bc,1
045227 11 01 00 00 5664*  	ld de,1
04522B DD 21 01 00 5665*  	ld ix,1
       00          
045230 CD 4E B9 04 5666*  	call vdu_load_img
045234 C9          5667*  	ret
045235             5668*  
045235             5669*  ld_41_004:
045235 21 65 5E 04 5670*  	ld hl,F41_004
045239 22 D3 B7 04 5671*  	ld (cur_filename),hl
04523D 11 21 C4 04 5672*  	ld de,filedata
045241 01 00 00 01 5673*  	ld bc,65536
045245 3E 01       5674*  	ld a,mos_load
045247 5B CF       5675*  	RST.LIL 08h
045249 21 31 02 00 5676*  	ld hl,BUF_41_004
04524D 01 0B 00 00 5677*  	ld bc,11
045251 11 0B 00 00 5678*  	ld de,11
045255 DD 21 79 00 5679*  	ld ix,121
       00          
04525A CD 4E B9 04 5680*  	call vdu_load_img
04525E C9          5681*  	ret
04525F             5682*  
04525F             5683*  ld_41_020:
04525F 21 79 5E 04 5684*  	ld hl,F41_020
045263 22 D3 B7 04 5685*  	ld (cur_filename),hl
045267 11 21 C4 04 5686*  	ld de,filedata
04526B 01 00 00 01 5687*  	ld bc,65536
04526F 3E 01       5688*  	ld a,mos_load
045271 5B CF       5689*  	RST.LIL 08h
045273 21 32 02 00 5690*  	ld hl,BUF_41_020
045277 01 10 00 00 5691*  	ld bc,16
04527B 11 0E 00 00 5692*  	ld de,14
04527F DD 21 E0 00 5693*  	ld ix,224
       00          
045284 CD 4E B9 04 5694*  	call vdu_load_img
045288 C9          5695*  	ret
045289             5696*  
045289             5697*  ld_41_032:
045289 21 8D 5E 04 5698*  	ld hl,F41_032
04528D 22 D3 B7 04 5699*  	ld (cur_filename),hl
045291 11 21 C4 04 5700*  	ld de,filedata
045295 01 00 00 01 5701*  	ld bc,65536
045299 3E 01       5702*  	ld a,mos_load
04529B 5B CF       5703*  	RST.LIL 08h
04529D 21 33 02 00 5704*  	ld hl,BUF_41_032
0452A1 01 16 00 00 5705*  	ld bc,22
0452A5 11 14 00 00 5706*  	ld de,20
0452A9 DD 21 B8 01 5707*  	ld ix,440
       00          
0452AE CD 4E B9 04 5708*  	call vdu_load_img
0452B2 C9          5709*  	ret
0452B3             5710*  
0452B3             5711*  ld_41_040:
0452B3 21 A1 5E 04 5712*  	ld hl,F41_040
0452B7 22 D3 B7 04 5713*  	ld (cur_filename),hl
0452BB 11 21 C4 04 5714*  	ld de,filedata
0452BF 01 00 00 01 5715*  	ld bc,65536
0452C3 3E 01       5716*  	ld a,mos_load
0452C5 5B CF       5717*  	RST.LIL 08h
0452C7 21 34 02 00 5718*  	ld hl,BUF_41_040
0452CB 01 25 00 00 5719*  	ld bc,37
0452CF 11 22 00 00 5720*  	ld de,34
0452D3 DD 21 EA 04 5721*  	ld ix,1258
       00          
0452D8 CD 4E B9 04 5722*  	call vdu_load_img
0452DC C9          5723*  	ret
0452DD             5724*  
0452DD             5725*  ld_41_044:
0452DD 21 B5 5E 04 5726*  	ld hl,F41_044
0452E1 22 D3 B7 04 5727*  	ld (cur_filename),hl
0452E5 11 21 C4 04 5728*  	ld de,filedata
0452E9 01 00 00 01 5729*  	ld bc,65536
0452ED 3E 01       5730*  	ld a,mos_load
0452EF 5B CF       5731*  	RST.LIL 08h
0452F1 21 35 02 00 5732*  	ld hl,BUF_41_044
0452F5 01 23 00 00 5733*  	ld bc,35
0452F9 11 19 00 00 5734*  	ld de,25
0452FD DD 21 6B 03 5735*  	ld ix,875
       00          
045302 CD 4E B9 04 5736*  	call vdu_load_img
045306 C9          5737*  	ret
045307             5738*  
045307             5739*  ld_42_004:
045307 21 C9 5E 04 5740*  	ld hl,F42_004
04530B 22 D3 B7 04 5741*  	ld (cur_filename),hl
04530F 11 21 C4 04 5742*  	ld de,filedata
045313 01 00 00 01 5743*  	ld bc,65536
045317 3E 01       5744*  	ld a,mos_load
045319 5B CF       5745*  	RST.LIL 08h
04531B 21 36 02 00 5746*  	ld hl,BUF_42_004
04531F 01 0A 00 00 5747*  	ld bc,10
045323 11 09 00 00 5748*  	ld de,9
045327 DD 21 5A 00 5749*  	ld ix,90
       00          
04532C CD 4E B9 04 5750*  	call vdu_load_img
045330 C9          5751*  	ret
045331             5752*  
045331             5753*  ld_42_020:
045331 21 DD 5E 04 5754*  	ld hl,F42_020
045335 22 D3 B7 04 5755*  	ld (cur_filename),hl
045339 11 21 C4 04 5756*  	ld de,filedata
04533D 01 00 00 01 5757*  	ld bc,65536
045341 3E 01       5758*  	ld a,mos_load
045343 5B CF       5759*  	RST.LIL 08h
045345 21 37 02 00 5760*  	ld hl,BUF_42_020
045349 01 0E 00 00 5761*  	ld bc,14
04534D 11 0B 00 00 5762*  	ld de,11
045351 DD 21 9A 00 5763*  	ld ix,154
       00          
045356 CD 4E B9 04 5764*  	call vdu_load_img
04535A C9          5765*  	ret
04535B             5766*  
04535B             5767*  ld_42_032:
04535B 21 F1 5E 04 5768*  	ld hl,F42_032
04535F 22 D3 B7 04 5769*  	ld (cur_filename),hl
045363 11 21 C4 04 5770*  	ld de,filedata
045367 01 00 00 01 5771*  	ld bc,65536
04536B 3E 01       5772*  	ld a,mos_load
04536D 5B CF       5773*  	RST.LIL 08h
04536F 21 38 02 00 5774*  	ld hl,BUF_42_032
045373 01 13 00 00 5775*  	ld bc,19
045377 11 10 00 00 5776*  	ld de,16
04537B DD 21 30 01 5777*  	ld ix,304
       00          
045380 CD 4E B9 04 5778*  	call vdu_load_img
045384 C9          5779*  	ret
045385             5780*  
045385             5781*  ld_42_040:
045385 21 05 5F 04 5782*  	ld hl,F42_040
045389 22 D3 B7 04 5783*  	ld (cur_filename),hl
04538D 11 21 C4 04 5784*  	ld de,filedata
045391 01 00 00 01 5785*  	ld bc,65536
045395 3E 01       5786*  	ld a,mos_load
045397 5B CF       5787*  	RST.LIL 08h
045399 21 39 02 00 5788*  	ld hl,BUF_42_040
04539D 01 20 00 00 5789*  	ld bc,32
0453A1 11 1B 00 00 5790*  	ld de,27
0453A5 DD 21 60 03 5791*  	ld ix,864
       00          
0453AA CD 4E B9 04 5792*  	call vdu_load_img
0453AE C9          5793*  	ret
0453AF             5794*  
0453AF             5795*  ld_42_044:
0453AF 21 19 5F 04 5796*  	ld hl,F42_044
0453B3 22 D3 B7 04 5797*  	ld (cur_filename),hl
0453B7 11 21 C4 04 5798*  	ld de,filedata
0453BB 01 00 00 01 5799*  	ld bc,65536
0453BF 3E 01       5800*  	ld a,mos_load
0453C1 5B CF       5801*  	RST.LIL 08h
0453C3 21 3A 02 00 5802*  	ld hl,BUF_42_044
0453C7 01 3F 00 00 5803*  	ld bc,63
0453CB 11 04 00 00 5804*  	ld de,4
0453CF DD 21 FC 00 5805*  	ld ix,252
       00          
0453D4 CD 4E B9 04 5806*  	call vdu_load_img
0453D8 C9          5807*  	ret
0453D9             5808*  
0453D9             5809*  ld_43_004:
0453D9 21 2D 5F 04 5810*  	ld hl,F43_004
0453DD 22 D3 B7 04 5811*  	ld (cur_filename),hl
0453E1 11 21 C4 04 5812*  	ld de,filedata
0453E5 01 00 00 01 5813*  	ld bc,65536
0453E9 3E 01       5814*  	ld a,mos_load
0453EB 5B CF       5815*  	RST.LIL 08h
0453ED 21 3B 02 00 5816*  	ld hl,BUF_43_004
0453F1 01 0B 00 00 5817*  	ld bc,11
0453F5 11 04 00 00 5818*  	ld de,4
0453F9 DD 21 2C 00 5819*  	ld ix,44
       00          
0453FE CD 4E B9 04 5820*  	call vdu_load_img
045402 C9          5821*  	ret
045403             5822*  
045403             5823*  ld_43_020:
045403 21 41 5F 04 5824*  	ld hl,F43_020
045407 22 D3 B7 04 5825*  	ld (cur_filename),hl
04540B 11 21 C4 04 5826*  	ld de,filedata
04540F 01 00 00 01 5827*  	ld bc,65536
045413 3E 01       5828*  	ld a,mos_load
045415 5B CF       5829*  	RST.LIL 08h
045417 21 3C 02 00 5830*  	ld hl,BUF_43_020
04541B 01 0F 00 00 5831*  	ld bc,15
04541F 11 04 00 00 5832*  	ld de,4
045423 DD 21 3C 00 5833*  	ld ix,60
       00          
045428 CD 4E B9 04 5834*  	call vdu_load_img
04542C C9          5835*  	ret
04542D             5836*  
04542D             5837*  ld_43_032:
04542D 21 55 5F 04 5838*  	ld hl,F43_032
045431 22 D3 B7 04 5839*  	ld (cur_filename),hl
045435 11 21 C4 04 5840*  	ld de,filedata
045439 01 00 00 01 5841*  	ld bc,65536
04543D 3E 01       5842*  	ld a,mos_load
04543F 5B CF       5843*  	RST.LIL 08h
045441 21 3D 02 00 5844*  	ld hl,BUF_43_032
045445 01 15 00 00 5845*  	ld bc,21
045449 11 07 00 00 5846*  	ld de,7
04544D DD 21 93 00 5847*  	ld ix,147
       00          
045452 CD 4E B9 04 5848*  	call vdu_load_img
045456 C9          5849*  	ret
045457             5850*  
045457             5851*  ld_43_040:
045457 21 69 5F 04 5852*  	ld hl,F43_040
04545B 22 D3 B7 04 5853*  	ld (cur_filename),hl
04545F 11 21 C4 04 5854*  	ld de,filedata
045463 01 00 00 01 5855*  	ld bc,65536
045467 3E 01       5856*  	ld a,mos_load
045469 5B CF       5857*  	RST.LIL 08h
04546B 21 3E 02 00 5858*  	ld hl,BUF_43_040
04546F 01 23 00 00 5859*  	ld bc,35
045473 11 0D 00 00 5860*  	ld de,13
045477 DD 21 C7 01 5861*  	ld ix,455
       00          
04547C CD 4E B9 04 5862*  	call vdu_load_img
045480 C9          5863*  	ret
045481             5864*  
045481             5865*  ld_43_044:
045481 21 7D 5F 04 5866*  	ld hl,F43_044
045485 22 D3 B7 04 5867*  	ld (cur_filename),hl
045489 11 21 C4 04 5868*  	ld de,filedata
04548D 01 00 00 01 5869*  	ld bc,65536
045491 3E 01       5870*  	ld a,mos_load
045493 5B CF       5871*  	RST.LIL 08h
045495 21 3F 02 00 5872*  	ld hl,BUF_43_044
045499 01 01 00 00 5873*  	ld bc,1
04549D 11 01 00 00 5874*  	ld de,1
0454A1 DD 21 01 00 5875*  	ld ix,1
       00          
0454A6 CD 4E B9 04 5876*  	call vdu_load_img
0454AA C9          5877*  	ret
0454AB             5878*  
0454AB             5879*  ld_44_004:
0454AB 21 91 5F 04 5880*  	ld hl,F44_004
0454AF 22 D3 B7 04 5881*  	ld (cur_filename),hl
0454B3 11 21 C4 04 5882*  	ld de,filedata
0454B7 01 00 00 01 5883*  	ld bc,65536
0454BB 3E 01       5884*  	ld a,mos_load
0454BD 5B CF       5885*  	RST.LIL 08h
0454BF 21 40 02 00 5886*  	ld hl,BUF_44_004
0454C3 01 05 00 00 5887*  	ld bc,5
0454C7 11 04 00 00 5888*  	ld de,4
0454CB DD 21 14 00 5889*  	ld ix,20
       00          
0454D0 CD 4E B9 04 5890*  	call vdu_load_img
0454D4 C9          5891*  	ret
0454D5             5892*  
0454D5             5893*  ld_44_020:
0454D5 21 A5 5F 04 5894*  	ld hl,F44_020
0454D9 22 D3 B7 04 5895*  	ld (cur_filename),hl
0454DD 11 21 C4 04 5896*  	ld de,filedata
0454E1 01 00 00 01 5897*  	ld bc,65536
0454E5 3E 01       5898*  	ld a,mos_load
0454E7 5B CF       5899*  	RST.LIL 08h
0454E9 21 41 02 00 5900*  	ld hl,BUF_44_020
0454ED 01 08 00 00 5901*  	ld bc,8
0454F1 11 06 00 00 5902*  	ld de,6
0454F5 DD 21 30 00 5903*  	ld ix,48
       00          
0454FA CD 4E B9 04 5904*  	call vdu_load_img
0454FE C9          5905*  	ret
0454FF             5906*  
0454FF             5907*  ld_44_032:
0454FF 21 B9 5F 04 5908*  	ld hl,F44_032
045503 22 D3 B7 04 5909*  	ld (cur_filename),hl
045507 11 21 C4 04 5910*  	ld de,filedata
04550B 01 00 00 01 5911*  	ld bc,65536
04550F 3E 01       5912*  	ld a,mos_load
045511 5B CF       5913*  	RST.LIL 08h
045513 21 42 02 00 5914*  	ld hl,BUF_44_032
045517 01 0D 00 00 5915*  	ld bc,13
04551B 11 0A 00 00 5916*  	ld de,10
04551F DD 21 82 00 5917*  	ld ix,130
       00          
045524 CD 4E B9 04 5918*  	call vdu_load_img
045528 C9          5919*  	ret
045529             5920*  
045529             5921*  ld_44_040:
045529 21 CD 5F 04 5922*  	ld hl,F44_040
04552D 22 D3 B7 04 5923*  	ld (cur_filename),hl
045531 11 21 C4 04 5924*  	ld de,filedata
045535 01 00 00 01 5925*  	ld bc,65536
045539 3E 01       5926*  	ld a,mos_load
04553B 5B CF       5927*  	RST.LIL 08h
04553D 21 43 02 00 5928*  	ld hl,BUF_44_040
045541 01 14 00 00 5929*  	ld bc,20
045545 11 0F 00 00 5930*  	ld de,15
045549 DD 21 2C 01 5931*  	ld ix,300
       00          
04554E CD 4E B9 04 5932*  	call vdu_load_img
045552 C9          5933*  	ret
045553             5934*  
045553             5935*  ld_44_044:
045553 21 E1 5F 04 5936*  	ld hl,F44_044
045557 22 D3 B7 04 5937*  	ld (cur_filename),hl
04555B 11 21 C4 04 5938*  	ld de,filedata
04555F 01 00 00 01 5939*  	ld bc,65536
045563 3E 01       5940*  	ld a,mos_load
045565 5B CF       5941*  	RST.LIL 08h
045567 21 44 02 00 5942*  	ld hl,BUF_44_044
04556B 01 01 00 00 5943*  	ld bc,1
04556F 11 01 00 00 5944*  	ld de,1
045573 DD 21 01 00 5945*  	ld ix,1
       00          
045578 CD 4E B9 04 5946*  	call vdu_load_img
04557C C9          5947*  	ret
04557D             5948*  
04557D             5949*  ld_45_004:
04557D 21 F5 5F 04 5950*  	ld hl,F45_004
045581 22 D3 B7 04 5951*  	ld (cur_filename),hl
045585 11 21 C4 04 5952*  	ld de,filedata
045589 01 00 00 01 5953*  	ld bc,65536
04558D 3E 01       5954*  	ld a,mos_load
04558F 5B CF       5955*  	RST.LIL 08h
045591 21 45 02 00 5956*  	ld hl,BUF_45_004
045595 01 10 00 00 5957*  	ld bc,16
045599 11 0A 00 00 5958*  	ld de,10
04559D DD 21 A0 00 5959*  	ld ix,160
       00          
0455A2 CD 4E B9 04 5960*  	call vdu_load_img
0455A6 C9          5961*  	ret
0455A7             5962*  
0455A7             5963*  ld_45_020:
0455A7 21 09 60 04 5964*  	ld hl,F45_020
0455AB 22 D3 B7 04 5965*  	ld (cur_filename),hl
0455AF 11 21 C4 04 5966*  	ld de,filedata
0455B3 01 00 00 01 5967*  	ld bc,65536
0455B7 3E 01       5968*  	ld a,mos_load
0455B9 5B CF       5969*  	RST.LIL 08h
0455BB 21 46 02 00 5970*  	ld hl,BUF_45_020
0455BF 01 14 00 00 5971*  	ld bc,20
0455C3 11 0D 00 00 5972*  	ld de,13
0455C7 DD 21 04 01 5973*  	ld ix,260
       00          
0455CC CD 4E B9 04 5974*  	call vdu_load_img
0455D0 C9          5975*  	ret
0455D1             5976*  
0455D1             5977*  ld_45_032:
0455D1 21 1D 60 04 5978*  	ld hl,F45_032
0455D5 22 D3 B7 04 5979*  	ld (cur_filename),hl
0455D9 11 21 C4 04 5980*  	ld de,filedata
0455DD 01 00 00 01 5981*  	ld bc,65536
0455E1 3E 01       5982*  	ld a,mos_load
0455E3 5B CF       5983*  	RST.LIL 08h
0455E5 21 47 02 00 5984*  	ld hl,BUF_45_032
0455E9 01 1D 00 00 5985*  	ld bc,29
0455ED 11 12 00 00 5986*  	ld de,18
0455F1 DD 21 0A 02 5987*  	ld ix,522
       00          
0455F6 CD 4E B9 04 5988*  	call vdu_load_img
0455FA C9          5989*  	ret
0455FB             5990*  
0455FB             5991*  ld_45_040:
0455FB 21 31 60 04 5992*  	ld hl,F45_040
0455FF 22 D3 B7 04 5993*  	ld (cur_filename),hl
045603 11 21 C4 04 5994*  	ld de,filedata
045607 01 00 00 01 5995*  	ld bc,65536
04560B 3E 01       5996*  	ld a,mos_load
04560D 5B CF       5997*  	RST.LIL 08h
04560F 21 48 02 00 5998*  	ld hl,BUF_45_040
045613 01 30 00 00 5999*  	ld bc,48
045617 11 21 00 00 6000*  	ld de,33
04561B DD 21 30 06 6001*  	ld ix,1584
       00          
045620 CD 4E B9 04 6002*  	call vdu_load_img
045624 C9          6003*  	ret
045625             6004*  
045625             6005*  ld_45_044:
045625 21 45 60 04 6006*  	ld hl,F45_044
045629 22 D3 B7 04 6007*  	ld (cur_filename),hl
04562D 11 21 C4 04 6008*  	ld de,filedata
045631 01 00 00 01 6009*  	ld bc,65536
045635 3E 01       6010*  	ld a,mos_load
045637 5B CF       6011*  	RST.LIL 08h
045639 21 49 02 00 6012*  	ld hl,BUF_45_044
04563D 01 75 00 00 6013*  	ld bc,117
045641 11 13 00 00 6014*  	ld de,19
045645 DD 21 AF 08 6015*  	ld ix,2223
       00          
04564A CD 4E B9 04 6016*  	call vdu_load_img
04564E C9          6017*  	ret
04564F             6018*  
04564F             6019*  ld_46_004:
04564F 21 59 60 04 6020*  	ld hl,F46_004
045653 22 D3 B7 04 6021*  	ld (cur_filename),hl
045657 11 21 C4 04 6022*  	ld de,filedata
04565B 01 00 00 01 6023*  	ld bc,65536
04565F 3E 01       6024*  	ld a,mos_load
045661 5B CF       6025*  	RST.LIL 08h
045663 21 4A 02 00 6026*  	ld hl,BUF_46_004
045667 01 10 00 00 6027*  	ld bc,16
04566B 11 08 00 00 6028*  	ld de,8
04566F DD 21 80 00 6029*  	ld ix,128
       00          
045674 CD 4E B9 04 6030*  	call vdu_load_img
045678 C9          6031*  	ret
045679             6032*  
045679             6033*  ld_46_020:
045679 21 6D 60 04 6034*  	ld hl,F46_020
04567D 22 D3 B7 04 6035*  	ld (cur_filename),hl
045681 11 21 C4 04 6036*  	ld de,filedata
045685 01 00 00 01 6037*  	ld bc,65536
045689 3E 01       6038*  	ld a,mos_load
04568B 5B CF       6039*  	RST.LIL 08h
04568D 21 4B 02 00 6040*  	ld hl,BUF_46_020
045691 01 14 00 00 6041*  	ld bc,20
045695 11 0B 00 00 6042*  	ld de,11
045699 DD 21 DC 00 6043*  	ld ix,220
       00          
04569E CD 4E B9 04 6044*  	call vdu_load_img
0456A2 C9          6045*  	ret
0456A3             6046*  
0456A3             6047*  ld_46_032:
0456A3 21 81 60 04 6048*  	ld hl,F46_032
0456A7 22 D3 B7 04 6049*  	ld (cur_filename),hl
0456AB 11 21 C4 04 6050*  	ld de,filedata
0456AF 01 00 00 01 6051*  	ld bc,65536
0456B3 3E 01       6052*  	ld a,mos_load
0456B5 5B CF       6053*  	RST.LIL 08h
0456B7 21 4C 02 00 6054*  	ld hl,BUF_46_032
0456BB 01 1D 00 00 6055*  	ld bc,29
0456BF 11 0F 00 00 6056*  	ld de,15
0456C3 DD 21 B3 01 6057*  	ld ix,435
       00          
0456C8 CD 4E B9 04 6058*  	call vdu_load_img
0456CC C9          6059*  	ret
0456CD             6060*  
0456CD             6061*  ld_46_040:
0456CD 21 95 60 04 6062*  	ld hl,F46_040
0456D1 22 D3 B7 04 6063*  	ld (cur_filename),hl
0456D5 11 21 C4 04 6064*  	ld de,filedata
0456D9 01 00 00 01 6065*  	ld bc,65536
0456DD 3E 01       6066*  	ld a,mos_load
0456DF 5B CF       6067*  	RST.LIL 08h
0456E1 21 4D 02 00 6068*  	ld hl,BUF_46_040
0456E5 01 30 00 00 6069*  	ld bc,48
0456E9 11 1B 00 00 6070*  	ld de,27
0456ED DD 21 10 05 6071*  	ld ix,1296
       00          
0456F2 CD 4E B9 04 6072*  	call vdu_load_img
0456F6 C9          6073*  	ret
0456F7             6074*  
0456F7             6075*  ld_46_044:
0456F7 21 A9 60 04 6076*  	ld hl,F46_044
0456FB 22 D3 B7 04 6077*  	ld (cur_filename),hl
0456FF 11 21 C4 04 6078*  	ld de,filedata
045703 01 00 00 01 6079*  	ld bc,65536
045707 3E 01       6080*  	ld a,mos_load
045709 5B CF       6081*  	RST.LIL 08h
04570B 21 4E 02 00 6082*  	ld hl,BUF_46_044
04570F 01 51 00 00 6083*  	ld bc,81
045713 11 01 00 00 6084*  	ld de,1
045717 DD 21 51 00 6085*  	ld ix,81
       00          
04571C CD 4E B9 04 6086*  	call vdu_load_img
045720 C9          6087*  	ret
045721             6088*  
045721             6089*  ld_47_004:
045721 21 BD 60 04 6090*  	ld hl,F47_004
045725 22 D3 B7 04 6091*  	ld (cur_filename),hl
045729 11 21 C4 04 6092*  	ld de,filedata
04572D 01 00 00 01 6093*  	ld bc,65536
045731 3E 01       6094*  	ld a,mos_load
045733 5B CF       6095*  	RST.LIL 08h
045735 21 4F 02 00 6096*  	ld hl,BUF_47_004
045739 01 10 00 00 6097*  	ld bc,16
04573D 11 09 00 00 6098*  	ld de,9
045741 DD 21 90 00 6099*  	ld ix,144
       00          
045746 CD 4E B9 04 6100*  	call vdu_load_img
04574A C9          6101*  	ret
04574B             6102*  
04574B             6103*  ld_47_020:
04574B 21 D1 60 04 6104*  	ld hl,F47_020
04574F 22 D3 B7 04 6105*  	ld (cur_filename),hl
045753 11 21 C4 04 6106*  	ld de,filedata
045757 01 00 00 01 6107*  	ld bc,65536
04575B 3E 01       6108*  	ld a,mos_load
04575D 5B CF       6109*  	RST.LIL 08h
04575F 21 50 02 00 6110*  	ld hl,BUF_47_020
045763 01 14 00 00 6111*  	ld bc,20
045767 11 0B 00 00 6112*  	ld de,11
04576B DD 21 DC 00 6113*  	ld ix,220
       00          
045770 CD 4E B9 04 6114*  	call vdu_load_img
045774 C9          6115*  	ret
045775             6116*  
045775             6117*  ld_47_032:
045775 21 E5 60 04 6118*  	ld hl,F47_032
045779 22 D3 B7 04 6119*  	ld (cur_filename),hl
04577D 11 21 C4 04 6120*  	ld de,filedata
045781 01 00 00 01 6121*  	ld bc,65536
045785 3E 01       6122*  	ld a,mos_load
045787 5B CF       6123*  	RST.LIL 08h
045789 21 51 02 00 6124*  	ld hl,BUF_47_032
04578D 01 1D 00 00 6125*  	ld bc,29
045791 11 11 00 00 6126*  	ld de,17
045795 DD 21 ED 01 6127*  	ld ix,493
       00          
04579A CD 4E B9 04 6128*  	call vdu_load_img
04579E C9          6129*  	ret
04579F             6130*  
04579F             6131*  ld_47_040:
04579F 21 F9 60 04 6132*  	ld hl,F47_040
0457A3 22 D3 B7 04 6133*  	ld (cur_filename),hl
0457A7 11 21 C4 04 6134*  	ld de,filedata
0457AB 01 00 00 01 6135*  	ld bc,65536
0457AF 3E 01       6136*  	ld a,mos_load
0457B1 5B CF       6137*  	RST.LIL 08h
0457B3 21 52 02 00 6138*  	ld hl,BUF_47_040
0457B7 01 30 00 00 6139*  	ld bc,48
0457BB 11 1B 00 00 6140*  	ld de,27
0457BF DD 21 10 05 6141*  	ld ix,1296
       00          
0457C4 CD 4E B9 04 6142*  	call vdu_load_img
0457C8 C9          6143*  	ret
0457C9             6144*  
0457C9             6145*  ld_47_044:
0457C9 21 0D 61 04 6146*  	ld hl,F47_044
0457CD 22 D3 B7 04 6147*  	ld (cur_filename),hl
0457D1 11 21 C4 04 6148*  	ld de,filedata
0457D5 01 00 00 01 6149*  	ld bc,65536
0457D9 3E 01       6150*  	ld a,mos_load
0457DB 5B CF       6151*  	RST.LIL 08h
0457DD 21 53 02 00 6152*  	ld hl,BUF_47_044
0457E1 01 1B 00 00 6153*  	ld bc,27
0457E5 11 0A 00 00 6154*  	ld de,10
0457E9 DD 21 0E 01 6155*  	ld ix,270
       00          
0457EE CD 4E B9 04 6156*  	call vdu_load_img
0457F2 C9          6157*  	ret
0457F3             6158*  
0457F3             6159*  ld_48_004:
0457F3 21 21 61 04 6160*  	ld hl,F48_004
0457F7 22 D3 B7 04 6161*  	ld (cur_filename),hl
0457FB 11 21 C4 04 6162*  	ld de,filedata
0457FF 01 00 00 01 6163*  	ld bc,65536
045803 3E 01       6164*  	ld a,mos_load
045805 5B CF       6165*  	RST.LIL 08h
045807 21 54 02 00 6166*  	ld hl,BUF_48_004
04580B 01 12 00 00 6167*  	ld bc,18
04580F 11 07 00 00 6168*  	ld de,7
045813 DD 21 7E 00 6169*  	ld ix,126
       00          
045818 CD 4E B9 04 6170*  	call vdu_load_img
04581C C9          6171*  	ret
04581D             6172*  
04581D             6173*  ld_48_020:
04581D 21 35 61 04 6174*  	ld hl,F48_020
045821 22 D3 B7 04 6175*  	ld (cur_filename),hl
045825 11 21 C4 04 6176*  	ld de,filedata
045829 01 00 00 01 6177*  	ld bc,65536
04582D 3E 01       6178*  	ld a,mos_load
04582F 5B CF       6179*  	RST.LIL 08h
045831 21 55 02 00 6180*  	ld hl,BUF_48_020
045835 01 17 00 00 6181*  	ld bc,23
045839 11 0A 00 00 6182*  	ld de,10
04583D DD 21 E6 00 6183*  	ld ix,230
       00          
045842 CD 4E B9 04 6184*  	call vdu_load_img
045846 C9          6185*  	ret
045847             6186*  
045847             6187*  ld_48_032:
045847 21 49 61 04 6188*  	ld hl,F48_032
04584B 22 D3 B7 04 6189*  	ld (cur_filename),hl
04584F 11 21 C4 04 6190*  	ld de,filedata
045853 01 00 00 01 6191*  	ld bc,65536
045857 3E 01       6192*  	ld a,mos_load
045859 5B CF       6193*  	RST.LIL 08h
04585B 21 56 02 00 6194*  	ld hl,BUF_48_032
04585F 01 20 00 00 6195*  	ld bc,32
045863 11 0D 00 00 6196*  	ld de,13
045867 DD 21 A0 01 6197*  	ld ix,416
       00          
04586C CD 4E B9 04 6198*  	call vdu_load_img
045870 C9          6199*  	ret
045871             6200*  
045871             6201*  ld_48_040:
045871 21 5D 61 04 6202*  	ld hl,F48_040
045875 22 D3 B7 04 6203*  	ld (cur_filename),hl
045879 11 21 C4 04 6204*  	ld de,filedata
04587D 01 00 00 01 6205*  	ld bc,65536
045881 3E 01       6206*  	ld a,mos_load
045883 5B CF       6207*  	RST.LIL 08h
045885 21 57 02 00 6208*  	ld hl,BUF_48_040
045889 01 35 00 00 6209*  	ld bc,53
04588D 11 18 00 00 6210*  	ld de,24
045891 DD 21 F8 04 6211*  	ld ix,1272
       00          
045896 CD 4E B9 04 6212*  	call vdu_load_img
04589A C9          6213*  	ret
04589B             6214*  
04589B             6215*  ld_48_044:
04589B 21 71 61 04 6216*  	ld hl,F48_044
04589F 22 D3 B7 04 6217*  	ld (cur_filename),hl
0458A3 11 21 C4 04 6218*  	ld de,filedata
0458A7 01 00 00 01 6219*  	ld bc,65536
0458AB 3E 01       6220*  	ld a,mos_load
0458AD 5B CF       6221*  	RST.LIL 08h
0458AF 21 58 02 00 6222*  	ld hl,BUF_48_044
0458B3 01 01 00 00 6223*  	ld bc,1
0458B7 11 01 00 00 6224*  	ld de,1
0458BB DD 21 01 00 6225*  	ld ix,1
       00          
0458C0 CD 4E B9 04 6226*  	call vdu_load_img
0458C4 C9          6227*  	ret
0458C5             6228*  
0458C5             6229*  ld_49_004:
0458C5 21 85 61 04 6230*  	ld hl,F49_004
0458C9 22 D3 B7 04 6231*  	ld (cur_filename),hl
0458CD 11 21 C4 04 6232*  	ld de,filedata
0458D1 01 00 00 01 6233*  	ld bc,65536
0458D5 3E 01       6234*  	ld a,mos_load
0458D7 5B CF       6235*  	RST.LIL 08h
0458D9 21 59 02 00 6236*  	ld hl,BUF_49_004
0458DD 01 0E 00 00 6237*  	ld bc,14
0458E1 11 06 00 00 6238*  	ld de,6
0458E5 DD 21 54 00 6239*  	ld ix,84
       00          
0458EA CD 4E B9 04 6240*  	call vdu_load_img
0458EE C9          6241*  	ret
0458EF             6242*  
0458EF             6243*  ld_49_020:
0458EF 21 99 61 04 6244*  	ld hl,F49_020
0458F3 22 D3 B7 04 6245*  	ld (cur_filename),hl
0458F7 11 21 C4 04 6246*  	ld de,filedata
0458FB 01 00 00 01 6247*  	ld bc,65536
0458FF 3E 01       6248*  	ld a,mos_load
045901 5B CF       6249*  	RST.LIL 08h
045903 21 5A 02 00 6250*  	ld hl,BUF_49_020
045907 01 12 00 00 6251*  	ld bc,18
04590B 11 08 00 00 6252*  	ld de,8
04590F DD 21 90 00 6253*  	ld ix,144
       00          
045914 CD 4E B9 04 6254*  	call vdu_load_img
045918 C9          6255*  	ret
045919             6256*  
045919             6257*  ld_49_032:
045919 21 AD 61 04 6258*  	ld hl,F49_032
04591D 22 D3 B7 04 6259*  	ld (cur_filename),hl
045921 11 21 C4 04 6260*  	ld de,filedata
045925 01 00 00 01 6261*  	ld bc,65536
045929 3E 01       6262*  	ld a,mos_load
04592B 5B CF       6263*  	RST.LIL 08h
04592D 21 5B 02 00 6264*  	ld hl,BUF_49_032
045931 01 1A 00 00 6265*  	ld bc,26
045935 11 0B 00 00 6266*  	ld de,11
045939 DD 21 1E 01 6267*  	ld ix,286
       00          
04593E CD 4E B9 04 6268*  	call vdu_load_img
045942 C9          6269*  	ret
045943             6270*  
045943             6271*  ld_49_040:
045943 21 C1 61 04 6272*  	ld hl,F49_040
045947 22 D3 B7 04 6273*  	ld (cur_filename),hl
04594B 11 21 C4 04 6274*  	ld de,filedata
04594F 01 00 00 01 6275*  	ld bc,65536
045953 3E 01       6276*  	ld a,mos_load
045955 5B CF       6277*  	RST.LIL 08h
045957 21 5C 02 00 6278*  	ld hl,BUF_49_040
04595B 01 2B 00 00 6279*  	ld bc,43
04595F 11 12 00 00 6280*  	ld de,18
045963 DD 21 06 03 6281*  	ld ix,774
       00          
045968 CD 4E B9 04 6282*  	call vdu_load_img
04596C C9          6283*  	ret
04596D             6284*  
04596D             6285*  ld_49_044:
04596D 21 D5 61 04 6286*  	ld hl,F49_044
045971 22 D3 B7 04 6287*  	ld (cur_filename),hl
045975 11 21 C4 04 6288*  	ld de,filedata
045979 01 00 00 01 6289*  	ld bc,65536
04597D 3E 01       6290*  	ld a,mos_load
04597F 5B CF       6291*  	RST.LIL 08h
045981 21 5D 02 00 6292*  	ld hl,BUF_49_044
045985 01 01 00 00 6293*  	ld bc,1
045989 11 01 00 00 6294*  	ld de,1
04598D DD 21 01 00 6295*  	ld ix,1
       00          
045992 CD 4E B9 04 6296*  	call vdu_load_img
045996 C9          6297*  	ret
045997             6298*  
045997             6299*  ld_50_004:
045997 21 E9 61 04 6300*  	ld hl,F50_004
04599B 22 D3 B7 04 6301*  	ld (cur_filename),hl
04599F 11 21 C4 04 6302*  	ld de,filedata
0459A3 01 00 00 01 6303*  	ld bc,65536
0459A7 3E 01       6304*  	ld a,mos_load
0459A9 5B CF       6305*  	RST.LIL 08h
0459AB 21 5E 02 00 6306*  	ld hl,BUF_50_004
0459AF 01 0A 00 00 6307*  	ld bc,10
0459B3 11 0D 00 00 6308*  	ld de,13
0459B7 DD 21 82 00 6309*  	ld ix,130
       00          
0459BC CD 4E B9 04 6310*  	call vdu_load_img
0459C0 C9          6311*  	ret
0459C1             6312*  
0459C1             6313*  ld_50_020:
0459C1 21 FD 61 04 6314*  	ld hl,F50_020
0459C5 22 D3 B7 04 6315*  	ld (cur_filename),hl
0459C9 11 21 C4 04 6316*  	ld de,filedata
0459CD 01 00 00 01 6317*  	ld bc,65536
0459D1 3E 01       6318*  	ld a,mos_load
0459D3 5B CF       6319*  	RST.LIL 08h
0459D5 21 5F 02 00 6320*  	ld hl,BUF_50_020
0459D9 01 0D 00 00 6321*  	ld bc,13
0459DD 11 11 00 00 6322*  	ld de,17
0459E1 DD 21 DD 00 6323*  	ld ix,221
       00          
0459E6 CD 4E B9 04 6324*  	call vdu_load_img
0459EA C9          6325*  	ret
0459EB             6326*  
0459EB             6327*  ld_50_032:
0459EB 21 11 62 04 6328*  	ld hl,F50_032
0459EF 22 D3 B7 04 6329*  	ld (cur_filename),hl
0459F3 11 21 C4 04 6330*  	ld de,filedata
0459F7 01 00 00 01 6331*  	ld bc,65536
0459FB 3E 01       6332*  	ld a,mos_load
0459FD 5B CF       6333*  	RST.LIL 08h
0459FF 21 60 02 00 6334*  	ld hl,BUF_50_032
045A03 01 12 00 00 6335*  	ld bc,18
045A07 11 1A 00 00 6336*  	ld de,26
045A0B DD 21 D4 01 6337*  	ld ix,468
       00          
045A10 CD 4E B9 04 6338*  	call vdu_load_img
045A14 C9          6339*  	ret
045A15             6340*  
045A15             6341*  ld_50_040:
045A15 21 25 62 04 6342*  	ld hl,F50_040
045A19 22 D3 B7 04 6343*  	ld (cur_filename),hl
045A1D 11 21 C4 04 6344*  	ld de,filedata
045A21 01 00 00 01 6345*  	ld bc,65536
045A25 3E 01       6346*  	ld a,mos_load
045A27 5B CF       6347*  	RST.LIL 08h
045A29 21 61 02 00 6348*  	ld hl,BUF_50_040
045A2D 01 1E 00 00 6349*  	ld bc,30
045A31 11 2A 00 00 6350*  	ld de,42
045A35 DD 21 EC 04 6351*  	ld ix,1260
       00          
045A3A CD 4E B9 04 6352*  	call vdu_load_img
045A3E C9          6353*  	ret
045A3F             6354*  
045A3F             6355*  ld_50_044:
045A3F 21 39 62 04 6356*  	ld hl,F50_044
045A43 22 D3 B7 04 6357*  	ld (cur_filename),hl
045A47 11 21 C4 04 6358*  	ld de,filedata
045A4B 01 00 00 01 6359*  	ld bc,65536
045A4F 3E 01       6360*  	ld a,mos_load
045A51 5B CF       6361*  	RST.LIL 08h
045A53 21 62 02 00 6362*  	ld hl,BUF_50_044
045A57 01 46 00 00 6363*  	ld bc,70
045A5B 11 32 00 00 6364*  	ld de,50
045A5F DD 21 AC 0D 6365*  	ld ix,3500
       00          
045A64 CD 4E B9 04 6366*  	call vdu_load_img
045A68 C9          6367*  	ret
045A69             6368*  
045A69             6369*  ld_51_004:
045A69 21 4D 62 04 6370*  	ld hl,F51_004
045A6D 22 D3 B7 04 6371*  	ld (cur_filename),hl
045A71 11 21 C4 04 6372*  	ld de,filedata
045A75 01 00 00 01 6373*  	ld bc,65536
045A79 3E 01       6374*  	ld a,mos_load
045A7B 5B CF       6375*  	RST.LIL 08h
045A7D 21 63 02 00 6376*  	ld hl,BUF_51_004
045A81 01 11 00 00 6377*  	ld bc,17
045A85 11 17 00 00 6378*  	ld de,23
045A89 DD 21 87 01 6379*  	ld ix,391
       00          
045A8E CD 4E B9 04 6380*  	call vdu_load_img
045A92 C9          6381*  	ret
045A93             6382*  
045A93             6383*  ld_51_020:
045A93 21 61 62 04 6384*  	ld hl,F51_020
045A97 22 D3 B7 04 6385*  	ld (cur_filename),hl
045A9B 11 21 C4 04 6386*  	ld de,filedata
045A9F 01 00 00 01 6387*  	ld bc,65536
045AA3 3E 01       6388*  	ld a,mos_load
045AA5 5B CF       6389*  	RST.LIL 08h
045AA7 21 64 02 00 6390*  	ld hl,BUF_51_020
045AAB 01 15 00 00 6391*  	ld bc,21
045AAF 11 1D 00 00 6392*  	ld de,29
045AB3 DD 21 61 02 6393*  	ld ix,609
       00          
045AB8 CD 4E B9 04 6394*  	call vdu_load_img
045ABC C9          6395*  	ret
045ABD             6396*  
045ABD             6397*  ld_51_032:
045ABD 21 75 62 04 6398*  	ld hl,F51_032
045AC1 22 D3 B7 04 6399*  	ld (cur_filename),hl
045AC5 11 21 C4 04 6400*  	ld de,filedata
045AC9 01 00 00 01 6401*  	ld bc,65536
045ACD 3E 01       6402*  	ld a,mos_load
045ACF 5B CF       6403*  	RST.LIL 08h
045AD1 21 65 02 00 6404*  	ld hl,BUF_51_032
045AD5 01 1E 00 00 6405*  	ld bc,30
045AD9 11 2A 00 00 6406*  	ld de,42
045ADD DD 21 EC 04 6407*  	ld ix,1260
       00          
045AE2 CD 4E B9 04 6408*  	call vdu_load_img
045AE6 C9          6409*  	ret
045AE7             6410*  
045AE7             6411*  ld_51_040:
045AE7 21 89 62 04 6412*  	ld hl,F51_040
045AEB 22 D3 B7 04 6413*  	ld (cur_filename),hl
045AEF 11 21 C4 04 6414*  	ld de,filedata
045AF3 01 00 00 01 6415*  	ld bc,65536
045AF7 3E 01       6416*  	ld a,mos_load
045AF9 5B CF       6417*  	RST.LIL 08h
045AFB 21 66 02 00 6418*  	ld hl,BUF_51_040
045AFF 01 31 00 00 6419*  	ld bc,49
045B03 11 46 00 00 6420*  	ld de,70
045B07 DD 21 66 0D 6421*  	ld ix,3430
       00          
045B0C CD 4E B9 04 6422*  	call vdu_load_img
045B10 C9          6423*  	ret
045B11             6424*  
045B11             6425*  ld_51_044:
045B11 21 9D 62 04 6426*  	ld hl,F51_044
045B15 22 D3 B7 04 6427*  	ld (cur_filename),hl
045B19 11 21 C4 04 6428*  	ld de,filedata
045B1D 01 00 00 01 6429*  	ld bc,65536
045B21 3E 01       6430*  	ld a,mos_load
045B23 5B CF       6431*  	RST.LIL 08h
045B25 21 67 02 00 6432*  	ld hl,BUF_51_044
045B29 01 92 00 00 6433*  	ld bc,146
045B2D 11 83 00 00 6434*  	ld de,131
045B31 DD 21 B6 4A 6435*  	ld ix,19126
       00          
045B36 CD 4E B9 04 6436*  	call vdu_load_img
045B3A C9          6437*  	ret
045B3B             6438*  
045B3B             6439*  ld_52_004:
045B3B 21 B1 62 04 6440*  	ld hl,F52_004
045B3F 22 D3 B7 04 6441*  	ld (cur_filename),hl
045B43 11 21 C4 04 6442*  	ld de,filedata
045B47 01 00 00 01 6443*  	ld bc,65536
045B4B 3E 01       6444*  	ld a,mos_load
045B4D 5B CF       6445*  	RST.LIL 08h
045B4F 21 68 02 00 6446*  	ld hl,BUF_52_004
045B53 01 0E 00 00 6447*  	ld bc,14
045B57 11 17 00 00 6448*  	ld de,23
045B5B DD 21 42 01 6449*  	ld ix,322
       00          
045B60 CD 4E B9 04 6450*  	call vdu_load_img
045B64 C9          6451*  	ret
045B65             6452*  
045B65             6453*  ld_52_020:
045B65 21 C5 62 04 6454*  	ld hl,F52_020
045B69 22 D3 B7 04 6455*  	ld (cur_filename),hl
045B6D 11 21 C4 04 6456*  	ld de,filedata
045B71 01 00 00 01 6457*  	ld bc,65536
045B75 3E 01       6458*  	ld a,mos_load
045B77 5B CF       6459*  	RST.LIL 08h
045B79 21 69 02 00 6460*  	ld hl,BUF_52_020
045B7D 01 11 00 00 6461*  	ld bc,17
045B81 11 1D 00 00 6462*  	ld de,29
045B85 DD 21 ED 01 6463*  	ld ix,493
       00          
045B8A CD 4E B9 04 6464*  	call vdu_load_img
045B8E C9          6465*  	ret
045B8F             6466*  
045B8F             6467*  ld_52_032:
045B8F 21 D9 62 04 6468*  	ld hl,F52_032
045B93 22 D3 B7 04 6469*  	ld (cur_filename),hl
045B97 11 21 C4 04 6470*  	ld de,filedata
045B9B 01 00 00 01 6471*  	ld bc,65536
045B9F 3E 01       6472*  	ld a,mos_load
045BA1 5B CF       6473*  	RST.LIL 08h
045BA3 21 6A 02 00 6474*  	ld hl,BUF_52_032
045BA7 01 19 00 00 6475*  	ld bc,25
045BAB 11 2A 00 00 6476*  	ld de,42
045BAF DD 21 1A 04 6477*  	ld ix,1050
       00          
045BB4 CD 4E B9 04 6478*  	call vdu_load_img
045BB8 C9          6479*  	ret
045BB9             6480*  
045BB9             6481*  ld_52_040:
045BB9 21 ED 62 04 6482*  	ld hl,F52_040
045BBD 22 D3 B7 04 6483*  	ld (cur_filename),hl
045BC1 11 21 C4 04 6484*  	ld de,filedata
045BC5 01 00 00 01 6485*  	ld bc,65536
045BC9 3E 01       6486*  	ld a,mos_load
045BCB 5B CF       6487*  	RST.LIL 08h
045BCD 21 6B 02 00 6488*  	ld hl,BUF_52_040
045BD1 01 28 00 00 6489*  	ld bc,40
045BD5 11 46 00 00 6490*  	ld de,70
045BD9 DD 21 F0 0A 6491*  	ld ix,2800
       00          
045BDE CD 4E B9 04 6492*  	call vdu_load_img
045BE2 C9          6493*  	ret
045BE3             6494*  
045BE3             6495*  ld_52_044:
045BE3 21 01 63 04 6496*  	ld hl,F52_044
045BE7 22 D3 B7 04 6497*  	ld (cur_filename),hl
045BEB 11 21 C4 04 6498*  	ld de,filedata
045BEF 01 00 00 01 6499*  	ld bc,65536
045BF3 3E 01       6500*  	ld a,mos_load
045BF5 5B CF       6501*  	RST.LIL 08h
045BF7 21 6C 02 00 6502*  	ld hl,BUF_52_044
045BFB 01 78 00 00 6503*  	ld bc,120
045BFF 11 83 00 00 6504*  	ld de,131
045C03 DD 21 68 3D 6505*  	ld ix,15720
       00          
045C08 CD 4E B9 04 6506*  	call vdu_load_img
045C0C C9          6507*  	ret
045C0D             6508*  
045C0D             6509*  ; File name lookups:
045C0D 70 61 6E 65 6510*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C21 70 61 6E 65 6511*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C35 70 61 6E 65 6512*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045C49 70 61 6E 65 6513*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045C5D 70 61 6E 65 6514*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045C71 70 61 6E 65 6515*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C85 70 61 6E 65 6516*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C99 70 61 6E 65 6517*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045CAD 70 61 6E 65 6518*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045CC1 70 61 6E 65 6519*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045CD5 70 61 6E 65 6520*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045CE9 70 61 6E 65 6521*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045CFD 70 61 6E 65 6522*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D11 70 61 6E 65 6523*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D25 70 61 6E 65 6524*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D39 70 61 6E 65 6525*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D4D 70 61 6E 65 6526*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D61 70 61 6E 65 6527*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D75 70 61 6E 65 6528*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D89 70 61 6E 65 6529*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D9D 70 61 6E 65 6530*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DB1 70 61 6E 65 6531*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DC5 70 61 6E 65 6532*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045DD9 70 61 6E 65 6533*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DED 70 61 6E 65 6534*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E01 70 61 6E 65 6535*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E15 70 61 6E 65 6536*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E29 70 61 6E 65 6537*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E3D 70 61 6E 65 6538*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E51 70 61 6E 65 6539*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E65 70 61 6E 65 6540*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E79 70 61 6E 65 6541*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E8D 70 61 6E 65 6542*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EA1 70 61 6E 65 6543*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EB5 70 61 6E 65 6544*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EC9 70 61 6E 65 6545*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EDD 70 61 6E 65 6546*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EF1 70 61 6E 65 6547*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F05 70 61 6E 65 6548*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F19 70 61 6E 65 6549*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F2D 70 61 6E 65 6550*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F41 70 61 6E 65 6551*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F55 70 61 6E 65 6552*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F69 70 61 6E 65 6553*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F7D 70 61 6E 65 6554*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F91 70 61 6E 65 6555*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FA5 70 61 6E 65 6556*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FB9 70 61 6E 65 6557*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FCD 70 61 6E 65 6558*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FE1 70 61 6E 65 6559*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FF5 70 61 6E 65 6560*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046009 70 61 6E 65 6561*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04601D 70 61 6E 65 6562*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046031 70 61 6E 65 6563*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046045 70 61 6E 65 6564*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046059 70 61 6E 65 6565*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04606D 70 61 6E 65 6566*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046081 70 61 6E 65 6567*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046095 70 61 6E 65 6568*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460A9 70 61 6E 65 6569*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460BD 70 61 6E 65 6570*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460D1 70 61 6E 65 6571*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460E5 70 61 6E 65 6572*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460F9 70 61 6E 65 6573*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04610D 70 61 6E 65 6574*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046121 70 61 6E 65 6575*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046135 70 61 6E 65 6576*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046149 70 61 6E 65 6577*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04615D 70 61 6E 65 6578*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046171 70 61 6E 65 6579*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046185 70 61 6E 65 6580*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046199 70 61 6E 65 6581*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461AD 70 61 6E 65 6582*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461C1 70 61 6E 65 6583*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461D5 70 61 6E 65 6584*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461E9 70 61 6E 65 6585*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461FD 70 61 6E 65 6586*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046211 70 61 6E 65 6587*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046225 70 61 6E 65 6588*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046239 70 61 6E 65 6589*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04624D 70 61 6E 65 6590*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046261 70 61 6E 65 6591*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046275 70 61 6E 65 6592*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046289 70 61 6E 65 6593*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04629D 70 61 6E 65 6594*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462B1 70 61 6E 65 6595*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462C5 70 61 6E 65 6596*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462D9 70 61 6E 65 6597*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462ED 70 61 6E 65 6598*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046301 70 61 6E 65 6599*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046315             6600*  
046315             6601*  ; dws buffer ids:
046315             6602*  BUF_DW_6: equ 0x026D
046315             6603*  BUF_DW_7: equ 0x026E
046315             6604*  BUF_DW_8: equ 0x026F
046315             6605*  BUF_DW_9: equ 0x0270
046315             6606*  BUF_DW_10: equ 0x0271
046315             6607*  BUF_DW_11: equ 0x0272
046315             6608*  BUF_DW_12: equ 0x0273
046315             6609*  BUF_DW_13: equ 0x0274
046315             6610*  BUF_DW_14: equ 0x0275
046315             6611*  
046315             6612*  dws_num_panels: equ 9
046315             6613*  
046315             6614*  ; dws buffer id reverse lookup:
046315             6615*  dws_buffer_id_lut:
046315 6D 02 00    6616*  	dl BUF_DW_6
046318 6E 02 00    6617*  	dl BUF_DW_7
04631B 6F 02 00    6618*  	dl BUF_DW_8
04631E 70 02 00    6619*  	dl BUF_DW_9
046321 71 02 00    6620*  	dl BUF_DW_10
046324 72 02 00    6621*  	dl BUF_DW_11
046327 73 02 00    6622*  	dl BUF_DW_12
04632A 74 02 00    6623*  	dl BUF_DW_13
04632D 75 02 00    6624*  	dl BUF_DW_14
046330             6625*  
046330             6626*  ; dws load routines jump table:
046330             6627*  dws_load_panels_table:
046330 4B 63 04    6628*  	dl ld_dw_6
046333 75 63 04    6629*  	dl ld_dw_7
046336 9F 63 04    6630*  	dl ld_dw_8
046339 C9 63 04    6631*  	dl ld_dw_9
04633C F3 63 04    6632*  	dl ld_dw_10
04633F 1D 64 04    6633*  	dl ld_dw_11
046342 47 64 04    6634*  	dl ld_dw_12
046345 71 64 04    6635*  	dl ld_dw_13
046348 9B 64 04    6636*  	dl ld_dw_14
04634B             6637*  
04634B             6638*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
04634B             6639*  
04634B             6640*  ld_dw_6:
04634B 21 C5 64 04 6641*  	ld hl,Fdw_6
04634F 22 D3 B7 04 6642*  	ld (cur_filename),hl
046353 11 21 C4 04 6643*  	ld de,filedata
046357 01 00 00 01 6644*  	ld bc,65536
04635B 3E 01       6645*  	ld a,mos_load
04635D 5B CF       6646*  	RST.LIL 08h
04635F 21 6D 02 00 6647*  	ld hl,BUF_DW_6
046363 01 40 01 00 6648*  	ld bc,320
046367 11 1E 00 00 6649*  	ld de,30
04636B DD 21 80 25 6650*  	ld ix,9600
       00          
046370 CD 4E B9 04 6651*  	call vdu_load_img
046374 C9          6652*  	ret
046375             6653*  
046375             6654*  ld_dw_7:
046375 21 D4 64 04 6655*  	ld hl,Fdw_7
046379 22 D3 B7 04 6656*  	ld (cur_filename),hl
04637D 11 21 C4 04 6657*  	ld de,filedata
046381 01 00 00 01 6658*  	ld bc,65536
046385 3E 01       6659*  	ld a,mos_load
046387 5B CF       6660*  	RST.LIL 08h
046389 21 6E 02 00 6661*  	ld hl,BUF_DW_7
04638D 01 40 01 00 6662*  	ld bc,320
046391 11 18 00 00 6663*  	ld de,24
046395 DD 21 00 1E 6664*  	ld ix,7680
       00          
04639A CD 4E B9 04 6665*  	call vdu_load_img
04639E C9          6666*  	ret
04639F             6667*  
04639F             6668*  ld_dw_8:
04639F 21 E3 64 04 6669*  	ld hl,Fdw_8
0463A3 22 D3 B7 04 6670*  	ld (cur_filename),hl
0463A7 11 21 C4 04 6671*  	ld de,filedata
0463AB 01 00 00 01 6672*  	ld bc,65536
0463AF 3E 01       6673*  	ld a,mos_load
0463B1 5B CF       6674*  	RST.LIL 08h
0463B3 21 6F 02 00 6675*  	ld hl,BUF_DW_8
0463B7 01 40 01 00 6676*  	ld bc,320
0463BB 11 12 00 00 6677*  	ld de,18
0463BF DD 21 80 16 6678*  	ld ix,5760
       00          
0463C4 CD 4E B9 04 6679*  	call vdu_load_img
0463C8 C9          6680*  	ret
0463C9             6681*  
0463C9             6682*  ld_dw_9:
0463C9 21 F2 64 04 6683*  	ld hl,Fdw_9
0463CD 22 D3 B7 04 6684*  	ld (cur_filename),hl
0463D1 11 21 C4 04 6685*  	ld de,filedata
0463D5 01 00 00 01 6686*  	ld bc,65536
0463D9 3E 01       6687*  	ld a,mos_load
0463DB 5B CF       6688*  	RST.LIL 08h
0463DD 21 70 02 00 6689*  	ld hl,BUF_DW_9
0463E1 01 40 01 00 6690*  	ld bc,320
0463E5 11 10 00 00 6691*  	ld de,16
0463E9 DD 21 00 14 6692*  	ld ix,5120
       00          
0463EE CD 4E B9 04 6693*  	call vdu_load_img
0463F2 C9          6694*  	ret
0463F3             6695*  
0463F3             6696*  ld_dw_10:
0463F3 21 01 65 04 6697*  	ld hl,Fdw_10
0463F7 22 D3 B7 04 6698*  	ld (cur_filename),hl
0463FB 11 21 C4 04 6699*  	ld de,filedata
0463FF 01 00 00 01 6700*  	ld bc,65536
046403 3E 01       6701*  	ld a,mos_load
046405 5B CF       6702*  	RST.LIL 08h
046407 21 71 02 00 6703*  	ld hl,BUF_DW_10
04640B 01 40 01 00 6704*  	ld bc,320
04640F 11 10 00 00 6705*  	ld de,16
046413 DD 21 00 14 6706*  	ld ix,5120
       00          
046418 CD 4E B9 04 6707*  	call vdu_load_img
04641C C9          6708*  	ret
04641D             6709*  
04641D             6710*  ld_dw_11:
04641D 21 11 65 04 6711*  	ld hl,Fdw_11
046421 22 D3 B7 04 6712*  	ld (cur_filename),hl
046425 11 21 C4 04 6713*  	ld de,filedata
046429 01 00 00 01 6714*  	ld bc,65536
04642D 3E 01       6715*  	ld a,mos_load
04642F 5B CF       6716*  	RST.LIL 08h
046431 21 72 02 00 6717*  	ld hl,BUF_DW_11
046435 01 40 01 00 6718*  	ld bc,320
046439 11 0E 00 00 6719*  	ld de,14
04643D DD 21 80 11 6720*  	ld ix,4480
       00          
046442 CD 4E B9 04 6721*  	call vdu_load_img
046446 C9          6722*  	ret
046447             6723*  
046447             6724*  ld_dw_12:
046447 21 21 65 04 6725*  	ld hl,Fdw_12
04644B 22 D3 B7 04 6726*  	ld (cur_filename),hl
04644F 11 21 C4 04 6727*  	ld de,filedata
046453 01 00 00 01 6728*  	ld bc,65536
046457 3E 01       6729*  	ld a,mos_load
046459 5B CF       6730*  	RST.LIL 08h
04645B 21 73 02 00 6731*  	ld hl,BUF_DW_12
04645F 01 40 01 00 6732*  	ld bc,320
046463 11 0C 00 00 6733*  	ld de,12
046467 DD 21 00 0F 6734*  	ld ix,3840
       00          
04646C CD 4E B9 04 6735*  	call vdu_load_img
046470 C9          6736*  	ret
046471             6737*  
046471             6738*  ld_dw_13:
046471 21 31 65 04 6739*  	ld hl,Fdw_13
046475 22 D3 B7 04 6740*  	ld (cur_filename),hl
046479 11 21 C4 04 6741*  	ld de,filedata
04647D 01 00 00 01 6742*  	ld bc,65536
046481 3E 01       6743*  	ld a,mos_load
046483 5B CF       6744*  	RST.LIL 08h
046485 21 74 02 00 6745*  	ld hl,BUF_DW_13
046489 01 40 01 00 6746*  	ld bc,320
04648D 11 0C 00 00 6747*  	ld de,12
046491 DD 21 00 0F 6748*  	ld ix,3840
       00          
046496 CD 4E B9 04 6749*  	call vdu_load_img
04649A C9          6750*  	ret
04649B             6751*  
04649B             6752*  ld_dw_14:
04649B 21 41 65 04 6753*  	ld hl,Fdw_14
04649F 22 D3 B7 04 6754*  	ld (cur_filename),hl
0464A3 11 21 C4 04 6755*  	ld de,filedata
0464A7 01 00 00 01 6756*  	ld bc,65536
0464AB 3E 01       6757*  	ld a,mos_load
0464AD 5B CF       6758*  	RST.LIL 08h
0464AF 21 75 02 00 6759*  	ld hl,BUF_DW_14
0464B3 01 40 01 00 6760*  	ld bc,320
0464B7 11 0C 00 00 6761*  	ld de,12
0464BB DD 21 00 0F 6762*  	ld ix,3840
       00          
0464C0 CD 4E B9 04 6763*  	call vdu_load_img
0464C4 C9          6764*  	ret
0464C5             6765*  
0464C5             6766*  ; File name lookups:
0464C5 64 77 73 2F 6767*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
0464D4 64 77 73 2F 6768*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
0464E3 64 77 73 2F 6769*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
0464F2 64 77 73 2F 6770*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
046501 64 77 73 2F 6771*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
046511 64 77 73 2F 6772*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
046521 64 77 73 2F 6773*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
046531 64 77 73 2F 6774*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
046541 64 77 73 2F 6775*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
046551             0014   	include "src/asm/fonts_bmp.asm"
046551             0001*  ; plots a bitmap character to the screen
046551             0002*  ; inputs: a; ascii character to plot
046551             0003*  ;      bc,de = x,y screen coordinates in pixels
046551             0004*  ;      ix pointed at the font definition lut
046551             0005*  ; returns: bc as the next x coordinate to plot
046551             0006*  ;          pretty pixels which hopefully resemble readable text
046551             0007*  ; destroys: lotsa stuff
046551             0008*  font_bmp_plot:
046551             0009*  ; back up bc,de
046551 C5          0010*      push bc
046552 D5          0011*      push de
046553             0012*  ; get the buffer id of the character
046553 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
046555 06 06       0014*      ld b,6 ; six bytes per lookup record
046557 4F          0015*      ld c,a
046558 ED 4C       0016*      mlt bc
04655A DD 09       0017*      add ix,bc ; now ix points to the character definition
04655C DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04655F CD ED A9 04 0019*      call vdu_buff_select
046563             0020*  ; plot the character
046563 D1          0021*      pop de
046564 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
046567 83          0023*      add a,e ; add the y-coordinate
046568 5F          0024*      ld e,a
046569 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04656B 8A          0026*      adc a,d
04656C 57          0027*      ld d,a ; plot_y now correct for the character
04656D C1          0028*      pop bc ; plot_x
04656E C5          0029*      push bc ; we want it back after the plot
04656F CD BE AB 04 0030*      call vdu_plot_bmp
046573             0031*  ; now set bc to the next x coordinate
046573 C1          0032*      pop bc
046574 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
046577 C6 02       0034*      add a,2 ; add a little padding between characters
046579 81          0035*      add a,c ; bump the original x-coordinate
04657A 4F          0036*      ld c,a
04657B 3E 00       0037*      ld a,0 ; can't xor it because we need carry
04657D 88          0038*      adc a,b
04657E 47          0039*      ld b,a ; plot_x now correct for the next character
04657F C9          0040*      ret
046580             0041*  
046580             0042*  ; plots a zero-terminated string of bitmap characters to the screen
046580             0043*  ; inputs: hl; pointer to the string
046580             0044*  ;       bc,de = x,y screen coordinates in pixels
046580             0045*  ;       ix pointed at the font definition lut
046580             0046*  ; returns: bc as the next x coordinate to plot
046580             0047*  ;          de as the next y coordinate to plot
046580             0048*  ;          pretty pixels which hopefully resemble readable text
046580             0049*  font_bmp_print:
046580             0050*  @next_char:
046580             0051*  ; fetch the next character in the string
046580 7E          0052*      ld a,(hl) ; a has the ascii value of the character
046581 FE 00       0053*      cp 0 ; is it zero?
046583 C8          0054*      ret z ; if so, we're done
046584 23          0055*      inc hl ; point to the next character
046585 E5          0056*      push hl ; save the pointer
046586 D5          0057*      push de ; save our y-coordinate
046587 DD E5       0058*      push ix ; save the font lut pointer
046589 CD 51 65 04 0059*      call font_bmp_plot ; plot the character
04658D DD E1       0060*      pop ix ; restore the font lut pointer
04658F D1          0061*      pop de ; restore our y-coordinate
046590 E1          0062*      pop hl ; restore the pointer
046591 C3 80 65 04 0063*      jp @next_char ; loop
046595             0015   	include "src/asm/maps.asm"
046595             0001*  ; ############# MAP CONSTANTS #############
046595             0002*  ; map tables addresses
046595             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
046595             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
046595             0005*  
046595             0006*  ; map status/type flags
046595             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
046595             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
046595             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
046595             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
046595             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
046595             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
046595             0013*  ; bits 1 and 0 are the render_type mask
046595             0014*  render_type_cube:   equ %00000000  ; 0
046595             0015*  render_type_floor:  equ %00000001  ; 1
046595             0016*  render_type_null:   equ %00000010  ; 2
046595             0017*  render_type_sprite: equ %00000011  ; 3
046595             0018*  
046595             0019*  ; HOW THE MAP TABLE IS LAID OUT
046595             0020*  ; map table field offset constants
046595             0021*  ; (mind the little-endianess)
046595             0022*  map_type_status: 	equ 0
046595             0023*  map_img_idx: 		equ 1
046595             0024*  map_obj_id: 		equ 2
046595             0025*  map_sprite_id: 		equ 3
046595             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
046595             0027*  
046595             0028*  ; gets cell info from a directional displacement from a given map location
046595             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
046595             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
046595             0031*  ; calls: get_dx_dy, get_cell_from_coords
046595             0032*  get_neighbor:
046595             0033*  ; modulo 4 on orientation
046595 7B          0034*      ld a,e
046596 E6 03       0035*      and 0x03
046598 5F          0036*      ld e,a
046599 CD C8 65 04 0037*  	call get_dx_dy ; d,e = dy,dx
04659D             0038*  ; add add b,c to the deltas in d,e
04659D 79          0039*  	ld a,c
04659E 83          0040*  	add a,e
04659F 5F          0041*  	ld e,a
0465A0 78          0042*  	ld a,b
0465A1 82          0043*  	add a,d
0465A2 57          0044*  	ld d,a
0465A3             0045*  ; fall through to get_cell_from_coords
0465A3             0046*  
0465A3             0047*  ; gets cell info from a given x,y map coordinate
0465A3             0048*  ; inputs: ; d,e = map_y,map_x
0465A3             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0465A3             0050*  get_cell_from_coords:
0465A3             0051*  ; modulo 16 on input coords
0465A3 7B          0052*  	ld a,e
0465A4 E6 0F       0053*  	and 0x0F
0465A6 5F          0054*  	ld e,a
0465A7 7A          0055*  	ld a,d
0465A8 E6 0F       0056*  	and 0x0F
0465AA 57          0057*  	ld d,a
0465AB             0058*  ; get cell_id from x,y
0465AB 42          0059*  	ld b,d ; y
0465AC 0E 10       0060*  	ld c,16 ; number of cells in a column
0465AE ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0465B0 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0465B4 6B          0063*  	ld l,e ; x
0465B5 09          0064*  	add hl,bc ; hl = cell_id of x,y
0465B6 E5          0065*  	push hl ; so we can return cell_id
0465B7 4D          0066*  	ld c,l ; c = cell_id
0465B8             0067*  ; get address of cell record in cell_status table
0465B8 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0465BA ED 4C       0069*  	mlt bc ; bc = offset to cell record
0465BC DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0465C1 DD 09       0071*  	add ix,bc ; ix = address of cell record
0465C3 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0465C6 C1          0073*  	pop bc ; bc = cell_id
0465C7 C9          0074*  	ret
0465C8             0075*  
0465C8             0076*  ; gets dx,dy from orientation and distance
0465C8             0077*  ; d = distance ; e = orientation
0465C8             0078*  ; returns: d,e = dy,dx
0465C8             0079*  get_dx_dy:
0465C8             0080*  ; modulo 4 on orientation
0465C8 7B          0081*  	ld a,e
0465C9 E6 03       0082*  	and 0x03
0465CB FE 00       0083*  	cp 0
0465CD 28 11       0084*  	jr z,@north
0465CF FE 01       0085*  	cp 1
0465D1 28 14       0086*  	jr z,@east
0465D3 FE 02       0087*  	cp 2
0465D5 28 14       0088*  	jr z,@south
0465D7 FE 03       0089*  	cp 3
0465D9 28 13       0090*  	jr z,@west
0465DB             0091*  ; if none of those, return zeroes
0465DB 11 00 00 00 0092*  	ld de,0
0465DF C9          0093*  	ret
0465E0             0094*  @north:
0465E0             0095*  ; x = 0, y = -d
0465E0 1E 00       0096*  	ld e,0
0465E2 7A          0097*  	ld a,d
0465E3 ED 44       0098*  	neg
0465E5 57          0099*  	ld d,a
0465E6 C9          0100*  	ret
0465E7             0101*  @east:
0465E7             0102*  ; x = d, y = 0
0465E7 5A          0103*  	ld e,d
0465E8 16 00       0104*  	ld d,0
0465EA C9          0105*  	ret
0465EB             0106*  @south:
0465EB             0107*  ; x = 0, y = d
0465EB 1E 00       0108*  	ld e,0
0465ED C9          0109*  	ret
0465EE             0110*  @west:
0465EE             0111*  ; x = -d, y = 0
0465EE 7A          0112*  	ld a,d
0465EF ED 44       0113*  	neg
0465F1 5F          0114*  	ld e,a
0465F2 16 00       0115*  	ld d,0
0465F4 C9          0116*  	ret
0465F5             0117*  
0465F5             0118*  ; gets the direction from a dy,dx pair
0465F5             0119*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0465F5             0120*  ; inputs: ; d = dy ; e = dx
0465F5             0121*  ; returns: a = orientation
0465F5             0122*  get_dir_from_dy_dx:
0465F5 AF          0123*  	xor a
0465F6 93          0124*  	sub e
0465F7 28 06       0125*  	jr z,@not_x
0465F9 3E 01       0126*  	ld a,1
0465FB F8          0127*  	ret m
0465FC 3E 03       0128*  	ld a,3
0465FE C9          0129*  	ret
0465FF             0130*  @not_x:
0465FF AF          0131*  	xor a
046600 92          0132*  	sub d
046601 C8          0133*  	ret z
046602 3E 02       0134*  	ld a,2
046604 F8          0135*  	ret m
046605 AF          0136*  	xor a
046606 C9          0137*  	ret
046607             0138*  
046607             0139*  
046607             0140*  ; translate camera relative x,y deltas to map x,y deltas
046607             0141*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
046607             0142*  ; returns:	d = map_dy ; e = map_dx
046607             0143*  trans_dx_dy:
046607             0144*  ; modulo 4 on orientation
046607 E6 03       0145*  	and 0x03
046609 28 11       0146*  	jr z,@north
04660B FE 01       0147*  	cp 1 ; east
04660D 28 12       0148*  	jr z,@east
04660F FE 02       0149*  	cp 2 ; south
046611 28 12       0150*  	jr z,@south
046613 FE 03       0151*  	cp 3 ; west
046615 28 13       0152*  	jr z,@west
046617             0153*  ; if none of those, return zeroes
046617 11 00 00 00 0154*  	ld de,0
04661B C9          0155*  	ret
04661C             0156*  @north: ; invert y axis, x unnchanged
04661C 7A          0157*  	ld a,d
04661D ED 44       0158*  	neg
04661F 57          0159*  	ld d,a
046620 C9          0160*  	ret
046621             0161*  @east: ; +x = +y, +y = +x
046621 7A          0162*  	ld a,d
046622 53          0163*  	ld d,e
046623 5F          0164*  	ld e,a
046624 C9          0165*  	ret
046625             0166*  @south: ; invert x axis, y unchanged
046625 7B          0167*  	ld a,e
046626 ED 44       0168*  	neg
046628 5F          0169*  	ld e,a
046629 C9          0170*  	ret
04662A             0171*  @west: ; +x = -y, +y = -x
04662A 7A          0172*  	ld a,d ; y
04662B ED 44       0173*  	neg ; -y
04662D 53          0174*  	ld d,e ; x
04662E 5F          0175*  	ld e,a ; -y
04662F 7A          0176*  	ld a,d ; x
046630 ED 44       0177*  	neg ; -x
046632 57          0178*  	ld d,a ; -x
046633 C9          0179*  	ret
046634             0180*  
046634             0181*  ; initialize map variables and load map file
046634             0182*  ; inputs: none
046634             0183*  map_init:
046634 AF          0184*  	xor a
046635 32 C9 B2 04 0185*  	ld (cur_floor),a
046639 32 CA B2 04 0186*  	ld (cur_room),a
04663D             0187*  ; load room file
04663D CD 42 66 04 0188*  	call map_load
046641             0189*  ; set player initial position
046641 C9          0190*  	ret
046642             0191*  
046642             0192*  ; load map file
046642             0193*  ; inputs: cur_floor, cur_room set
046642             0194*  map_load:
046642 21 FA 66 04 0195*  	ld hl,floors ; address of floors lut
046646 3A C9 B2 04 0196*  	ld a,(cur_floor)
04664A 5F          0197*  	ld e,a
04664B 16 03       0198*  	ld d,3 ; three bytes per lookup record
04664D ED 5C       0199*  	mlt de ; de = offset to floor lut entry
04664F 19          0200*  	add hl,de ; hl = address of floor lut entry
046650 ED 27       0201*  	ld hl,(hl) ; hl = base address of rooms for given floor
046652 3A CA B2 04 0202*  	ld a,(cur_room)
046656 5F          0203*  	ld e,a
046657 16 03       0204*  	ld d,3 ; three bytes per lookup record
046659 ED 5C       0205*  	mlt de ; de = offset to room lut entry
04665B 19          0206*  	add hl,de ; hl = address of room lut entry
04665C ED 27       0207*  	ld hl,(hl) ; hl = address of room file name
04665E 22 D3 B7 04 0208*  	ld (cur_filename),hl ; DEBUG
046662 11 00 E0 B7 0209*  	ld de,cell_status ; address to load map data
046666 01 00 20 00 0210*  	ld bc,8*1024 ; size of map data in bytes
04666A 3E 01       0211*  	ld a,mos_load
04666C 5B CF       0212*  	RST.LIL 08h
04666E             0213*  ; DEBUG: print filename
04666E 2A D3 B7 04 0214*  	ld hl,(cur_filename)
046672 CD 53 AF 04 0215*  	call printString
046676             0216*  ; load sprite data
046676 CD 7B 66 04 0217*  	call map_init_sprites
04667A C9          0218*  	ret
04667B             0219*  
04667B             0220*  ; initialize sprite data for the current room into sprite table
04667B             0221*  ; inputs: map data loaded
04667B             0222*  map_init_sprites:
04667B             0223*  ; initialize pointers
04667B DD 21 00 E0 0224*  	ld ix,cell_status
       B7          
046680 FD 21 00 FC 0225*  	ld iy,sprite_table_base
       B7          
046685 AF          0226*  	xor a
046686 32 CA 66 04 0227*  	ld (@cell_id),a
04668A             0228*  @loop:
04668A FD 22 26 9F 0229*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
04668F DD 7E 03    0230*  	ld a,(ix+map_sprite_id)
046692 FE FF       0231*  	cp 255 ; check for no sprite
046694 28 1B       0232*  	jr z,@next_cell
046696 FD 77 00    0233*  	ld (iy+sprite_id),a
046699 DD 7E 01    0234*  	ld a,(ix+map_img_idx)
04669C FD 77 01    0235*  	ld (iy+sprite_obj),a
04669F CD 57 A0 04 0236*  	call sprite_init_data
0466A3 3A CA 66 04 0237*  	ld a,(@cell_id)
0466A7 CD CB 66 04 0238*  	call cell_id_to_coords ; d = map_y, e = map_x
0466AB FD 1F 04    0239*  	ld (iy+sprite_x),de ; set sprite x,y
0466AE ED 33 10    0240*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0466B1             0241*  @next_cell:
0466B1 ED 32 04    0242*  	lea ix,ix+map_record_size ; advance pointer to next cell
0466B4             0243*  ; check if we've reached the end of the map data
0466B4 3A CA 66 04 0244*  	ld a,(@cell_id)
0466B8 3C          0245*  	inc a
0466B9 32 CA 66 04 0246*  	ld (@cell_id),a
0466BD 20 CB       0247*  	jr nz,@loop ; still more to do
0466BF             0248*  ; cleanup and return
0466BF FD 21 00 FC 0249*  	ld iy,sprite_table_base ; reset pointer
       B7          
0466C4 FD 22 26 9F 0250*  	ld (sprite_table_pointer),iy
       04          
0466C9 C9          0251*  	ret
0466CA 00          0252*  @cell_id: db 0
0466CB             0253*  
0466CB             0254*  ; get the x,y map coordinates from a cell_id
0466CB             0255*  ; inputs: a = cell_id
0466CB             0256*  ; returns: a = cell_id, d = map_y, e = map_x
0466CB             0257*  cell_id_to_coords:
0466CB F5          0258*  	push af	; Save the cell id
0466CC             0259*  ; Calculate the y coordinate by dividing the index by 16
0466CC 57          0260*  	ld d,a      ; Move index into d
0466CD CB 2A       0261*  	sra d        ; Shift right once (d = d / 2)
0466CF CB 2A       0262*  	sra d        ; Shift right again (d = d / 4)
0466D1 CB 2A       0263*  	sra d        ; Shift right again (d = d / 8)
0466D3 CB 2A       0264*  	sra d        ; Shift right again (d = d / 16)
0466D5             0265*  ; Calculate the x coordinate by taking the index modulo 16
0466D5 E6 0F       0266*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0466D7 5F          0267*  	ld e,a      ; e is now the x coordinate
0466D8 F1          0268*  	pop af	; a is cell id
0466D9 C9          0269*  	ret
0466DA             0270*  
0466DA             0271*  ; get starting position based on the start flag
0466DA             0272*  ; inputs: none
0466DA             0273*  ; returns: a = cell_id, d = map_y, e = map_x
0466DA             0274*  get_start_pos:
0466DA 11 00 00 00 0275*  	ld de,0 ; initialize to 0,0 as a default
0466DE DD 21 00 E0 0276*  	ld ix,cell_status ; ix points to the start of the map data
       B7          
0466E3 AF          0277*  	xor a ; start at cell 0
0466E4             0278*  @loop:
0466E4 F5          0279*  	push af ; save cell_id
0466E5 DD 7E 00    0280*  	ld a,(ix+map_type_status) ; a is the cell status bitmmask
0466E8 E6 08       0281*  	and cell_is_start ; testing whether the cell start bit is lit
0466EA 28 06       0282*  	jr z,@not_start ; go to the next cell if not
0466EC F1          0283*  	pop	af ; a is cell_id
0466ED CD CB 66 04 0284*  	call cell_id_to_coords ; d = map_y, e = map_x
0466F1 C9          0285*  	ret
0466F2             0286*  @not_start:
0466F2 F1          0287*  	pop	af ; a is cell_id
0466F3 3C          0288*  	inc a ; bump cell id
0466F4 C8          0289*  	ret z ; if zero we've wrapped around so we return 0,0 in de and 0 in a as cell_id
0466F5 ED 32 04    0290*  	lea ix,ix+map_record_size ; otherwise bump pointer to next map record
0466F8 18 EA       0291*  	jr @loop
0466FA             0292*  
0466FA             0293*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
0466FA             0294*  
0466FA             0295*  floors:
0466FA FD 66 04    0296*  	dl floor_00
0466FD             0297*  
0466FD             0298*  ; map room filename labels
0466FD             0299*  room_files:
0466FD             0300*  floor_00:
0466FD 03 67 04    0301*  	dl room_00_0
046700 15 67 04    0302*  	dl room_00_1
046703             0303*  
046703             0304*  ; map data filenames
046703 6D 61 70 73 0305*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
046715 6D 61 70 73 0306*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046727             0016   	; include "src/asm/render.asm"
046727             0017   	include "src/asm/render_buff.asm"
046727             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046727             0002*  ; first three bytes of cell_status record in little-endian order
046727             0003*  to_cell_status:
046727             0004*  to_map_type_status: ds 1
046728             0005*  to_img_idx: ds 1
046729             0006*  to_obj_id: ds 1
04672A             0007*  ; fourth byte of cell_status record
04672A             0008*  to_sprite_id: ds 1
04672B             0009*  
04672B             0010*  to_poly_id: ds 1
04672C             0011*  to_buffer_id: ds 3
04672F             0012*  
04672F             0013*  cur_cell_views: ds 3
046732             0014*  
046732             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
046732             0016*  
046732             0017*  ; render background as a prelude to rendering panels and sprites
046732             0018*  ; hl is the buffer id, bc and de are plot_x and plot_y
046732             0019*  render_background:
046732             0020*  ; back up everything
046732 C5          0021*      push bc
046733 D5          0022*      push de
046734 E5          0023*      push hl
046735             0024*  ; plot background
046735 AF          0025*      xor a ; color mode
046736 0E 08       0026*      ld c,c_grey_dk ; color
046738 CD FA AE 04 0027*      call vdu_gcol_fg_buff
04673C 01 00 00 00 0028*      ld bc,0 ; x0
046740 11 00 00 00 0029*      ld de,0 ; y0
046744 DD 21 3F 01 0030*      ld ix,319
       00          
046749 FD 21 50 00 0031*      ld iy,80
       00          
04674E CD 19 AF 04 0032*      call vdu_plot_rf_buff
046752 AF          0033*      xor a ; color mode
046753 0E 07       0034*      ld c,c_grey ; color
046755 CD FA AE 04 0035*      call vdu_gcol_fg_buff
046759 01 00 00 00 0036*      ld bc,0 ; x0
04675D 11 50 00 00 0037*      ld de,80 ; y0
046761 DD 21 3F 01 0038*      ld ix,319
       00          
046766 FD 21 9F 00 0039*      ld iy,159
       00          
04676B CD 19 AF 04 0040*      call vdu_plot_rf_buff
04676F             0041*  ; plot the background
04676F E1          0042*      pop hl ; get back the buffer id
046770 CD 83 AE 04 0043*      call vdu_buff_select_buff
046774 D1          0044*      pop de ; get back plot_y
046775 C1          0045*      pop bc ; get back plot_x
046776 CD A0 AE 04 0046*      call vdu_plot_bmp_buff
04677A C9          0047*      ret
04677B             0048*  
04677B             0049*  ; render a 3D panel
04677B             0050*  ; inputs: to_poly_id set, to_buffer_id set
04677B             0051*  render_panel:
04677B             0052*  ; make the bitmap buffer active
04677B 2A 2C 67 04 0053*      ld hl,(to_buffer_id)
04677F CD 83 AE 04 0054*      call vdu_buff_select_buff
046783             0055*  ; get the coordinates of the panel
046783 DD 21 8F 69 0056*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046788             0057*  ; get the panel's poly_id
046788 3A 2B 67 04 0058*      ld a,(to_poly_id)
04678C             0059*  ; multiply a by 6 to get the offset
04678C 47          0060*      ld b,a
04678D 0E 06       0061*      ld c,6
04678F ED 4C       0062*      mlt bc
046791             0063*  ; add the offset to the lookup table
046791 DD 09       0064*      add ix,bc
046793             0065*  ; get the panel coordinates
046793 DD 07 00    0066*      ld bc,(ix) ; plot_x
046796 DD 17 03    0067*      ld de,(ix+3) ; plot_y
046799             0068*  ; plot that mofo and go home
046799 CD A0 AE 04 0069*      call vdu_plot_bmp_buff
04679D C9          0070*      ret
04679E             0071*  
04679E             0072*  ; render a 3D sprite
04679E             0073*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
04679E             0074*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
04679E             0075*  render_sprite:
04679E             0076*  ; look up sprite_obj in sprite table
04679E FD 21 00 FC 0077*      ld iy,sprite_table_base
       B7          
0467A3 47          0078*      ld b,a ; sprite id
0467A4 0E 10       0079*      ld c,sprite_record_size
0467A6 ED 4C       0080*      mlt bc
0467A8 FD 09       0081*      add iy,bc ; iy points to sprite record
0467AA FD 22 26 9F 0082*      ld (sprite_table_pointer),iy
       04          
0467AF             0083*  ; get sprite imgs lookup
0467AF FD 7E 01    0084*      ld a,(iy+sprite_obj) ; a is sprite_obj
0467B2 FD 21 80 6C 0085*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
0467B7 47          0086*      ld b,a
0467B8 0E 03       0087*      ld c,3 ; 3 bytes per record
0467BA ED 4C       0088*      mlt bc
0467BC FD 09       0089*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
0467BE FD 37 00    0090*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
0467C1             0091*  ; convert to_poly_id to sprite_poly
0467C1 21 53 6C 04 0092*      ld hl,sprite_polys_lookup
0467C5 3A 2B 67 04 0093*      ld a,(to_poly_id)
0467C9 01 00 00 00 0094*      ld bc,0  ; make sure bcu and b are zero
0467CD 4F          0095*      ld c,a
0467CE 09          0096*      add hl,bc ; hl points to the sprite's poly id
0467CF             0097*  ; get the sprites image defs for the particular poly id
0467CF 7E          0098*      ld a,(hl)
0467D0 47          0099*      ld b,a
0467D1 0E 09       0100*      ld c,9  ; 9 bytes per record
0467D3 ED 4C       0101*      mlt bc
0467D5 FD 09       0102*      add iy,bc ; iy is the offset to the sprite's image def
0467D7             0103*  ; select buffer
0467D7 FD 27 06    0104*      ld hl,(iy+6)
0467DA CD 83 AE 04 0105*      call vdu_buff_select_buff
0467DE             0106*  ; plot sprite
0467DE FD 07 00    0107*      ld bc,(iy+0) ; plot_x
0467E1 FD 17 03    0108*      ld de,(iy+3) ; plot_y
0467E4 CD A0 AE 04 0109*      call vdu_plot_bmp_buff
0467E8 C9          0110*      ret
0467E9             0111*  
0467E9             0112*  ; render the object in a given cell and poly_id
0467E9             0113*  ; inputs: to_poly_id set, d,e are the cell coords
0467E9             0114*  render_cell:
0467E9             0115*  ; get the cell to render's cell_status data and store it in scratch
0467E9 CD A3 65 04 0116*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
0467ED DD 27 00    0117*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
0467F0 22 27 67 04 0118*      ld (to_cell_status),hl
0467F4             0119*  ; get sprite_id from cell_status lut
0467F4 DD 7E 03    0120*      ld a,(ix+map_sprite_id)
0467F7 FE FF       0121*      cp 255 ; value if no sprite present
0467F9 C2 9E 67 04 0122*      jp nz,render_sprite
0467FD             0123*  ; get cell's render_type
0467FD 7D          0124*      ld a,l ; map_type_status
0467FE E6 02       0125*      and 2 ; mask off everything but lowest two bits
046800 28 02       0126*      jr z,@cube ; render_type_cube is 0
046802 18 32       0127*      jr @nodraw ; placeholder for future implementation TODO
046804             0128*  @cube:
046804             0129*      ; get map_img_idx from cell_status lut
046804 3A 28 67 04 0130*      ld a,(to_img_idx)
046808 FE FF       0131*      cp 255 ; value for cell with nothing to draw
04680A 28 2A       0132*      jr z,@nodraw
04680C             0133*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
04680C 21 CA 6A 04 0134*      ld hl,cube_img_idx_lookup
046810 47          0135*      ld b,a
046811 0E 03       0136*      ld c,3 ; three bytes per record
046813 ED 4C       0137*      mlt bc
046815 09          0138*      add hl,bc ; hl points to the cube's base buffer id
046816 ED 27       0139*      ld hl,(hl) ; hl is the base buffer id
046818 EB          0140*      ex de,hl ; stash the base buffer id in de for later
046819 21 9D 6A 04 0141*      ld hl,cube_poly_idx_lookup
04681D 3A 2B 67 04 0142*      ld a,(to_poly_id)
046821 01 00 00 00 0143*      ld bc,0 ; make sure bcu is zero
046825 4F          0144*      ld c,a
046826 09          0145*      add hl,bc ; hl is the buffer id index address
046827 7E          0146*      ld a,(hl) ; a is the buffer id index value
046828 21 00 00 00 0147*      ld hl,0 ; make sure hlu is zero
04682C 6F          0148*      ld l,a ; hl is the buffer id index value
04682D 19          0149*      add hl,de ; hl is the buffer id
04682E 22 2C 67 04 0150*      ld (to_buffer_id),hl
046832 C3 7B 67 04 0151*      jp render_panel
046836             0152*  @nodraw:
046836 C9          0153*      ret
046837             0154*  
046837             0155*  ; render a full 3d scene
046837             0156*  ; inputs: cur_x, cur_y, orientation set
046837             0157*  ; outputs: pretty pictures
046837             0158*  ; destroys: everything
046837             0159*  render_scene:
046837             0160*  ; clear the command buffer
046837 21 FE FF 00 0161*      ld hl,65534
04683B CD DF AE 04 0162*      call vdu_buff_clear
04683F             0163*  ; clear the screen
04683F CD 32 67 04 0164*      call render_background
046843             0165*  ; get current map position and camera orientation
046843 ED 5B CF B2 0166*      ld de,(cur_x) ; d,e = cur_y,x
       04          
046848 CD A3 65 04 0167*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04684C             0168*  ; get cell_views address for this cell and orientation
04684C 3A CE B2 04 0169*      ld a,(orientation)
046850 5F          0170*      ld e,a
046851 16 06       0171*      ld d,6 ; 6 bytes per orientation
046853 ED 5C       0172*      mlt de ; de = orientation offset
046855 EB          0173*      ex de,hl ; hl = orientation offset
046856 06 18       0174*      ld b,24 ; 24 bytes per cell in cell_views lut
046858 ED 4C       0175*      mlt bc ; bc = offset from base address of cell_views lut
04685A 09          0176*      add hl,bc ; hl = total offset from cell_views base address
04685B EB          0177*      ex de,hl ; becaue we can't add iy to hl
04685C FD 21 00 E4 0178*      ld iy,cell_views ; base address of cell_views lut
       B7          
046861 FD 19       0179*      add iy,de ; iy = cell_views address
046863 FD 22 2F 67 0180*      ld (cur_cell_views),iy
       04          
046868             0181*  ; cycle through the cell views masks and render the appropriate objects
046868 01 00 46 28 0182*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04686C AF          0183*      xor a ; poly_id
04686D 32 2B 67 04 0184*      ld (to_poly_id),a
046871             0185*  @loop:
046871 ED 43 7D 68 0186*      ld (@bit_iy+2),bc
       04          
046876 FD 2A 2F 67 0187*      ld iy,(cur_cell_views)
       04          
04687B             0188*  @bit_iy:
04687B FD CB 00 46 0189*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04687F 28 21       0190*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046881             0191*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046881 3A 2B 67 04 0192*      ld a,(to_poly_id)
046885 4F          0193*      ld c,a ; poly_id
046886 3A CE B2 04 0194*      ld a,(orientation)
04688A CD 5C 69 04 0195*      call get_polys_deltas ; d,e = y,x deltas
04688E 3A CF B2 04 0196*      ld a,(cur_x)
046892 83          0197*      add a,e
046893 5F          0198*      ld e,a
046894 3A D0 B2 04 0199*      ld a,(cur_y)
046898 82          0200*      add a,d
046899 57          0201*      ld d,a
04689A 3A 2B 67 04 0202*      ld a,(to_poly_id)
04689E CD E9 67 04 0203*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
0468A2             0204*  @next_poly:
0468A2 ED 4B 7D 68 0205*      ld bc,(@bit_iy+2)
       04          
0468A7 3A 2B 67 04 0206*      ld a,(to_poly_id)
0468AB 3C          0207*      inc a ; a is next poly_id
0468AC 32 2B 67 04 0208*      ld (to_poly_id),a
0468B0 FE 2D       0209*      cp num_polys
0468B2 28 0D       0210*      jr z,@end
0468B4 3E 08       0211*      ld a,8
0468B6 80          0212*      add a,b
0468B7 47          0213*      ld b,a ; bit tested codes to 0x46 + b/8
0468B8 FE 86       0214*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
0468BA 20 B5       0215*      jr nz,@loop
0468BC 06 46       0216*      ld b,0x46
0468BE 0C          0217*      inc c ; iy address offset
0468BF 18 B0       0218*      jr @loop
0468C1             0219*  @end:
0468C1             0220*  ; draw the graphic portions of the ui
0468C1 21 01 20 00 0221*  	ld hl,BUF_UI_LOWER_PANEL
0468C5 CD 83 AE 04 0222*      call vdu_buff_select_buff
0468C9 01 00 00 00 0223*  	ld bc,0 ; x
0468CD 11 A0 00 00 0224*  	ld de,160 ; y
0468D1 CD A0 AE 04 0225*  	call vdu_plot_bmp_buff
0468D5             0226*  
0468D5 2A EA B2 04 0227*      ld hl,(plyr_wpn_ui_lg)
0468D9 ED 5B FC B2 0228*      ld de,(plyr_wpn_anim_fr)
       04          
0468DE 19          0229*      add hl,de
0468DF CD 83 AE 04 0230*      call vdu_buff_select_buff
0468E3 01 80 00 00 0231*      ld bc,128 ; x
0468E7 11 60 00 00 0232*      ld de,96 ; y
0468EB CD A0 AE 04 0233*      call vdu_plot_bmp_buff
0468EF             0234*  
0468EF 2A E7 B2 04 0235*      ld hl,(plyr_wpn_ui_sm)
0468F3 CD 83 AE 04 0236*      call vdu_buff_select_buff
0468F7 01 0A 01 00 0237*      ld bc,266 ; x
0468FB 11 B2 00 00 0238*      ld de,178 ; y
0468FF CD A0 AE 04 0239*      call vdu_plot_bmp_buff
046903             0240*  
046903             0241*  ; call the command buffer
046903 21 FE FF 00 0242*      ld hl,65534
046907 CD C4 AE 04 0243*      call vdu_buff_call
04690B             0244*  
04690B             0245*  ; draw the text portions of the ui
04690B 0E 16       0246*      ld c,22 ; x
04690D 06 03       0247*      ld b,3 ; y
04690F CD C1 A9 04 0248*      call vdu_move_cursor
046913 2A FF B2 04 0249*      ld hl,(plyr_ammo)
046917 CD A1 AF 04 0250*      call printDec
04691B             0251*  
04691B 0E 11       0252*      ld c,17 ; x
04691D 06 03       0253*      ld b,3 ; y
04691F CD C1 A9 04 0254*      call vdu_move_cursor
046923 2A C0 B2 04 0255*      ld hl,(plyr_health)
046927 CD A1 AF 04 0256*      call printDec
04692B             0257*  
04692B 0E 07       0258*      ld c,7; x
04692D 06 03       0259*      ld b,3 ; y
04692F CD C1 A9 04 0260*      call vdu_move_cursor
046933 2A C6 B2 04 0261*      ld hl,(plyr_lives)
046937 CD A1 AF 04 0262*      call printDec
04693B             0263*  
04693B 0E 03       0264*      ld c,3 ; x
04693D 06 03       0265*      ld b,3 ; y
04693F CD C1 A9 04 0266*      call vdu_move_cursor
046943 2A BD B2 04 0267*      ld hl,(plyr_score)
046947 CD A1 AF 04 0268*      call printDec
04694B             0269*  
04694B 0E 01       0270*      ld c,1 ; x
04694D 06 03       0271*      ld b,3 ; y
04694F CD C1 A9 04 0272*      call vdu_move_cursor
046953 3A C9 B2 04 0273*      ld a,(cur_floor)
046957 CD 83 AF 04 0274*      call printHex8
04695B             0275*  
04695B             0276*  ; all done
04695B C9          0277*      ret
04695C             0278*  
04695C             0279*  ; get the map coordinates deltas for a given orientation and poly_id
04695C             0280*  ; inputs: a is the orientation, c is the poly_id
04695C             0281*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
04695C             0282*  get_polys_deltas:
04695C             0283*  ; get the base address of the orientation-specific deltas lookup table
04695C FE 00       0284*      cp 0
04695E 28 11       0285*      jr z,@orientation_0
046960 FE 01       0286*      cp 1
046962 28 13       0287*      jr z,@orientation_1
046964 FE 02       0288*      cp 2
046966 28 15       0289*      jr z,@orientation_2
046968 FE 03       0290*      cp 3
04696A 28 17       0291*      jr z,@orientation_3
04696C             0292*  ; return zeros if not found
04696C 11 00 00 00 0293*      ld de,0
046970 C9          0294*      ret
046971             0295*  @orientation_0: ; north
046971 21 EB 6A 04 0296*      ld hl,polys_map_deltas_0
046975 18 10       0297*      jr @get_deltas
046977             0298*  @orientation_1: ; east
046977 21 45 6B 04 0299*      ld hl,polys_map_deltas_1
04697B 18 0A       0300*      jr @get_deltas
04697D             0301*  @orientation_2: ; south
04697D 21 9F 6B 04 0302*      ld hl,polys_map_deltas_2
046981 18 04       0303*      jr @get_deltas
046983             0304*  @orientation_3: ; west
046983 21 F9 6B 04 0305*      ld hl,polys_map_deltas_3
046987             0306*  @get_deltas:
046987 06 02       0307*      ld b,2 ; 2 bytes per record
046989 ED 4C       0308*      mlt bc ; poly_id * 2
04698B 09          0309*      add hl,bc ; hl points to the deltas
04698C ED 17       0310*      ld de,(hl) ;d,e = dy,dx
04698E C9          0311*      ret
04698F             0018   	include "src/asm/polys.asm"
04698F             0001*  num_polys: equ 45
04698F             0002*  
04698F             0003*  polys_lookup_plot:
04698F             0004*  ;	   plot_x,  plot_y:
04698F 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
046995 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
04699B 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
0469A1 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
0469A7 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
0469AD B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
0469B3 D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
0469B9 F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
0469BF 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
0469C5 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
0469CB 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
0469D1 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
0469D7 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
0469DD B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
0469E3 D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
0469E9 F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
0469EF 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
0469F5 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
0469FB 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
046A01 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
046A07 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
046A0D B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046A13 E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046A19 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046A1F 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046A25 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046A2B 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046A31 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046A37 E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046A3D 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046A43 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046A49 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046A4F 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046A55 C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046A5B 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046A61 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046A67 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046A6D C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046A73 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046A79 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046A7F 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046A85 D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046A8B 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046A91 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046A97 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046A9D             0050*  
046A9D             0051*  cube_poly_idx_lookup:
046A9D             0052*  ;	 img_idx,  poly_id
046A9D 00          0053*  	db 0 ; poly_id:0 0
046A9E 00          0054*  	db 0 ; poly_id:1 1
046A9F 00          0055*  	db 0 ; poly_id:2 2
046AA0 00          0056*  	db 0 ; poly_id:3 3
046AA1 00          0057*  	db 0 ; poly_id:4 4
046AA2 00          0058*  	db 0 ; poly_id:5 5
046AA3 00          0059*  	db 0 ; poly_id:6 6
046AA4 00          0060*  	db 0 ; poly_id:7 7
046AA5 00          0061*  	db 0 ; poly_id:8 8
046AA6 01          0062*  	db 1 ; poly_id:9 9
046AA7 02          0063*  	db 2 ; poly_id:10 10
046AA8 03          0064*  	db 3 ; poly_id:11 11
046AA9 04          0065*  	db 4 ; poly_id:12 12
046AAA 05          0066*  	db 5 ; poly_id:13 13
046AAB 06          0067*  	db 6 ; poly_id:14 14
046AAC 07          0068*  	db 7 ; poly_id:15 15
046AAD 08          0069*  	db 8 ; poly_id:16 16
046AAE 09          0070*  	db 9 ; poly_id:17 17
046AAF 09          0071*  	db 9 ; poly_id:18 18
046AB0 09          0072*  	db 9 ; poly_id:19 19
046AB1 09          0073*  	db 9 ; poly_id:20 20
046AB2 09          0074*  	db 9 ; poly_id:21 21
046AB3 09          0075*  	db 9 ; poly_id:22 22
046AB4 09          0076*  	db 9 ; poly_id:23 23
046AB5 0A          0077*  	db 10 ; poly_id:24 24
046AB6 0B          0078*  	db 11 ; poly_id:25 25
046AB7 0C          0079*  	db 12 ; poly_id:26 26
046AB8 0D          0080*  	db 13 ; poly_id:27 27
046AB9 0E          0081*  	db 14 ; poly_id:28 28
046ABA 0F          0082*  	db 15 ; poly_id:29 29
046ABB 10          0083*  	db 16 ; poly_id:30 30
046ABC 10          0084*  	db 16 ; poly_id:31 31
046ABD 10          0085*  	db 16 ; poly_id:32 32
046ABE 10          0086*  	db 16 ; poly_id:33 33
046ABF 10          0087*  	db 16 ; poly_id:34 34
046AC0 11          0088*  	db 17 ; poly_id:35 35
046AC1 12          0089*  	db 18 ; poly_id:36 36
046AC2 13          0090*  	db 19 ; poly_id:37 37
046AC3 14          0091*  	db 20 ; poly_id:38 38
046AC4 15          0092*  	db 21 ; poly_id:39 39
046AC5 15          0093*  	db 21 ; poly_id:40 40
046AC6 15          0094*  	db 21 ; poly_id:41 41
046AC7 16          0095*  	db 22 ; poly_id:42 42
046AC8 17          0096*  	db 23 ; poly_id:43 43
046AC9 18          0097*  	db 24 ; poly_id:44 44
046ACA             0098*  
046ACA             0099*  cube_img_idx_lookup:
046ACA             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046ACA 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046ACD 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046AD0 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046AD3 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046AD6 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046AD9 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046ADC 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046ADF AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046AE2 C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046AE5 E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046AE8 FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046AEB             0112*  
046AEB             0113*  ; map_delta_x,  map_delta_y
046AEB             0114*  polys_map_deltas_0: ; north orientation
046AEB FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046AED FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046AEF FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046AF1 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046AF3 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046AF5 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046AF7 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046AF9 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046AFB 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046AFD FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046AFF FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046B01 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046B03 FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046B05 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046B07 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046B09 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046B0B 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046B0D FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046B0F FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046B11 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046B13 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046B15 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046B17 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046B19 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046B1B FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046B1D FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046B1F FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046B21 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046B23 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046B25 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046B27 FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046B29 FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046B2B 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046B2D 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046B2F 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046B31 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046B33 FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046B35 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046B37 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046B39 FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046B3B 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046B3D 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046B3F FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046B41 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046B43 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046B45             0160*  
046B45             0161*  polys_map_deltas_1: ; east orientation
046B45 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046B47 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046B49 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046B4B 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046B4D 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046B4F 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046B51 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046B53 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046B55 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046B57 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046B59 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046B5B 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046B5D 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046B5F 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046B61 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046B63 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046B65 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046B67 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046B69 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046B6B 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046B6D 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046B6F 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046B71 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046B73 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046B75 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046B77 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046B79 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046B7B 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046B7D 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046B7F 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046B81 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046B83 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046B85 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046B87 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046B89 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046B8B 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046B8D 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046B8F 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046B91 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046B93 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046B95 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046B97 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046B99 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046B9B 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046B9D 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046B9F             0207*  
046B9F             0208*  polys_map_deltas_2: ; south orientation
046B9F 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046BA1 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046BA3 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046BA5 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046BA7 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046BA9 FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046BAB FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046BAD FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046BAF FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046BB1 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046BB3 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046BB5 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046BB7 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046BB9 FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046BBB FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046BBD FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046BBF FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046BC1 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046BC3 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046BC5 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046BC7 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046BC9 FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046BCB FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046BCD FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046BCF 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046BD1 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046BD3 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046BD5 FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046BD7 FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046BD9 FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046BDB 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046BDD 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046BDF 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046BE1 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046BE3 FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046BE5 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046BE7 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046BE9 FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046BEB FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046BED 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046BEF 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046BF1 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046BF3 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046BF5 FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046BF7 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046BF9             0254*  
046BF9             0255*  polys_map_deltas_3: ; west orientation
046BF9 FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046BFB FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046BFD FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046BFF FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046C01 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046C03 FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046C05 FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046C07 FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046C09 FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046C0B FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046C0D FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046C0F FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046C11 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046C13 FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046C15 FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046C17 FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046C19 FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046C1B FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046C1D FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046C1F FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046C21 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046C23 FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046C25 FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046C27 FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046C29 FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046C2B FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046C2D FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046C2F FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046C31 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046C33 FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046C35 FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046C37 FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046C39 FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046C3B FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046C3D FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046C3F FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046C41 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046C43 FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046C45 FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046C47 FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046C49 FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046C4B FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046C4D FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046C4F FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046C51 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046C53             0301*  
046C53             0302*  num_sprite_polys: equ 25
046C53             0303*  
046C53             0304*  sprite_polys_lookup:
046C53             0305*  ;south_id 	; poly_id
046C53 00          0306*  	db 0	; 0
046C54 01          0307*  	db 1	; 1
046C55 02          0308*  	db 2	; 2
046C56 03          0309*  	db 3	; 3
046C57 04          0310*  	db 4	; 4
046C58 05          0311*  	db 5	; 5
046C59 06          0312*  	db 6	; 6
046C5A 07          0313*  	db 7	; 7
046C5B 08          0314*  	db 8	; 8
046C5C FF          0315*  	db 255	; 9
046C5D FF          0316*  	db 255	; 10
046C5E FF          0317*  	db 255	; 11
046C5F FF          0318*  	db 255	; 12
046C60 FF          0319*  	db 255	; 13
046C61 FF          0320*  	db 255	; 14
046C62 FF          0321*  	db 255	; 15
046C63 FF          0322*  	db 255	; 16
046C64 09          0323*  	db 9	; 17
046C65 0A          0324*  	db 10	; 18
046C66 0B          0325*  	db 11	; 19
046C67 0C          0326*  	db 12	; 20
046C68 0D          0327*  	db 13	; 21
046C69 0E          0328*  	db 14	; 22
046C6A 0F          0329*  	db 15	; 23
046C6B FF          0330*  	db 255	; 24
046C6C FF          0331*  	db 255	; 25
046C6D FF          0332*  	db 255	; 26
046C6E FF          0333*  	db 255	; 27
046C6F FF          0334*  	db 255	; 28
046C70 FF          0335*  	db 255	; 29
046C71 10          0336*  	db 16	; 30
046C72 11          0337*  	db 17	; 31
046C73 12          0338*  	db 18	; 32
046C74 13          0339*  	db 19	; 33
046C75 14          0340*  	db 20	; 34
046C76 FF          0341*  	db 255	; 35
046C77 FF          0342*  	db 255	; 36
046C78 FF          0343*  	db 255	; 37
046C79 FF          0344*  	db 255	; 38
046C7A 15          0345*  	db 21	; 39
046C7B 16          0346*  	db 22	; 40
046C7C 17          0347*  	db 23	; 41
046C7D FF          0348*  	db 255	; 42
046C7E FF          0349*  	db 255	; 43
046C7F 18          0350*  	db 24	; 44
046C80             0351*  
046C80             0352*  sprite_imgs_lookup:
046C80             0353*  ;	 sprite_obj; render_obj_id
046C80 B6 6C 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046C83 97 6D 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046C86 78 6E 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046C89 59 6F 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046C8C 3A 70 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046C8F 1B 71 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046C92 FC 71 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046C95 DD 72 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046C98 BE 73 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046C9B 9F 74 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046C9E 80 75 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046CA1 61 76 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046CA4 42 77 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046CA7 23 78 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046CAA 04 79 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046CAD E5 79 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
046CB0 C6 7A 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
046CB3 A7 7B 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
046CB6             0372*  ;	 plot_x,  plot_y, buffer_label
046CB6             0373*  
046CB6             0374*  ; render_obj_id:20
046CB6             0375*  sprite_obj_000:
046CB6 09 00 00 4E 0376*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CBF 2C 00 00 4E 0377*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC8 50 00 00 4E 0378*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CD1 73 00 00 4E 0379*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CDA 97 00 00 4E 0380*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CE3 BA 00 00 4E 0381*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CEC DE 00 00 4E 0382*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CF5 01 01 00 4E 0383*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CFE 25 01 00 4E 0384*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046D07 0B 00 00 4E 0385*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D10 39 00 00 4E 0386*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D19 66 00 00 4E 0387*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D22 94 00 00 4E 0388*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D2B C1 00 00 4E 0389*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D34 EF 00 00 4E 0390*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D3D 1C 01 00 4E 0391*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D46 11 00 00 4D 0392*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D4F 50 00 00 4D 0393*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D58 91 00 00 4D 0394*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D61 D1 00 00 4D 0395*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D6A 11 01 00 4D 0396*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D73 1B 00 00 4C 0397*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D7C 85 00 00 4C 0398*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D85 F0 00 00 4C 0399*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D8E 6B 00 00 44 0400*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
046D97             0401*  
046D97             0402*  ; render_obj_id:21
046D97             0403*  sprite_obj_001:
046D97 0D 00 00 55 0404*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DA0 30 00 00 55 0405*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DA9 54 00 00 55 0406*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DB2 77 00 00 55 0407*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DBB 9B 00 00 55 0408*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DC4 BE 00 00 55 0409*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DCD E2 00 00 55 0410*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DD6 05 01 00 55 0411*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DDF 29 01 00 55 0412*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DE8 10 00 00 57 0413*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DF1 3E 00 00 57 0414*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DFA 6B 00 00 57 0415*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E03 99 00 00 57 0416*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E0C C6 00 00 57 0417*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E15 F4 00 00 57 0418*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E1E 21 01 00 57 0419*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E27 16 00 00 5A 0420*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E30 55 00 00 5A 0421*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E39 96 00 00 5A 0422*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E42 D6 00 00 5A 0423*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E4B 16 01 00 5A 0424*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E54 26 00 00 60 0425*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E5D 90 00 00 60 0426*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E66 FB 00 00 60 0427*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E6F 6E 00 00 82 0428*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
046E78             0429*  
046E78             0430*  ; render_obj_id:22
046E78             0431*  sprite_obj_002:
046E78 09 00 00 55 0432*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E81 2C 00 00 55 0433*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E8A 50 00 00 55 0434*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E93 73 00 00 55 0435*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E9C 97 00 00 55 0436*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EA5 BA 00 00 55 0437*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EAE DE 00 00 55 0438*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EB7 01 01 00 55 0439*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EC0 25 01 00 55 0440*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EC9 0B 00 00 57 0441*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ED2 39 00 00 57 0442*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EDB 66 00 00 57 0443*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EE4 94 00 00 57 0444*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EED C1 00 00 57 0445*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EF6 EF 00 00 57 0446*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EFF 1C 01 00 57 0447*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046F08 10 00 00 5A 0448*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F11 4F 00 00 5A 0449*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F1A 90 00 00 5A 0450*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F23 D0 00 00 5A 0451*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F2C 10 01 00 5A 0452*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F35 1B 00 00 60 0453*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F3E 85 00 00 60 0454*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F47 F0 00 00 60 0455*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F50 50 00 00 82 0456*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
046F59             0457*  
046F59             0458*  ; render_obj_id:23
046F59             0459*  sprite_obj_003:
046F59 0C 00 00 3E 0460*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F62 2F 00 00 3E 0461*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F6B 53 00 00 3E 0462*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F74 76 00 00 3E 0463*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F7D 9A 00 00 3E 0464*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F86 BD 00 00 3E 0465*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F8F E1 00 00 3E 0466*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F98 04 01 00 3E 0467*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046FA1 28 01 00 3E 0468*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046FAA 0F 00 00 39 0469*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FB3 3D 00 00 39 0470*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FBC 6A 00 00 39 0471*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FC5 98 00 00 39 0472*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FCE C5 00 00 39 0473*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FD7 F3 00 00 39 0474*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FE0 20 01 00 39 0475*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FE9 16 00 00 30 0476*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FF2 55 00 00 30 0477*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FFB 96 00 00 30 0478*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
047004 D6 00 00 30 0479*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
04700D 16 01 00 30 0480*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
047016 24 00 00 1A 0481*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
04701F 8E 00 00 1A 0482*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047028 F9 00 00 1A 0483*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047031 09 01 00 83 0484*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
04703A             0485*  
04703A             0486*  ; render_obj_id:24
04703A             0487*  sprite_obj_004:
04703A 0D 00 00 55 0488*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
047043 30 00 00 55 0489*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
04704C 54 00 00 55 0490*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
047055 77 00 00 55 0491*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
04705E 9B 00 00 55 0492*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
047067 BE 00 00 55 0493*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
047070 E2 00 00 55 0494*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
047079 05 01 00 55 0495*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
047082 29 01 00 55 0496*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
04708B 10 00 00 57 0497*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
047094 3E 00 00 57 0498*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
04709D 6B 00 00 57 0499*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470A6 99 00 00 57 0500*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470AF C6 00 00 57 0501*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B8 F4 00 00 57 0502*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470C1 21 01 00 57 0503*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470CA 16 00 00 5A 0504*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470D3 55 00 00 5A 0505*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470DC 96 00 00 5A 0506*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470E5 D6 00 00 5A 0507*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470EE 16 01 00 5A 0508*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470F7 26 00 00 60 0509*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047100 90 00 00 60 0510*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047109 FB 00 00 60 0511*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047112 6E 00 00 82 0512*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
04711B             0513*  
04711B             0514*  ; render_obj_id:40
04711B             0515*  sprite_obj_005:
04711B 0A 00 00 5A 0516*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047124 2D 00 00 5A 0517*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04712D 51 00 00 5A 0518*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047136 74 00 00 5A 0519*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04713F 98 00 00 5A 0520*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047148 BB 00 00 5A 0521*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047151 DF 00 00 5A 0522*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04715A 02 01 00 5A 0523*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047163 26 01 00 5A 0524*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04716C 0D 00 00 5C 0525*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047175 3B 00 00 5C 0526*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04717E 68 00 00 5C 0527*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047187 96 00 00 5C 0528*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047190 C3 00 00 5C 0529*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047199 F1 00 00 5C 0530*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0471A2 1E 01 00 5C 0531*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0471AB 13 00 00 62 0532*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471B4 52 00 00 62 0533*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471BD 93 00 00 62 0534*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471C6 D3 00 00 62 0535*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471CF 13 01 00 62 0536*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471D8 20 00 00 6D 0537*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471E1 8A 00 00 6D 0538*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471EA F5 00 00 6D 0539*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471F3 E0 00 00 A0 0540*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
0471FC             0541*  
0471FC             0542*  ; render_obj_id:41
0471FC             0543*  sprite_obj_006:
0471FC 0C 00 00 55 0544*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
047205 2F 00 00 55 0545*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
04720E 53 00 00 55 0546*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
047217 76 00 00 55 0547*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
047220 9A 00 00 55 0548*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
047229 BD 00 00 55 0549*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
047232 E1 00 00 55 0550*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
04723B 04 01 00 55 0551*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
047244 28 01 00 55 0552*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
04724D 0E 00 00 57 0553*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
047256 3C 00 00 57 0554*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
04725F 69 00 00 57 0555*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
047268 97 00 00 57 0556*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
047271 C4 00 00 57 0557*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
04727A F2 00 00 57 0558*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
047283 1F 01 00 57 0559*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
04728C 15 00 00 5B 0560*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047295 54 00 00 5B 0561*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04729E 95 00 00 5B 0562*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472A7 D5 00 00 5B 0563*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472B0 15 01 00 5B 0564*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472B9 23 00 00 62 0565*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472C2 8D 00 00 62 0566*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472CB F8 00 00 62 0567*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472D4 84 00 00 87 0568*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
0472DD             0569*  
0472DD             0570*  ; render_obj_id:42
0472DD             0571*  sprite_obj_007:
0472DD 0D 00 00 57 0572*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472E6 30 00 00 57 0573*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472EF 54 00 00 57 0574*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F8 77 00 00 57 0575*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
047301 9B 00 00 57 0576*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
04730A BE 00 00 57 0577*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
047313 E2 00 00 57 0578*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
04731C 05 01 00 57 0579*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
047325 29 01 00 57 0580*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
04732E 10 00 00 5A 0581*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047337 3E 00 00 5A 0582*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047340 6B 00 00 5A 0583*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047349 99 00 00 5A 0584*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047352 C6 00 00 5A 0585*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04735B F4 00 00 5A 0586*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047364 21 01 00 5A 0587*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04736D 18 00 00 5F 0588*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047376 57 00 00 5F 0589*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04737F 98 00 00 5F 0590*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047388 D8 00 00 5F 0591*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047391 18 01 00 5F 0592*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04739A 28 00 00 69 0593*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473A3 92 00 00 69 0594*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473AC FD 00 00 69 0595*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473B5 7D 00 00 9C 0596*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
0473BE             0597*  
0473BE             0598*  ; render_obj_id:43
0473BE             0599*  sprite_obj_008:
0473BE 0C 00 00 5C 0600*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473C7 2F 00 00 5C 0601*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473D0 53 00 00 5C 0602*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473D9 76 00 00 5C 0603*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473E2 9A 00 00 5C 0604*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473EB BD 00 00 5C 0605*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473F4 E1 00 00 5C 0606*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473FD 04 01 00 5C 0607*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047406 28 01 00 5C 0608*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04740F 0F 00 00 61 0609*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047418 3D 00 00 61 0610*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047421 6A 00 00 61 0611*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04742A 98 00 00 61 0612*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047433 C5 00 00 61 0613*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04743C F3 00 00 61 0614*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047445 20 01 00 61 0615*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04744E 15 00 00 68 0616*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047457 54 00 00 68 0617*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047460 95 00 00 68 0618*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047469 D5 00 00 68 0619*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047472 15 01 00 68 0620*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04747B 24 00 00 77 0621*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047484 8E 00 00 77 0622*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04748D F9 00 00 77 0623*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047496 D4 00 00 9F 0624*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
04749F             0625*  
04749F             0626*  ; render_obj_id:44
04749F             0627*  sprite_obj_009:
04749F 0F 00 00 5C 0628*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A8 32 00 00 5C 0629*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474B1 56 00 00 5C 0630*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474BA 79 00 00 5C 0631*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474C3 9D 00 00 5C 0632*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474CC C0 00 00 5C 0633*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474D5 E4 00 00 5C 0634*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474DE 07 01 00 5C 0635*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474E7 2B 01 00 5C 0636*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474F0 14 00 00 5F 0637*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474F9 42 00 00 5F 0638*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047502 6F 00 00 5F 0639*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04750B 9D 00 00 5F 0640*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047514 CA 00 00 5F 0641*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04751D F8 00 00 5F 0642*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047526 25 01 00 5F 0643*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04752F 1B 00 00 66 0644*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047538 5A 00 00 66 0645*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
047541 9B 00 00 66 0646*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
04754A DB 00 00 66 0647*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
047553 1B 01 00 66 0648*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
04755C 2E 00 00 75 0649*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
047565 98 00 00 75 0650*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
04756E 03 01 00 75 0651*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
047577 C8 00 00 A1 0652*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
047580             0653*  
047580             0654*  ; render_obj_id:45
047580             0655*  sprite_obj_010:
047580 09 00 00 56 0656*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
047589 2C 00 00 56 0657*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
047592 50 00 00 56 0658*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
04759B 73 00 00 56 0659*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475A4 97 00 00 56 0660*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475AD BA 00 00 56 0661*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475B6 DE 00 00 56 0662*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475BF 01 01 00 56 0663*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475C8 25 01 00 56 0664*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475D1 0C 00 00 58 0665*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475DA 3A 00 00 58 0666*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475E3 67 00 00 58 0667*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475EC 95 00 00 58 0668*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475F5 C2 00 00 58 0669*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475FE F0 00 00 58 0670*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
047607 1D 01 00 58 0671*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
047610 11 00 00 5D 0672*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047619 50 00 00 5D 0673*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047622 91 00 00 5D 0674*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04762B D1 00 00 5D 0675*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047634 11 01 00 5D 0676*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04763D 1D 00 00 63 0677*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
047646 87 00 00 63 0678*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
04764F F2 00 00 63 0679*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
047658 58 00 00 8D 0680*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
047661             0681*  
047661             0682*  ; render_obj_id:46
047661             0683*  sprite_obj_011:
047661 09 00 00 58 0684*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04766A 2C 00 00 58 0685*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047673 50 00 00 58 0686*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04767C 73 00 00 58 0687*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047685 97 00 00 58 0688*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04768E BA 00 00 58 0689*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047697 DE 00 00 58 0690*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476A0 01 01 00 58 0691*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476A9 25 01 00 58 0692*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476B2 0C 00 00 5A 0693*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476BB 3A 00 00 5A 0694*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476C4 67 00 00 5A 0695*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476CD 95 00 00 5A 0696*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476D6 C2 00 00 5A 0697*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476DF F0 00 00 5A 0698*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476E8 1D 01 00 5A 0699*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476F1 11 00 00 60 0700*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476FA 50 00 00 60 0701*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047703 91 00 00 60 0702*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04770C D1 00 00 60 0703*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047715 11 01 00 60 0704*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04771E 1D 00 00 69 0705*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047727 87 00 00 69 0706*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047730 F2 00 00 69 0707*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047739 8E 00 00 9F 0708*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
047742             0709*  
047742             0710*  ; render_obj_id:47
047742             0711*  sprite_obj_012:
047742 09 00 00 57 0712*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04774B 2C 00 00 57 0713*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047754 50 00 00 57 0714*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04775D 73 00 00 57 0715*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047766 97 00 00 57 0716*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04776F BA 00 00 57 0717*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047778 DE 00 00 57 0718*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047781 01 01 00 57 0719*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04778A 25 01 00 57 0720*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047793 0C 00 00 59 0721*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
04779C 3A 00 00 59 0722*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477A5 67 00 00 59 0723*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477AE 95 00 00 59 0724*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477B7 C2 00 00 59 0725*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477C0 F0 00 00 59 0726*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477C9 1D 01 00 59 0727*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477D2 11 00 00 5E 0728*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477DB 50 00 00 5E 0729*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477E4 91 00 00 5E 0730*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477ED D1 00 00 5E 0731*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477F6 11 01 00 5E 0732*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477FF 1D 00 00 66 0733*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
047808 87 00 00 66 0734*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047811 F2 00 00 66 0735*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
04781A B2 00 00 96 0736*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
047823             0737*  
047823             0738*  ; render_obj_id:48
047823             0739*  sprite_obj_013:
047823 0A 00 00 5A 0740*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04782C 2D 00 00 5A 0741*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047835 51 00 00 5A 0742*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04783E 74 00 00 5A 0743*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047847 98 00 00 5A 0744*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047850 BB 00 00 5A 0745*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047859 DF 00 00 5A 0746*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047862 02 01 00 5A 0747*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04786B 26 01 00 5A 0748*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047874 0D 00 00 5C 0749*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04787D 3B 00 00 5C 0750*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047886 68 00 00 5C 0751*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04788F 96 00 00 5C 0752*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047898 C3 00 00 5C 0753*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478A1 F1 00 00 5C 0754*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478AA 1E 01 00 5C 0755*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478B3 12 00 00 62 0756*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478BC 51 00 00 62 0757*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478C5 92 00 00 62 0758*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478CE D2 00 00 62 0759*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478D7 12 01 00 62 0760*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478E0 1D 00 00 6C 0761*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478E9 87 00 00 6C 0762*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478F2 F2 00 00 6C 0763*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478FB 00 01 00 A0 0764*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
047904             0765*  
047904             0766*  ; render_obj_id:49
047904             0767*  sprite_obj_014:
047904 0A 00 00 59 0768*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
04790D 2D 00 00 59 0769*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047916 51 00 00 59 0770*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
04791F 74 00 00 59 0771*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047928 98 00 00 59 0772*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047931 BB 00 00 59 0773*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
04793A DF 00 00 59 0774*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
047943 02 01 00 59 0775*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
04794C 26 01 00 59 0776*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
047955 0E 00 00 5B 0777*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04795E 3C 00 00 5B 0778*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047967 69 00 00 5B 0779*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047970 97 00 00 5B 0780*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047979 C4 00 00 5B 0781*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047982 F2 00 00 5B 0782*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04798B 1F 01 00 5B 0783*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047994 13 00 00 62 0784*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
04799D 52 00 00 62 0785*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479A6 93 00 00 62 0786*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479AF D3 00 00 62 0787*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479B8 13 01 00 62 0788*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479C1 20 00 00 6C 0789*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479CA 8A 00 00 6C 0790*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479D3 F5 00 00 6C 0791*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479DC E8 00 00 A0 0792*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
0479E5             0793*  
0479E5             0794*  ; render_obj_id:50
0479E5             0795*  sprite_obj_015:
0479E5 0D 00 00 53 0796*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479EE 30 00 00 53 0797*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479F7 54 00 00 53 0798*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A00 77 00 00 53 0799*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A09 9B 00 00 53 0800*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A12 BE 00 00 53 0801*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A1B E2 00 00 53 0802*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A24 05 01 00 53 0803*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A2D 29 01 00 53 0804*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A36 10 00 00 54 0805*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A3F 3E 00 00 54 0806*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A48 6B 00 00 54 0807*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A51 99 00 00 54 0808*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A5A C6 00 00 54 0809*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A63 F4 00 00 54 0810*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A6C 21 01 00 54 0811*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A75 16 00 00 56 0812*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A7E 55 00 00 56 0813*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A87 96 00 00 56 0814*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A90 D6 00 00 56 0815*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A99 16 01 00 56 0816*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047AA2 26 00 00 5A 0817*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AAB 90 00 00 5A 0818*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AB4 FB 00 00 5A 0819*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047ABD 78 00 00 6E 0820*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047AC6             0821*  
047AC6             0822*  ; render_obj_id:51
047AC6             0823*  sprite_obj_016:
047AC6 0B 00 00 49 0824*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047ACF 2E 00 00 49 0825*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD8 52 00 00 49 0826*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AE1 75 00 00 49 0827*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AEA 99 00 00 49 0828*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AF3 BC 00 00 49 0829*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AFC E0 00 00 49 0830*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B05 03 01 00 49 0831*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B0E 27 01 00 49 0832*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B17 0D 00 00 48 0833*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B20 3B 00 00 48 0834*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B29 68 00 00 48 0835*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B32 96 00 00 48 0836*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B3B C3 00 00 48 0837*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B44 F1 00 00 48 0838*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B4D 1E 01 00 48 0839*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B56 13 00 00 45 0840*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B5F 52 00 00 45 0841*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B68 93 00 00 45 0842*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B71 D3 00 00 45 0843*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B7A 13 01 00 45 0844*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B83 20 00 00 3E 0845*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B8C 8A 00 00 3E 0846*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B95 F5 00 00 3E 0847*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B9E 5E 00 00 1C 0848*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047BA7             0849*  
047BA7             0850*  ; render_obj_id:52
047BA7             0851*  sprite_obj_017:
047BA7 0C 00 00 49 0852*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BB0 2F 00 00 49 0853*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BB9 53 00 00 49 0854*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BC2 76 00 00 49 0855*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BCB 9A 00 00 49 0856*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BD4 BD 00 00 49 0857*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BDD E1 00 00 49 0858*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BE6 04 01 00 49 0859*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BEF 28 01 00 49 0860*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BF8 0F 00 00 48 0861*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C01 3D 00 00 48 0862*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C0A 6A 00 00 48 0863*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C13 98 00 00 48 0864*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C1C C5 00 00 48 0865*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C25 F3 00 00 48 0866*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C2E 20 01 00 48 0867*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C37 16 00 00 45 0868*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C40 55 00 00 45 0869*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C49 96 00 00 45 0870*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C52 D6 00 00 45 0871*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C5B 16 01 00 45 0872*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C64 24 00 00 3E 0873*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C6D 8E 00 00 3E 0874*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C76 F9 00 00 3E 0875*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C7F 6B 00 00 1C 0876*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047C88             0877*  
047C88             0878*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
047C88             0019   	include "src/asm/font_itc_honda.asm"
047C88             0001*  ; Bitmap indices:
047C88             0002*  BUF_4384: equ 0x1120 ; 32
047C88             0003*  ; Missing character 33 !
047C88             0004*  ; Missing character 34 "
047C88             0005*  ; Missing character 35 #
047C88             0006*  ; Missing character 36 $
047C88             0007*  ; Missing character 37 %
047C88             0008*  ; Missing character 38 &
047C88             0009*  ; Missing character 39 '
047C88             0010*  ; Missing character 40 (
047C88             0011*  ; Missing character 41 )
047C88             0012*  ; Missing character 42 *
047C88             0013*  ; Missing character 43 +
047C88             0014*  ; Missing character 44 ,
047C88             0015*  ; Missing character 45 -
047C88             0016*  BUF_4398: equ 0x112E ; 46 .
047C88             0017*  ; Missing character 47 /
047C88             0018*  BUF_4400: equ 0x1130 ; 48 0
047C88             0019*  BUF_4401: equ 0x1131 ; 49 1
047C88             0020*  BUF_4402: equ 0x1132 ; 50 2
047C88             0021*  BUF_4403: equ 0x1133 ; 51 3
047C88             0022*  BUF_4404: equ 0x1134 ; 52 4
047C88             0023*  BUF_4405: equ 0x1135 ; 53 5
047C88             0024*  BUF_4406: equ 0x1136 ; 54 6
047C88             0025*  BUF_4407: equ 0x1137 ; 55 7
047C88             0026*  BUF_4408: equ 0x1138 ; 56 8
047C88             0027*  BUF_4409: equ 0x1139 ; 57 9
047C88             0028*  ; Missing character 58 :
047C88             0029*  ; Missing character 59 ;
047C88             0030*  ; Missing character 60 <
047C88             0031*  ; Missing character 61 =
047C88             0032*  ; Missing character 62 >
047C88             0033*  ; Missing character 63 ?
047C88             0034*  ; Missing character 64 @
047C88             0035*  BUF_4417: equ 0x1141 ; 65 A
047C88             0036*  BUF_4418: equ 0x1142 ; 66 B
047C88             0037*  BUF_4419: equ 0x1143 ; 67 C
047C88             0038*  BUF_4420: equ 0x1144 ; 68 D
047C88             0039*  BUF_4421: equ 0x1145 ; 69 E
047C88             0040*  BUF_4422: equ 0x1146 ; 70 F
047C88             0041*  BUF_4423: equ 0x1147 ; 71 G
047C88             0042*  BUF_4424: equ 0x1148 ; 72 H
047C88             0043*  BUF_4425: equ 0x1149 ; 73 I
047C88             0044*  BUF_4426: equ 0x114A ; 74 J
047C88             0045*  BUF_4427: equ 0x114B ; 75 K
047C88             0046*  BUF_4428: equ 0x114C ; 76 L
047C88             0047*  BUF_4429: equ 0x114D ; 77 M
047C88             0048*  BUF_4430: equ 0x114E ; 78 N
047C88             0049*  BUF_4431: equ 0x114F ; 79 O
047C88             0050*  BUF_4432: equ 0x1150 ; 80 P
047C88             0051*  BUF_4433: equ 0x1151 ; 81 Q
047C88             0052*  BUF_4434: equ 0x1152 ; 82 R
047C88             0053*  BUF_4435: equ 0x1153 ; 83 S
047C88             0054*  BUF_4436: equ 0x1154 ; 84 T
047C88             0055*  BUF_4437: equ 0x1155 ; 85 U
047C88             0056*  BUF_4438: equ 0x1156 ; 86 V
047C88             0057*  BUF_4439: equ 0x1157 ; 87 W
047C88             0058*  BUF_4440: equ 0x1158 ; 88 X
047C88             0059*  BUF_4441: equ 0x1159 ; 89 Y
047C88             0060*  BUF_4442: equ 0x115A ; 90 Z
047C88             0061*  ; Missing character 91 [
047C88             0062*  ; Missing character 92 \
047C88             0063*  ; Missing character 93 ]
047C88             0064*  ; Missing character 94 ^
047C88             0065*  ; Missing character 95 _
047C88             0066*  ; Missing character 96 `
047C88             0067*  BUF_4449: equ 0x1161 ; 97 a
047C88             0068*  BUF_4450: equ 0x1162 ; 98 b
047C88             0069*  BUF_4451: equ 0x1163 ; 99 c
047C88             0070*  BUF_4452: equ 0x1164 ; 100 d
047C88             0071*  BUF_4453: equ 0x1165 ; 101 e
047C88             0072*  BUF_4454: equ 0x1166 ; 102 f
047C88             0073*  BUF_4455: equ 0x1167 ; 103 g
047C88             0074*  BUF_4456: equ 0x1168 ; 104 h
047C88             0075*  BUF_4457: equ 0x1169 ; 105 i
047C88             0076*  BUF_4458: equ 0x116A ; 106 j
047C88             0077*  BUF_4459: equ 0x116B ; 107 k
047C88             0078*  BUF_4460: equ 0x116C ; 108 l
047C88             0079*  BUF_4461: equ 0x116D ; 109 m
047C88             0080*  BUF_4462: equ 0x116E ; 110 n
047C88             0081*  BUF_4463: equ 0x116F ; 111 o
047C88             0082*  BUF_4464: equ 0x1170 ; 112 p
047C88             0083*  BUF_4465: equ 0x1171 ; 113 q
047C88             0084*  BUF_4466: equ 0x1172 ; 114 r
047C88             0085*  BUF_4467: equ 0x1173 ; 115 s
047C88             0086*  BUF_4468: equ 0x1174 ; 116 t
047C88             0087*  BUF_4469: equ 0x1175 ; 117 u
047C88             0088*  BUF_4470: equ 0x1176 ; 118 v
047C88             0089*  BUF_4471: equ 0x1177 ; 119 w
047C88             0090*  BUF_4472: equ 0x1178 ; 120 x
047C88             0091*  BUF_4473: equ 0x1179 ; 121 y
047C88             0092*  BUF_4474: equ 0x117A ; 122 z
047C88             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
047C88             0094*  font_itc_honda:
047C88 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
047C8E 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
047C94 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
047C9A 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
047CA0 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
047CA6 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
047CAC 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
047CB2 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
047CB8 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
047CBE 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
047CC4 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
047CCA 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
047CD0 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
047CD6 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
047CDC 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
047CE2 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
047CE8 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
047CEE 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
047CF4 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
047CFA 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
047D00 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
047D06 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
047D0C 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
047D12 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
047D18 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
047D1E 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
047D24 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
047D2A 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
047D30 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
047D36 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
047D3C 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
047D42 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
047D48 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
047D4E 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
047D54 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
047D5A 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
047D60 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
047D66 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
047D6C 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
047D72 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
047D78 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
047D7E 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
047D84 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
047D8A 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
047D90 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
047D96 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
047D9C 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
047DA2 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
047DA8 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
047DAE 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
047DB4 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
047DBA 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
047DC0 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
047DC6 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
047DCC 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
047DD2 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
047DD8 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
047DDE 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
047DE4 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
047DEA 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
047DF0 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
047DF6 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
047DFC 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
047E02 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
047E08 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
047E0E 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
047E14 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
047E1A 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
047E20 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
047E26 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
047E2C 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
047E32 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
047E38 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
047E3E 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
047E44 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
047E4A 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
047E50 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
047E56 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
047E5C 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
047E62 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
047E68 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
047E6E 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
047E74 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
047E7A 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
047E80 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
047E86 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
047E8C 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
047E92 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
047E98 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
047E9E 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
047EA4 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
047EAA             0186*  
047EAA             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
047EAA             0188*  load_font_itc_honda:
047EAA             0189*  
047EAA 21 EB 87 04 0190*  	ld hl,Fhonda032
047EAE 11 21 C4 04 0191*  	ld de,filedata
047EB2 01 00 00 01 0192*  	ld bc,65536
047EB6 3E 01       0193*  	ld a,mos_load
047EB8 5B CF       0194*  	RST.LIL 08h
047EBA 21 20 11 00 0195*  	ld hl,BUF_4384
047EBE 01 06 00 00 0196*  	ld bc,6
047EC2 11 01 00 00 0197*  	ld de,1
047EC6 DD 21 06 00 0198*  	ld ix,6
       00          
047ECB CD 4E B9 04 0199*  	call vdu_load_img
047ECF             0200*  ; Missing character 33
047ECF             0201*  ; Missing character 34
047ECF             0202*  ; Missing character 35
047ECF             0203*  ; Missing character 36
047ECF             0204*  ; Missing character 37
047ECF             0205*  ; Missing character 38
047ECF             0206*  ; Missing character 39
047ECF             0207*  ; Missing character 40
047ECF             0208*  ; Missing character 41
047ECF             0209*  ; Missing character 42
047ECF             0210*  ; Missing character 43
047ECF             0211*  ; Missing character 44
047ECF             0212*  ; Missing character 45
047ECF             0213*  
047ECF 21 01 88 04 0214*  	ld hl,Fhonda046
047ED3 11 21 C4 04 0215*  	ld de,filedata
047ED7 01 00 00 01 0216*  	ld bc,65536
047EDB 3E 01       0217*  	ld a,mos_load
047EDD 5B CF       0218*  	RST.LIL 08h
047EDF 21 2E 11 00 0219*  	ld hl,BUF_4398
047EE3 01 05 00 00 0220*  	ld bc,5
047EE7 11 05 00 00 0221*  	ld de,5
047EEB DD 21 19 00 0222*  	ld ix,25
       00          
047EF0 CD 4E B9 04 0223*  	call vdu_load_img
047EF4             0224*  ; Missing character 47
047EF4             0225*  
047EF4 21 17 88 04 0226*  	ld hl,Fhonda048
047EF8 11 21 C4 04 0227*  	ld de,filedata
047EFC 01 00 00 01 0228*  	ld bc,65536
047F00 3E 01       0229*  	ld a,mos_load
047F02 5B CF       0230*  	RST.LIL 08h
047F04 21 30 11 00 0231*  	ld hl,BUF_4400
047F08 01 0A 00 00 0232*  	ld bc,10
047F0C 11 12 00 00 0233*  	ld de,18
047F10 DD 21 B4 00 0234*  	ld ix,180
       00          
047F15 CD 4E B9 04 0235*  	call vdu_load_img
047F19             0236*  
047F19 21 2D 88 04 0237*  	ld hl,Fhonda049
047F1D 11 21 C4 04 0238*  	ld de,filedata
047F21 01 00 00 01 0239*  	ld bc,65536
047F25 3E 01       0240*  	ld a,mos_load
047F27 5B CF       0241*  	RST.LIL 08h
047F29 21 31 11 00 0242*  	ld hl,BUF_4401
047F2D 01 04 00 00 0243*  	ld bc,4
047F31 11 12 00 00 0244*  	ld de,18
047F35 DD 21 48 00 0245*  	ld ix,72
       00          
047F3A CD 4E B9 04 0246*  	call vdu_load_img
047F3E             0247*  
047F3E 21 43 88 04 0248*  	ld hl,Fhonda050
047F42 11 21 C4 04 0249*  	ld de,filedata
047F46 01 00 00 01 0250*  	ld bc,65536
047F4A 3E 01       0251*  	ld a,mos_load
047F4C 5B CF       0252*  	RST.LIL 08h
047F4E 21 32 11 00 0253*  	ld hl,BUF_4402
047F52 01 09 00 00 0254*  	ld bc,9
047F56 11 12 00 00 0255*  	ld de,18
047F5A DD 21 A2 00 0256*  	ld ix,162
       00          
047F5F CD 4E B9 04 0257*  	call vdu_load_img
047F63             0258*  
047F63 21 59 88 04 0259*  	ld hl,Fhonda051
047F67 11 21 C4 04 0260*  	ld de,filedata
047F6B 01 00 00 01 0261*  	ld bc,65536
047F6F 3E 01       0262*  	ld a,mos_load
047F71 5B CF       0263*  	RST.LIL 08h
047F73 21 33 11 00 0264*  	ld hl,BUF_4403
047F77 01 0A 00 00 0265*  	ld bc,10
047F7B 11 12 00 00 0266*  	ld de,18
047F7F DD 21 B4 00 0267*  	ld ix,180
       00          
047F84 CD 4E B9 04 0268*  	call vdu_load_img
047F88             0269*  
047F88 21 6F 88 04 0270*  	ld hl,Fhonda052
047F8C 11 21 C4 04 0271*  	ld de,filedata
047F90 01 00 00 01 0272*  	ld bc,65536
047F94 3E 01       0273*  	ld a,mos_load
047F96 5B CF       0274*  	RST.LIL 08h
047F98 21 34 11 00 0275*  	ld hl,BUF_4404
047F9C 01 0C 00 00 0276*  	ld bc,12
047FA0 11 12 00 00 0277*  	ld de,18
047FA4 DD 21 D8 00 0278*  	ld ix,216
       00          
047FA9 CD 4E B9 04 0279*  	call vdu_load_img
047FAD             0280*  
047FAD 21 85 88 04 0281*  	ld hl,Fhonda053
047FB1 11 21 C4 04 0282*  	ld de,filedata
047FB5 01 00 00 01 0283*  	ld bc,65536
047FB9 3E 01       0284*  	ld a,mos_load
047FBB 5B CF       0285*  	RST.LIL 08h
047FBD 21 35 11 00 0286*  	ld hl,BUF_4405
047FC1 01 0A 00 00 0287*  	ld bc,10
047FC5 11 12 00 00 0288*  	ld de,18
047FC9 DD 21 B4 00 0289*  	ld ix,180
       00          
047FCE CD 4E B9 04 0290*  	call vdu_load_img
047FD2             0291*  
047FD2 21 9B 88 04 0292*  	ld hl,Fhonda054
047FD6 11 21 C4 04 0293*  	ld de,filedata
047FDA 01 00 00 01 0294*  	ld bc,65536
047FDE 3E 01       0295*  	ld a,mos_load
047FE0 5B CF       0296*  	RST.LIL 08h
047FE2 21 36 11 00 0297*  	ld hl,BUF_4406
047FE6 01 0A 00 00 0298*  	ld bc,10
047FEA 11 12 00 00 0299*  	ld de,18
047FEE DD 21 B4 00 0300*  	ld ix,180
       00          
047FF3 CD 4E B9 04 0301*  	call vdu_load_img
047FF7             0302*  
047FF7 21 B1 88 04 0303*  	ld hl,Fhonda055
047FFB 11 21 C4 04 0304*  	ld de,filedata
047FFF 01 00 00 01 0305*  	ld bc,65536
048003 3E 01       0306*  	ld a,mos_load
048005 5B CF       0307*  	RST.LIL 08h
048007 21 37 11 00 0308*  	ld hl,BUF_4407
04800B 01 08 00 00 0309*  	ld bc,8
04800F 11 12 00 00 0310*  	ld de,18
048013 DD 21 90 00 0311*  	ld ix,144
       00          
048018 CD 4E B9 04 0312*  	call vdu_load_img
04801C             0313*  
04801C 21 C7 88 04 0314*  	ld hl,Fhonda056
048020 11 21 C4 04 0315*  	ld de,filedata
048024 01 00 00 01 0316*  	ld bc,65536
048028 3E 01       0317*  	ld a,mos_load
04802A 5B CF       0318*  	RST.LIL 08h
04802C 21 38 11 00 0319*  	ld hl,BUF_4408
048030 01 0A 00 00 0320*  	ld bc,10
048034 11 12 00 00 0321*  	ld de,18
048038 DD 21 B4 00 0322*  	ld ix,180
       00          
04803D CD 4E B9 04 0323*  	call vdu_load_img
048041             0324*  
048041 21 DD 88 04 0325*  	ld hl,Fhonda057
048045 11 21 C4 04 0326*  	ld de,filedata
048049 01 00 00 01 0327*  	ld bc,65536
04804D 3E 01       0328*  	ld a,mos_load
04804F 5B CF       0329*  	RST.LIL 08h
048051 21 39 11 00 0330*  	ld hl,BUF_4409
048055 01 0A 00 00 0331*  	ld bc,10
048059 11 12 00 00 0332*  	ld de,18
04805D DD 21 B4 00 0333*  	ld ix,180
       00          
048062 CD 4E B9 04 0334*  	call vdu_load_img
048066             0335*  ; Missing character 58
048066             0336*  ; Missing character 59
048066             0337*  ; Missing character 60
048066             0338*  ; Missing character 61
048066             0339*  ; Missing character 62
048066             0340*  ; Missing character 63
048066             0341*  ; Missing character 64
048066             0342*  
048066 21 F3 88 04 0343*  	ld hl,Fhonda065
04806A 11 21 C4 04 0344*  	ld de,filedata
04806E 01 00 00 01 0345*  	ld bc,65536
048072 3E 01       0346*  	ld a,mos_load
048074 5B CF       0347*  	RST.LIL 08h
048076 21 41 11 00 0348*  	ld hl,BUF_4417
04807A 01 0A 00 00 0349*  	ld bc,10
04807E 11 12 00 00 0350*  	ld de,18
048082 DD 21 B4 00 0351*  	ld ix,180
       00          
048087 CD 4E B9 04 0352*  	call vdu_load_img
04808B             0353*  
04808B 21 09 89 04 0354*  	ld hl,Fhonda066
04808F 11 21 C4 04 0355*  	ld de,filedata
048093 01 00 00 01 0356*  	ld bc,65536
048097 3E 01       0357*  	ld a,mos_load
048099 5B CF       0358*  	RST.LIL 08h
04809B 21 42 11 00 0359*  	ld hl,BUF_4418
04809F 01 0A 00 00 0360*  	ld bc,10
0480A3 11 12 00 00 0361*  	ld de,18
0480A7 DD 21 B4 00 0362*  	ld ix,180
       00          
0480AC CD 4E B9 04 0363*  	call vdu_load_img
0480B0             0364*  
0480B0 21 1F 89 04 0365*  	ld hl,Fhonda067
0480B4 11 21 C4 04 0366*  	ld de,filedata
0480B8 01 00 00 01 0367*  	ld bc,65536
0480BC 3E 01       0368*  	ld a,mos_load
0480BE 5B CF       0369*  	RST.LIL 08h
0480C0 21 43 11 00 0370*  	ld hl,BUF_4419
0480C4 01 08 00 00 0371*  	ld bc,8
0480C8 11 13 00 00 0372*  	ld de,19
0480CC DD 21 98 00 0373*  	ld ix,152
       00          
0480D1 CD 4E B9 04 0374*  	call vdu_load_img
0480D5             0375*  
0480D5 21 35 89 04 0376*  	ld hl,Fhonda068
0480D9 11 21 C4 04 0377*  	ld de,filedata
0480DD 01 00 00 01 0378*  	ld bc,65536
0480E1 3E 01       0379*  	ld a,mos_load
0480E3 5B CF       0380*  	RST.LIL 08h
0480E5 21 44 11 00 0381*  	ld hl,BUF_4420
0480E9 01 0A 00 00 0382*  	ld bc,10
0480ED 11 12 00 00 0383*  	ld de,18
0480F1 DD 21 B4 00 0384*  	ld ix,180
       00          
0480F6 CD 4E B9 04 0385*  	call vdu_load_img
0480FA             0386*  
0480FA 21 4B 89 04 0387*  	ld hl,Fhonda069
0480FE 11 21 C4 04 0388*  	ld de,filedata
048102 01 00 00 01 0389*  	ld bc,65536
048106 3E 01       0390*  	ld a,mos_load
048108 5B CF       0391*  	RST.LIL 08h
04810A 21 45 11 00 0392*  	ld hl,BUF_4421
04810E 01 08 00 00 0393*  	ld bc,8
048112 11 12 00 00 0394*  	ld de,18
048116 DD 21 90 00 0395*  	ld ix,144
       00          
04811B CD 4E B9 04 0396*  	call vdu_load_img
04811F             0397*  
04811F 21 61 89 04 0398*  	ld hl,Fhonda070
048123 11 21 C4 04 0399*  	ld de,filedata
048127 01 00 00 01 0400*  	ld bc,65536
04812B 3E 01       0401*  	ld a,mos_load
04812D 5B CF       0402*  	RST.LIL 08h
04812F 21 46 11 00 0403*  	ld hl,BUF_4422
048133 01 08 00 00 0404*  	ld bc,8
048137 11 12 00 00 0405*  	ld de,18
04813B DD 21 90 00 0406*  	ld ix,144
       00          
048140 CD 4E B9 04 0407*  	call vdu_load_img
048144             0408*  
048144 21 77 89 04 0409*  	ld hl,Fhonda071
048148 11 21 C4 04 0410*  	ld de,filedata
04814C 01 00 00 01 0411*  	ld bc,65536
048150 3E 01       0412*  	ld a,mos_load
048152 5B CF       0413*  	RST.LIL 08h
048154 21 47 11 00 0414*  	ld hl,BUF_4423
048158 01 0A 00 00 0415*  	ld bc,10
04815C 11 12 00 00 0416*  	ld de,18
048160 DD 21 B4 00 0417*  	ld ix,180
       00          
048165 CD 4E B9 04 0418*  	call vdu_load_img
048169             0419*  
048169 21 8D 89 04 0420*  	ld hl,Fhonda072
04816D 11 21 C4 04 0421*  	ld de,filedata
048171 01 00 00 01 0422*  	ld bc,65536
048175 3E 01       0423*  	ld a,mos_load
048177 5B CF       0424*  	RST.LIL 08h
048179 21 48 11 00 0425*  	ld hl,BUF_4424
04817D 01 0A 00 00 0426*  	ld bc,10
048181 11 12 00 00 0427*  	ld de,18
048185 DD 21 B4 00 0428*  	ld ix,180
       00          
04818A CD 4E B9 04 0429*  	call vdu_load_img
04818E             0430*  
04818E 21 A3 89 04 0431*  	ld hl,Fhonda073
048192 11 21 C4 04 0432*  	ld de,filedata
048196 01 00 00 01 0433*  	ld bc,65536
04819A 3E 01       0434*  	ld a,mos_load
04819C 5B CF       0435*  	RST.LIL 08h
04819E 21 49 11 00 0436*  	ld hl,BUF_4425
0481A2 01 03 00 00 0437*  	ld bc,3
0481A6 11 12 00 00 0438*  	ld de,18
0481AA DD 21 36 00 0439*  	ld ix,54
       00          
0481AF CD 4E B9 04 0440*  	call vdu_load_img
0481B3             0441*  
0481B3 21 B9 89 04 0442*  	ld hl,Fhonda074
0481B7 11 21 C4 04 0443*  	ld de,filedata
0481BB 01 00 00 01 0444*  	ld bc,65536
0481BF 3E 01       0445*  	ld a,mos_load
0481C1 5B CF       0446*  	RST.LIL 08h
0481C3 21 4A 11 00 0447*  	ld hl,BUF_4426
0481C7 01 06 00 00 0448*  	ld bc,6
0481CB 11 12 00 00 0449*  	ld de,18
0481CF DD 21 6C 00 0450*  	ld ix,108
       00          
0481D4 CD 4E B9 04 0451*  	call vdu_load_img
0481D8             0452*  
0481D8 21 CF 89 04 0453*  	ld hl,Fhonda075
0481DC 11 21 C4 04 0454*  	ld de,filedata
0481E0 01 00 00 01 0455*  	ld bc,65536
0481E4 3E 01       0456*  	ld a,mos_load
0481E6 5B CF       0457*  	RST.LIL 08h
0481E8 21 4B 11 00 0458*  	ld hl,BUF_4427
0481EC 01 0A 00 00 0459*  	ld bc,10
0481F0 11 12 00 00 0460*  	ld de,18
0481F4 DD 21 B4 00 0461*  	ld ix,180
       00          
0481F9 CD 4E B9 04 0462*  	call vdu_load_img
0481FD             0463*  
0481FD 21 E5 89 04 0464*  	ld hl,Fhonda076
048201 11 21 C4 04 0465*  	ld de,filedata
048205 01 00 00 01 0466*  	ld bc,65536
048209 3E 01       0467*  	ld a,mos_load
04820B 5B CF       0468*  	RST.LIL 08h
04820D 21 4C 11 00 0469*  	ld hl,BUF_4428
048211 01 08 00 00 0470*  	ld bc,8
048215 11 12 00 00 0471*  	ld de,18
048219 DD 21 90 00 0472*  	ld ix,144
       00          
04821E CD 4E B9 04 0473*  	call vdu_load_img
048222             0474*  
048222 21 FB 89 04 0475*  	ld hl,Fhonda077
048226 11 21 C4 04 0476*  	ld de,filedata
04822A 01 00 00 01 0477*  	ld bc,65536
04822E 3E 01       0478*  	ld a,mos_load
048230 5B CF       0479*  	RST.LIL 08h
048232 21 4D 11 00 0480*  	ld hl,BUF_4429
048236 01 0E 00 00 0481*  	ld bc,14
04823A 11 12 00 00 0482*  	ld de,18
04823E DD 21 FC 00 0483*  	ld ix,252
       00          
048243 CD 4E B9 04 0484*  	call vdu_load_img
048247             0485*  
048247 21 11 8A 04 0486*  	ld hl,Fhonda078
04824B 11 21 C4 04 0487*  	ld de,filedata
04824F 01 00 00 01 0488*  	ld bc,65536
048253 3E 01       0489*  	ld a,mos_load
048255 5B CF       0490*  	RST.LIL 08h
048257 21 4E 11 00 0491*  	ld hl,BUF_4430
04825B 01 0A 00 00 0492*  	ld bc,10
04825F 11 12 00 00 0493*  	ld de,18
048263 DD 21 B4 00 0494*  	ld ix,180
       00          
048268 CD 4E B9 04 0495*  	call vdu_load_img
04826C             0496*  
04826C 21 27 8A 04 0497*  	ld hl,Fhonda079
048270 11 21 C4 04 0498*  	ld de,filedata
048274 01 00 00 01 0499*  	ld bc,65536
048278 3E 01       0500*  	ld a,mos_load
04827A 5B CF       0501*  	RST.LIL 08h
04827C 21 4F 11 00 0502*  	ld hl,BUF_4431
048280 01 0A 00 00 0503*  	ld bc,10
048284 11 12 00 00 0504*  	ld de,18
048288 DD 21 B4 00 0505*  	ld ix,180
       00          
04828D CD 4E B9 04 0506*  	call vdu_load_img
048291             0507*  
048291 21 3D 8A 04 0508*  	ld hl,Fhonda080
048295 11 21 C4 04 0509*  	ld de,filedata
048299 01 00 00 01 0510*  	ld bc,65536
04829D 3E 01       0511*  	ld a,mos_load
04829F 5B CF       0512*  	RST.LIL 08h
0482A1 21 50 11 00 0513*  	ld hl,BUF_4432
0482A5 01 0A 00 00 0514*  	ld bc,10
0482A9 11 12 00 00 0515*  	ld de,18
0482AD DD 21 B4 00 0516*  	ld ix,180
       00          
0482B2 CD 4E B9 04 0517*  	call vdu_load_img
0482B6             0518*  
0482B6 21 53 8A 04 0519*  	ld hl,Fhonda081
0482BA 11 21 C4 04 0520*  	ld de,filedata
0482BE 01 00 00 01 0521*  	ld bc,65536
0482C2 3E 01       0522*  	ld a,mos_load
0482C4 5B CF       0523*  	RST.LIL 08h
0482C6 21 51 11 00 0524*  	ld hl,BUF_4433
0482CA 01 0A 00 00 0525*  	ld bc,10
0482CE 11 15 00 00 0526*  	ld de,21
0482D2 DD 21 D2 00 0527*  	ld ix,210
       00          
0482D7 CD 4E B9 04 0528*  	call vdu_load_img
0482DB             0529*  
0482DB 21 69 8A 04 0530*  	ld hl,Fhonda082
0482DF 11 21 C4 04 0531*  	ld de,filedata
0482E3 01 00 00 01 0532*  	ld bc,65536
0482E7 3E 01       0533*  	ld a,mos_load
0482E9 5B CF       0534*  	RST.LIL 08h
0482EB 21 52 11 00 0535*  	ld hl,BUF_4434
0482EF 01 0A 00 00 0536*  	ld bc,10
0482F3 11 12 00 00 0537*  	ld de,18
0482F7 DD 21 B4 00 0538*  	ld ix,180
       00          
0482FC CD 4E B9 04 0539*  	call vdu_load_img
048300             0540*  
048300 21 7F 8A 04 0541*  	ld hl,Fhonda083
048304 11 21 C4 04 0542*  	ld de,filedata
048308 01 00 00 01 0543*  	ld bc,65536
04830C 3E 01       0544*  	ld a,mos_load
04830E 5B CF       0545*  	RST.LIL 08h
048310 21 53 11 00 0546*  	ld hl,BUF_4435
048314 01 09 00 00 0547*  	ld bc,9
048318 11 13 00 00 0548*  	ld de,19
04831C DD 21 AB 00 0549*  	ld ix,171
       00          
048321 CD 4E B9 04 0550*  	call vdu_load_img
048325             0551*  
048325 21 95 8A 04 0552*  	ld hl,Fhonda084
048329 11 21 C4 04 0553*  	ld de,filedata
04832D 01 00 00 01 0554*  	ld bc,65536
048331 3E 01       0555*  	ld a,mos_load
048333 5B CF       0556*  	RST.LIL 08h
048335 21 54 11 00 0557*  	ld hl,BUF_4436
048339 01 0A 00 00 0558*  	ld bc,10
04833D 11 12 00 00 0559*  	ld de,18
048341 DD 21 B4 00 0560*  	ld ix,180
       00          
048346 CD 4E B9 04 0561*  	call vdu_load_img
04834A             0562*  
04834A 21 AB 8A 04 0563*  	ld hl,Fhonda085
04834E 11 21 C4 04 0564*  	ld de,filedata
048352 01 00 00 01 0565*  	ld bc,65536
048356 3E 01       0566*  	ld a,mos_load
048358 5B CF       0567*  	RST.LIL 08h
04835A 21 55 11 00 0568*  	ld hl,BUF_4437
04835E 01 0A 00 00 0569*  	ld bc,10
048362 11 12 00 00 0570*  	ld de,18
048366 DD 21 B4 00 0571*  	ld ix,180
       00          
04836B CD 4E B9 04 0572*  	call vdu_load_img
04836F             0573*  
04836F 21 C1 8A 04 0574*  	ld hl,Fhonda086
048373 11 21 C4 04 0575*  	ld de,filedata
048377 01 00 00 01 0576*  	ld bc,65536
04837B 3E 01       0577*  	ld a,mos_load
04837D 5B CF       0578*  	RST.LIL 08h
04837F 21 56 11 00 0579*  	ld hl,BUF_4438
048383 01 0A 00 00 0580*  	ld bc,10
048387 11 12 00 00 0581*  	ld de,18
04838B DD 21 B4 00 0582*  	ld ix,180
       00          
048390 CD 4E B9 04 0583*  	call vdu_load_img
048394             0584*  
048394 21 D7 8A 04 0585*  	ld hl,Fhonda087
048398 11 21 C4 04 0586*  	ld de,filedata
04839C 01 00 00 01 0587*  	ld bc,65536
0483A0 3E 01       0588*  	ld a,mos_load
0483A2 5B CF       0589*  	RST.LIL 08h
0483A4 21 57 11 00 0590*  	ld hl,BUF_4439
0483A8 01 10 00 00 0591*  	ld bc,16
0483AC 11 12 00 00 0592*  	ld de,18
0483B0 DD 21 20 01 0593*  	ld ix,288
       00          
0483B5 CD 4E B9 04 0594*  	call vdu_load_img
0483B9             0595*  
0483B9 21 ED 8A 04 0596*  	ld hl,Fhonda088
0483BD 11 21 C4 04 0597*  	ld de,filedata
0483C1 01 00 00 01 0598*  	ld bc,65536
0483C5 3E 01       0599*  	ld a,mos_load
0483C7 5B CF       0600*  	RST.LIL 08h
0483C9 21 58 11 00 0601*  	ld hl,BUF_4440
0483CD 01 0A 00 00 0602*  	ld bc,10
0483D1 11 12 00 00 0603*  	ld de,18
0483D5 DD 21 B4 00 0604*  	ld ix,180
       00          
0483DA CD 4E B9 04 0605*  	call vdu_load_img
0483DE             0606*  
0483DE 21 03 8B 04 0607*  	ld hl,Fhonda089
0483E2 11 21 C4 04 0608*  	ld de,filedata
0483E6 01 00 00 01 0609*  	ld bc,65536
0483EA 3E 01       0610*  	ld a,mos_load
0483EC 5B CF       0611*  	RST.LIL 08h
0483EE 21 59 11 00 0612*  	ld hl,BUF_4441
0483F2 01 0A 00 00 0613*  	ld bc,10
0483F6 11 12 00 00 0614*  	ld de,18
0483FA DD 21 B4 00 0615*  	ld ix,180
       00          
0483FF CD 4E B9 04 0616*  	call vdu_load_img
048403             0617*  
048403 21 19 8B 04 0618*  	ld hl,Fhonda090
048407 11 21 C4 04 0619*  	ld de,filedata
04840B 01 00 00 01 0620*  	ld bc,65536
04840F 3E 01       0621*  	ld a,mos_load
048411 5B CF       0622*  	RST.LIL 08h
048413 21 5A 11 00 0623*  	ld hl,BUF_4442
048417 01 09 00 00 0624*  	ld bc,9
04841B 11 12 00 00 0625*  	ld de,18
04841F DD 21 A2 00 0626*  	ld ix,162
       00          
048424 CD 4E B9 04 0627*  	call vdu_load_img
048428             0628*  ; Missing character 91
048428             0629*  ; Missing character 92
048428             0630*  ; Missing character 93
048428             0631*  ; Missing character 94
048428             0632*  ; Missing character 95
048428             0633*  ; Missing character 96
048428             0634*  
048428 21 2F 8B 04 0635*  	ld hl,Fhonda097
04842C 11 21 C4 04 0636*  	ld de,filedata
048430 01 00 00 01 0637*  	ld bc,65536
048434 3E 01       0638*  	ld a,mos_load
048436 5B CF       0639*  	RST.LIL 08h
048438 21 61 11 00 0640*  	ld hl,BUF_4449
04843C 01 08 00 00 0641*  	ld bc,8
048440 11 0C 00 00 0642*  	ld de,12
048444 DD 21 60 00 0643*  	ld ix,96
       00          
048449 CD 4E B9 04 0644*  	call vdu_load_img
04844D             0645*  
04844D 21 45 8B 04 0646*  	ld hl,Fhonda098
048451 11 21 C4 04 0647*  	ld de,filedata
048455 01 00 00 01 0648*  	ld bc,65536
048459 3E 01       0649*  	ld a,mos_load
04845B 5B CF       0650*  	RST.LIL 08h
04845D 21 62 11 00 0651*  	ld hl,BUF_4450
048461 01 09 00 00 0652*  	ld bc,9
048465 11 12 00 00 0653*  	ld de,18
048469 DD 21 A2 00 0654*  	ld ix,162
       00          
04846E CD 4E B9 04 0655*  	call vdu_load_img
048472             0656*  
048472 21 5B 8B 04 0657*  	ld hl,Fhonda099
048476 11 21 C4 04 0658*  	ld de,filedata
04847A 01 00 00 01 0659*  	ld bc,65536
04847E 3E 01       0660*  	ld a,mos_load
048480 5B CF       0661*  	RST.LIL 08h
048482 21 63 11 00 0662*  	ld hl,BUF_4451
048486 01 07 00 00 0663*  	ld bc,7
04848A 11 0C 00 00 0664*  	ld de,12
04848E DD 21 54 00 0665*  	ld ix,84
       00          
048493 CD 4E B9 04 0666*  	call vdu_load_img
048497             0667*  
048497 21 71 8B 04 0668*  	ld hl,Fhonda100
04849B 11 21 C4 04 0669*  	ld de,filedata
04849F 01 00 00 01 0670*  	ld bc,65536
0484A3 3E 01       0671*  	ld a,mos_load
0484A5 5B CF       0672*  	RST.LIL 08h
0484A7 21 64 11 00 0673*  	ld hl,BUF_4452
0484AB 01 09 00 00 0674*  	ld bc,9
0484AF 11 12 00 00 0675*  	ld de,18
0484B3 DD 21 A2 00 0676*  	ld ix,162
       00          
0484B8 CD 4E B9 04 0677*  	call vdu_load_img
0484BC             0678*  
0484BC 21 87 8B 04 0679*  	ld hl,Fhonda101
0484C0 11 21 C4 04 0680*  	ld de,filedata
0484C4 01 00 00 01 0681*  	ld bc,65536
0484C8 3E 01       0682*  	ld a,mos_load
0484CA 5B CF       0683*  	RST.LIL 08h
0484CC 21 65 11 00 0684*  	ld hl,BUF_4453
0484D0 01 08 00 00 0685*  	ld bc,8
0484D4 11 0C 00 00 0686*  	ld de,12
0484D8 DD 21 60 00 0687*  	ld ix,96
       00          
0484DD CD 4E B9 04 0688*  	call vdu_load_img
0484E1             0689*  
0484E1 21 9D 8B 04 0690*  	ld hl,Fhonda102
0484E5 11 21 C4 04 0691*  	ld de,filedata
0484E9 01 00 00 01 0692*  	ld bc,65536
0484ED 3E 01       0693*  	ld a,mos_load
0484EF 5B CF       0694*  	RST.LIL 08h
0484F1 21 66 11 00 0695*  	ld hl,BUF_4454
0484F5 01 09 00 00 0696*  	ld bc,9
0484F9 11 12 00 00 0697*  	ld de,18
0484FD DD 21 A2 00 0698*  	ld ix,162
       00          
048502 CD 4E B9 04 0699*  	call vdu_load_img
048506             0700*  
048506 21 B3 8B 04 0701*  	ld hl,Fhonda103
04850A 11 21 C4 04 0702*  	ld de,filedata
04850E 01 00 00 01 0703*  	ld bc,65536
048512 3E 01       0704*  	ld a,mos_load
048514 5B CF       0705*  	RST.LIL 08h
048516 21 67 11 00 0706*  	ld hl,BUF_4455
04851A 01 09 00 00 0707*  	ld bc,9
04851E 11 12 00 00 0708*  	ld de,18
048522 DD 21 A2 00 0709*  	ld ix,162
       00          
048527 CD 4E B9 04 0710*  	call vdu_load_img
04852B             0711*  
04852B 21 C9 8B 04 0712*  	ld hl,Fhonda104
04852F 11 21 C4 04 0713*  	ld de,filedata
048533 01 00 00 01 0714*  	ld bc,65536
048537 3E 01       0715*  	ld a,mos_load
048539 5B CF       0716*  	RST.LIL 08h
04853B 21 68 11 00 0717*  	ld hl,BUF_4456
04853F 01 09 00 00 0718*  	ld bc,9
048543 11 12 00 00 0719*  	ld de,18
048547 DD 21 A2 00 0720*  	ld ix,162
       00          
04854C CD 4E B9 04 0721*  	call vdu_load_img
048550             0722*  
048550 21 DF 8B 04 0723*  	ld hl,Fhonda105
048554 11 21 C4 04 0724*  	ld de,filedata
048558 01 00 00 01 0725*  	ld bc,65536
04855C 3E 01       0726*  	ld a,mos_load
04855E 5B CF       0727*  	RST.LIL 08h
048560 21 69 11 00 0728*  	ld hl,BUF_4457
048564 01 04 00 00 0729*  	ld bc,4
048568 11 12 00 00 0730*  	ld de,18
04856C DD 21 48 00 0731*  	ld ix,72
       00          
048571 CD 4E B9 04 0732*  	call vdu_load_img
048575             0733*  
048575 21 F5 8B 04 0734*  	ld hl,Fhonda106
048579 11 21 C4 04 0735*  	ld de,filedata
04857D 01 00 00 01 0736*  	ld bc,65536
048581 3E 01       0737*  	ld a,mos_load
048583 5B CF       0738*  	RST.LIL 08h
048585 21 6A 11 00 0739*  	ld hl,BUF_4458
048589 01 08 00 00 0740*  	ld bc,8
04858D 11 18 00 00 0741*  	ld de,24
048591 DD 21 C0 00 0742*  	ld ix,192
       00          
048596 CD 4E B9 04 0743*  	call vdu_load_img
04859A             0744*  
04859A 21 0B 8C 04 0745*  	ld hl,Fhonda107
04859E 11 21 C4 04 0746*  	ld de,filedata
0485A2 01 00 00 01 0747*  	ld bc,65536
0485A6 3E 01       0748*  	ld a,mos_load
0485A8 5B CF       0749*  	RST.LIL 08h
0485AA 21 6B 11 00 0750*  	ld hl,BUF_4459
0485AE 01 09 00 00 0751*  	ld bc,9
0485B2 11 12 00 00 0752*  	ld de,18
0485B6 DD 21 A2 00 0753*  	ld ix,162
       00          
0485BB CD 4E B9 04 0754*  	call vdu_load_img
0485BF             0755*  
0485BF 21 21 8C 04 0756*  	ld hl,Fhonda108
0485C3 11 21 C4 04 0757*  	ld de,filedata
0485C7 01 00 00 01 0758*  	ld bc,65536
0485CB 3E 01       0759*  	ld a,mos_load
0485CD 5B CF       0760*  	RST.LIL 08h
0485CF 21 6C 11 00 0761*  	ld hl,BUF_4460
0485D3 01 03 00 00 0762*  	ld bc,3
0485D7 11 12 00 00 0763*  	ld de,18
0485DB DD 21 36 00 0764*  	ld ix,54
       00          
0485E0 CD 4E B9 04 0765*  	call vdu_load_img
0485E4             0766*  
0485E4 21 37 8C 04 0767*  	ld hl,Fhonda109
0485E8 11 21 C4 04 0768*  	ld de,filedata
0485EC 01 00 00 01 0769*  	ld bc,65536
0485F0 3E 01       0770*  	ld a,mos_load
0485F2 5B CF       0771*  	RST.LIL 08h
0485F4 21 6D 11 00 0772*  	ld hl,BUF_4461
0485F8 01 0E 00 00 0773*  	ld bc,14
0485FC 11 0D 00 00 0774*  	ld de,13
048600 DD 21 B6 00 0775*  	ld ix,182
       00          
048605 CD 4E B9 04 0776*  	call vdu_load_img
048609             0777*  
048609 21 4D 8C 04 0778*  	ld hl,Fhonda110
04860D 11 21 C4 04 0779*  	ld de,filedata
048611 01 00 00 01 0780*  	ld bc,65536
048615 3E 01       0781*  	ld a,mos_load
048617 5B CF       0782*  	RST.LIL 08h
048619 21 6E 11 00 0783*  	ld hl,BUF_4462
04861D 01 09 00 00 0784*  	ld bc,9
048621 11 0C 00 00 0785*  	ld de,12
048625 DD 21 6C 00 0786*  	ld ix,108
       00          
04862A CD 4E B9 04 0787*  	call vdu_load_img
04862E             0788*  
04862E 21 63 8C 04 0789*  	ld hl,Fhonda111
048632 11 21 C4 04 0790*  	ld de,filedata
048636 01 00 00 01 0791*  	ld bc,65536
04863A 3E 01       0792*  	ld a,mos_load
04863C 5B CF       0793*  	RST.LIL 08h
04863E 21 6F 11 00 0794*  	ld hl,BUF_4463
048642 01 09 00 00 0795*  	ld bc,9
048646 11 0C 00 00 0796*  	ld de,12
04864A DD 21 6C 00 0797*  	ld ix,108
       00          
04864F CD 4E B9 04 0798*  	call vdu_load_img
048653             0799*  
048653 21 79 8C 04 0800*  	ld hl,Fhonda112
048657 11 21 C4 04 0801*  	ld de,filedata
04865B 01 00 00 01 0802*  	ld bc,65536
04865F 3E 01       0803*  	ld a,mos_load
048661 5B CF       0804*  	RST.LIL 08h
048663 21 70 11 00 0805*  	ld hl,BUF_4464
048667 01 09 00 00 0806*  	ld bc,9
04866B 11 12 00 00 0807*  	ld de,18
04866F DD 21 A2 00 0808*  	ld ix,162
       00          
048674 CD 4E B9 04 0809*  	call vdu_load_img
048678             0810*  
048678 21 8F 8C 04 0811*  	ld hl,Fhonda113
04867C 11 21 C4 04 0812*  	ld de,filedata
048680 01 00 00 01 0813*  	ld bc,65536
048684 3E 01       0814*  	ld a,mos_load
048686 5B CF       0815*  	RST.LIL 08h
048688 21 71 11 00 0816*  	ld hl,BUF_4465
04868C 01 09 00 00 0817*  	ld bc,9
048690 11 12 00 00 0818*  	ld de,18
048694 DD 21 A2 00 0819*  	ld ix,162
       00          
048699 CD 4E B9 04 0820*  	call vdu_load_img
04869D             0821*  
04869D 21 A5 8C 04 0822*  	ld hl,Fhonda114
0486A1 11 21 C4 04 0823*  	ld de,filedata
0486A5 01 00 00 01 0824*  	ld bc,65536
0486A9 3E 01       0825*  	ld a,mos_load
0486AB 5B CF       0826*  	RST.LIL 08h
0486AD 21 72 11 00 0827*  	ld hl,BUF_4466
0486B1 01 06 00 00 0828*  	ld bc,6
0486B5 11 0D 00 00 0829*  	ld de,13
0486B9 DD 21 4E 00 0830*  	ld ix,78
       00          
0486BE CD 4E B9 04 0831*  	call vdu_load_img
0486C2             0832*  
0486C2 21 BB 8C 04 0833*  	ld hl,Fhonda115
0486C6 11 21 C4 04 0834*  	ld de,filedata
0486CA 01 00 00 01 0835*  	ld bc,65536
0486CE 3E 01       0836*  	ld a,mos_load
0486D0 5B CF       0837*  	RST.LIL 08h
0486D2 21 73 11 00 0838*  	ld hl,BUF_4467
0486D6 01 08 00 00 0839*  	ld bc,8
0486DA 11 0D 00 00 0840*  	ld de,13
0486DE DD 21 68 00 0841*  	ld ix,104
       00          
0486E3 CD 4E B9 04 0842*  	call vdu_load_img
0486E7             0843*  
0486E7 21 D1 8C 04 0844*  	ld hl,Fhonda116
0486EB 11 21 C4 04 0845*  	ld de,filedata
0486EF 01 00 00 01 0846*  	ld bc,65536
0486F3 3E 01       0847*  	ld a,mos_load
0486F5 5B CF       0848*  	RST.LIL 08h
0486F7 21 74 11 00 0849*  	ld hl,BUF_4468
0486FB 01 07 00 00 0850*  	ld bc,7
0486FF 11 0F 00 00 0851*  	ld de,15
048703 DD 21 69 00 0852*  	ld ix,105
       00          
048708 CD 4E B9 04 0853*  	call vdu_load_img
04870C             0854*  
04870C 21 E7 8C 04 0855*  	ld hl,Fhonda117
048710 11 21 C4 04 0856*  	ld de,filedata
048714 01 00 00 01 0857*  	ld bc,65536
048718 3E 01       0858*  	ld a,mos_load
04871A 5B CF       0859*  	RST.LIL 08h
04871C 21 75 11 00 0860*  	ld hl,BUF_4469
048720 01 09 00 00 0861*  	ld bc,9
048724 11 0C 00 00 0862*  	ld de,12
048728 DD 21 6C 00 0863*  	ld ix,108
       00          
04872D CD 4E B9 04 0864*  	call vdu_load_img
048731             0865*  
048731 21 FD 8C 04 0866*  	ld hl,Fhonda118
048735 11 21 C4 04 0867*  	ld de,filedata
048739 01 00 00 01 0868*  	ld bc,65536
04873D 3E 01       0869*  	ld a,mos_load
04873F 5B CF       0870*  	RST.LIL 08h
048741 21 76 11 00 0871*  	ld hl,BUF_4470
048745 01 09 00 00 0872*  	ld bc,9
048749 11 0C 00 00 0873*  	ld de,12
04874D DD 21 6C 00 0874*  	ld ix,108
       00          
048752 CD 4E B9 04 0875*  	call vdu_load_img
048756             0876*  
048756 21 13 8D 04 0877*  	ld hl,Fhonda119
04875A 11 21 C4 04 0878*  	ld de,filedata
04875E 01 00 00 01 0879*  	ld bc,65536
048762 3E 01       0880*  	ld a,mos_load
048764 5B CF       0881*  	RST.LIL 08h
048766 21 77 11 00 0882*  	ld hl,BUF_4471
04876A 01 0E 00 00 0883*  	ld bc,14
04876E 11 0C 00 00 0884*  	ld de,12
048772 DD 21 A8 00 0885*  	ld ix,168
       00          
048777 CD 4E B9 04 0886*  	call vdu_load_img
04877B             0887*  
04877B 21 29 8D 04 0888*  	ld hl,Fhonda120
04877F 11 21 C4 04 0889*  	ld de,filedata
048783 01 00 00 01 0890*  	ld bc,65536
048787 3E 01       0891*  	ld a,mos_load
048789 5B CF       0892*  	RST.LIL 08h
04878B 21 78 11 00 0893*  	ld hl,BUF_4472
04878F 01 09 00 00 0894*  	ld bc,9
048793 11 0C 00 00 0895*  	ld de,12
048797 DD 21 6C 00 0896*  	ld ix,108
       00          
04879C CD 4E B9 04 0897*  	call vdu_load_img
0487A0             0898*  
0487A0 21 3F 8D 04 0899*  	ld hl,Fhonda121
0487A4 11 21 C4 04 0900*  	ld de,filedata
0487A8 01 00 00 01 0901*  	ld bc,65536
0487AC 3E 01       0902*  	ld a,mos_load
0487AE 5B CF       0903*  	RST.LIL 08h
0487B0 21 79 11 00 0904*  	ld hl,BUF_4473
0487B4 01 09 00 00 0905*  	ld bc,9
0487B8 11 11 00 00 0906*  	ld de,17
0487BC DD 21 99 00 0907*  	ld ix,153
       00          
0487C1 CD 4E B9 04 0908*  	call vdu_load_img
0487C5             0909*  
0487C5 21 55 8D 04 0910*  	ld hl,Fhonda122
0487C9 11 21 C4 04 0911*  	ld de,filedata
0487CD 01 00 00 01 0912*  	ld bc,65536
0487D1 3E 01       0913*  	ld a,mos_load
0487D3 5B CF       0914*  	RST.LIL 08h
0487D5 21 7A 11 00 0915*  	ld hl,BUF_4474
0487D9 01 09 00 00 0916*  	ld bc,9
0487DD 11 0C 00 00 0917*  	ld de,12
0487E1 DD 21 6C 00 0918*  	ld ix,108
       00          
0487E6 CD 4E B9 04 0919*  	call vdu_load_img
0487EA             0920*  
0487EA C9          0921*  	ret
0487EB             0922*  
0487EB 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
048801 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048817 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
04882D 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
048843 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048859 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
04886F 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
048885 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
04889B 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0488B1 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0488C7 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
0488DD 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
0488F3 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
048909 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
04891F 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
048935 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04894B 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048961 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048977 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
04898D 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
0489A3 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0489B9 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0489CF 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
0489E5 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
0489FB 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
048A11 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048A27 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
048A3D 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
048A53 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
048A69 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
048A7F 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
048A95 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
048AAB 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
048AC1 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
048AD7 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
048AED 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
048B03 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
048B19 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
048B2F 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
048B45 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
048B5B 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
048B71 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
048B87 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
048B9D 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
048BB3 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
048BC9 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
048BDF 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
048BF5 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
048C0B 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
048C21 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
048C37 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
048C4D 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
048C63 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
048C79 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
048C8F 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
048CA5 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
048CBB 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
048CD1 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
048CE7 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
048CFD 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
048D13 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
048D29 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
048D3F 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
048D55 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
048D6B             0020   	include "src/asm/font_retro_computer.asm"
048D6B             0001*  ; Bitmap indices:
048D6B             0002*  BUF_4128: equ 0x1020 ; 32
048D6B             0003*  BUF_4129: equ 0x1021 ; 33 !
048D6B             0004*  ; Missing character 34 "
048D6B             0005*  ; Missing character 35 #
048D6B             0006*  ; Missing character 36 $
048D6B             0007*  ; Missing character 37 %
048D6B             0008*  ; Missing character 38 &
048D6B             0009*  ; Missing character 39 '
048D6B             0010*  ; Missing character 40 (
048D6B             0011*  ; Missing character 41 )
048D6B             0012*  ; Missing character 42 *
048D6B             0013*  ; Missing character 43 +
048D6B             0014*  ; Missing character 44 ,
048D6B             0015*  ; Missing character 45 -
048D6B             0016*  ; Missing character 46 .
048D6B             0017*  ; Missing character 47 /
048D6B             0018*  BUF_4144: equ 0x1030 ; 48 0
048D6B             0019*  BUF_4145: equ 0x1031 ; 49 1
048D6B             0020*  BUF_4146: equ 0x1032 ; 50 2
048D6B             0021*  BUF_4147: equ 0x1033 ; 51 3
048D6B             0022*  BUF_4148: equ 0x1034 ; 52 4
048D6B             0023*  BUF_4149: equ 0x1035 ; 53 5
048D6B             0024*  BUF_4150: equ 0x1036 ; 54 6
048D6B             0025*  BUF_4151: equ 0x1037 ; 55 7
048D6B             0026*  BUF_4152: equ 0x1038 ; 56 8
048D6B             0027*  BUF_4153: equ 0x1039 ; 57 9
048D6B             0028*  ; Missing character 58 :
048D6B             0029*  ; Missing character 59 ;
048D6B             0030*  ; Missing character 60 <
048D6B             0031*  ; Missing character 61 =
048D6B             0032*  ; Missing character 62 >
048D6B             0033*  BUF_4159: equ 0x103F ; 63 ?
048D6B             0034*  ; Missing character 64 @
048D6B             0035*  BUF_4161: equ 0x1041 ; 65 A
048D6B             0036*  BUF_4162: equ 0x1042 ; 66 B
048D6B             0037*  BUF_4163: equ 0x1043 ; 67 C
048D6B             0038*  BUF_4164: equ 0x1044 ; 68 D
048D6B             0039*  BUF_4165: equ 0x1045 ; 69 E
048D6B             0040*  BUF_4166: equ 0x1046 ; 70 F
048D6B             0041*  BUF_4167: equ 0x1047 ; 71 G
048D6B             0042*  BUF_4168: equ 0x1048 ; 72 H
048D6B             0043*  BUF_4169: equ 0x1049 ; 73 I
048D6B             0044*  BUF_4170: equ 0x104A ; 74 J
048D6B             0045*  BUF_4171: equ 0x104B ; 75 K
048D6B             0046*  BUF_4172: equ 0x104C ; 76 L
048D6B             0047*  BUF_4173: equ 0x104D ; 77 M
048D6B             0048*  BUF_4174: equ 0x104E ; 78 N
048D6B             0049*  BUF_4175: equ 0x104F ; 79 O
048D6B             0050*  BUF_4176: equ 0x1050 ; 80 P
048D6B             0051*  BUF_4177: equ 0x1051 ; 81 Q
048D6B             0052*  BUF_4178: equ 0x1052 ; 82 R
048D6B             0053*  BUF_4179: equ 0x1053 ; 83 S
048D6B             0054*  BUF_4180: equ 0x1054 ; 84 T
048D6B             0055*  BUF_4181: equ 0x1055 ; 85 U
048D6B             0056*  BUF_4182: equ 0x1056 ; 86 V
048D6B             0057*  BUF_4183: equ 0x1057 ; 87 W
048D6B             0058*  BUF_4184: equ 0x1058 ; 88 X
048D6B             0059*  BUF_4185: equ 0x1059 ; 89 Y
048D6B             0060*  BUF_4186: equ 0x105A ; 90 Z
048D6B             0061*  ; Missing character 91 [
048D6B             0062*  ; Missing character 92 \
048D6B             0063*  ; Missing character 93 ]
048D6B             0064*  ; Missing character 94 ^
048D6B             0065*  ; Missing character 95 _
048D6B             0066*  ; Missing character 96 `
048D6B             0067*  ; Missing character 97 a
048D6B             0068*  ; Missing character 98 b
048D6B             0069*  ; Missing character 99 c
048D6B             0070*  ; Missing character 100 d
048D6B             0071*  ; Missing character 101 e
048D6B             0072*  ; Missing character 102 f
048D6B             0073*  ; Missing character 103 g
048D6B             0074*  ; Missing character 104 h
048D6B             0075*  ; Missing character 105 i
048D6B             0076*  ; Missing character 106 j
048D6B             0077*  ; Missing character 107 k
048D6B             0078*  ; Missing character 108 l
048D6B             0079*  ; Missing character 109 m
048D6B             0080*  ; Missing character 110 n
048D6B             0081*  ; Missing character 111 o
048D6B             0082*  ; Missing character 112 p
048D6B             0083*  ; Missing character 113 q
048D6B             0084*  ; Missing character 114 r
048D6B             0085*  ; Missing character 115 s
048D6B             0086*  ; Missing character 116 t
048D6B             0087*  ; Missing character 117 u
048D6B             0088*  ; Missing character 118 v
048D6B             0089*  ; Missing character 119 w
048D6B             0090*  ; Missing character 120 x
048D6B             0091*  ; Missing character 121 y
048D6B             0092*  ; Missing character 122 z
048D6B             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048D6B             0094*  font_retro_computer:
048D6B 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
048D71 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
048D77 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
048D7D 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
048D83 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
048D89 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
048D8F 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
048D95 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
048D9B 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
048DA1 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
048DA7 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
048DAD 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
048DB3 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
048DB9 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
048DBF 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
048DC5 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
048DCB 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
048DD1 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
048DD7 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
048DDD 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
048DE3 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
048DE9 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
048DEF 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
048DF5 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
048DFB 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
048E01 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
048E07 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
048E0D 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
048E13 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
048E19 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
048E1F 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
048E25 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
048E2B 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
048E31 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
048E37 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
048E3D 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
048E43 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
048E49 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
048E4F 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
048E55 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
048E5B 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
048E61 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
048E67 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
048E6D 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
048E73 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
048E79 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
048E7F 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
048E85 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
048E8B 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
048E91 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
048E97 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
048E9D 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
048EA3 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
048EA9 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
048EAF 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
048EB5 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
048EBB 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
048EC1 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
048EC7 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
048ECD 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
048ED3 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
048ED9 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
048EDF 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
048EE5 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
048EEB 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
048EF1 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
048EF7 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
048EFD 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
048F03 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
048F09 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
048F0F 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
048F15 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
048F1B 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
048F21 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
048F27 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
048F2D 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
048F33 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
048F39 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
048F3F 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
048F45 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
048F4B 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
048F51 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
048F57 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
048F5D 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
048F63 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
048F69 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
048F6F 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
048F75 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
048F7B 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
048F81 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
048F87 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
048F8D             0186*  
048F8D             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048F8D             0188*  load_font_retro_computer:
048F8D             0189*  
048F8D 21 31 95 04 0190*  	ld hl,Frc032
048F91 11 21 C4 04 0191*  	ld de,filedata
048F95 01 00 00 01 0192*  	ld bc,65536
048F99 3E 01       0193*  	ld a,mos_load
048F9B 5B CF       0194*  	RST.LIL 08h
048F9D 21 20 10 00 0195*  	ld hl,BUF_4128
048FA1 01 06 00 00 0196*  	ld bc,6
048FA5 11 01 00 00 0197*  	ld de,1
048FA9 DD 21 06 00 0198*  	ld ix,6
       00          
048FAE CD 4E B9 04 0199*  	call vdu_load_img
048FB2             0200*  
048FB2 21 44 95 04 0201*  	ld hl,Frc033
048FB6 11 21 C4 04 0202*  	ld de,filedata
048FBA 01 00 00 01 0203*  	ld bc,65536
048FBE 3E 01       0204*  	ld a,mos_load
048FC0 5B CF       0205*  	RST.LIL 08h
048FC2 21 21 10 00 0206*  	ld hl,BUF_4129
048FC6 01 03 00 00 0207*  	ld bc,3
048FCA 11 0E 00 00 0208*  	ld de,14
048FCE DD 21 2A 00 0209*  	ld ix,42
       00          
048FD3 CD 4E B9 04 0210*  	call vdu_load_img
048FD7             0211*  ; Missing character 34
048FD7             0212*  ; Missing character 35
048FD7             0213*  ; Missing character 36
048FD7             0214*  ; Missing character 37
048FD7             0215*  ; Missing character 38
048FD7             0216*  ; Missing character 39
048FD7             0217*  ; Missing character 40
048FD7             0218*  ; Missing character 41
048FD7             0219*  ; Missing character 42
048FD7             0220*  ; Missing character 43
048FD7             0221*  ; Missing character 44
048FD7             0222*  ; Missing character 45
048FD7             0223*  ; Missing character 46
048FD7             0224*  ; Missing character 47
048FD7             0225*  
048FD7 21 57 95 04 0226*  	ld hl,Frc048
048FDB 11 21 C4 04 0227*  	ld de,filedata
048FDF 01 00 00 01 0228*  	ld bc,65536
048FE3 3E 01       0229*  	ld a,mos_load
048FE5 5B CF       0230*  	RST.LIL 08h
048FE7 21 30 10 00 0231*  	ld hl,BUF_4144
048FEB 01 08 00 00 0232*  	ld bc,8
048FEF 11 0E 00 00 0233*  	ld de,14
048FF3 DD 21 70 00 0234*  	ld ix,112
       00          
048FF8 CD 4E B9 04 0235*  	call vdu_load_img
048FFC             0236*  
048FFC 21 6A 95 04 0237*  	ld hl,Frc049
049000 11 21 C4 04 0238*  	ld de,filedata
049004 01 00 00 01 0239*  	ld bc,65536
049008 3E 01       0240*  	ld a,mos_load
04900A 5B CF       0241*  	RST.LIL 08h
04900C 21 31 10 00 0242*  	ld hl,BUF_4145
049010 01 08 00 00 0243*  	ld bc,8
049014 11 0E 00 00 0244*  	ld de,14
049018 DD 21 70 00 0245*  	ld ix,112
       00          
04901D CD 4E B9 04 0246*  	call vdu_load_img
049021             0247*  
049021 21 7D 95 04 0248*  	ld hl,Frc050
049025 11 21 C4 04 0249*  	ld de,filedata
049029 01 00 00 01 0250*  	ld bc,65536
04902D 3E 01       0251*  	ld a,mos_load
04902F 5B CF       0252*  	RST.LIL 08h
049031 21 32 10 00 0253*  	ld hl,BUF_4146
049035 01 08 00 00 0254*  	ld bc,8
049039 11 0E 00 00 0255*  	ld de,14
04903D DD 21 70 00 0256*  	ld ix,112
       00          
049042 CD 4E B9 04 0257*  	call vdu_load_img
049046             0258*  
049046 21 90 95 04 0259*  	ld hl,Frc051
04904A 11 21 C4 04 0260*  	ld de,filedata
04904E 01 00 00 01 0261*  	ld bc,65536
049052 3E 01       0262*  	ld a,mos_load
049054 5B CF       0263*  	RST.LIL 08h
049056 21 33 10 00 0264*  	ld hl,BUF_4147
04905A 01 08 00 00 0265*  	ld bc,8
04905E 11 0E 00 00 0266*  	ld de,14
049062 DD 21 70 00 0267*  	ld ix,112
       00          
049067 CD 4E B9 04 0268*  	call vdu_load_img
04906B             0269*  
04906B 21 A3 95 04 0270*  	ld hl,Frc052
04906F 11 21 C4 04 0271*  	ld de,filedata
049073 01 00 00 01 0272*  	ld bc,65536
049077 3E 01       0273*  	ld a,mos_load
049079 5B CF       0274*  	RST.LIL 08h
04907B 21 34 10 00 0275*  	ld hl,BUF_4148
04907F 01 08 00 00 0276*  	ld bc,8
049083 11 0E 00 00 0277*  	ld de,14
049087 DD 21 70 00 0278*  	ld ix,112
       00          
04908C CD 4E B9 04 0279*  	call vdu_load_img
049090             0280*  
049090 21 B6 95 04 0281*  	ld hl,Frc053
049094 11 21 C4 04 0282*  	ld de,filedata
049098 01 00 00 01 0283*  	ld bc,65536
04909C 3E 01       0284*  	ld a,mos_load
04909E 5B CF       0285*  	RST.LIL 08h
0490A0 21 35 10 00 0286*  	ld hl,BUF_4149
0490A4 01 08 00 00 0287*  	ld bc,8
0490A8 11 0E 00 00 0288*  	ld de,14
0490AC DD 21 70 00 0289*  	ld ix,112
       00          
0490B1 CD 4E B9 04 0290*  	call vdu_load_img
0490B5             0291*  
0490B5 21 C9 95 04 0292*  	ld hl,Frc054
0490B9 11 21 C4 04 0293*  	ld de,filedata
0490BD 01 00 00 01 0294*  	ld bc,65536
0490C1 3E 01       0295*  	ld a,mos_load
0490C3 5B CF       0296*  	RST.LIL 08h
0490C5 21 36 10 00 0297*  	ld hl,BUF_4150
0490C9 01 08 00 00 0298*  	ld bc,8
0490CD 11 0E 00 00 0299*  	ld de,14
0490D1 DD 21 70 00 0300*  	ld ix,112
       00          
0490D6 CD 4E B9 04 0301*  	call vdu_load_img
0490DA             0302*  
0490DA 21 DC 95 04 0303*  	ld hl,Frc055
0490DE 11 21 C4 04 0304*  	ld de,filedata
0490E2 01 00 00 01 0305*  	ld bc,65536
0490E6 3E 01       0306*  	ld a,mos_load
0490E8 5B CF       0307*  	RST.LIL 08h
0490EA 21 37 10 00 0308*  	ld hl,BUF_4151
0490EE 01 08 00 00 0309*  	ld bc,8
0490F2 11 0E 00 00 0310*  	ld de,14
0490F6 DD 21 70 00 0311*  	ld ix,112
       00          
0490FB CD 4E B9 04 0312*  	call vdu_load_img
0490FF             0313*  
0490FF 21 EF 95 04 0314*  	ld hl,Frc056
049103 11 21 C4 04 0315*  	ld de,filedata
049107 01 00 00 01 0316*  	ld bc,65536
04910B 3E 01       0317*  	ld a,mos_load
04910D 5B CF       0318*  	RST.LIL 08h
04910F 21 38 10 00 0319*  	ld hl,BUF_4152
049113 01 08 00 00 0320*  	ld bc,8
049117 11 0E 00 00 0321*  	ld de,14
04911B DD 21 70 00 0322*  	ld ix,112
       00          
049120 CD 4E B9 04 0323*  	call vdu_load_img
049124             0324*  
049124 21 02 96 04 0325*  	ld hl,Frc057
049128 11 21 C4 04 0326*  	ld de,filedata
04912C 01 00 00 01 0327*  	ld bc,65536
049130 3E 01       0328*  	ld a,mos_load
049132 5B CF       0329*  	RST.LIL 08h
049134 21 39 10 00 0330*  	ld hl,BUF_4153
049138 01 08 00 00 0331*  	ld bc,8
04913C 11 0E 00 00 0332*  	ld de,14
049140 DD 21 70 00 0333*  	ld ix,112
       00          
049145 CD 4E B9 04 0334*  	call vdu_load_img
049149             0335*  ; Missing character 58
049149             0336*  ; Missing character 59
049149             0337*  ; Missing character 60
049149             0338*  ; Missing character 61
049149             0339*  ; Missing character 62
049149             0340*  
049149 21 15 96 04 0341*  	ld hl,Frc063
04914D 11 21 C4 04 0342*  	ld de,filedata
049151 01 00 00 01 0343*  	ld bc,65536
049155 3E 01       0344*  	ld a,mos_load
049157 5B CF       0345*  	RST.LIL 08h
049159 21 3F 10 00 0346*  	ld hl,BUF_4159
04915D 01 08 00 00 0347*  	ld bc,8
049161 11 0E 00 00 0348*  	ld de,14
049165 DD 21 70 00 0349*  	ld ix,112
       00          
04916A CD 4E B9 04 0350*  	call vdu_load_img
04916E             0351*  ; Missing character 64
04916E             0352*  
04916E 21 28 96 04 0353*  	ld hl,Frc065
049172 11 21 C4 04 0354*  	ld de,filedata
049176 01 00 00 01 0355*  	ld bc,65536
04917A 3E 01       0356*  	ld a,mos_load
04917C 5B CF       0357*  	RST.LIL 08h
04917E 21 41 10 00 0358*  	ld hl,BUF_4161
049182 01 07 00 00 0359*  	ld bc,7
049186 11 0E 00 00 0360*  	ld de,14
04918A DD 21 62 00 0361*  	ld ix,98
       00          
04918F CD 4E B9 04 0362*  	call vdu_load_img
049193             0363*  
049193 21 3B 96 04 0364*  	ld hl,Frc066
049197 11 21 C4 04 0365*  	ld de,filedata
04919B 01 00 00 01 0366*  	ld bc,65536
04919F 3E 01       0367*  	ld a,mos_load
0491A1 5B CF       0368*  	RST.LIL 08h
0491A3 21 42 10 00 0369*  	ld hl,BUF_4162
0491A7 01 08 00 00 0370*  	ld bc,8
0491AB 11 0E 00 00 0371*  	ld de,14
0491AF DD 21 70 00 0372*  	ld ix,112
       00          
0491B4 CD 4E B9 04 0373*  	call vdu_load_img
0491B8             0374*  
0491B8 21 4E 96 04 0375*  	ld hl,Frc067
0491BC 11 21 C4 04 0376*  	ld de,filedata
0491C0 01 00 00 01 0377*  	ld bc,65536
0491C4 3E 01       0378*  	ld a,mos_load
0491C6 5B CF       0379*  	RST.LIL 08h
0491C8 21 43 10 00 0380*  	ld hl,BUF_4163
0491CC 01 07 00 00 0381*  	ld bc,7
0491D0 11 0E 00 00 0382*  	ld de,14
0491D4 DD 21 62 00 0383*  	ld ix,98
       00          
0491D9 CD 4E B9 04 0384*  	call vdu_load_img
0491DD             0385*  
0491DD 21 61 96 04 0386*  	ld hl,Frc068
0491E1 11 21 C4 04 0387*  	ld de,filedata
0491E5 01 00 00 01 0388*  	ld bc,65536
0491E9 3E 01       0389*  	ld a,mos_load
0491EB 5B CF       0390*  	RST.LIL 08h
0491ED 21 44 10 00 0391*  	ld hl,BUF_4164
0491F1 01 08 00 00 0392*  	ld bc,8
0491F5 11 0E 00 00 0393*  	ld de,14
0491F9 DD 21 70 00 0394*  	ld ix,112
       00          
0491FE CD 4E B9 04 0395*  	call vdu_load_img
049202             0396*  
049202 21 74 96 04 0397*  	ld hl,Frc069
049206 11 21 C4 04 0398*  	ld de,filedata
04920A 01 00 00 01 0399*  	ld bc,65536
04920E 3E 01       0400*  	ld a,mos_load
049210 5B CF       0401*  	RST.LIL 08h
049212 21 45 10 00 0402*  	ld hl,BUF_4165
049216 01 08 00 00 0403*  	ld bc,8
04921A 11 0E 00 00 0404*  	ld de,14
04921E DD 21 70 00 0405*  	ld ix,112
       00          
049223 CD 4E B9 04 0406*  	call vdu_load_img
049227             0407*  
049227 21 87 96 04 0408*  	ld hl,Frc070
04922B 11 21 C4 04 0409*  	ld de,filedata
04922F 01 00 00 01 0410*  	ld bc,65536
049233 3E 01       0411*  	ld a,mos_load
049235 5B CF       0412*  	RST.LIL 08h
049237 21 46 10 00 0413*  	ld hl,BUF_4166
04923B 01 07 00 00 0414*  	ld bc,7
04923F 11 0E 00 00 0415*  	ld de,14
049243 DD 21 62 00 0416*  	ld ix,98
       00          
049248 CD 4E B9 04 0417*  	call vdu_load_img
04924C             0418*  
04924C 21 9A 96 04 0419*  	ld hl,Frc071
049250 11 21 C4 04 0420*  	ld de,filedata
049254 01 00 00 01 0421*  	ld bc,65536
049258 3E 01       0422*  	ld a,mos_load
04925A 5B CF       0423*  	RST.LIL 08h
04925C 21 47 10 00 0424*  	ld hl,BUF_4167
049260 01 08 00 00 0425*  	ld bc,8
049264 11 0E 00 00 0426*  	ld de,14
049268 DD 21 70 00 0427*  	ld ix,112
       00          
04926D CD 4E B9 04 0428*  	call vdu_load_img
049271             0429*  
049271 21 AD 96 04 0430*  	ld hl,Frc072
049275 11 21 C4 04 0431*  	ld de,filedata
049279 01 00 00 01 0432*  	ld bc,65536
04927D 3E 01       0433*  	ld a,mos_load
04927F 5B CF       0434*  	RST.LIL 08h
049281 21 48 10 00 0435*  	ld hl,BUF_4168
049285 01 07 00 00 0436*  	ld bc,7
049289 11 0E 00 00 0437*  	ld de,14
04928D DD 21 62 00 0438*  	ld ix,98
       00          
049292 CD 4E B9 04 0439*  	call vdu_load_img
049296             0440*  
049296 21 C0 96 04 0441*  	ld hl,Frc073
04929A 11 21 C4 04 0442*  	ld de,filedata
04929E 01 00 00 01 0443*  	ld bc,65536
0492A2 3E 01       0444*  	ld a,mos_load
0492A4 5B CF       0445*  	RST.LIL 08h
0492A6 21 49 10 00 0446*  	ld hl,BUF_4169
0492AA 01 07 00 00 0447*  	ld bc,7
0492AE 11 0E 00 00 0448*  	ld de,14
0492B2 DD 21 62 00 0449*  	ld ix,98
       00          
0492B7 CD 4E B9 04 0450*  	call vdu_load_img
0492BB             0451*  
0492BB 21 D3 96 04 0452*  	ld hl,Frc074
0492BF 11 21 C4 04 0453*  	ld de,filedata
0492C3 01 00 00 01 0454*  	ld bc,65536
0492C7 3E 01       0455*  	ld a,mos_load
0492C9 5B CF       0456*  	RST.LIL 08h
0492CB 21 4A 10 00 0457*  	ld hl,BUF_4170
0492CF 01 08 00 00 0458*  	ld bc,8
0492D3 11 0E 00 00 0459*  	ld de,14
0492D7 DD 21 70 00 0460*  	ld ix,112
       00          
0492DC CD 4E B9 04 0461*  	call vdu_load_img
0492E0             0462*  
0492E0 21 E6 96 04 0463*  	ld hl,Frc075
0492E4 11 21 C4 04 0464*  	ld de,filedata
0492E8 01 00 00 01 0465*  	ld bc,65536
0492EC 3E 01       0466*  	ld a,mos_load
0492EE 5B CF       0467*  	RST.LIL 08h
0492F0 21 4B 10 00 0468*  	ld hl,BUF_4171
0492F4 01 07 00 00 0469*  	ld bc,7
0492F8 11 0E 00 00 0470*  	ld de,14
0492FC DD 21 62 00 0471*  	ld ix,98
       00          
049301 CD 4E B9 04 0472*  	call vdu_load_img
049305             0473*  
049305 21 F9 96 04 0474*  	ld hl,Frc076
049309 11 21 C4 04 0475*  	ld de,filedata
04930D 01 00 00 01 0476*  	ld bc,65536
049311 3E 01       0477*  	ld a,mos_load
049313 5B CF       0478*  	RST.LIL 08h
049315 21 4C 10 00 0479*  	ld hl,BUF_4172
049319 01 08 00 00 0480*  	ld bc,8
04931D 11 0E 00 00 0481*  	ld de,14
049321 DD 21 70 00 0482*  	ld ix,112
       00          
049326 CD 4E B9 04 0483*  	call vdu_load_img
04932A             0484*  
04932A 21 0C 97 04 0485*  	ld hl,Frc077
04932E 11 21 C4 04 0486*  	ld de,filedata
049332 01 00 00 01 0487*  	ld bc,65536
049336 3E 01       0488*  	ld a,mos_load
049338 5B CF       0489*  	RST.LIL 08h
04933A 21 4D 10 00 0490*  	ld hl,BUF_4173
04933E 01 09 00 00 0491*  	ld bc,9
049342 11 0E 00 00 0492*  	ld de,14
049346 DD 21 7E 00 0493*  	ld ix,126
       00          
04934B CD 4E B9 04 0494*  	call vdu_load_img
04934F             0495*  
04934F 21 1F 97 04 0496*  	ld hl,Frc078
049353 11 21 C4 04 0497*  	ld de,filedata
049357 01 00 00 01 0498*  	ld bc,65536
04935B 3E 01       0499*  	ld a,mos_load
04935D 5B CF       0500*  	RST.LIL 08h
04935F 21 4E 10 00 0501*  	ld hl,BUF_4174
049363 01 07 00 00 0502*  	ld bc,7
049367 11 0E 00 00 0503*  	ld de,14
04936B DD 21 62 00 0504*  	ld ix,98
       00          
049370 CD 4E B9 04 0505*  	call vdu_load_img
049374             0506*  
049374 21 32 97 04 0507*  	ld hl,Frc079
049378 11 21 C4 04 0508*  	ld de,filedata
04937C 01 00 00 01 0509*  	ld bc,65536
049380 3E 01       0510*  	ld a,mos_load
049382 5B CF       0511*  	RST.LIL 08h
049384 21 4F 10 00 0512*  	ld hl,BUF_4175
049388 01 08 00 00 0513*  	ld bc,8
04938C 11 0E 00 00 0514*  	ld de,14
049390 DD 21 70 00 0515*  	ld ix,112
       00          
049395 CD 4E B9 04 0516*  	call vdu_load_img
049399             0517*  
049399 21 45 97 04 0518*  	ld hl,Frc080
04939D 11 21 C4 04 0519*  	ld de,filedata
0493A1 01 00 00 01 0520*  	ld bc,65536
0493A5 3E 01       0521*  	ld a,mos_load
0493A7 5B CF       0522*  	RST.LIL 08h
0493A9 21 50 10 00 0523*  	ld hl,BUF_4176
0493AD 01 07 00 00 0524*  	ld bc,7
0493B1 11 0E 00 00 0525*  	ld de,14
0493B5 DD 21 62 00 0526*  	ld ix,98
       00          
0493BA CD 4E B9 04 0527*  	call vdu_load_img
0493BE             0528*  
0493BE 21 58 97 04 0529*  	ld hl,Frc081
0493C2 11 21 C4 04 0530*  	ld de,filedata
0493C6 01 00 00 01 0531*  	ld bc,65536
0493CA 3E 01       0532*  	ld a,mos_load
0493CC 5B CF       0533*  	RST.LIL 08h
0493CE 21 51 10 00 0534*  	ld hl,BUF_4177
0493D2 01 08 00 00 0535*  	ld bc,8
0493D6 11 0F 00 00 0536*  	ld de,15
0493DA DD 21 78 00 0537*  	ld ix,120
       00          
0493DF CD 4E B9 04 0538*  	call vdu_load_img
0493E3             0539*  
0493E3 21 6B 97 04 0540*  	ld hl,Frc082
0493E7 11 21 C4 04 0541*  	ld de,filedata
0493EB 01 00 00 01 0542*  	ld bc,65536
0493EF 3E 01       0543*  	ld a,mos_load
0493F1 5B CF       0544*  	RST.LIL 08h
0493F3 21 52 10 00 0545*  	ld hl,BUF_4178
0493F7 01 08 00 00 0546*  	ld bc,8
0493FB 11 0E 00 00 0547*  	ld de,14
0493FF DD 21 70 00 0548*  	ld ix,112
       00          
049404 CD 4E B9 04 0549*  	call vdu_load_img
049408             0550*  
049408 21 7E 97 04 0551*  	ld hl,Frc083
04940C 11 21 C4 04 0552*  	ld de,filedata
049410 01 00 00 01 0553*  	ld bc,65536
049414 3E 01       0554*  	ld a,mos_load
049416 5B CF       0555*  	RST.LIL 08h
049418 21 53 10 00 0556*  	ld hl,BUF_4179
04941C 01 08 00 00 0557*  	ld bc,8
049420 11 0E 00 00 0558*  	ld de,14
049424 DD 21 70 00 0559*  	ld ix,112
       00          
049429 CD 4E B9 04 0560*  	call vdu_load_img
04942D             0561*  
04942D 21 91 97 04 0562*  	ld hl,Frc084
049431 11 21 C4 04 0563*  	ld de,filedata
049435 01 00 00 01 0564*  	ld bc,65536
049439 3E 01       0565*  	ld a,mos_load
04943B 5B CF       0566*  	RST.LIL 08h
04943D 21 54 10 00 0567*  	ld hl,BUF_4180
049441 01 07 00 00 0568*  	ld bc,7
049445 11 0E 00 00 0569*  	ld de,14
049449 DD 21 62 00 0570*  	ld ix,98
       00          
04944E CD 4E B9 04 0571*  	call vdu_load_img
049452             0572*  
049452 21 A4 97 04 0573*  	ld hl,Frc085
049456 11 21 C4 04 0574*  	ld de,filedata
04945A 01 00 00 01 0575*  	ld bc,65536
04945E 3E 01       0576*  	ld a,mos_load
049460 5B CF       0577*  	RST.LIL 08h
049462 21 55 10 00 0578*  	ld hl,BUF_4181
049466 01 08 00 00 0579*  	ld bc,8
04946A 11 0E 00 00 0580*  	ld de,14
04946E DD 21 70 00 0581*  	ld ix,112
       00          
049473 CD 4E B9 04 0582*  	call vdu_load_img
049477             0583*  
049477 21 B7 97 04 0584*  	ld hl,Frc086
04947B 11 21 C4 04 0585*  	ld de,filedata
04947F 01 00 00 01 0586*  	ld bc,65536
049483 3E 01       0587*  	ld a,mos_load
049485 5B CF       0588*  	RST.LIL 08h
049487 21 56 10 00 0589*  	ld hl,BUF_4182
04948B 01 07 00 00 0590*  	ld bc,7
04948F 11 0E 00 00 0591*  	ld de,14
049493 DD 21 62 00 0592*  	ld ix,98
       00          
049498 CD 4E B9 04 0593*  	call vdu_load_img
04949C             0594*  
04949C 21 CA 97 04 0595*  	ld hl,Frc087
0494A0 11 21 C4 04 0596*  	ld de,filedata
0494A4 01 00 00 01 0597*  	ld bc,65536
0494A8 3E 01       0598*  	ld a,mos_load
0494AA 5B CF       0599*  	RST.LIL 08h
0494AC 21 57 10 00 0600*  	ld hl,BUF_4183
0494B0 01 0B 00 00 0601*  	ld bc,11
0494B4 11 0E 00 00 0602*  	ld de,14
0494B8 DD 21 9A 00 0603*  	ld ix,154
       00          
0494BD CD 4E B9 04 0604*  	call vdu_load_img
0494C1             0605*  
0494C1 21 DD 97 04 0606*  	ld hl,Frc088
0494C5 11 21 C4 04 0607*  	ld de,filedata
0494C9 01 00 00 01 0608*  	ld bc,65536
0494CD 3E 01       0609*  	ld a,mos_load
0494CF 5B CF       0610*  	RST.LIL 08h
0494D1 21 58 10 00 0611*  	ld hl,BUF_4184
0494D5 01 07 00 00 0612*  	ld bc,7
0494D9 11 0E 00 00 0613*  	ld de,14
0494DD DD 21 62 00 0614*  	ld ix,98
       00          
0494E2 CD 4E B9 04 0615*  	call vdu_load_img
0494E6             0616*  
0494E6 21 F0 97 04 0617*  	ld hl,Frc089
0494EA 11 21 C4 04 0618*  	ld de,filedata
0494EE 01 00 00 01 0619*  	ld bc,65536
0494F2 3E 01       0620*  	ld a,mos_load
0494F4 5B CF       0621*  	RST.LIL 08h
0494F6 21 59 10 00 0622*  	ld hl,BUF_4185
0494FA 01 08 00 00 0623*  	ld bc,8
0494FE 11 0E 00 00 0624*  	ld de,14
049502 DD 21 70 00 0625*  	ld ix,112
       00          
049507 CD 4E B9 04 0626*  	call vdu_load_img
04950B             0627*  
04950B 21 03 98 04 0628*  	ld hl,Frc090
04950F 11 21 C4 04 0629*  	ld de,filedata
049513 01 00 00 01 0630*  	ld bc,65536
049517 3E 01       0631*  	ld a,mos_load
049519 5B CF       0632*  	RST.LIL 08h
04951B 21 5A 10 00 0633*  	ld hl,BUF_4186
04951F 01 07 00 00 0634*  	ld bc,7
049523 11 0E 00 00 0635*  	ld de,14
049527 DD 21 62 00 0636*  	ld ix,98
       00          
04952C CD 4E B9 04 0637*  	call vdu_load_img
049530             0638*  ; Missing character 91
049530             0639*  ; Missing character 92
049530             0640*  ; Missing character 93
049530             0641*  ; Missing character 94
049530             0642*  ; Missing character 95
049530             0643*  ; Missing character 96
049530             0644*  ; Missing character 97
049530             0645*  ; Missing character 98
049530             0646*  ; Missing character 99
049530             0647*  ; Missing character 100
049530             0648*  ; Missing character 101
049530             0649*  ; Missing character 102
049530             0650*  ; Missing character 103
049530             0651*  ; Missing character 104
049530             0652*  ; Missing character 105
049530             0653*  ; Missing character 106
049530             0654*  ; Missing character 107
049530             0655*  ; Missing character 108
049530             0656*  ; Missing character 109
049530             0657*  ; Missing character 110
049530             0658*  ; Missing character 111
049530             0659*  ; Missing character 112
049530             0660*  ; Missing character 113
049530             0661*  ; Missing character 114
049530             0662*  ; Missing character 115
049530             0663*  ; Missing character 116
049530             0664*  ; Missing character 117
049530             0665*  ; Missing character 118
049530             0666*  ; Missing character 119
049530             0667*  ; Missing character 120
049530             0668*  ; Missing character 121
049530             0669*  ; Missing character 122
049530             0670*  
049530 C9          0671*  	ret
049531             0672*  
049531 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
049544 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049557 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
04956A 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
04957D 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
049590 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
0495A3 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0495B6 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0495C9 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
0495DC 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
0495EF 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
049602 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
049615 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049628 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
04963B 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04964E 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049661 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
049674 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049687 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
04969A 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
0496AD 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0496C0 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
0496D3 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
0496E6 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
0496F9 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
04970C 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
04971F 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
049732 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
049745 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049758 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
04976B 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
04977E 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049791 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
0497A4 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0497B7 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0497CA 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
0497DD 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
0497F0 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
049803 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049816             0021   	include "src/asm/ui.asm"
049816             0001*  ; ui routines will go here
049816             0022   	include "src/asm/ui_img.asm"
049816             0001*  ; Bitmap indices:
049816             0002*  BUF_UI_BJ_120_120: equ 0x2000
049816             0003*  BUF_UI_LOWER_PANEL: equ 0x2001
049816             0004*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2002
049816             0005*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2003
049816             0006*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2004
049816             0007*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2005
049816             0008*  BUF_UI_SPLASH: equ 0x2006
049816             0009*  
049816             0010*  ; Import .rgba2 bitmap files and load them into VDP buffers
049816             0011*  load_ui_images:
049816             0012*  
049816 21 36 99 04 0013*  	ld hl,F_UI_bj_120_120
04981A 11 21 C4 04 0014*  	ld de,filedata
04981E 01 00 00 01 0015*  	ld bc,65536
049822 3E 01       0016*  	ld a,mos_load
049824 5B CF       0017*  	RST.LIL 08h
049826 21 00 20 00 0018*  	ld hl,BUF_UI_BJ_120_120
04982A 01 78 00 00 0019*  	ld bc,120
04982E 11 78 00 00 0020*  	ld de,120
049832 DD 21 40 38 0021*  	ld ix,14400
       00          
049837 CD 4E B9 04 0022*  	call vdu_load_img
04983B 3E 2E       0023*  	LD A, '.'
04983D 5B D7       0024*  	RST.LIL 10h
04983F             0025*  
04983F 21 4A 99 04 0026*  	ld hl,F_UI_lower_panel
049843 11 21 C4 04 0027*  	ld de,filedata
049847 01 00 00 01 0028*  	ld bc,65536
04984B 3E 01       0029*  	ld a,mos_load
04984D 5B CF       0030*  	RST.LIL 08h
04984F 21 01 20 00 0031*  	ld hl,BUF_UI_LOWER_PANEL
049853 01 40 01 00 0032*  	ld bc,320
049857 11 50 00 00 0033*  	ld de,80
04985B DD 21 00 64 0034*  	ld ix,25600
       00          
049860 CD 4E B9 04 0035*  	call vdu_load_img
049864 3E 2E       0036*  	LD A, '.'
049866 5B D7       0037*  	RST.LIL 10h
049868             0038*  
049868 21 5F 99 04 0039*  	ld hl,F_UI_lower_panel_gatling
04986C 11 21 C4 04 0040*  	ld de,filedata
049870 01 00 00 01 0041*  	ld bc,65536
049874 3E 01       0042*  	ld a,mos_load
049876 5B CF       0043*  	RST.LIL 08h
049878 21 02 20 00 0044*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
04987C 01 28 00 00 0045*  	ld bc,40
049880 11 14 00 00 0046*  	ld de,20
049884 DD 21 20 03 0047*  	ld ix,800
       00          
049889 CD 4E B9 04 0048*  	call vdu_load_img
04988D 3E 2E       0049*  	LD A, '.'
04988F 5B D7       0050*  	RST.LIL 10h
049891             0051*  
049891 21 7C 99 04 0052*  	ld hl,F_UI_lower_panel_knife
049895 11 21 C4 04 0053*  	ld de,filedata
049899 01 00 00 01 0054*  	ld bc,65536
04989D 3E 01       0055*  	ld a,mos_load
04989F 5B CF       0056*  	RST.LIL 08h
0498A1 21 03 20 00 0057*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
0498A5 01 28 00 00 0058*  	ld bc,40
0498A9 11 14 00 00 0059*  	ld de,20
0498AD DD 21 20 03 0060*  	ld ix,800
       00          
0498B2 CD 4E B9 04 0061*  	call vdu_load_img
0498B6 3E 2E       0062*  	LD A, '.'
0498B8 5B D7       0063*  	RST.LIL 10h
0498BA             0064*  
0498BA 21 97 99 04 0065*  	ld hl,F_UI_lower_panel_machine_gun
0498BE 11 21 C4 04 0066*  	ld de,filedata
0498C2 01 00 00 01 0067*  	ld bc,65536
0498C6 3E 01       0068*  	ld a,mos_load
0498C8 5B CF       0069*  	RST.LIL 08h
0498CA 21 04 20 00 0070*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
0498CE 01 28 00 00 0071*  	ld bc,40
0498D2 11 14 00 00 0072*  	ld de,20
0498D6 DD 21 20 03 0073*  	ld ix,800
       00          
0498DB CD 4E B9 04 0074*  	call vdu_load_img
0498DF 3E 2E       0075*  	LD A, '.'
0498E1 5B D7       0076*  	RST.LIL 10h
0498E3             0077*  
0498E3 21 B8 99 04 0078*  	ld hl,F_UI_lower_panel_pistol
0498E7 11 21 C4 04 0079*  	ld de,filedata
0498EB 01 00 00 01 0080*  	ld bc,65536
0498EF 3E 01       0081*  	ld a,mos_load
0498F1 5B CF       0082*  	RST.LIL 08h
0498F3 21 05 20 00 0083*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
0498F7 01 28 00 00 0084*  	ld bc,40
0498FB 11 14 00 00 0085*  	ld de,20
0498FF DD 21 20 03 0086*  	ld ix,800
       00          
049904 CD 4E B9 04 0087*  	call vdu_load_img
049908 3E 2E       0088*  	LD A, '.'
04990A 5B D7       0089*  	RST.LIL 10h
04990C             0090*  
04990C 21 D4 99 04 0091*  	ld hl,F_UI_splash
049910 11 21 C4 04 0092*  	ld de,filedata
049914 01 00 00 01 0093*  	ld bc,65536
049918 3E 01       0094*  	ld a,mos_load
04991A 5B CF       0095*  	RST.LIL 08h
04991C 21 06 20 00 0096*  	ld hl,BUF_UI_SPLASH
049920 01 40 01 00 0097*  	ld bc,320
049924 11 A0 00 00 0098*  	ld de,160
049928 DD 21 00 C8 0099*  	ld ix,51200
       00          
04992D CD 4E B9 04 0100*  	call vdu_load_img
049931 3E 2E       0101*  	LD A, '.'
049933 5B D7       0102*  	RST.LIL 10h
049935             0103*  
049935 C9          0104*  	ret
049936             0105*  
049936 75 69 2F 62 0106*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
04994A 75 69 2F 6C 0107*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
04995F 75 69 2F 6C 0108*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
04997C 75 69 2F 6C 0109*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
049997 75 69 2F 6C 0110*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
0499B8 75 69 2F 6C 0111*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
0499D4 75 69 2F 73 0112*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
0499E4             0023   	include "src/asm/ui_img_bj.asm"
0499E4             0001*  ; Bitmap indices:
0499E4             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
0499E4             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
0499E4             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
0499E4             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
0499E4             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
0499E4             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
0499E4             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
0499E4             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
0499E4             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
0499E4             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
0499E4             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
0499E4             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
0499E4             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
0499E4             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
0499E4             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
0499E4             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
0499E4             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
0499E4             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
0499E4             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
0499E4             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
0499E4             0022*  
0499E4             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
0499E4             0024*  load_ui_images_bj:
0499E4             0025*  
0499E4 21 19 9D 04 0026*  	ld hl,F_UI_bj_gatling_00
0499E8 11 21 C4 04 0027*  	ld de,filedata
0499EC 01 00 00 01 0028*  	ld bc,65536
0499F0 3E 01       0029*  	ld a,mos_load
0499F2 5B CF       0030*  	RST.LIL 08h
0499F4 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
0499F8 01 40 00 00 0032*  	ld bc,64
0499FC 11 40 00 00 0033*  	ld de,64
049A00 DD 21 00 10 0034*  	ld ix,4096
       00          
049A05 CD 4E B9 04 0035*  	call vdu_load_img
049A09 3E 2E       0036*  	LD A, '.'
049A0B 5B D7       0037*  	RST.LIL 10h
049A0D             0038*  
049A0D 21 33 9D 04 0039*  	ld hl,F_UI_bj_gatling_01
049A11 11 21 C4 04 0040*  	ld de,filedata
049A15 01 00 00 01 0041*  	ld bc,65536
049A19 3E 01       0042*  	ld a,mos_load
049A1B 5B CF       0043*  	RST.LIL 08h
049A1D 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
049A21 01 40 00 00 0045*  	ld bc,64
049A25 11 40 00 00 0046*  	ld de,64
049A29 DD 21 00 10 0047*  	ld ix,4096
       00          
049A2E CD 4E B9 04 0048*  	call vdu_load_img
049A32 3E 2E       0049*  	LD A, '.'
049A34 5B D7       0050*  	RST.LIL 10h
049A36             0051*  
049A36 21 4D 9D 04 0052*  	ld hl,F_UI_bj_gatling_02
049A3A 11 21 C4 04 0053*  	ld de,filedata
049A3E 01 00 00 01 0054*  	ld bc,65536
049A42 3E 01       0055*  	ld a,mos_load
049A44 5B CF       0056*  	RST.LIL 08h
049A46 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
049A4A 01 40 00 00 0058*  	ld bc,64
049A4E 11 40 00 00 0059*  	ld de,64
049A52 DD 21 00 10 0060*  	ld ix,4096
       00          
049A57 CD 4E B9 04 0061*  	call vdu_load_img
049A5B 3E 2E       0062*  	LD A, '.'
049A5D 5B D7       0063*  	RST.LIL 10h
049A5F             0064*  
049A5F 21 67 9D 04 0065*  	ld hl,F_UI_bj_gatling_03
049A63 11 21 C4 04 0066*  	ld de,filedata
049A67 01 00 00 01 0067*  	ld bc,65536
049A6B 3E 01       0068*  	ld a,mos_load
049A6D 5B CF       0069*  	RST.LIL 08h
049A6F 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
049A73 01 40 00 00 0071*  	ld bc,64
049A77 11 40 00 00 0072*  	ld de,64
049A7B DD 21 00 10 0073*  	ld ix,4096
       00          
049A80 CD 4E B9 04 0074*  	call vdu_load_img
049A84 3E 2E       0075*  	LD A, '.'
049A86 5B D7       0076*  	RST.LIL 10h
049A88             0077*  
049A88 21 81 9D 04 0078*  	ld hl,F_UI_bj_gatling_04
049A8C 11 21 C4 04 0079*  	ld de,filedata
049A90 01 00 00 01 0080*  	ld bc,65536
049A94 3E 01       0081*  	ld a,mos_load
049A96 5B CF       0082*  	RST.LIL 08h
049A98 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
049A9C 01 40 00 00 0084*  	ld bc,64
049AA0 11 40 00 00 0085*  	ld de,64
049AA4 DD 21 00 10 0086*  	ld ix,4096
       00          
049AA9 CD 4E B9 04 0087*  	call vdu_load_img
049AAD 3E 2E       0088*  	LD A, '.'
049AAF 5B D7       0089*  	RST.LIL 10h
049AB1             0090*  
049AB1 21 9B 9D 04 0091*  	ld hl,F_UI_bj_knife_00
049AB5 11 21 C4 04 0092*  	ld de,filedata
049AB9 01 00 00 01 0093*  	ld bc,65536
049ABD 3E 01       0094*  	ld a,mos_load
049ABF 5B CF       0095*  	RST.LIL 08h
049AC1 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
049AC5 01 40 00 00 0097*  	ld bc,64
049AC9 11 40 00 00 0098*  	ld de,64
049ACD DD 21 00 10 0099*  	ld ix,4096
       00          
049AD2 CD 4E B9 04 0100*  	call vdu_load_img
049AD6 3E 2E       0101*  	LD A, '.'
049AD8 5B D7       0102*  	RST.LIL 10h
049ADA             0103*  
049ADA 21 B3 9D 04 0104*  	ld hl,F_UI_bj_knife_01
049ADE 11 21 C4 04 0105*  	ld de,filedata
049AE2 01 00 00 01 0106*  	ld bc,65536
049AE6 3E 01       0107*  	ld a,mos_load
049AE8 5B CF       0108*  	RST.LIL 08h
049AEA 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
049AEE 01 40 00 00 0110*  	ld bc,64
049AF2 11 40 00 00 0111*  	ld de,64
049AF6 DD 21 00 10 0112*  	ld ix,4096
       00          
049AFB CD 4E B9 04 0113*  	call vdu_load_img
049AFF 3E 2E       0114*  	LD A, '.'
049B01 5B D7       0115*  	RST.LIL 10h
049B03             0116*  
049B03 21 CB 9D 04 0117*  	ld hl,F_UI_bj_knife_02
049B07 11 21 C4 04 0118*  	ld de,filedata
049B0B 01 00 00 01 0119*  	ld bc,65536
049B0F 3E 01       0120*  	ld a,mos_load
049B11 5B CF       0121*  	RST.LIL 08h
049B13 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
049B17 01 40 00 00 0123*  	ld bc,64
049B1B 11 40 00 00 0124*  	ld de,64
049B1F DD 21 00 10 0125*  	ld ix,4096
       00          
049B24 CD 4E B9 04 0126*  	call vdu_load_img
049B28 3E 2E       0127*  	LD A, '.'
049B2A 5B D7       0128*  	RST.LIL 10h
049B2C             0129*  
049B2C 21 E3 9D 04 0130*  	ld hl,F_UI_bj_knife_03
049B30 11 21 C4 04 0131*  	ld de,filedata
049B34 01 00 00 01 0132*  	ld bc,65536
049B38 3E 01       0133*  	ld a,mos_load
049B3A 5B CF       0134*  	RST.LIL 08h
049B3C 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
049B40 01 40 00 00 0136*  	ld bc,64
049B44 11 40 00 00 0137*  	ld de,64
049B48 DD 21 00 10 0138*  	ld ix,4096
       00          
049B4D CD 4E B9 04 0139*  	call vdu_load_img
049B51 3E 2E       0140*  	LD A, '.'
049B53 5B D7       0141*  	RST.LIL 10h
049B55             0142*  
049B55 21 FB 9D 04 0143*  	ld hl,F_UI_bj_knife_04
049B59 11 21 C4 04 0144*  	ld de,filedata
049B5D 01 00 00 01 0145*  	ld bc,65536
049B61 3E 01       0146*  	ld a,mos_load
049B63 5B CF       0147*  	RST.LIL 08h
049B65 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
049B69 01 40 00 00 0149*  	ld bc,64
049B6D 11 40 00 00 0150*  	ld de,64
049B71 DD 21 00 10 0151*  	ld ix,4096
       00          
049B76 CD 4E B9 04 0152*  	call vdu_load_img
049B7A 3E 2E       0153*  	LD A, '.'
049B7C 5B D7       0154*  	RST.LIL 10h
049B7E             0155*  
049B7E 21 13 9E 04 0156*  	ld hl,F_UI_bj_machine_gun_00
049B82 11 21 C4 04 0157*  	ld de,filedata
049B86 01 00 00 01 0158*  	ld bc,65536
049B8A 3E 01       0159*  	ld a,mos_load
049B8C 5B CF       0160*  	RST.LIL 08h
049B8E 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
049B92 01 40 00 00 0162*  	ld bc,64
049B96 11 40 00 00 0163*  	ld de,64
049B9A DD 21 00 10 0164*  	ld ix,4096
       00          
049B9F CD 4E B9 04 0165*  	call vdu_load_img
049BA3 3E 2E       0166*  	LD A, '.'
049BA5 5B D7       0167*  	RST.LIL 10h
049BA7             0168*  
049BA7 21 31 9E 04 0169*  	ld hl,F_UI_bj_machine_gun_01
049BAB 11 21 C4 04 0170*  	ld de,filedata
049BAF 01 00 00 01 0171*  	ld bc,65536
049BB3 3E 01       0172*  	ld a,mos_load
049BB5 5B CF       0173*  	RST.LIL 08h
049BB7 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
049BBB 01 40 00 00 0175*  	ld bc,64
049BBF 11 40 00 00 0176*  	ld de,64
049BC3 DD 21 00 10 0177*  	ld ix,4096
       00          
049BC8 CD 4E B9 04 0178*  	call vdu_load_img
049BCC 3E 2E       0179*  	LD A, '.'
049BCE 5B D7       0180*  	RST.LIL 10h
049BD0             0181*  
049BD0 21 4F 9E 04 0182*  	ld hl,F_UI_bj_machine_gun_02
049BD4 11 21 C4 04 0183*  	ld de,filedata
049BD8 01 00 00 01 0184*  	ld bc,65536
049BDC 3E 01       0185*  	ld a,mos_load
049BDE 5B CF       0186*  	RST.LIL 08h
049BE0 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
049BE4 01 40 00 00 0188*  	ld bc,64
049BE8 11 40 00 00 0189*  	ld de,64
049BEC DD 21 00 10 0190*  	ld ix,4096
       00          
049BF1 CD 4E B9 04 0191*  	call vdu_load_img
049BF5 3E 2E       0192*  	LD A, '.'
049BF7 5B D7       0193*  	RST.LIL 10h
049BF9             0194*  
049BF9 21 6D 9E 04 0195*  	ld hl,F_UI_bj_machine_gun_03
049BFD 11 21 C4 04 0196*  	ld de,filedata
049C01 01 00 00 01 0197*  	ld bc,65536
049C05 3E 01       0198*  	ld a,mos_load
049C07 5B CF       0199*  	RST.LIL 08h
049C09 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
049C0D 01 40 00 00 0201*  	ld bc,64
049C11 11 40 00 00 0202*  	ld de,64
049C15 DD 21 00 10 0203*  	ld ix,4096
       00          
049C1A CD 4E B9 04 0204*  	call vdu_load_img
049C1E 3E 2E       0205*  	LD A, '.'
049C20 5B D7       0206*  	RST.LIL 10h
049C22             0207*  
049C22 21 8B 9E 04 0208*  	ld hl,F_UI_bj_machine_gun_04
049C26 11 21 C4 04 0209*  	ld de,filedata
049C2A 01 00 00 01 0210*  	ld bc,65536
049C2E 3E 01       0211*  	ld a,mos_load
049C30 5B CF       0212*  	RST.LIL 08h
049C32 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
049C36 01 40 00 00 0214*  	ld bc,64
049C3A 11 40 00 00 0215*  	ld de,64
049C3E DD 21 00 10 0216*  	ld ix,4096
       00          
049C43 CD 4E B9 04 0217*  	call vdu_load_img
049C47 3E 2E       0218*  	LD A, '.'
049C49 5B D7       0219*  	RST.LIL 10h
049C4B             0220*  
049C4B 21 A9 9E 04 0221*  	ld hl,F_UI_bj_pistol_00
049C4F 11 21 C4 04 0222*  	ld de,filedata
049C53 01 00 00 01 0223*  	ld bc,65536
049C57 3E 01       0224*  	ld a,mos_load
049C59 5B CF       0225*  	RST.LIL 08h
049C5B 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
049C5F 01 40 00 00 0227*  	ld bc,64
049C63 11 40 00 00 0228*  	ld de,64
049C67 DD 21 00 10 0229*  	ld ix,4096
       00          
049C6C CD 4E B9 04 0230*  	call vdu_load_img
049C70 3E 2E       0231*  	LD A, '.'
049C72 5B D7       0232*  	RST.LIL 10h
049C74             0233*  
049C74 21 C2 9E 04 0234*  	ld hl,F_UI_bj_pistol_01
049C78 11 21 C4 04 0235*  	ld de,filedata
049C7C 01 00 00 01 0236*  	ld bc,65536
049C80 3E 01       0237*  	ld a,mos_load
049C82 5B CF       0238*  	RST.LIL 08h
049C84 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
049C88 01 40 00 00 0240*  	ld bc,64
049C8C 11 40 00 00 0241*  	ld de,64
049C90 DD 21 00 10 0242*  	ld ix,4096
       00          
049C95 CD 4E B9 04 0243*  	call vdu_load_img
049C99 3E 2E       0244*  	LD A, '.'
049C9B 5B D7       0245*  	RST.LIL 10h
049C9D             0246*  
049C9D 21 DB 9E 04 0247*  	ld hl,F_UI_bj_pistol_02
049CA1 11 21 C4 04 0248*  	ld de,filedata
049CA5 01 00 00 01 0249*  	ld bc,65536
049CA9 3E 01       0250*  	ld a,mos_load
049CAB 5B CF       0251*  	RST.LIL 08h
049CAD 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
049CB1 01 40 00 00 0253*  	ld bc,64
049CB5 11 40 00 00 0254*  	ld de,64
049CB9 DD 21 00 10 0255*  	ld ix,4096
       00          
049CBE CD 4E B9 04 0256*  	call vdu_load_img
049CC2 3E 2E       0257*  	LD A, '.'
049CC4 5B D7       0258*  	RST.LIL 10h
049CC6             0259*  
049CC6 21 F4 9E 04 0260*  	ld hl,F_UI_bj_pistol_03
049CCA 11 21 C4 04 0261*  	ld de,filedata
049CCE 01 00 00 01 0262*  	ld bc,65536
049CD2 3E 01       0263*  	ld a,mos_load
049CD4 5B CF       0264*  	RST.LIL 08h
049CD6 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
049CDA 01 40 00 00 0266*  	ld bc,64
049CDE 11 40 00 00 0267*  	ld de,64
049CE2 DD 21 00 10 0268*  	ld ix,4096
       00          
049CE7 CD 4E B9 04 0269*  	call vdu_load_img
049CEB 3E 2E       0270*  	LD A, '.'
049CED 5B D7       0271*  	RST.LIL 10h
049CEF             0272*  
049CEF 21 0D 9F 04 0273*  	ld hl,F_UI_bj_pistol_04
049CF3 11 21 C4 04 0274*  	ld de,filedata
049CF7 01 00 00 01 0275*  	ld bc,65536
049CFB 3E 01       0276*  	ld a,mos_load
049CFD 5B CF       0277*  	RST.LIL 08h
049CFF 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
049D03 01 40 00 00 0279*  	ld bc,64
049D07 11 40 00 00 0280*  	ld de,64
049D0B DD 21 00 10 0281*  	ld ix,4096
       00          
049D10 CD 4E B9 04 0282*  	call vdu_load_img
049D14 3E 2E       0283*  	LD A, '.'
049D16 5B D7       0284*  	RST.LIL 10h
049D18             0285*  
049D18 C9          0286*  	ret
049D19             0287*  
049D19 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049D33 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049D4D 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049D67 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049D81 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049D9B 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
049DB3 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
049DCB 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
049DE3 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
049DFB 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
049E13 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049E31 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049E4F 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049E6D 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049E8B 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049EA9 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
049EC2 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
049EDB 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
049EF4 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
049F0D 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
049F26             0024   	include "src/asm/sprites.asm"
049F26             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
049F26             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
049F26             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
049F26             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
049F26             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
049F26             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
049F26             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
049F26             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
049F26             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
049F26             0010*  sprite_anim_tmr: equ 08 ; 1 byte  - when hits zero, draw next animation frame
049F26             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
049F26             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
049F26             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, BCD
049F26             0014*  sprite_health_modifier:   equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
049F26             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
049F26             0016*  sprite_record_size: equ 16 ; 16 bytes per sprite record
049F26             0017*  
049F26             0018*  ; sprite_triggers_mask defs
049F26             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
049F26             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
049F26             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
049F26             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
049F26             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
049F26             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
049F26             0025*  
049F26             0026*  ; ###### SPRITE TABLE VARIABLES ######
049F26             0027*  ; maximum number of sprites
049F26             0028*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
049F26             0029*  table_total_bytes:      equ table_max_records*sprite_record_size
049F26             0030*  
049F26             0031*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
049F26             0032*  sprite_table_base:       equ 0xB7FC00
049F26             0033*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
049F26             0034*  
049F26             0035*  ; pointer to top address of current record, initialized to sprite_table_base
049F26 00 FC B7    0036*  sprite_table_pointer: dl sprite_table_base
049F29             0037*  ; how many active sprites
049F29 00          0038*  table_active_sprites: db 0x00
049F2A             0039*  ; flag indicating collision with screen edge
049F2A             0040*  ; uses orientation codes to specify which edge(s)
049F2A 00          0041*  sprite_screen_edge: db #00
049F2B             0042*  ; next sprite id to use
049F2B 00          0043*  sprite_next_id: db 0
049F2C             0044*  
049F2C             0045*  ; ######### COLLISION SPRITE PARAMETERS ##########
049F2C             0046*  ; integer coordinates are all that are needed for collision calculations
049F2C 00          0047*  collision_x: db 0x00
049F2D 00          0048*  collision_y: db 0x00
049F2E 00          0049*  collision_dim_x: db 0x00
049F2F 00          0050*  collision_dim_y: db 0x00
049F30             0051*  
049F30             0052*  ; scratch variables
049F30 00          0053*  x: db 0x00 ; 8-bit signed integer
049F31 00          0054*  y: db 0x00 ; 8-bit signed integer
049F32 00 00 00    0055*  x0: dl 0x000000 ; 16.8 signed fixed place
049F35 00 00 00    0056*  y0: dl 0x000000 ; 16.8 signed fixed place
049F38 00 00 00    0057*  incx1: dl 0x000000 ; 16.8 signed fixed place
049F3B 00 00 00    0058*  incy1: dl 0x000000 ; 16.8 signed fixed place
049F3E 00 00 00    0059*  incx2: dl 0x000000 ; 16.8 signed fixed place
049F41 00 00 00    0060*  incy2: dl 0x000000 ; 16.8 signed fixed place
049F44             0061*  
049F44             0062*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
049F44 00 00 00    0063*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
049F47 00 00 00    0064*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F4A 00 00 00    0065*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F4D             0066*  
049F4D             0067*  ; gets the next available sprite id
049F4D             0068*  ; inputs; none
049F4D             0069*  ; returns: if new sprite available, a = sprite id,
049F4D             0070*  ;      ix pointing to new sprite vars, carry set
049F4D             0071*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
049F4D             0072*  ; destroys: a,b,hl,ix
049F4D             0073*  ; affects: bumps table_active_sprites by one
049F4D             0074*  table_get_next_id:
049F4D DD 21 00 FC 0075*      ld ix,sprite_table_base
       B7          
049F52 11 10 00 00 0076*      ld de,sprite_record_size
049F56 06 40       0077*      ld b,table_max_records
049F58             0078*  @loop:
049F58 DD 7E 01    0079*      ld a,(ix+sprite_obj)
049F5B A7          0080*      and a
049F5C 28 06       0081*      jr z,@found
049F5E DD 19       0082*      add ix,de
049F60 10 F6       0083*      djnz @loop
049F62             0084*  @notfound:
049F62 AF          0085*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
049F63 C9          0086*      ret
049F64             0087*  @found:
049F64             0088*  ; bump number of active sprites
049F64 21 29 9F 04 0089*      ld hl,table_active_sprites
049F68 34          0090*      inc (hl)
049F69             0091*  ; return sprite id
049F69 3E 40       0092*      ld a,table_max_records
049F6B 90          0093*      sub b
049F6C 32 2B 9F 04 0094*      ld (sprite_next_id),a
049F70 37          0095*      scf ; sets carry flag indicating we found a free sprite
049F71 C9          0096*      ret ; done
049F72             0097*  
049F72             0098*  ; deactivate the sprite with the given id
049F72             0099*  ; inputs: a = sprite id
049F72             0100*  ; outputs: nothing
049F72             0101*  ; destroys: a,ix,de
049F72             0102*  ; affects: decrements table_active_sprites by one
049F72             0103*  table_deactivate_sprite:
049F72 F5          0104*      push af ; save sprite id bc we need it later
049F73 CD 5F AC 04 0105*      call vdu_sprite_select
049F77 CD E3 AC 04 0106*      call vdu_sprite_hide
049F7B F1          0107*      pop af ; restore sprite id
049F7C 11 00 00 00 0108*      ld de,0 ; clear deu
049F80 57          0109*      ld d,a
049F81 1E 10       0110*      ld e,sprite_record_size
049F83 ED 5C       0111*      mlt de
049F85 DD 21 00 FC 0112*      ld ix,sprite_table_base
       B7          
049F8A DD 19       0113*      add ix,de
049F8C AF          0114*      xor a
049F8D DD 77 01    0115*      ld (ix+sprite_obj),a
049F90 DD 21 29 9F 0116*      ld ix,table_active_sprites
       04          
049F95 DD 35 00    0117*      dec (ix)
049F98 C9          0118*      ret
049F99             0119*  
049F99             0120*  ; sets iy and sprite_table_pointer to the sprite record with the given id
049F99             0121*  ; inputs: a = sprite id
049F99             0122*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
049F99             0123*  ; destroys: bc
049F99             0124*  sprite_set_pointer:
049F99 47          0125*      ld b,a
049F9A 0E 10       0126*      ld c,sprite_record_size
049F9C ED 4C       0127*      mlt bc
049F9E FD 21 00 FC 0128*      ld iy,sprite_table_base
       B7          
049FA3 FD 09       0129*      add iy,bc
049FA5 FD 22 26 9F 0130*      ld (sprite_table_pointer),iy
       04          
049FAA C9          0131*      ret
049FAB             0132*  
049FAB             0133*  ; set the active sprite record to no sprite and remove it from the map cell it was in
049FAB             0134*  ; inputs: iy pointed at sprite record to clear
049FAB             0135*  sprite_kill:
049FAB             0136*  ; set sprite table record to no sprite
049FAB 21 FF FF FF 0137*      ld hl,0xFFFFFF ; a string of -1s
049FAF FD 2F 00    0138*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
049FB2             0139*  
049FB2             0140*  ; set map cell to no sprite and normal floor
049FB2 21 01 FF 1D 0141*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FB6 DD 2F 00    0142*      ld (ix),hl
049FB9 3E FF       0143*      ld a,0xFF ; no sprite
049FBB DD 77 03    0144*      ld (ix+map_sprite_id),a ; now sprite is truly dead
049FBE C9          0145*      ret
049FBF             0146*  
049FBF 00          0147*  sprite_new_x: db 0x00
049FC0 00          0148*  sprite_new_y: db 0x00
049FC1 00          0149*                db 0x00 ; padding
049FC2             0150*  
049FC2             0151*  ; checks if the sprite can move to the new position
049FC2             0152*  ; inputs: iy pointed at sprite record, d,e = new y,x position
049FC2             0153*  sprite_check_move:
049FC2 ED 53 BF 9F 0154*      ld (sprite_new_x),de ; save new y,x position
       04          
049FC7 CD A3 65 04 0155*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FCB             0156*  ; check whether target cell contains a sprite
049FCB DD 7E 03    0157*      ld a,(ix+map_sprite_id)
049FCE FE FF       0158*      cp 255 ; value if not sprite
049FD0 C0          0159*      ret nz ; already occupied by another sprite so we can't move there
049FD1             0160*  ; read map type/status mask from target cell
049FD1 DD 7E 00    0161*      ld a,(ix+map_type_status)
049FD4 E6 01       0162*      and render_type_floor
049FD6 C8          0163*      ret z ; target cell is not a floor so we can't move there
049FD7             0164*  ; we are cleared for movement so fall through to sprite_move
049FD7             0165*  
049FD7             0166*  ; moves the sprite to the given map position
049FD7             0167*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
049FD7             0168*  sprite_move:
049FD7             0169*  ; update old sprite position to no sprite
049FD7 FD 17 04    0170*      ld de,(iy+sprite_x) ; d,e = sprite current y,x position
049FDA CD A3 65 04 0171*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FDE             0172*  ; set map cell to no sprite and normal floor
049FDE 21 01 FF 1D 0173*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FE2 DD 2F 00    0174*      ld (ix),hl
049FE5 3E FF       0175*      ld a,0xFF ; no sprite
049FE7 DD 77 03    0176*      ld (ix+map_sprite_id),a
049FEA             0177*  ; update sprite record with new position
049FEA ED 5B BF 9F 0178*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
049FEF FD 1F 04    0179*      ld (iy+sprite_x),de
049FF2             0180*  ; update new map cell with sprite id
049FF2 CD A3 65 04 0181*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FF6 FD 7E 00    0182*      ld a,(iy+sprite_id)
049FF9 DD 77 03    0183*      ld (ix+map_sprite_id),a
049FFC C9          0184*      ret
049FFD             0185*  
049FFD             0186*  ; move a sprite in a random direction
049FFD             0187*  ; inputs: iy pointed at sprite record
049FFD             0188*  sprite_move_random:
049FFD             0189*  ; point iy at sprite record
049FFD FD 2A 26 9F 0190*      ld iy,(sprite_table_pointer)
       04          
04A002             0191*  ; DEBUG:
04A002             0192*      ; ld bc,(iy+sprite_x)
04A002             0193*      ; push bc
04A002             0194*  ; pick a random direction
04A002 CD BB B7 04 0195*      call rand_8
04A006 E6 03       0196*      and 3 ; direction between 0 and 3
04A008             0197*  ; get dy,dx for moving once cell in the chosen direction
04A008 5F          0198*      ld e,a
04A009 16 01       0199*      ld d,1 ; distance
04A00B CD C8 65 04 0200*      call get_dx_dy ; d,e = dy,dx
04A00F             0201*  ; calculate new position
04A00F FD 7E 04    0202*      ld a,(iy+sprite_x)
04A012 83          0203*      add a,e
04A013 E6 0F       0204*      and 15 ; modulo 16
04A015 5F          0205*      ld e,a
04A016 FD 7E 05    0206*      ld a,(iy+sprite_y)
04A019 82          0207*      add a,d
04A01A E6 0F       0208*      and 15 ; modulo 16
04A01C 57          0209*      ld d,a
04A01D             0210*  
04A01D             0211*      ; pop bc
04A01D             0212*      ; call stepRegistersHex
04A01D C3 C2 9F 04 0213*      jp sprite_check_move
04A021             0214*  
04A021             0215*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A021             0216*  sprite_behavior_lookup:
04A021 84 A0 04    0217*      dl LAMP
04A024 CD A0 04    0218*      dl BARREL
04A027 2D A1 04    0219*      dl TABLE
04A02A 76 A1 04    0220*      dl OVERHEAD_LIGHT
04A02D BF A1 04    0221*      dl RADIOACTIVE_BARREL
04A030 1F A2 04    0222*      dl HEALTH_PACK
04A033 6D A2 04    0223*      dl GOLD_CHALISE
04A036 C3 A2 04    0224*      dl GOLD_CROSS
04A039 19 A3 04    0225*      dl PLATE_OF_FOOD
04A03C 67 A3 04    0226*      dl KEYCARD
04A03F BE A3 04    0227*      dl GOLD_CHEST
04A042 14 A4 04    0228*      dl MACHINE_GUN
04A045 7D A4 04    0229*      dl GATLING_GUN
04A048 E6 A4 04    0230*      dl DOG_FOOD
04A04B 34 A5 04    0231*      dl GOLD_KEY
04A04E 7D A5 04    0232*      dl DOG
04A051 1E A6 04    0233*      dl GERMAN_TROOPER
04A054 D1 A6 04    0234*      dl SS_GUARD
04A057             0235*  
04A057             0236*  ; initializes sprite data for a particular sprite type and id
04A057             0237*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A057             0238*  sprite_init_data:
04A057 3E 00       0239*      ld a,sp_init ; index for sprite init routine
04A059 CD 67 A0 04 0240*      call do_sprite_behavior ; hl points at address to copy from
04A05D ED 13 02    0241*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A060 01 0E 00 00 0242*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A064 ED B0       0243*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A066 C9          0244*      ret ; done
04A067             0245*  
04A067             0246*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A067             0247*  ; sprite behavior indices
04A067             0248*  sp_init:   equ 0
04A067             0249*  sp_use:    equ 1
04A067             0250*  sp_hurt:  equ 2
04A067             0251*  sp_kill:   equ 3
04A067             0252*  sp_see:    equ 4
04A067             0253*  sp_move:  equ 5
04A067             0254*  sp_shoot:  equ 6
04A067             0255*  
04A067             0256*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A067             0257*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A067             0258*  ;         a = type index of routine to call
04A067             0259*  do_sprite_behavior:
04A067 FD 22 26 9F 0260*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A06C FD 46 01    0261*      ld b,(iy+sprite_obj)
04A06F 0E 03       0262*      ld c,3 ; three bytes per lookup record
04A071 ED 4C       0263*      mlt bc ; bc is offset from the base of the lookup table
04A073 21 21 A0 04 0264*      ld hl,sprite_behavior_lookup
04A077 09          0265*      add hl,bc
04A078 ED 27       0266*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A07A 47          0267*      ld b,a ; b holds the routine index
04A07B 0E 03       0268*      ld c,3 ; three bytes per lookup record
04A07D ED 4C       0269*      mlt bc ; bc is offset from the base of the lookup table
04A07F 09          0270*      add hl,bc ; hl points to the label of the routine to call
04A080 ED 27       0271*      ld hl,(hl) ; hl points to the routine to call
04A082 E9          0272*      jp (hl) ; call the behavior routine
04A083             0273*  sprite_behavior_return: ; we always return here from a sprite behavior call
04A083 C9          0274*      ret
04A084             0275*  
04A084             0276*  LAMP:
04A084             0277*  ; behavior routine address lookup
04A084 99 A0 04    0278*      dl @init
04A087 AF A0 04    0279*      dl @use
04A08A B3 A0 04    0280*      dl @hurt
04A08D B8 A0 04    0281*      dl @kill
04A090 C0 A0 04    0282*      dl @see
04A093 C5 A0 04    0283*      dl @move
04A096 C9 A0 04    0284*      dl @shoot
04A099             0285*  @init:
04A099 21 A1 A0 04 0286*      ld hl,@data ; address for LDIR to copy from
04A09D C3 83 A0 04 0287*      jp sprite_behavior_return
04A0A1             0288*  @data:
04A0A1 64          0289*      db 100 ;sprite_health
04A0A2 00          0290*      db 000 ;sprite_triggers_mask
04A0A3 00          0291*      db 000 ;sprite_x
04A0A4 00          0292*      db 000 ;sprite_y
04A0A5 00          0293*      db 000 ;sprite_orientation
04A0A6 00          0294*      db 000 ;sprite_animation
04A0A7 00          0295*      db 000 ;sprite_anim_tmr
04A0A8 01          0296*      db 001 ;sprite_move_timer
04A0A9 00          0297*      db 000 ;sprite_move_step
04A0AA 00          0298*      db 000 ;sprite_points
04A0AB 00          0299*      db 000 ;sprite_health_modifier
04A0AC 00          0300*      db 000 ;sprite_unassigned_0
04A0AD 00          0301*      db 000 ;sprite_unassigned_1
04A0AE 00          0302*      db 000 ;sprite_unassigned_2
04A0AF             0303*  @use:
04A0AF C3 83 A0 04 0304*      jp sprite_behavior_return
04A0B3             0305*  @hurt:
04A0B3 AF          0306*      xor a
04A0B4 C3 83 A0 04 0307*      jp sprite_behavior_return
04A0B8             0308*  @kill:
04A0B8 CD AB 9F 04 0309*      call sprite_kill
04A0BC C3 83 A0 04 0310*      jp sprite_behavior_return
04A0C0             0311*  @see:
04A0C0 AF          0312*      xor a
04A0C1 C3 83 A0 04 0313*      jp sprite_behavior_return
04A0C5             0314*  @move:
04A0C5 C3 83 A0 04 0315*      jp sprite_behavior_return
04A0C9             0316*  @shoot:
04A0C9 C3 83 A0 04 0317*      jp sprite_behavior_return
04A0CD             0318*  
04A0CD             0319*  BARREL:
04A0CD             0320*  ; behavior routine address lookup
04A0CD E2 A0 04    0321*      dl @init
04A0D0 F8 A0 04    0322*      dl @use
04A0D3 FC A0 04    0323*      dl @hurt
04A0D6 10 A1 04    0324*      dl @kill
04A0D9 20 A1 04    0325*      dl @see
04A0DC 25 A1 04    0326*      dl @move
04A0DF 29 A1 04    0327*      dl @shoot
04A0E2             0328*  @init:
04A0E2 21 EA A0 04 0329*      ld hl,@data ; address for LDIR to copy from
04A0E6 C3 83 A0 04 0330*      jp sprite_behavior_return
04A0EA             0331*  @data:
04A0EA 12          0332*      db 018 ;sprite_health
04A0EB 00          0333*      db 000 ;sprite_triggers_mask
04A0EC 00          0334*      db 000 ;sprite_x
04A0ED 00          0335*      db 000 ;sprite_y
04A0EE 00          0336*      db 000 ;sprite_orientation
04A0EF 00          0337*      db 000 ;sprite_animation
04A0F0 00          0338*      db 000 ;sprite_anim_tmr
04A0F1 01          0339*      db 001 ;sprite_move_timer
04A0F2 00          0340*      db 000 ;sprite_move_step
04A0F3 00          0341*      db 000 ;sprite_points
04A0F4 CE          0342*      db -50 ;sprite_health_modifier
04A0F5 00          0343*      db 000 ;sprite_unassigned_0
04A0F6 00          0344*      db 000 ;sprite_unassigned_1
04A0F7 00          0345*      db 000 ;sprite_unassigned_2
04A0F8             0346*  @use:
04A0F8 C3 83 A0 04 0347*      jp sprite_behavior_return
04A0FC             0348*  @hurt:
04A0FC 3E FF       0349*      ld a,255 ; kill player's shot
04A0FE 32 DF B2 04 0350*      ld (plyr_shot_status),a
04A102 3A E3 B2 04 0351*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A106 FD 86 02    0352*      add a,(iy+sprite_health)
04A109 FD 77 02    0353*      ld (iy+sprite_health),a
04A10C F2 83 A0 04 0354*      jp p,sprite_behavior_return ; if health is positive, return
04A110             0355*      ; otherwise fall through to kill sprite
04A110             0356*  @kill:
04A110 FD E5       0357*      push iy
04A112 CD FA BE 04 0358*      call sfx_play_explode
04A116 FD E1       0359*      pop iy
04A118 CD AB 9F 04 0360*      call sprite_kill
04A11C C3 83 A0 04 0361*      jp sprite_behavior_return
04A120             0362*  @see:
04A120 AF          0363*      xor a
04A121 C3 83 A0 04 0364*      jp sprite_behavior_return
04A125             0365*  @move:
04A125 C3 83 A0 04 0366*      jp sprite_behavior_return
04A129             0367*  @shoot:
04A129 C3 83 A0 04 0368*      jp sprite_behavior_return
04A12D             0369*  
04A12D             0370*  TABLE:
04A12D             0371*  ; behavior routine address lookup
04A12D 42 A1 04    0372*      dl @init
04A130 58 A1 04    0373*      dl @use
04A133 5C A1 04    0374*      dl @hurt
04A136 61 A1 04    0375*      dl @kill
04A139 69 A1 04    0376*      dl @see
04A13C 6E A1 04    0377*      dl @move
04A13F 72 A1 04    0378*      dl @shoot
04A142             0379*  @init:
04A142 21 4A A1 04 0380*      ld hl,@data ; address for LDIR to copy from
04A146 C3 83 A0 04 0381*      jp sprite_behavior_return
04A14A             0382*  @data:
04A14A 64          0383*      db 100 ;sprite_health
04A14B 00          0384*      db 000 ;sprite_triggers_mask
04A14C 00          0385*      db 000 ;sprite_x
04A14D 00          0386*      db 000 ;sprite_y
04A14E 00          0387*      db 000 ;sprite_orientation
04A14F 00          0388*      db 000 ;sprite_animation
04A150 00          0389*      db 000 ;sprite_anim_tmr
04A151 01          0390*      db 001 ;sprite_move_timer
04A152 00          0391*      db 000 ;sprite_move_step
04A153 00          0392*      db 000 ;sprite_points
04A154 00          0393*      db 000 ;sprite_health_modifier
04A155 00          0394*      db 000 ;sprite_unassigned_0
04A156 00          0395*      db 000 ;sprite_unassigned_1
04A157 00          0396*      db 000 ;sprite_unassigned_2
04A158             0397*  @use:
04A158 C3 83 A0 04 0398*      jp sprite_behavior_return
04A15C             0399*  @hurt:
04A15C AF          0400*      xor a
04A15D C3 83 A0 04 0401*      jp sprite_behavior_return
04A161             0402*  @kill:
04A161 CD AB 9F 04 0403*      call sprite_kill
04A165 C3 83 A0 04 0404*      jp sprite_behavior_return
04A169             0405*  @see:
04A169 AF          0406*      xor a
04A16A C3 83 A0 04 0407*      jp sprite_behavior_return
04A16E             0408*  @move:
04A16E C3 83 A0 04 0409*      jp sprite_behavior_return
04A172             0410*  @shoot:
04A172 C3 83 A0 04 0411*      jp sprite_behavior_return
04A176             0412*  
04A176             0413*  OVERHEAD_LIGHT:
04A176             0414*  ; behavior routine address lookup
04A176 8B A1 04    0415*      dl @init
04A179 A1 A1 04    0416*      dl @use
04A17C A5 A1 04    0417*      dl @hurt
04A17F AA A1 04    0418*      dl @kill
04A182 B2 A1 04    0419*      dl @see
04A185 B7 A1 04    0420*      dl @move
04A188 BB A1 04    0421*      dl @shoot
04A18B             0422*  @init:
04A18B 21 93 A1 04 0423*      ld hl,@data ; address for LDIR to copy from
04A18F C3 83 A0 04 0424*      jp sprite_behavior_return
04A193             0425*  @data:
04A193 64          0426*      db 100 ;sprite_health
04A194 00          0427*      db 000 ;sprite_triggers_mask
04A195 00          0428*      db 000 ;sprite_x
04A196 00          0429*      db 000 ;sprite_y
04A197 00          0430*      db 000 ;sprite_orientation
04A198 00          0431*      db 000 ;sprite_animation
04A199 00          0432*      db 000 ;sprite_anim_tmr
04A19A 01          0433*      db 001 ;sprite_move_timer
04A19B 00          0434*      db 000 ;sprite_move_step
04A19C 00          0435*      db 000 ;sprite_points
04A19D 00          0436*      db 000 ;sprite_health_modifier
04A19E 00          0437*      db 000 ;sprite_unassigned_0
04A19F 00          0438*      db 000 ;sprite_unassigned_1
04A1A0 00          0439*      db 000 ;sprite_unassigned_2
04A1A1             0440*  @use:
04A1A1 C3 83 A0 04 0441*      jp sprite_behavior_return
04A1A5             0442*  @hurt:
04A1A5 AF          0443*      xor a
04A1A6 C3 83 A0 04 0444*      jp sprite_behavior_return
04A1AA             0445*  @kill:
04A1AA CD AB 9F 04 0446*      call sprite_kill
04A1AE C3 83 A0 04 0447*      jp sprite_behavior_return
04A1B2             0448*  @see:
04A1B2 AF          0449*      xor a
04A1B3 C3 83 A0 04 0450*      jp sprite_behavior_return
04A1B7             0451*  @move:
04A1B7 C3 83 A0 04 0452*      jp sprite_behavior_return
04A1BB             0453*  @shoot:
04A1BB C3 83 A0 04 0454*      jp sprite_behavior_return
04A1BF             0455*  
04A1BF             0456*  RADIOACTIVE_BARREL:
04A1BF             0457*  ; behavior routine address lookup
04A1BF D4 A1 04    0458*      dl @init
04A1C2 EA A1 04    0459*      dl @use
04A1C5 EE A1 04    0460*      dl @hurt
04A1C8 02 A2 04    0461*      dl @kill
04A1CB 12 A2 04    0462*      dl @see
04A1CE 17 A2 04    0463*      dl @move
04A1D1 1B A2 04    0464*      dl @shoot
04A1D4             0465*  @init:
04A1D4 21 DC A1 04 0466*      ld hl,@data ; address for LDIR to copy from
04A1D8 C3 83 A0 04 0467*      jp sprite_behavior_return
04A1DC             0468*  @data:
04A1DC 18          0469*      db 024 ;sprite_health
04A1DD 00          0470*      db 000 ;sprite_triggers_mask
04A1DE 00          0471*      db 000 ;sprite_x
04A1DF 00          0472*      db 000 ;sprite_y
04A1E0 00          0473*      db 000 ;sprite_orientation
04A1E1 00          0474*      db 000 ;sprite_animation
04A1E2 00          0475*      db 000 ;sprite_anim_tmr
04A1E3 01          0476*      db 001 ;sprite_move_timer
04A1E4 00          0477*      db 000 ;sprite_move_step
04A1E5 00          0478*      db 000 ;sprite_points
04A1E6 B5          0479*      db -75 ;sprite_health_modifier
04A1E7 00          0480*      db 000 ;sprite_unassigned_0
04A1E8 00          0481*      db 000 ;sprite_unassigned_1
04A1E9 00          0482*      db 000 ;sprite_unassigned_2
04A1EA             0483*  @use:
04A1EA C3 83 A0 04 0484*      jp sprite_behavior_return
04A1EE             0485*  @hurt:
04A1EE 3E FF       0486*      ld a,255 ; kill player's shot
04A1F0 32 DF B2 04 0487*      ld (plyr_shot_status),a
04A1F4 3A E3 B2 04 0488*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A1F8 FD 86 02    0489*      add a,(iy+sprite_health)
04A1FB FD 77 02    0490*      ld (iy+sprite_health),a
04A1FE F2 83 A0 04 0491*      jp p,sprite_behavior_return ; if health is positive, return
04A202             0492*      ; otherwise fall through to kill sprite
04A202             0493*  @kill:
04A202 FD E5       0494*      push iy
04A204 CD FA BE 04 0495*      call sfx_play_explode
04A208 FD E1       0496*      pop iy
04A20A CD AB 9F 04 0497*      call sprite_kill
04A20E C3 83 A0 04 0498*      jp sprite_behavior_return
04A212             0499*  @see:
04A212 AF          0500*      xor a
04A213 C3 83 A0 04 0501*      jp sprite_behavior_return
04A217             0502*  @move:
04A217 C3 83 A0 04 0503*      jp sprite_behavior_return
04A21B             0504*  @shoot:
04A21B C3 83 A0 04 0505*      jp sprite_behavior_return
04A21F             0506*  
04A21F             0507*  HEALTH_PACK:
04A21F             0508*  ; behavior routine address lookup
04A21F 34 A2 04    0509*      dl @init
04A222 4A A2 04    0510*      dl @use
04A225 53 A2 04    0511*      dl @hurt
04A228 58 A2 04    0512*      dl @kill
04A22B 60 A2 04    0513*      dl @see
04A22E 65 A2 04    0514*      dl @move
04A231 69 A2 04    0515*      dl @shoot
04A234             0516*  @init:
04A234 21 3C A2 04 0517*      ld hl,@data ; address for LDIR to copy from
04A238 C3 83 A0 04 0518*      jp sprite_behavior_return
04A23C             0519*  @data:
04A23C 64          0520*      db 100 ;sprite_health
04A23D 00          0521*      db 000 ;sprite_triggers_mask
04A23E 00          0522*      db 000 ;sprite_x
04A23F 00          0523*      db 000 ;sprite_y
04A240 00          0524*      db 000 ;sprite_orientation
04A241 00          0525*      db 000 ;sprite_animation
04A242 00          0526*      db 000 ;sprite_anim_tmr
04A243 01          0527*      db 001 ;sprite_move_timer
04A244 00          0528*      db 000 ;sprite_move_step
04A245 00          0529*      db 000 ;sprite_points
04A246 14          0530*      db 020 ;sprite_health_modifier
04A247 00          0531*      db 000 ;sprite_unassigned_0
04A248 00          0532*      db 000 ;sprite_unassigned_1
04A249 00          0533*      db 000 ;sprite_unassigned_2
04A24A             0534*  @use:
04A24A FD 7E 0C    0535*      ld a,(iy+sprite_health_modifier)
04A24D CD 8C B4 04 0536*      call plyr_add_health
04A251 18 05       0537*      jr @kill
04A253             0538*  @hurt:
04A253 AF          0539*      xor a
04A254 C3 83 A0 04 0540*      jp sprite_behavior_return
04A258             0541*  @kill:
04A258 CD AB 9F 04 0542*      call sprite_kill
04A25C C3 83 A0 04 0543*      jp sprite_behavior_return
04A260             0544*  @see:
04A260 AF          0545*      xor a
04A261 C3 83 A0 04 0546*      jp sprite_behavior_return
04A265             0547*  @move:
04A265 C3 83 A0 04 0548*      jp sprite_behavior_return
04A269             0549*  @shoot:
04A269 C3 83 A0 04 0550*      jp sprite_behavior_return
04A26D             0551*  
04A26D             0552*  GOLD_CHALISE:
04A26D             0553*  ; behavior routine address lookup
04A26D 82 A2 04    0554*      dl @init
04A270 98 A2 04    0555*      dl @use
04A273 A9 A2 04    0556*      dl @hurt
04A276 AE A2 04    0557*      dl @kill
04A279 B6 A2 04    0558*      dl @see
04A27C BB A2 04    0559*      dl @move
04A27F BF A2 04    0560*      dl @shoot
04A282             0561*  @init:
04A282 21 8A A2 04 0562*      ld hl,@data ; address for LDIR to copy from
04A286 C3 83 A0 04 0563*      jp sprite_behavior_return
04A28A             0564*  @data:
04A28A 64          0565*      db 100 ;sprite_health
04A28B 00          0566*      db 000 ;sprite_triggers_mask
04A28C 00          0567*      db 000 ;sprite_x
04A28D 00          0568*      db 000 ;sprite_y
04A28E 00          0569*      db 000 ;sprite_orientation
04A28F 00          0570*      db 000 ;sprite_animation
04A290 00          0571*      db 000 ;sprite_anim_tmr
04A291 01          0572*      db 001 ;sprite_move_timer
04A292 00          0573*      db 000 ;sprite_move_step
04A293 64          0574*      db 100 ;sprite_points
04A294 00          0575*      db 000 ;sprite_health_modifier
04A295 00          0576*      db 000 ;sprite_unassigned_0
04A296 00          0577*      db 000 ;sprite_unassigned_1
04A297 00          0578*      db 000 ;sprite_unassigned_2
04A298             0579*  @use:
04A298 FD E5       0580*      push iy
04A29A CD 06 BF 04 0581*      call sfx_play_got_treasure
04A29E FD E1       0582*      pop iy
04A2A0 FD 7E 0B    0583*      ld a,(iy+sprite_points)
04A2A3 CD AD B4 04 0584*      call plyr_mod_score
04A2A7 18 05       0585*      jr @kill
04A2A9             0586*  @hurt:
04A2A9 AF          0587*      xor a
04A2AA C3 83 A0 04 0588*      jp sprite_behavior_return
04A2AE             0589*  @kill:
04A2AE CD AB 9F 04 0590*      call sprite_kill
04A2B2 C3 83 A0 04 0591*      jp sprite_behavior_return
04A2B6             0592*  @see:
04A2B6 AF          0593*      xor a
04A2B7 C3 83 A0 04 0594*      jp sprite_behavior_return
04A2BB             0595*  @move:
04A2BB C3 83 A0 04 0596*      jp sprite_behavior_return
04A2BF             0597*  @shoot:
04A2BF C3 83 A0 04 0598*      jp sprite_behavior_return
04A2C3             0599*  
04A2C3             0600*  GOLD_CROSS:
04A2C3             0601*  ; behavior routine address lookup
04A2C3 D8 A2 04    0602*      dl @init
04A2C6 EE A2 04    0603*      dl @use
04A2C9 FF A2 04    0604*      dl @hurt
04A2CC 04 A3 04    0605*      dl @kill
04A2CF 0C A3 04    0606*      dl @see
04A2D2 11 A3 04    0607*      dl @move
04A2D5 15 A3 04    0608*      dl @shoot
04A2D8             0609*  @init:
04A2D8 21 E0 A2 04 0610*      ld hl,@data ; address for LDIR to copy from
04A2DC C3 83 A0 04 0611*      jp sprite_behavior_return
04A2E0             0612*  @data:
04A2E0 64          0613*      db 100 ;sprite_health
04A2E1 00          0614*      db 000 ;sprite_triggers_mask
04A2E2 00          0615*      db 000 ;sprite_x
04A2E3 00          0616*      db 000 ;sprite_y
04A2E4 00          0617*      db 000 ;sprite_orientation
04A2E5 00          0618*      db 000 ;sprite_animation
04A2E6 00          0619*      db 000 ;sprite_anim_tmr
04A2E7 01          0620*      db 001 ;sprite_move_timer
04A2E8 00          0621*      db 000 ;sprite_move_step
04A2E9 32          0622*      db 050 ;sprite_points
04A2EA 00          0623*      db 000 ;sprite_health_modifier
04A2EB 00          0624*      db 000 ;sprite_unassigned_0
04A2EC 00          0625*      db 000 ;sprite_unassigned_1
04A2ED 00          0626*      db 000 ;sprite_unassigned_2
04A2EE             0627*  @use:
04A2EE FD E5       0628*      push iy
04A2F0 CD 06 BF 04 0629*      call sfx_play_got_treasure
04A2F4 FD E1       0630*      pop iy
04A2F6 FD 7E 0B    0631*      ld a,(iy+sprite_points)
04A2F9 CD AD B4 04 0632*      call plyr_mod_score
04A2FD 18 05       0633*      jr @kill
04A2FF             0634*  @hurt:
04A2FF AF          0635*      xor a
04A300 C3 83 A0 04 0636*      jp sprite_behavior_return
04A304             0637*  @kill:
04A304 CD AB 9F 04 0638*      call sprite_kill
04A308 C3 83 A0 04 0639*      jp sprite_behavior_return
04A30C             0640*  @see:
04A30C AF          0641*      xor a
04A30D C3 83 A0 04 0642*      jp sprite_behavior_return
04A311             0643*  @move:
04A311 C3 83 A0 04 0644*      jp sprite_behavior_return
04A315             0645*  @shoot:
04A315 C3 83 A0 04 0646*      jp sprite_behavior_return
04A319             0647*  
04A319             0648*  PLATE_OF_FOOD:
04A319             0649*  ; behavior routine address lookup
04A319 2E A3 04    0650*      dl @init
04A31C 44 A3 04    0651*      dl @use
04A31F 4D A3 04    0652*      dl @hurt
04A322 52 A3 04    0653*      dl @kill
04A325 5A A3 04    0654*      dl @see
04A328 5F A3 04    0655*      dl @move
04A32B 63 A3 04    0656*      dl @shoot
04A32E             0657*  @init:
04A32E 21 36 A3 04 0658*      ld hl,@data ; address for LDIR to copy from
04A332 C3 83 A0 04 0659*      jp sprite_behavior_return
04A336             0660*  @data:
04A336 64          0661*      db 100 ;sprite_health
04A337 00          0662*      db 000 ;sprite_triggers_mask
04A338 00          0663*      db 000 ;sprite_x
04A339 00          0664*      db 000 ;sprite_y
04A33A 00          0665*      db 000 ;sprite_orientation
04A33B 00          0666*      db 000 ;sprite_animation
04A33C 00          0667*      db 000 ;sprite_anim_tmr
04A33D 01          0668*      db 001 ;sprite_move_timer
04A33E 00          0669*      db 000 ;sprite_move_step
04A33F 00          0670*      db 000 ;sprite_points
04A340 0A          0671*      db 010 ;sprite_health_modifier
04A341 00          0672*      db 000 ;sprite_unassigned_0
04A342 00          0673*      db 000 ;sprite_unassigned_1
04A343 00          0674*      db 000 ;sprite_unassigned_2
04A344             0675*  @use:
04A344 FD 7E 0C    0676*      ld a,(iy+sprite_health_modifier)
04A347 CD 8C B4 04 0677*      call plyr_add_health
04A34B 18 05       0678*      jr @kill
04A34D             0679*  @hurt:
04A34D AF          0680*      xor a
04A34E C3 83 A0 04 0681*      jp sprite_behavior_return
04A352             0682*  @kill:
04A352 CD AB 9F 04 0683*      call sprite_kill
04A356 C3 83 A0 04 0684*      jp sprite_behavior_return
04A35A             0685*  @see:
04A35A AF          0686*      xor a
04A35B C3 83 A0 04 0687*      jp sprite_behavior_return
04A35F             0688*  @move:
04A35F C3 83 A0 04 0689*      jp sprite_behavior_return
04A363             0690*  @shoot:
04A363 C3 83 A0 04 0691*      jp sprite_behavior_return
04A367             0692*  
04A367             0693*  KEYCARD:
04A367             0694*  ; behavior routine address lookup
04A367 7C A3 04    0695*      dl @init
04A36A 92 A3 04    0696*      dl @use
04A36D A4 A3 04    0697*      dl @hurt
04A370 A9 A3 04    0698*      dl @kill
04A373 B1 A3 04    0699*      dl @see
04A376 B6 A3 04    0700*      dl @move
04A379 BA A3 04    0701*      dl @shoot
04A37C             0702*  @init:
04A37C 21 84 A3 04 0703*      ld hl,@data ; address for LDIR to copy from
04A380 C3 83 A0 04 0704*      jp sprite_behavior_return
04A384             0705*  @data:
04A384 64          0706*      db 100 ;sprite_health
04A385 00          0707*      db 000 ;sprite_triggers_mask
04A386 00          0708*      db 000 ;sprite_x
04A387 00          0709*      db 000 ;sprite_y
04A388 00          0710*      db 000 ;sprite_orientation
04A389 00          0711*      db 000 ;sprite_animation
04A38A 00          0712*      db 000 ;sprite_anim_tmr
04A38B 01          0713*      db 001 ;sprite_move_timer
04A38C 00          0714*      db 000 ;sprite_move_step
04A38D 00          0715*      db 000 ;sprite_points
04A38E 00          0716*      db 000 ;sprite_health_modifier
04A38F 00          0717*      db 000 ;sprite_unassigned_0
04A390 00          0718*      db 000 ;sprite_unassigned_1
04A391 00          0719*      db 000 ;sprite_unassigned_2
04A392             0720*  @use:
04A392 3E 08       0721*      ld a,8
04A394 CD BC B4 04 0722*      call plyr_add_ammo
04A398 CD 1E BF 04 0723*      call sfx_play_gun_reload
04A39C CD AB 9F 04 0724*      call sprite_kill
04A3A0 C3 83 A0 04 0725*      jp sprite_behavior_return
04A3A4             0726*  @hurt:
04A3A4 AF          0727*      xor a
04A3A5 C3 83 A0 04 0728*      jp sprite_behavior_return
04A3A9             0729*  @kill:
04A3A9 CD AB 9F 04 0730*      call sprite_kill
04A3AD C3 83 A0 04 0731*      jp sprite_behavior_return
04A3B1             0732*  @see:
04A3B1 AF          0733*      xor a
04A3B2 C3 83 A0 04 0734*      jp sprite_behavior_return
04A3B6             0735*  @move:
04A3B6 C3 83 A0 04 0736*      jp sprite_behavior_return
04A3BA             0737*  @shoot:
04A3BA C3 83 A0 04 0738*      jp sprite_behavior_return
04A3BE             0739*  
04A3BE             0740*  GOLD_CHEST:
04A3BE             0741*  ; behavior routine address lookup
04A3BE D3 A3 04    0742*      dl @init
04A3C1 E9 A3 04    0743*      dl @use
04A3C4 FA A3 04    0744*      dl @hurt
04A3C7 FF A3 04    0745*      dl @kill
04A3CA 07 A4 04    0746*      dl @see
04A3CD 0C A4 04    0747*      dl @move
04A3D0 10 A4 04    0748*      dl @shoot
04A3D3             0749*  @init:
04A3D3 21 DB A3 04 0750*      ld hl,@data ; address for LDIR to copy from
04A3D7 C3 83 A0 04 0751*      jp sprite_behavior_return
04A3DB             0752*  @data:
04A3DB 64          0753*      db 100 ;sprite_health
04A3DC 00          0754*      db 000 ;sprite_triggers_mask
04A3DD 00          0755*      db 000 ;sprite_x
04A3DE 00          0756*      db 000 ;sprite_y
04A3DF 00          0757*      db 000 ;sprite_orientation
04A3E0 00          0758*      db 000 ;sprite_animation
04A3E1 00          0759*      db 000 ;sprite_anim_tmr
04A3E2 01          0760*      db 001 ;sprite_move_timer
04A3E3 00          0761*      db 000 ;sprite_move_step
04A3E4 FA          0762*      db 250 ;sprite_points
04A3E5 00          0763*      db 000 ;sprite_health_modifier
04A3E6 00          0764*      db 000 ;sprite_unassigned_0
04A3E7 00          0765*      db 000 ;sprite_unassigned_1
04A3E8 00          0766*      db 000 ;sprite_unassigned_2
04A3E9             0767*  @use:
04A3E9 FD E5       0768*      push iy
04A3EB CD 06 BF 04 0769*      call sfx_play_got_treasure
04A3EF FD E1       0770*      pop iy
04A3F1 FD 7E 0B    0771*      ld a,(iy+sprite_points)
04A3F4 CD AD B4 04 0772*      call plyr_mod_score
04A3F8 18 05       0773*      jr @kill
04A3FA             0774*  @hurt:
04A3FA AF          0775*      xor a
04A3FB C3 83 A0 04 0776*      jp sprite_behavior_return
04A3FF             0777*  @kill:
04A3FF CD AB 9F 04 0778*      call sprite_kill
04A403 C3 83 A0 04 0779*      jp sprite_behavior_return
04A407             0780*  @see:
04A407 AF          0781*      xor a
04A408 C3 83 A0 04 0782*      jp sprite_behavior_return
04A40C             0783*  @move:
04A40C C3 83 A0 04 0784*      jp sprite_behavior_return
04A410             0785*  @shoot:
04A410 C3 83 A0 04 0786*      jp sprite_behavior_return
04A414             0787*  
04A414             0788*  MACHINE_GUN:
04A414             0789*  ; behavior routine address lookup
04A414 29 A4 04    0790*      dl @init
04A417 3F A4 04    0791*      dl @use
04A41A 63 A4 04    0792*      dl @hurt
04A41D 68 A4 04    0793*      dl @kill
04A420 70 A4 04    0794*      dl @see
04A423 75 A4 04    0795*      dl @move
04A426 79 A4 04    0796*      dl @shoot
04A429             0797*  @init:
04A429 21 31 A4 04 0798*      ld hl,@data ; address for LDIR to copy from
04A42D C3 83 A0 04 0799*      jp sprite_behavior_return
04A431             0800*  @data:
04A431 64          0801*      db 100 ;sprite_health
04A432 00          0802*      db 000 ;sprite_triggers_mask
04A433 00          0803*      db 000 ;sprite_x
04A434 00          0804*      db 000 ;sprite_y
04A435 00          0805*      db 000 ;sprite_orientation
04A436 00          0806*      db 000 ;sprite_animation
04A437 00          0807*      db 000 ;sprite_anim_tmr
04A438 01          0808*      db 001 ;sprite_move_timer
04A439 00          0809*      db 000 ;sprite_move_step
04A43A 00          0810*      db 000 ;sprite_points
04A43B 00          0811*      db 000 ;sprite_health_modifier
04A43C 00          0812*      db 000 ;sprite_unassigned_0
04A43D 00          0813*      db 000 ;sprite_unassigned_1
04A43E 00          0814*      db 000 ;sprite_unassigned_2
04A43F             0815*  @use:
04A43F 3E 10       0816*      ld a,16
04A441 CD BC B4 04 0817*      call plyr_add_ammo
04A445 CD 1E BF 04 0818*      call sfx_play_gun_reload
04A449 3E 04       0819*      ld a,plyr_wpn_mg
04A44B 21 E4 B2 04 0820*      ld hl,plyr_wpns
04A44F B6          0821*      or (hl)
04A450 77          0822*      ld (hl),a
04A451 3E 04       0823*      ld a,plyr_wpn_mg
04A453 32 E5 B2 04 0824*      ld (plyr_wpn_active),a
04A457 CD D3 B3 04 0825*      call plyr_set_weapon_parameters
04A45B CD AB 9F 04 0826*      call sprite_kill
04A45F C3 83 A0 04 0827*      jp sprite_behavior_return
04A463             0828*  @hurt:
04A463 AF          0829*      xor a
04A464 C3 83 A0 04 0830*      jp sprite_behavior_return
04A468             0831*  @kill:
04A468 CD AB 9F 04 0832*      call sprite_kill
04A46C C3 83 A0 04 0833*      jp sprite_behavior_return
04A470             0834*  @see:
04A470 AF          0835*      xor a
04A471 C3 83 A0 04 0836*      jp sprite_behavior_return
04A475             0837*  @move:
04A475 C3 83 A0 04 0838*      jp sprite_behavior_return
04A479             0839*  @shoot:
04A479 C3 83 A0 04 0840*      jp sprite_behavior_return
04A47D             0841*  
04A47D             0842*  GATLING_GUN:
04A47D             0843*  ; behavior routine address lookup
04A47D 92 A4 04    0844*      dl @init
04A480 A8 A4 04    0845*      dl @use
04A483 CC A4 04    0846*      dl @hurt
04A486 D1 A4 04    0847*      dl @kill
04A489 D9 A4 04    0848*      dl @see
04A48C DE A4 04    0849*      dl @move
04A48F E2 A4 04    0850*      dl @shoot
04A492             0851*  @init:
04A492 21 9A A4 04 0852*      ld hl,@data ; address for LDIR to copy from
04A496 C3 83 A0 04 0853*      jp sprite_behavior_return
04A49A             0854*  @data:
04A49A 64          0855*      db 100 ;sprite_health
04A49B 00          0856*      db 000 ;sprite_triggers_mask
04A49C 00          0857*      db 000 ;sprite_x
04A49D 00          0858*      db 000 ;sprite_y
04A49E 00          0859*      db 000 ;sprite_orientation
04A49F 00          0860*      db 000 ;sprite_animation
04A4A0 00          0861*      db 000 ;sprite_anim_tmr
04A4A1 01          0862*      db 001 ;sprite_move_timer
04A4A2 00          0863*      db 000 ;sprite_move_step
04A4A3 00          0864*      db 000 ;sprite_points
04A4A4 00          0865*      db 000 ;sprite_health_modifier
04A4A5 00          0866*      db 000 ;sprite_unassigned_0
04A4A6 00          0867*      db 000 ;sprite_unassigned_1
04A4A7 00          0868*      db 000 ;sprite_unassigned_2
04A4A8             0869*  @use:
04A4A8 3E 20       0870*      ld a,32
04A4AA CD BC B4 04 0871*      call plyr_add_ammo
04A4AE CD 1E BF 04 0872*      call sfx_play_gun_reload
04A4B2 3E 08       0873*      ld a,plyr_wpn_gg
04A4B4 21 E4 B2 04 0874*      ld hl,plyr_wpns
04A4B8 B6          0875*      or (hl)
04A4B9 77          0876*      ld (hl),a
04A4BA 3E 08       0877*      ld a,plyr_wpn_gg
04A4BC 32 E5 B2 04 0878*      ld (plyr_wpn_active),a
04A4C0 CD D3 B3 04 0879*      call plyr_set_weapon_parameters
04A4C4 CD AB 9F 04 0880*      call sprite_kill
04A4C8 C3 83 A0 04 0881*      jp sprite_behavior_return
04A4CC             0882*  @hurt:
04A4CC AF          0883*      xor a
04A4CD C3 83 A0 04 0884*      jp sprite_behavior_return
04A4D1             0885*  @kill:
04A4D1 CD AB 9F 04 0886*      call sprite_kill
04A4D5 C3 83 A0 04 0887*      jp sprite_behavior_return
04A4D9             0888*  @see:
04A4D9 AF          0889*      xor a
04A4DA C3 83 A0 04 0890*      jp sprite_behavior_return
04A4DE             0891*  @move:
04A4DE C3 83 A0 04 0892*      jp sprite_behavior_return
04A4E2             0893*  @shoot:
04A4E2 C3 83 A0 04 0894*      jp sprite_behavior_return
04A4E6             0895*  
04A4E6             0896*  DOG_FOOD:
04A4E6             0897*  ; behavior routine address lookup
04A4E6 FB A4 04    0898*      dl @init
04A4E9 11 A5 04    0899*      dl @use
04A4EC 1A A5 04    0900*      dl @hurt
04A4EF 1F A5 04    0901*      dl @kill
04A4F2 27 A5 04    0902*      dl @see
04A4F5 2C A5 04    0903*      dl @move
04A4F8 30 A5 04    0904*      dl @shoot
04A4FB             0905*  @init:
04A4FB 21 03 A5 04 0906*      ld hl,@data ; address for LDIR to copy from
04A4FF C3 83 A0 04 0907*      jp sprite_behavior_return
04A503             0908*  @data:
04A503 64          0909*      db 100 ;sprite_health
04A504 00          0910*      db 000 ;sprite_triggers_mask
04A505 00          0911*      db 000 ;sprite_x
04A506 00          0912*      db 000 ;sprite_y
04A507 00          0913*      db 000 ;sprite_orientation
04A508 00          0914*      db 000 ;sprite_animation
04A509 00          0915*      db 000 ;sprite_anim_tmr
04A50A 01          0916*      db 001 ;sprite_move_timer
04A50B 00          0917*      db 000 ;sprite_move_step
04A50C 00          0918*      db 000 ;sprite_points
04A50D 05          0919*      db 005 ;sprite_health_modifier
04A50E 00          0920*      db 000 ;sprite_unassigned_0
04A50F 00          0921*      db 000 ;sprite_unassigned_1
04A510 00          0922*      db 000 ;sprite_unassigned_2
04A511             0923*  @use:
04A511 FD 7E 0C    0924*      ld a,(iy+sprite_health_modifier)
04A514 CD 8C B4 04 0925*      call plyr_add_health
04A518 18 05       0926*      jr @kill
04A51A             0927*  @hurt:
04A51A AF          0928*      xor a
04A51B C3 83 A0 04 0929*      jp sprite_behavior_return
04A51F             0930*  @kill:
04A51F CD AB 9F 04 0931*      call sprite_kill
04A523 C3 83 A0 04 0932*      jp sprite_behavior_return
04A527             0933*  @see:
04A527 AF          0934*      xor a
04A528 C3 83 A0 04 0935*      jp sprite_behavior_return
04A52C             0936*  @move:
04A52C C3 83 A0 04 0937*      jp sprite_behavior_return
04A530             0938*  @shoot:
04A530 C3 83 A0 04 0939*      jp sprite_behavior_return
04A534             0940*  
04A534             0941*  GOLD_KEY:
04A534             0942*  ; behavior routine address lookup
04A534 49 A5 04    0943*      dl @init
04A537 5F A5 04    0944*      dl @use
04A53A 63 A5 04    0945*      dl @hurt
04A53D 68 A5 04    0946*      dl @kill
04A540 70 A5 04    0947*      dl @see
04A543 75 A5 04    0948*      dl @move
04A546 79 A5 04    0949*      dl @shoot
04A549             0950*  @init:
04A549 21 51 A5 04 0951*      ld hl,@data ; address for LDIR to copy from
04A54D C3 83 A0 04 0952*      jp sprite_behavior_return
04A551             0953*  @data:
04A551 64          0954*      db 100 ;sprite_health
04A552 00          0955*      db 000 ;sprite_triggers_mask
04A553 00          0956*      db 000 ;sprite_x
04A554 00          0957*      db 000 ;sprite_y
04A555 00          0958*      db 000 ;sprite_orientation
04A556 00          0959*      db 000 ;sprite_animation
04A557 00          0960*      db 000 ;sprite_anim_tmr
04A558 01          0961*      db 001 ;sprite_move_timer
04A559 00          0962*      db 000 ;sprite_move_step
04A55A 00          0963*      db 000 ;sprite_points
04A55B 00          0964*      db 000 ;sprite_health_modifier
04A55C 00          0965*      db 000 ;sprite_unassigned_0
04A55D 00          0966*      db 000 ;sprite_unassigned_1
04A55E 00          0967*      db 000 ;sprite_unassigned_2
04A55F             0968*  @use:
04A55F C3 83 A0 04 0969*      jp sprite_behavior_return
04A563             0970*  @hurt:
04A563 AF          0971*      xor a
04A564 C3 83 A0 04 0972*      jp sprite_behavior_return
04A568             0973*  @kill:
04A568 CD AB 9F 04 0974*      call sprite_kill
04A56C C3 83 A0 04 0975*      jp sprite_behavior_return
04A570             0976*  @see:
04A570 AF          0977*      xor a
04A571 C3 83 A0 04 0978*      jp sprite_behavior_return
04A575             0979*  @move:
04A575 C3 83 A0 04 0980*      jp sprite_behavior_return
04A579             0981*  @shoot:
04A579 C3 83 A0 04 0982*      jp sprite_behavior_return
04A57D             0983*  
04A57D             0984*  DOG:
04A57D             0985*  ; behavior routine address lookup
04A57D 92 A5 04    0986*      dl @init
04A580 A8 A5 04    0987*      dl @use
04A583 BB A5 04    0988*      dl @hurt
04A586 DF A5 04    0989*      dl @kill
04A589 F6 A5 04    0990*      dl @see
04A58C FE A5 04    0991*      dl @move
04A58F 1A A6 04    0992*      dl @shoot
04A592             0993*  @init:
04A592 21 9A A5 04 0994*      ld hl,@data ; address for LDIR to copy from
04A596 C3 83 A0 04 0995*      jp sprite_behavior_return
04A59A             0996*  @data:
04A59A 32          0997*      db 050 ;sprite_health
04A59B 00          0998*      db 000 ;sprite_triggers_mask
04A59C 00          0999*      db 000 ;sprite_x
04A59D 00          1000*      db 000 ;sprite_y
04A59E 00          1001*      db 000 ;sprite_orientation
04A59F 00          1002*      db 000 ;sprite_animation
04A5A0 00          1003*      db 000 ;sprite_anim_tmr
04A5A1 01          1004*      db 001 ;sprite_move_timer
04A5A2 00          1005*      db 000 ;sprite_move_step
04A5A3 0A          1006*      db 010 ;sprite_points
04A5A4 F6          1007*      db -10 ;sprite_health_modifier
04A5A5 00          1008*      db 000 ;sprite_unassigned_0
04A5A6 00          1009*      db 000 ;sprite_unassigned_1
04A5A7 00          1010*      db 000 ;sprite_unassigned_2
04A5A8             1011*  @use:
04A5A8 FD E5       1012*      push iy
04A5AA CD E2 BE 04 1013*      call sfx_play_dog_woof_single
04A5AE FD E1       1014*      pop iy
04A5B0 FD 7E 0C    1015*      ld a,(iy+sprite_health_modifier)
04A5B3 CD 99 B4 04 1016*      call plyr_sub_health
04A5B7 C3 83 A0 04 1017*      jp sprite_behavior_return
04A5BB             1018*  @hurt:
04A5BB CD BB B7 04 1019*      call rand_8
04A5BF E6 01       1020*      and %00000001
04A5C1 20 08       1021*      jr nz,@nosound
04A5C3 FD E5       1022*      push iy
04A5C5 CD EE BE 04 1023*      call sfx_play_dog_yelp
04A5C9 FD E1       1024*      pop iy
04A5CB             1025*  @nosound:
04A5CB 3E FF       1026*      ld a,255 ; kill player's shot
04A5CD 32 DF B2 04 1027*      ld (plyr_shot_status),a
04A5D1 3A E3 B2 04 1028*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A5D5 FD 86 02    1029*      add a,(iy+sprite_health)
04A5D8 FD 77 02    1030*      ld (iy+sprite_health),a
04A5DB             1031*      ; jp p,sprite_behavior_return ; if health is positive, return
04A5DB F2 05 A6 04 1032*      jp p,@do_move
04A5DF             1033*      ; otherwise fall through to kill sprite
04A5DF             1034*  @kill:
04A5DF FD E5       1035*      push iy
04A5E1 CD EE BE 04 1036*      call sfx_play_dog_yelp
04A5E5 FD E1       1037*      pop iy
04A5E7 FD 7E 0B    1038*      ld a,(iy+sprite_points)
04A5EA CD AD B4 04 1039*      call plyr_mod_score
04A5EE CD AB 9F 04 1040*      call sprite_kill
04A5F2 C3 83 A0 04 1041*      jp sprite_behavior_return
04A5F6             1042*  @see:
04A5F6 18 06       1043*      jr @move
04A5F8             1044*  @seen:
04A5F8 AF          1045*      xor a
04A5F9 3C          1046*      inc a
04A5FA C3 83 A0 04 1047*      jp sprite_behavior_return
04A5FE             1048*  @move:
04A5FE FD 35 09    1049*      dec (iy+sprite_move_timer)
04A601 28 02       1050*      jr z,@do_move
04A603 18 F3       1051*      jr @seen
04A605             1052*  @do_move:
04A605 CD BB B7 04 1053*      call rand_8
04A609 E6 3F       1054*      and %00111111 ; between 0 and 63
04A60B             1055*      ; or %00100000  ; at least 32
04A60B F6 10       1056*      or %00010000  ; at least 16
04A60D FD 77 09    1057*      ld (iy+sprite_move_timer),a
04A610 CD FD 9F 04 1058*      call sprite_move_random
04A614 CD D6 BE 04 1059*      call sfx_play_dog_woof_double
04A618 18 DE       1060*      jr @seen
04A61A             1061*  @shoot:
04A61A C3 83 A0 04 1062*      jp sprite_behavior_return
04A61E             1063*  
04A61E             1064*  GERMAN_TROOPER:
04A61E             1065*  ; behavior routine address lookup
04A61E 33 A6 04    1066*      dl @init
04A621 49 A6 04    1067*      dl @use
04A624 5B A6 04    1068*      dl @hurt
04A627 7F A6 04    1069*      dl @kill
04A62A 96 A6 04    1070*      dl @see
04A62D B5 A6 04    1071*      dl @move
04A630 CD A6 04    1072*      dl @shoot
04A633             1073*  @init:
04A633 21 3B A6 04 1074*      ld hl,@data ; address for LDIR to copy from
04A637 C3 83 A0 04 1075*      jp sprite_behavior_return
04A63B             1076*  @data:
04A63B 4B          1077*      db 075 ;sprite_health
04A63C 00          1078*      db 000 ;sprite_triggers_mask
04A63D 00          1079*      db 000 ;sprite_x
04A63E 00          1080*      db 000 ;sprite_y
04A63F 00          1081*      db 000 ;sprite_orientation
04A640 00          1082*      db 000 ;sprite_animation
04A641 00          1083*      db 000 ;sprite_anim_tmr
04A642 01          1084*      db 001 ;sprite_move_timer
04A643 00          1085*      db 000 ;sprite_move_step
04A644 14          1086*      db 020 ;sprite_points
04A645 EC          1087*      db -20 ;sprite_health_modifier
04A646 00          1088*      db 000 ;sprite_unassigned_0
04A647 00          1089*      db 000 ;sprite_unassigned_1
04A648 00          1090*      db 000 ;sprite_unassigned_2
04A649             1091*  @use:
04A649 FD E5       1092*      push iy
04A64B CD 9A BE 04 1093*      call sfx_play_achtung
04A64F FD E1       1094*      pop iy
04A651 3E FB       1095*      ld a,-5
04A653 CD 99 B4 04 1096*      call plyr_sub_health
04A657 C3 83 A0 04 1097*      jp sprite_behavior_return
04A65B             1098*  @hurt:
04A65B CD BB B7 04 1099*      call rand_8
04A65F E6 01       1100*      and %00000001
04A661 20 08       1101*      jr nz,@nosound
04A663 FD E5       1102*      push iy
04A665 CD C2 AD 04 1103*      call sfx_play_random_hurt
04A669 FD E1       1104*      pop iy
04A66B             1105*  @nosound:
04A66B 3E FF       1106*      ld a,255 ; kill player's shot
04A66D 32 DF B2 04 1107*      ld (plyr_shot_status),a
04A671 3A E3 B2 04 1108*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A675 FD 86 02    1109*      add a,(iy+sprite_health)
04A678 FD 77 02    1110*      ld (iy+sprite_health),a
04A67B             1111*      ; jp p,sprite_behavior_return ; if health is positive, return
04A67B F2 BC A6 04 1112*      jp p,@do_move
04A67F             1113*      ; otherwise fall through to kill sprite
04A67F             1114*  @kill:
04A67F FD E5       1115*      push iy
04A681 CD 96 BF 04 1116*      call sfx_play_wilhelm
04A685 FD E1       1117*      pop iy
04A687 FD 7E 0B    1118*      ld a,(iy+sprite_points)
04A68A CD AD B4 04 1119*      call plyr_mod_score
04A68E CD AB 9F 04 1120*      call sprite_kill
04A692 C3 83 A0 04 1121*      jp sprite_behavior_return
04A696             1122*  @see:
04A696 FD 7E 03    1123*      ld a,(iy+sprite_triggers_mask)
04A699 E6 01       1124*      and sprite_trigger_see
04A69B C2 B5 A6 04 1125*      jp nz,@move
04A69F 3E 01       1126*      ld a,sprite_trigger_see
04A6A1 FD B6 03    1127*      or a,(iy+sprite_triggers_mask)
04A6A4 FD 77 03    1128*      ld (iy+sprite_triggers_mask),a
04A6A7 FD E5       1129*      push iy
04A6A9 CD 9A BE 04 1130*      call sfx_play_achtung
04A6AD FD E1       1131*      pop iy
04A6AF             1132*  @seen:
04A6AF AF          1133*      xor a
04A6B0 3C          1134*      inc a
04A6B1 C3 83 A0 04 1135*      jp sprite_behavior_return
04A6B5             1136*  @move:
04A6B5 FD 35 09    1137*      dec (iy+sprite_move_timer)
04A6B8 28 02       1138*      jr z,@do_move
04A6BA 18 F3       1139*      jr @seen
04A6BC             1140*  @do_move:
04A6BC CD BB B7 04 1141*      call rand_8
04A6C0 E6 3F       1142*      and %00111111 ; between 0 and 63
04A6C2             1143*      ; or %00100000  ; at least 32
04A6C2 F6 10       1144*      or %00010000  ; at least 16
04A6C4 FD 77 09    1145*      ld (iy+sprite_move_timer),a
04A6C7 CD FD 9F 04 1146*      call sprite_move_random
04A6CB 18 E2       1147*      jr @seen
04A6CD             1148*  @shoot:
04A6CD C3 83 A0 04 1149*      jp sprite_behavior_return
04A6D1             1150*  
04A6D1             1151*  SS_GUARD:
04A6D1             1152*  ; behavior routine address lookup
04A6D1 E6 A6 04    1153*      dl @init
04A6D4 FC A6 04    1154*      dl @use
04A6D7 0E A7 04    1155*      dl @hurt
04A6DA 32 A7 04    1156*      dl @kill
04A6DD 49 A7 04    1157*      dl @see
04A6E0 68 A7 04    1158*      dl @move
04A6E3 80 A7 04    1159*      dl @shoot
04A6E6             1160*  @init:
04A6E6 21 EE A6 04 1161*      ld hl,@data ; address for LDIR to copy from
04A6EA C3 83 A0 04 1162*      jp sprite_behavior_return
04A6EE             1163*  @data:
04A6EE 64          1164*      db 100 ;sprite_health
04A6EF 00          1165*      db 000 ;sprite_triggers_mask
04A6F0 00          1166*      db 000 ;sprite_x
04A6F1 00          1167*      db 000 ;sprite_y
04A6F2 00          1168*      db 000 ;sprite_orientation
04A6F3 00          1169*      db 000 ;sprite_animation
04A6F4 00          1170*      db 000 ;sprite_anim_tmr
04A6F5 01          1171*      db 001 ;sprite_move_timer
04A6F6 00          1172*      db 000 ;sprite_move_step
04A6F7 1E          1173*      db 030 ;sprite_points
04A6F8 E2          1174*      db -30 ;sprite_health_modifier
04A6F9 00          1175*      db 000 ;sprite_unassigned_0
04A6FA 00          1176*      db 000 ;sprite_unassigned_1
04A6FB 00          1177*      db 000 ;sprite_unassigned_2
04A6FC             1178*  @use:
04A6FC FD E5       1179*      push iy
04A6FE CD 4E BF 04 1180*      call sfx_play_schusstaffel
04A702 FD E1       1181*      pop iy
04A704 3E F6       1182*      ld a,-10
04A706 CD 99 B4 04 1183*      call plyr_sub_health
04A70A C3 83 A0 04 1184*      jp sprite_behavior_return
04A70E             1185*  @hurt:
04A70E CD BB B7 04 1186*      call rand_8
04A712 E6 01       1187*      and %00000001
04A714 20 08       1188*      jr nz,@nosound
04A716 FD E5       1189*      push iy
04A718 CD C2 AD 04 1190*      call sfx_play_random_hurt
04A71C FD E1       1191*      pop iy
04A71E             1192*  @nosound:
04A71E 3E FF       1193*      ld a,255 ; kill player's shot
04A720 32 DF B2 04 1194*      ld (plyr_shot_status),a
04A724 3A E3 B2 04 1195*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A728 FD 86 02    1196*      add a,(iy+sprite_health)
04A72B FD 77 02    1197*      ld (iy+sprite_health),a
04A72E             1198*      ; jp p,sprite_behavior_return ; if health is positive, return
04A72E F2 6F A7 04 1199*      jp p,@do_move
04A732             1200*      ; otherwise fall through to kill sprite
04A732             1201*  @kill:
04A732 FD E5       1202*      push iy
04A734 CD 36 BF 04 1203*      call sfx_play_mein_leben
04A738 FD E1       1204*      pop iy
04A73A FD 7E 0B    1205*      ld a,(iy+sprite_points)
04A73D CD AD B4 04 1206*      call plyr_mod_score
04A741 CD AB 9F 04 1207*      call sprite_kill
04A745 C3 83 A0 04 1208*      jp sprite_behavior_return
04A749             1209*  @see:
04A749 FD 7E 03    1210*      ld a,(iy+sprite_triggers_mask)
04A74C E6 01       1211*      and sprite_trigger_see
04A74E C2 68 A7 04 1212*      jp nz,@move
04A752 3E 01       1213*      ld a,sprite_trigger_see
04A754 FD B6 03    1214*      or a,(iy+sprite_triggers_mask)
04A757 FD 77 03    1215*      ld (iy+sprite_triggers_mask),a
04A75A FD E5       1216*      push iy
04A75C CD 4E BF 04 1217*      call sfx_play_schusstaffel
04A760 FD E1       1218*      pop iy
04A762             1219*  @seen:
04A762 AF          1220*      xor a
04A763 3C          1221*      inc a
04A764 C3 83 A0 04 1222*      jp sprite_behavior_return
04A768             1223*  @move:
04A768 FD 35 09    1224*      dec (iy+sprite_move_timer)
04A76B 28 02       1225*      jr z,@do_move
04A76D 18 F3       1226*      jr @seen
04A76F             1227*  @do_move:
04A76F CD BB B7 04 1228*      call rand_8
04A773 E6 3F       1229*      and %00111111 ; between 0 and 63
04A775             1230*      ; or %00100000  ; at least 32
04A775 F6 10       1231*      or %00010000  ; at least 16
04A777 FD 77 09    1232*      ld (iy+sprite_move_timer),a
04A77A CD FD 9F 04 1233*      call sprite_move_random
04A77E 18 E2       1234*      jr @seen
04A780             1235*  @shoot:
04A780 C3 83 A0 04 1236*      jp sprite_behavior_return
04A784             1237*  
04A784 00          1238*  see_orientation: db 0x00
04A785             1239*  ; cycle through all cells visible to the player from the current position
04A785             1240*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04A785             1241*  ; inputs: cur_x, cur_y,
04A785             1242*  ; outputs: player-aware enemies
04A785             1243*  ; destroys: everything
04A785             1244*  sprites_see_plyr:
04A785             1245*  ; ; DEBUG: set up loop timer
04A785             1246*  ;     call prt_loop_reset
04A785             1247*  ; ; END DEBUG
04A785             1248*  ; ; DEBUG: start loop timer
04A785             1249*  ;     call prt_loop_start
04A785             1250*  ; ; END DEBUG
04A785             1251*  
04A785             1252*  ; intialize orientation
04A785 AF          1253*      xor a
04A786 32 84 A7 04 1254*      ld (see_orientation),a
04A78A             1255*  @loop_orientation:
04A78A             1256*  ; get current map position and camera orientation
04A78A ED 5B CF B2 1257*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04A78F             1258*      ; 0-1 prt ticks, 4 loops
04A78F CD A3 65 04 1259*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04A793             1260*  ; get cell_views address for this cell and orientation
04A793 3A 84 A7 04 1261*      ld a,(see_orientation)
04A797 5F          1262*      ld e,a
04A798 16 06       1263*      ld d,6 ; 6 bytes per orientation
04A79A ED 5C       1264*      mlt de ; de = orientation offset
04A79C EB          1265*      ex de,hl ; hl = orientation offset
04A79D 06 18       1266*      ld b,24 ; 24 bytes per cell in cell_views lut
04A79F ED 4C       1267*      mlt bc ; bc = offset from base address of cell_views lut
04A7A1 09          1268*      add hl,bc ; hl = total offset from cell_views base address
04A7A2 EB          1269*      ex de,hl ; because we can't add iy to hl
04A7A3 FD 21 00 E4 1270*      ld iy,cell_views ; base address of cell_views lut
       B7          
04A7A8 FD 19       1271*      add iy,de ; iy = cell_views address
04A7AA FD 22 2F 67 1272*      ld (cur_cell_views),iy
       04          
04A7AF             1273*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04A7AF 01 00 46 28 1274*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04A7B3 AF          1275*      xor a ; poly_id
04A7B4 32 2B 67 04 1276*      ld (to_poly_id),a
04A7B8             1277*  @loop:
04A7B8 ED 43 C4 A7 1278*      ld (@bit_iy+2),bc
       04          
04A7BD FD 2A 2F 67 1279*      ld iy,(cur_cell_views)
       04          
04A7C2             1280*  @bit_iy:
04A7C2 FD CB 00 46 1281*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04A7C6 28 2E       1282*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04A7C8             1283*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04A7C8 3A 2B 67 04 1284*      ld a,(to_poly_id)
04A7CC 4F          1285*      ld c,a ; poly_id
04A7CD 3A 84 A7 04 1286*      ld a,(see_orientation)
04A7D1 CD 5C 69 04 1287*      call get_polys_deltas ; d,e = y,x deltas
04A7D5 3A CF B2 04 1288*      ld a,(cur_x)
04A7D9 83          1289*      add a,e
04A7DA 5F          1290*      ld e,a
04A7DB 3A D0 B2 04 1291*      ld a,(cur_y)
04A7DF 82          1292*      add a,d
04A7E0 57          1293*      ld d,a
04A7E1 CD A3 65 04 1294*      call get_cell_from_coords
04A7E5 DD 7E 03    1295*      ld a,(ix+map_sprite_id)
04A7E8 FE FF       1296*      cp 0xFF ; no sprite
04A7EA 28 0A       1297*      jr z,@next_poly
04A7EC CD 99 9F 04 1298*      call sprite_set_pointer
04A7F0 3E 04       1299*      ld a,sp_see
04A7F2 CD 67 A0 04 1300*      call do_sprite_behavior
04A7F6             1301*  @next_poly:
04A7F6 ED 4B C4 A7 1302*      ld bc,(@bit_iy+2)
       04          
04A7FB 3A 2B 67 04 1303*      ld a,(to_poly_id)
04A7FF 3C          1304*      inc a ; a is next poly_id
04A800 32 2B 67 04 1305*      ld (to_poly_id),a
04A804 FE 2D       1306*      cp num_polys
04A806 28 0D       1307*      jr z,@next_orientation
04A808 3E 08       1308*      ld a,8
04A80A 80          1309*      add a,b
04A80B 47          1310*      ld b,a ; bit tested codes to 0x46 + b/8
04A80C FE 86       1311*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04A80E 20 A8       1312*      jr nz,@loop
04A810 06 46       1313*      ld b,0x46
04A812 0C          1314*      inc c ; iy address offset
04A813 18 A3       1315*      jr @loop
04A815             1316*  @next_orientation:
04A815 3A 84 A7 04 1317*      ld a,(see_orientation)
04A819 3C          1318*      inc a
04A81A E6 03       1319*      and 3 ; modulo 4
04A81C 32 84 A7 04 1320*      ld (see_orientation),a
04A820 C2 8A A7 04 1321*      jp nz,@loop_orientation
04A824             1322*  
04A824             1323*  ; full loop 1-2 prt ticks
04A824             1324*  ; ; DEBUG: stop loop timer
04A824             1325*  ;     call prt_loop_stop
04A824             1326*  ; ; END DEBUG
04A824 C9          1327*      ret
04A825             0025   	include "src/asm/vdu.asm"
04A825             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04A825             0002*  ; VDU 0: Null (no operation)
04A825             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A825             0004*  ; VDU 2: Enable “printer” §§
04A825             0005*  ; VDU 3: Disable “printer” §§
04A825             0006*  ; VDU 4: Write text at text cursor
04A825             0007*  ; VDU 5: Write text at graphics cursor
04A825             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A825             0009*  ; VDU 7: Make a short beep (BEL)
04A825             0010*  ; VDU 8: Move cursor back one character
04A825             0011*  ; VDU 9: Move cursor forward one character
04A825             0012*  ; VDU 10: Move cursor down one line
04A825             0013*  ; VDU 11: Move cursor up one line
04A825             0014*  ; VDU 12: Clear text area (CLS)
04A825             0015*  ; VDU 13: Carriage return
04A825             0016*  ; VDU 14: Page mode On *
04A825             0017*  ; VDU 15: Page mode Off *
04A825             0018*  ; VDU 16: Clear graphics area (CLG)
04A825             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04A825             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04A825             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A825             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A825             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04A825             0024*  ; VDU 22, n: Select screen mode (MODE n)
04A825             0025*  ; VDU 23, n: Re-program display character / System Commands
04A825             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04A825             0027*  ; VDU 25, mode, x; y;: PLOT command
04A825             0028*  ; VDU 26: Reset graphics and text viewports **
04A825             0029*  ; VDU 27, char: Output character to screen §
04A825             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A825             0031*  ; VDU 29, x; y;: Set graphics origin
04A825             0032*  ; VDU 30: Home cursor
04A825             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A825             0034*  ; VDU 127: Backspace
04A825             0035*  
04A825             0036*  ; VDU 0: Null (no operation)
04A825             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04A825             0038*  ;     This may be useful for padding out a VDU command sequence,
04A825             0039*  ;     or for inserting a placeholder for a command that will be added later.
04A825             0040*  ; inputs: none
04A825             0041*  ; outputs: an empty byte somewhere in VDU
04A825             0042*  ; destroys: a
04A825             0043*  vdu_null:
04A825 AF          0044*      xor a
04A826 5B D7       0045*  	rst.lil $10
04A828 C9          0046*  	ret
04A829             0047*  
04A829             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A829             0049*  ;     Ensures that the next character received by the VDP is sent through to
04A829             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04A829             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04A829             0052*  ;     intended to be displayed on the screen. It allows characters that would
04A829             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04A829             0054*  ;     If the “printer” has not been enabled then this command will just discard
04A829             0055*  ;     the next byte sent to the VDP.
04A829             0056*  ; inputs: a is the ascii code of the character to send
04A829             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04A829             0058*  ; outputs: a character on the serial terminal connected to the USB port
04A829             0059*  ;           and the same character on the screen at the current text cursor location
04A829             0060*  ; QUESTION: does it also advance the text cursor?
04A829             0061*  ; destroys: hl, bc
04A829             0062*  vdu_char_to_printer:
04A829 32 39 A8 04 0063*  	ld (@arg),a
04A82D 21 38 A8 04 0064*  	ld hl,@cmd
04A831 01 02 00 00 0065*  	ld bc,@end-@cmd
04A835 5B DF       0066*  	rst.lil $18
04A837 C9          0067*  	ret
04A838 01          0068*  @cmd: db 1
04A839 00          0069*  @arg: db 0
04A83A             0070*  @end:
04A83A             0071*  
04A83A             0072*  ; VDU 2: Enable “printer” §§
04A83A             0073*  ;     Enables the “printer”.
04A83A             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04A83A             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04A83A             0076*  ;     this port is used for power, but it can also be used to send and
04A83A             0077*  ;     receive data to and from the VDP.
04A83A             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04A83A             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04A83A             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04A83A             0081*  ;     use the VDU 1 command.
04A83A             0082*  ;     The VDP will not send through other control codes to the printer,
04A83A             0083*  ;     and will will not send through data it receives as part of other commands.
04A83A             0084*  vdu_enable_printer:
04A83A 3E 02       0085*      ld a,2
04A83C 5B D7       0086*  	rst.lil $10
04A83E C9          0087*  	ret
04A83F             0088*  
04A83F             0089*  ; VDU 3: Disable “printer” §§
04A83F             0090*  ; inputs: none
04A83F             0091*  ; outputs: a USB port bereft of communication with the VDP
04A83F             0092*  ; destroys: a
04A83F             0093*  vdu_disable_printer:
04A83F 3E 03       0094*      ld a,3
04A841 5B D7       0095*  	rst.lil $10
04A843 C9          0096*  	ret
04A844             0097*  
04A844             0098*  ; VDU 4: Write text at text cursor
04A844             0099*  ;     This causes text to be written at the current text cursor position.
04A844             0100*  ;     This is the default mode for text display.
04A844             0101*  ;     Text is written using the current text foreground and background colours.
04A844             0102*  ; inputs: a is the character to write to the screen
04A844             0103*  ; prerequisites: the text cursor at the intended position on screen
04A844             0104*  ; outputs: prints the character and moves text cursor right one position
04A844             0105*  ; destroys: a, hl, bc
04A844             0106*  vdu_char_to_text_cursor:
04A844 32 54 A8 04 0107*  	ld (@arg),a
04A848 21 53 A8 04 0108*  	ld hl,@cmd
04A84C 01 02 00 00 0109*  	ld bc,@end-@cmd
04A850 5B DF       0110*  	rst.lil $18
04A852 C9          0111*  	ret
04A853 04          0112*  @cmd: db 4
04A854 00          0113*  @arg: db 0
04A855             0114*  @end:
04A855             0115*  
04A855             0116*  ; VDU 5: Write text at graphics cursor
04A855             0117*  ;     This causes text to be written at the current graphics cursor position.
04A855             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04A855             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04A855             0120*  ;     or for positioning text at a specific location on the screen.
04A855             0121*  ;     Characters are plotted using the current graphics foreground colour,
04A855             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04A855             0123*  ;     The character background is transparent, and will not overwrite any
04A855             0124*  ;     graphics that are already present at the character’s location.
04A855             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04A855             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04A855             0127*  ;     graphics background colour.
04A855             0128*  ; inputs: a is the character to write to the screen
04A855             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04A855             0130*  ; outputs: see the name of the function
04A855             0131*  ; destroys: a, hl, bc
04A855             0132*  vdu_char_to_gfx_cursor:
04A855 32 65 A8 04 0133*  	ld (@arg),a
04A859 21 64 A8 04 0134*  	ld hl,@cmd
04A85D 01 02 00 00 0135*  	ld bc,@end-@cmd
04A861 5B DF       0136*  	rst.lil $18
04A863 C9          0137*  	ret
04A864 05          0138*  @cmd: db 5
04A865 00          0139*  @arg: db 0
04A866             0140*  @end:
04A866             0141*  
04A866             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A866             0143*  ;     This enables the screen, and re-enables VDU command processing,
04A866             0144*  ;     reversing the effect of VDU 21.
04A866             0145*  ; inputs: none
04A866             0146*  ; outputs: a functioning screen and VDU
04A866             0147*  ; destroys: a
04A866             0148*  vdu_enable_screen:
04A866 3E 06       0149*      ld a,6
04A868 5B D7       0150*  	rst.lil $10
04A86A C9          0151*  	ret
04A86B             0152*  
04A86B             0153*  ; PASSES
04A86B             0154*  ; VDU 7: Make a short beep (BEL)
04A86B             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04A86B             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04A86B             0157*  ; inputs: none
04A86B             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04A86B             0159*  ; destroys: a
04A86B             0160*  vdu_beep:
04A86B 3E 07       0161*      ld a,7
04A86D 5B D7       0162*  	rst.lil $10
04A86F C9          0163*  	ret
04A870             0164*  
04A870             0165*  ; VDU 8: Move cursor back one character
04A870             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04A870             0167*  ;     By default, when at the start of a line it will move to the end of
04A870             0168*  ;     the previous line (as defined by the current text viewport).
04A870             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04A870             0170*  ;     The cursor remains constrained to the current text viewport.
04A870             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04A870             0172*  ;     The cursor is just moved left by one character width.
04A870             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04A870             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04A870             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04A870             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04A870             0177*  vdu_cursor_back:
04A870 3E 08       0178*      ld a,8
04A872 5B D7       0179*  	rst.lil $10
04A874 C9          0180*  	ret
04A875             0181*  
04A875             0182*  ; VDU 9: Move cursor forward one character
04A875             0183*  vdu_cursor_forward:
04A875 3E 09       0184*      ld a,9
04A877 5B D7       0185*  	rst.lil $10
04A879 C9          0186*  	ret
04A87A             0187*  
04A87A             0188*  ; VDU 10: Move cursor down one line
04A87A             0189*  vdu_cursor_down:
04A87A 3E 0A       0190*      ld a,10
04A87C 5B D7       0191*  	rst.lil $10
04A87E C9          0192*  	ret
04A87F             0193*  
04A87F             0194*  ; VDU 11: Move cursor up one line
04A87F             0195*  vdu_cursor_up:
04A87F 3E 0B       0196*      ld a,11
04A881 5B D7       0197*  	rst.lil $10
04A883 C9          0198*  	ret
04A884             0199*  
04A884             0200*  ; VDU 12: Clear text area (CLS)
04A884             0201*  vdu_cls:
04A884 3E 0C       0202*      ld a,12
04A886 5B D7       0203*  	rst.lil $10
04A888 C9          0204*  	ret
04A889             0205*  
04A889             0206*  ; VDU 13: Carriage return
04A889             0207*  vdu_cr:
04A889 3E 0D       0208*      ld a,13
04A88B 5B D7       0209*  	rst.lil $10
04A88D C9          0210*  	ret
04A88E             0211*  
04A88E             0212*  ; VDU 14: Page mode On *
04A88E             0213*  vdu_page_on:
04A88E 3E 0E       0214*      ld a,14
04A890 5B D7       0215*  	rst.lil $10
04A892 C9          0216*  	ret
04A893             0217*  
04A893             0218*  ; VDU 15: Page mode Off *
04A893             0219*  vdu_page_off:
04A893 3E 0F       0220*      ld a,15
04A895 5B D7       0221*  	rst.lil $10
04A897 C9          0222*  	ret
04A898             0223*  
04A898             0224*  ; VDU 16: Clear graphics area (CLG)
04A898             0225*  vdu_clg:
04A898 3E 10       0226*      ld a,16
04A89A 5B D7       0227*  	rst.lil $10
04A89C C9          0228*  	ret
04A89D             0229*  
04A89D             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04A89D             0231*  vdu_colour_text:
04A89D 32 AD A8 04 0232*  	ld (@arg),a
04A8A1 21 AC A8 04 0233*  	ld hl,@cmd
04A8A5 01 02 00 00 0234*  	ld bc,@end-@cmd
04A8A9 5B DF       0235*  	rst.lil $18
04A8AB C9          0236*  	ret
04A8AC 11          0237*  @cmd: db 17
04A8AD 00          0238*  @arg: db 0
04A8AE             0239*  @end:
04A8AE             0240*  
04A8AE             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04A8AE             0242*  ; inputs: a is the plotting mode, c is the colour
04A8AE             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04A8AE             0244*  vdu_gcol_fg:
04A8AE             0245*  ; This command will set both the current graphics colour,
04A8AE             0246*  ; and the current graphics plotting mode.
04A8AE             0247*  ; As with VDU 17 the colour number will set the foreground colour
04A8AE             0248*  ; if it is in the range 0-127, or the background colour if it is
04A8AE             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04A8AE             0250*  ; Support for different plotting modes on Agon is currently very limited.
04A8AE             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04A8AE             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04A8AE             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04A8AE             0254*  ; very limited support for mode 4, which will invert the colour of any
04A8AE             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04A8AE             0256*  ; and may not work as expected.
04A8AE             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04A8AE             0258*  ; original VDU system, may be added in the future.
04A8AE             0259*  ; This command is identical to the BASIC GCOL keyword.
04A8AE 32 C3 A8 04 0260*  	ld (@mode),a
04A8B2 79          0261*      ld a,c
04A8B3 32 C4 A8 04 0262*      ld (@col),a
04A8B7 21 C2 A8 04 0263*  	ld hl,@cmd
04A8BB 01 03 00 00 0264*  	ld bc,@end-@cmd
04A8BF 5B DF       0265*  	rst.lil $18
04A8C1 C9          0266*  	ret
04A8C2 12          0267*  @cmd: db 18
04A8C3 00          0268*  @mode: db 0
04A8C4 00          0269*  @col: db 0
04A8C5             0270*  @end:
04A8C5             0271*  
04A8C5             0272*  vdu_gcol_bg:
04A8C5 32 DC A8 04 0273*  	ld (@mode),a
04A8C9 79          0274*      ld a,c
04A8CA C6 80       0275*      add a,128
04A8CC 32 DD A8 04 0276*      ld (@col),a
04A8D0 21 DB A8 04 0277*  	ld hl,@cmd
04A8D4 01 03 00 00 0278*  	ld bc,@end-@cmd
04A8D8 5B DF       0279*  	rst.lil $18
04A8DA C9          0280*  	ret
04A8DB 12          0281*  @cmd:  db 18
04A8DC 00          0282*  @mode: db 0
04A8DD 00          0283*  @col:  db 0
04A8DE             0284*  @end:
04A8DE             0285*  
04A8DE             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A8DE             0287*  ;     This command sets the colour palette, by mapping a logical colour
04A8DE             0288*  ;     to a physical colour. This is useful for defining custom colours,
04A8DE             0289*  ;     or for redefining the default colours.
04A8DE             0290*  ;     If the physical colour number is given as 255 then the colour will
04A8DE             0291*  ;     be defined using the red, green, and blue values given. If the physical
04A8DE             0292*  ;     colour number is given as any other value then the colour will be defined
04A8DE             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04A8DE             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04A8DE             0295*  ;     must still be provided, but will be ignored.
04A8DE             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04A8DE             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04A8DE             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04A8DE             0299*  ;     requested. The nearest colour will be chosen.
04A8DE             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04A8DE             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04A8DE             0302*  vdu_def_log_colour:
04A8DE 32 03 A9 04 0303*  	ld (@physical),a
04A8E2 47          0304*      ld b,a
04A8E3 32 02 A9 04 0305*      ld (@logical),a
04A8E7 79          0306*      ld a,c
04A8E8 32 04 A9 04 0307*      ld (@red),a
04A8EC 7C          0308*      ld a,h
04A8ED 32 05 A9 04 0309*      ld (@green),a
04A8F1 7D          0310*      ld a,l
04A8F2 32 06 A9 04 0311*      ld (@blue),a
04A8F6 21 01 A9 04 0312*  	ld hl,@cmd
04A8FA 01 06 00 00 0313*  	ld bc,@end-@cmd
04A8FE 5B DF       0314*  	rst.lil $18
04A900 C9          0315*  	ret
04A901 13          0316*  @cmd: db 19
04A902 00          0317*  @logical: db 0
04A903 00          0318*  @physical: db 0
04A904 00          0319*  @red: db 0
04A905 00          0320*  @green: db 0
04A906 00          0321*  @blue: db 0
04A907             0322*  @end:
04A907             0323*  
04A907             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A907             0325*  vdu_reset_gfx:
04A907 3E 14       0326*      ld a,20
04A909 5B D7       0327*  	rst.lil $10
04A90B C9          0328*  	ret
04A90C             0329*  
04A90C             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04A90C             0331*  ; except for VDU 1 and VDU 6) §§
04A90C             0332*  vdu_disable_screen:
04A90C 3E 15       0333*      ld a,21
04A90E 5B D7       0334*  	rst.lil $10
04A910 C9          0335*  	ret
04A911             0336*  
04A911             0337*  ; VDU 22, n: Select screen mode (MODE n)
04A911             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04A911             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04A911             0340*  ; Screen modes
04A911             0341*  ; Modes over 128 are double-buffered
04A911             0342*  ; From Version 1.04 or greater
04A911             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04A911             0344*  ; 0 	640 	480 	16 	    60hz
04A911             0345*  ; * 1 	640 	480 	4 	    60hz
04A911             0346*  ; 2 	640 	480 	2 	    60hz
04A911             0347*  ; 3 	640 	240 	64 	    60hz
04A911             0348*  ; 4 	640 	240 	16 	    60hz
04A911             0349*  ; 5 	640 	240 	4 	    60hz
04A911             0350*  ; 6 	640 	240 	2 	    60hz
04A911             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04A911             0352*  ; 8 	320 	240 	64 	    60hz
04A911             0353*  ; 9 	320 	240 	16 	    60hz
04A911             0354*  ; 10 	320 	240 	4 	    60hz
04A911             0355*  ; 11 	320 	240 	2 	    60hz
04A911             0356*  ; 12 	320 	200 	64 	    70hz
04A911             0357*  ; 13 	320 	200 	16 	    70hz
04A911             0358*  ; 14 	320 	200 	4 	    70hz
04A911             0359*  ; 15 	320 	200 	2 	    70hz
04A911             0360*  ; 16 	800 	600 	4 	    60hz
04A911             0361*  ; 17 	800 	600 	2 	    60hz
04A911             0362*  ; 18 	1024 	768 	2 	    60hz
04A911             0363*  ; 129 	640 	480 	4 	    60hz
04A911             0364*  ; 130 	640 	480 	2 	    60hz
04A911             0365*  ; 132 	640 	240 	16 	    60hz
04A911             0366*  ; 133 	640 	240 	4 	    60hz
04A911             0367*  ; 134 	640 	240 	2 	    60hz
04A911             0368*  ; 136 	320 	240 	64 	    60hz
04A911             0369*  ; 137 	320 	240 	16 	    60hz
04A911             0370*  ; 138 	320 	240 	4 	    60hz
04A911             0371*  ; 139 	320 	240 	2 	    60hz
04A911             0372*  ; 140 	320 	200 	64 	    70hz
04A911             0373*  ; 141 	320 	200 	16 	    70hz
04A911             0374*  ; 142 	320 	200 	4 	    70hz
04A911             0375*  ; 143 	320 	200 	2 	    70hz
04A911             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04A911             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04A911             0378*  ; change to the requested mode.
04A911             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04A911             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04A911             0381*  vdu_set_screen_mode:
04A911 32 21 A9 04 0382*  	ld (@arg),a
04A915 21 20 A9 04 0383*  	ld hl,@cmd
04A919 01 02 00 00 0384*  	ld bc,@end-@cmd
04A91D 5B DF       0385*  	rst.lil $18
04A91F C9          0386*  	ret
04A920 16          0387*  @cmd: db 22 ; set screen mode
04A921 00          0388*  @arg: db 0  ; screen mode parameter
04A922             0389*  @end:
04A922             0390*  
04A922             0391*  ; VDU 23, n: Re-program display character / System Commands
04A922             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04A922             0393*  vdu_define_character:
04A922 32 3E A9 04 0394*  	ld (@ascii),a
04A926 11 3F A9 04 0395*  	ld de,@data
04A92A 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04A92C             0397*  @loop:
04A92C 7E          0398*  	ld a,(hl)
04A92D 12          0399*  	ld (de),a
04A92E 23          0400*  	inc hl
04A92F 13          0401*  	inc de
04A930 10 FA       0402*  	djnz @loop
04A932 21 3D A9 04 0403*  	ld hl,@cmd
04A936 01 0A 00 00 0404*  	ld bc,@end-@cmd
04A93A 5B DF       0405*  	rst.lil $18
04A93C C9          0406*  	ret
04A93D 17          0407*  @cmd:   db 23
04A93E 00          0408*  @ascii: db 0
04A93F             0409*  @data:  ds 8
04A947             0410*  @end:
04A947             0411*  
04A947             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04A947             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04A947             0414*  ; 	because we have turned off logical screen scaling
04A947             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04A947             0416*  ; outputs; nothing
04A947             0417*  ; destroys: a might make it out alive
04A947             0418*  vdu_set_gfx_viewport:
04A947 ED 43 67 A9 0419*      ld (@x0),bc
       04          
04A94C FD 22 69 A9 0420*      ld (@y1),iy
       04          
04A951 DD 22 6B A9 0421*  	ld (@x1),ix
       04          
04A956 ED 53 6D A9 0422*  	ld (@y0),de
       04          
04A95B 21 66 A9 04 0423*  	ld hl,@cmd
04A95F 01 09 00 00 0424*  	ld bc,@end-@cmd
04A963 5B DF       0425*  	rst.lil $18
04A965 C9          0426*  	ret
04A966 18          0427*  @cmd:   db 24 ; set graphics viewport command
04A967 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04A969 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04A96B 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04A96D 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04A96F 00          0432*  @end:   db 0x00	  ; padding
04A970             0433*  
04A970             0434*  ; VDU 25, mode, x; y;: PLOT command
04A970             0435*  ; Implemented in vdu_plot.asm
04A970             0436*  
04A970             0437*  ; VDU 26: Reset graphics and text viewports **
04A970             0438*  vdu_reset_txt_gfx_view:
04A970 3E 1A       0439*      ld a,26
04A972 5B D7       0440*  	rst.lil $10
04A974 C9          0441*  	ret
04A975             0442*  
04A975             0443*  ; PASSES
04A975             0444*  ; VDU 27, char: Output character to screen §
04A975             0445*  ; inputs: a is the ascii code of the character to draw
04A975             0446*  vdu_draw_char:
04A975 32 85 A9 04 0447*  	ld (@arg),a
04A979 21 84 A9 04 0448*  	ld hl,@cmd
04A97D 01 02 00 00 0449*  	ld bc,@end-@cmd
04A981 5B DF       0450*  	rst.lil $18
04A983 C9          0451*  	ret
04A984 1B          0452*  @cmd: db 27
04A985 00          0453*  @arg: db 0  ; ascii code of character to draw
04A986             0454*  @end:
04A986             0455*  
04A986             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A986             0457*  ; MIND THE LITTLE-ENDIANESS
04A986             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04A986             0459*  ; outputs; nothing
04A986             0460*  ; destroys: a might make it out alive
04A986             0461*  vdu_set_txt_viewport:
04A986 ED 43 9C A9 0462*      ld (@lb),bc
       04          
04A98B ED 53 9E A9 0463*  	ld (@rt),de
       04          
04A990 21 9B A9 04 0464*  	ld hl,@cmd
04A994 01 05 00 00 0465*  	ld bc,@end-@cmd
04A998 5B DF       0466*  	rst.lil $18
04A99A C9          0467*  	ret
04A99B 1C          0468*  @cmd:   db 28 ; set text viewport command
04A99C 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04A99E 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04A9A0 00          0471*  @end:   db 0x00	  ; padding
04A9A1             0472*  
04A9A1             0473*  ; PASSES
04A9A1             0474*  ; VDU 29, x; y;: Set graphics origin
04A9A1             0475*  ; inputs: bc,de x,y coordinates
04A9A1             0476*  vdu_set_gfx_origin:
04A9A1 ED 43 B7 A9 0477*      ld (@x0),bc
       04          
04A9A6 ED 53 B9 A9 0478*      ld (@y0),de
       04          
04A9AB 21 B6 A9 04 0479*  	ld hl,@cmd
04A9AF 01 05 00 00 0480*  	ld bc,@end-@cmd
04A9B3 5B DF       0481*  	rst.lil $18
04A9B5 C9          0482*  	ret
04A9B6 1D          0483*  @cmd:	db 29
04A9B7 00 00       0484*  @x0: 	dw 0
04A9B9 00 00       0485*  @y0: 	dw 0
04A9BB 00          0486*  @end: 	db 0 ; padding
04A9BC             0487*  
04A9BC             0488*  ; PASSES
04A9BC             0489*  ; VDU 30: Home cursor
04A9BC             0490*  vdu_home_cursor:
04A9BC 3E 1E       0491*      ld a,30
04A9BE 5B D7       0492*  	rst.lil $10
04A9C0 C9          0493*  	ret
04A9C1             0494*  
04A9C1             0495*  ; PASSES
04A9C1             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A9C1             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04A9C1             0498*  vdu_move_cursor:
04A9C1 ED 43 D2 A9 0499*      ld (@x0),bc
       04          
04A9C6 21 D1 A9 04 0500*  	ld hl,@cmd
04A9CA 01 03 00 00 0501*  	ld bc,@end-@cmd
04A9CE 5B DF       0502*  	rst.lil $18
04A9D0 C9          0503*  	ret
04A9D1 1F          0504*  @cmd: 	db 31
04A9D2 00          0505*  @x0:	db 0
04A9D3 00          0506*  @y0: 	db 0
04A9D4 00          0507*  @end: 	db 0 ; padding
04A9D5             0508*  
04A9D5             0509*  
04A9D5             0510*  ; VDU 127: Backspace
04A9D5             0511*  vdu_bksp:
04A9D5 3E 7F       0512*      ld a,127
04A9D7 5B D7       0513*  	rst.lil $10
04A9D9 C9          0514*  	ret
04A9DA             0515*  
04A9DA             0516*  ; activate a bitmap in preparation to draw it
04A9DA             0517*  ; inputs: a holding the bitmap index
04A9DA             0518*  vdu_bmp_select:
04A9DA 32 EC A9 04 0519*  	ld (@bmp),a
04A9DE 21 E9 A9 04 0520*  	ld hl,@cmd
04A9E2 01 04 00 00 0521*  	ld bc,@end-@cmd
04A9E6 5B DF       0522*  	rst.lil $18
04A9E8 C9          0523*  	ret
04A9E9 17 1B 00    0524*  @cmd: db 23,27,0
04A9EC 00          0525*  @bmp: db 0
04A9ED             0526*  @end:
04A9ED             0527*  
04A9ED             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04A9ED             0529*  ; inputs: hl=bufferId
04A9ED             0530*  vdu_buff_select:
04A9ED 22 FF A9 04 0531*  	ld (@bufferId),hl
04A9F1 21 FC A9 04 0532*  	ld hl,@cmd
04A9F5 01 05 00 00 0533*  	ld bc,@end-@cmd
04A9F9 5B DF       0534*  	rst.lil $18
04A9FB C9          0535*  	ret
04A9FC 17 1B 20    0536*  @cmd: db 23,27,0x20
04A9FF 00 00       0537*  @bufferId: dw 0x0000
04AA01 00          0538*  @end: db 0x00 ; padding
04AA02             0539*  
04AA02             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04AA02             0541*  ; inputs: a=format; bc=width; de=height
04AA02             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04AA02             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04AA02             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04AA02             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04AA02             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04AA02             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04AA02             0548*  vdu_bmp_create:
04AA02 ED 43 1E AA 0549*      ld (@width),bc
       04          
04AA07 ED 53 20 AA 0550*      ld (@height),de
       04          
04AA0C 32 22 AA 04 0551*      ld (@fmt),a
04AA10 21 1B AA 04 0552*  	ld hl,@cmd
04AA14 01 08 00 00 0553*  	ld bc,@end-@cmd
04AA18 5B DF       0554*  	rst.lil $18
04AA1A C9          0555*  	ret
04AA1B 17 1B 21    0556*  @cmd:       db 23,27,0x21
04AA1E 00 00       0557*  @width:     dw 0x0000
04AA20 00 00       0558*  @height:    dw 0x0000
04AA22 00          0559*  @fmt:       db 0x00
04AA23             0560*  @end:
04AA23             0561*  
04AA23             0562*  ; Draw a bitmap on the screen
04AA23             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04AA23             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04AA23             0565*  vdu_bmp_draw:
04AA23 ED 43 3B AA 0566*      ld (@x0),bc
       04          
04AA28 ED 53 3D AA 0567*      ld (@y0),de
       04          
04AA2D 21 38 AA 04 0568*  	ld hl,@cmd
04AA31 01 07 00 00 0569*  	ld bc,@end-@cmd
04AA35 5B DF       0570*  	rst.lil $18
04AA37 C9          0571*  	ret
04AA38 17 1B 03    0572*  @cmd: db 23,27,3
04AA3B 00 00       0573*  @x0:  dw 0x0000
04AA3D 00 00       0574*  @y0:  dw 0x0000
04AA3F 00          0575*  @end: db 0x00 ; padding
04AA40             0576*  
04AA40             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04AA40             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04AA40             0579*  ; note: default setting on boot is scaling ON
04AA40             0580*  vdu_set_scaling:
04AA40 32 52 AA 04 0581*  	ld (@arg),a
04AA44 21 4F AA 04 0582*  	ld hl,@cmd
04AA48 01 04 00 00 0583*  	ld bc,@end-@cmd
04AA4C 5B DF       0584*  	rst.lil $18
04AA4E C9          0585*  	ret
04AA4F 17 00 C0    0586*  @cmd: db 23,0,0xC0
04AA52 00          0587*  @arg: db 0  ; scaling on/off
04AA53             0588*  @end:
04AA53             0589*  
04AA53             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04AA53             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04AA53             0592*  ; 	(all modes).
04AA53             0593*  
04AA53             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04AA53             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04AA53             0596*  ; 	mode is not double-buffered then this command will wait for the next
04AA53             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04AA53             0598*  ; 	screen with the vertical refresh rate of the monitor.
04AA53             0599*  
04AA53             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04AA53             0601*  ; 	as it will prevent tearing of the screen.
04AA53             0602*  ; inputs: none
04AA53             0603*  ; outputs: none
04AA53             0604*  ; destroys: hl, bc
04AA53             0605*  vdu_flip:
04AA53 21 5E AA 04 0606*  	ld hl,@cmd
04AA57 01 03 00 00 0607*  	ld bc,@end-@cmd
04AA5B 5B DF       0608*  	rst.lil $18
04AA5D C9          0609*  	ret
04AA5E 17 00 C3    0610*  @cmd: db 23,0,0xC3
04AA61             0611*  @end:
04AA61             0612*  
04AA61             0613*  ; Command 64: Compress a buffer
04AA61             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04AA61             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA61             0616*  
04AA61             0617*  
04AA61             0618*  ; Command 65: Decompress a buffer
04AA61             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA61             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA61             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04AA61             0622*  vdu_decompress_buffer:
04AA61 22 7D AA 04 0623*  	ld (@targetBufferId),hl
04AA65 22 80 AA 04 0624*  	ld (@sourceBufferId),hl
04AA69 3E 41       0625*  	ld a,65
04AA6B 32 7F AA 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA6F 21 7A AA 04 0627*  	ld hl,@cmd
04AA73 01 08 00 00 0628*  	ld bc,@end-@cmd
04AA77 5B DF       0629*  	rst.lil $18
04AA79 C9          0630*  	ret
04AA7A 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04AA7D 00 00       0632*  @targetBufferId: dw 0x0000
04AA7F 41          0633*  @cmd1:	db 65
04AA80 00 00       0634*  @sourceBufferId: dw 0x0000
04AA82 00          0635*  @end: 	db 0x00 ; padding
04AA83             0636*  
04AA83             0637*  ; Command 65: Decompress a buffer
04AA83             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA83             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA83             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04AA83             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04AA83             0642*  vdu_decompress_buffer_different:
04AA83 22 A3 AA 04 0643*  	ld (@targetBufferId),hl
04AA87 21 FF 7F 00 0644*      ld hl,0x7FFF
04AA8B 22 A6 AA 04 0645*  	ld (@sourceBufferId),hl
04AA8F 3E 41       0646*  	ld a,65
04AA91 32 A5 AA 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA95 21 A0 AA 04 0648*  	ld hl,@cmd
04AA99 01 08 00 00 0649*  	ld bc,@end-@cmd
04AA9D 5B DF       0650*  	rst.lil $18
04AA9F C9          0651*  	ret
04AAA0 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04AAA3 00 00       0653*  @targetBufferId: dw 0x0000
04AAA5 41          0654*  @cmd1:	db 65
04AAA6 00 00       0655*  @sourceBufferId: dw 0x0000
04AAA8 00          0656*  @end: 	db 0x00 ; padding
04AAA9             0657*  
04AAA9             0658*  ; #### from vdp.asm ####
04AAA9             0659*  
04AAA9             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04AAA9             0661*  ; VDU 23, 7: Scrolling
04AAA9             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04AAA9             0663*  ; inputs: a, extent; l, direction; h; speed
04AAA9             0664*  vdu_scroll_down:
04AAA9 32 BE AA 04 0665*  	ld (@extent),a
04AAAD 22 BF AA 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04AAB1 21 BC AA 04 0667*  	ld hl,@cmd
04AAB5 01 05 00 00 0668*  	ld bc,@end-@cmd
04AAB9 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04AABB C9          0670*  	ret
04AABC 17 07       0671*  @cmd:       db 23,7
04AABE 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04AABF 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04AAC0 00          0674*  @speed:     db 0x00 ; pixels
04AAC1 00          0675*  @end:		db 0x00 ; padding
04AAC2             0676*  
04AAC2             0677*  cursor_on:
04AAC2 21 CD AA 04 0678*  	ld hl,@cmd
04AAC6 01 03 00 00 0679*  	ld bc,@end-@cmd
04AACA 5B DF       0680*  	rst.lil $18
04AACC C9          0681*  	ret
04AACD             0682*  @cmd:
04AACD 17 01 01    0683*  	db 23,1,1
04AAD0             0684*  @end:
04AAD0             0685*  
04AAD0             0686*  cursor_off:
04AAD0 21 DB AA 04 0687*  	ld hl,@cmd
04AAD4 01 03 00 00 0688*  	ld bc,@end-@cmd
04AAD8 5B DF       0689*  	rst.lil $18
04AADA C9          0690*  	ret
04AADB             0691*  @cmd:
04AADB 17 01 00    0692*  	db 23,1,0
04AADE             0693*  @end:
04AADE             0694*  
04AADE DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04AAE0             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04AAE0 3E 08       0001*M 			LD	A, function
04AAE2 5B CF       0002*M 			RST.LIL	08h
04AAE4 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04AAE7 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04AAEA 28 FB       0699*  			JR	Z, @wait
04AAEC DD E1       0700*  			POP	IX
04AAEE C9          0701*  			RET
04AAEF             0702*  
04AAEF             0703*  ; #### from vdu_bmp.asm ####
04AAEF             0704*  ; =========================================================================
04AAEF             0705*  ; Bitmaps
04AAEF             0706*  ; -------------------------------------------------------------------------
04AAEF             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04AAEF             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04AAEF             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04AAEF             0710*  
04AAEF             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04AAEF             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04AAEF             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04AAEF             0714*  ; typically "move" style plot commands are used to define the rectangle.
04AAEF             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04AAEF             0716*  ; inputs: hl; target bufferId
04AAEF             0717*  ; all the following are in 16.8 fixed point format
04AAEF             0718*  ;   ub.c; top-left x coordinate
04AAEF             0719*  ;   ud.e; top-left y coordinate
04AAEF             0720*  ;   ui.x; width
04AAEF             0721*  ;   ui.y; height
04AAEF             0722*  vdu_buff_screen_capture168:
04AAEF ED 53 26 AB 0723*          ld (@y0-1),de
       04          
04AAF4 ED 43 24 AB 0724*          ld (@x0-1),bc
       04          
04AAF9 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04AAFB 32 24 AB 04 0726*          ld (@x0-1),a
04AAFF             0727*  
04AAFF DD 22 2B AB 0728*          ld (@x1),ix
       04          
04AB04 FD 22 2D AB 0729*          ld (@y1),iy
       04          
04AB09 3E 17       0730*          ld a,23
04AB0B 32 2F AB 04 0731*          ld (@y1+2),a
04AB0F             0732*  
04AB0F 22 32 AB 04 0733*          ld (@bufId),hl
04AB13 AF          0734*          xor a
04AB14 32 34 AB 04 0735*          ld (@bufId+2),a
04AB18             0736*  
04AB18 21 23 AB 04 0737*          ld hl,@begin
04AB1C 01 13 00 00 0738*          ld bc,@end-@begin
04AB20 5B DF       0739*          rst.lil $18
04AB22 C9          0740*          ret
04AB23             0741*  @begin:
04AB23             0742*  ; absolute move gfx cursor to top-left screen coordinate
04AB23             0743*  ; VDU 25, mode, x; y;: PLOT command
04AB23 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04AB25 40 00       0745*  @x0: 	dw 64
04AB27 40 00       0746*  @y0: 	dw 64
04AB29             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04AB29             0748*  ; VDU 25, mode, x; y;: PLOT command
04AB29 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04AB2B 0F 00       0750*  @x1: 	dw 15
04AB2D 0F 00       0751*  @y1: 	dw 15
04AB2F             0752*  ; now the main event
04AB2F             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04AB2F 17 1B 21    0754*          db 23,27,0x21
04AB32 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04AB36             0756*  @end: ; no padding required
04AB36             0757*  
04AB36             0758*  vdu_buff_screen_capture_full:
04AB36 21 41 AB 04 0759*          ld hl,@begin
04AB3A 01 13 00 00 0760*          ld bc,@end-@begin
04AB3E 5B DF       0761*          rst.lil $18
04AB40 C9          0762*          ret
04AB41             0763*  @begin:
04AB41             0764*  ; absolute move gfx cursor to top-left screen coordinate
04AB41             0765*  ; VDU 25, mode, x; y;: PLOT command
04AB41 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04AB43 00 00       0767*  @x0: 	dw 0
04AB45 00 00       0768*  @y0: 	dw 0
04AB47             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04AB47             0770*  ; VDU 25, mode, x; y;: PLOT command
04AB47 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04AB49 3F 01       0772*  @x1: 	dw 319
04AB4B EF 00       0773*  @y1: 	dw 239
04AB4D             0774*  ; now the main event
04AB4D             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04AB4D 17 1B 21    0776*          db 23,27,0x21
04AB50 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04AB54             0778*  @end: ; no padding required
04AB54             0779*  
04AB54             0780*  vdu_buff_screen_paste_full:
04AB54 21 5F AB 04 0781*          ld hl,@begin
04AB58 01 0B 00 00 0782*          ld bc,@end-@begin
04AB5C 5B DF       0783*          rst.lil $18
04AB5E C9          0784*          ret
04AB5F             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB5F 17 1B 20    0786*  @begin:    db 23,27,0x20
04AB62 00 20       0787*  @bufferId: dw 0x2000
04AB64             0788*  ; VDU 25, mode, x; y;: PLOT command
04AB64 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB66 00 00 00 00 0790*             dw 0x0000,0x0000
04AB6A             0791*  @end: ; no padding required
04AB6A             0792*  
04AB6A             0793*  vdu_buff_screen_capture_tiles:
04AB6A 21 75 AB 04 0794*          ld hl,@begin
04AB6E 01 13 00 00 0795*          ld bc,@end-@begin
04AB72 5B DF       0796*          rst.lil $18
04AB74 C9          0797*          ret
04AB75             0798*  @begin:
04AB75             0799*  ; absolute move gfx cursor to top-left screen coordinate
04AB75             0800*  ; VDU 25, mode, x; y;: PLOT command
04AB75 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04AB77 00 00       0802*  @x0: 	dw 0
04AB79 00 00       0803*  @y0: 	dw 0
04AB7B             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04AB7B             0805*  ; VDU 25, mode, x; y;: PLOT command
04AB7B 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04AB7D FF 00       0807*  @x1: 	dw 319-64
04AB7F EF 00       0808*  @y1: 	dw 239
04AB81             0809*  ; now the main event
04AB81             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04AB81 17 1B 21    0811*          db 23,27,0x21
04AB84 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04AB88             0813*  @end: ; no padding required
04AB88             0814*  
04AB88             0815*  vdu_buff_screen_paste_tiles:
04AB88 21 93 AB 04 0816*          ld hl,@begin
04AB8C 01 0B 00 00 0817*          ld bc,@end-@begin
04AB90 5B DF       0818*          rst.lil $18
04AB92 C9          0819*          ret
04AB93             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB93 17 1B 20    0821*  @begin:    db 23,27,0x20
04AB96 00 20       0822*  @bufferId: dw 0x2000
04AB98             0823*  ; VDU 25, mode, x; y;: PLOT command
04AB98 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB9A 00 00 01 00 0825*             dw 0x0000,0x0001
04AB9E             0826*  @end: ; no padding required
04AB9E             0827*  
04AB9E             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04AB9E             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04AB9E             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04AB9E             0831*  ; Value	Meaning
04AB9E             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04AB9E             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04AB9E             0834*  ; 2	Mono/Mask (1-bit per pixel)
04AB9E             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04AB9E             0836*  ;     They have some significant limitations, and are not intended for general use.
04AB9E             0837*  
04AB9E             0838*  ; =========================================================================
04AB9E             0839*  ; Sprites
04AB9E             0840*  ; -------------------------------------------------------------------------
04AB9E             0841*  ; VDU 23, 27, 4, n: Select sprite n
04AB9E             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04AB9E             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AB9E             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AB9E             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04AB9E             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04AB9E             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04AB9E             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AB9E             0849*  ; VDU 23, 27, 11: Show current sprite
04AB9E             0850*  ; VDU 23, 27, 12: Hide current sprite
04AB9E             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AB9E             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AB9E             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AB9E             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AB9E             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AB9E             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AB9E             0857*  
04AB9E             0858*  ; =========================================================================
04AB9E             0859*  ; Mouse cursor
04AB9E             0860*  ; -------------------------------------------------------------------------
04AB9E             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04AB9E             0862*  
04AB9E             0863*  ; #### from vdu_plot.asm ####
04AB9E             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AB9E             0865*  ; PLOT code 	(Decimal) 	Effect
04AB9E             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04AB9E             0867*  plot_sl_both: equ 0x00
04AB9E             0868*  
04AB9E             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04AB9E             0870*  plot_sl_first: equ 0x08
04AB9E             0871*  
04AB9E             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04AB9E             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04AB9E             0874*  
04AB9E             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04AB9E             0876*  plot_sl_last: equ 0x20
04AB9E             0877*  
04AB9E             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04AB9E             0879*  plot_sl_none: equ 0x28
04AB9E             0880*  
04AB9E             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04AB9E             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04AB9E             0883*  
04AB9E             0884*  ; &40-&47 	64-71 	Point plot
04AB9E             0885*  plot_pt: equ 0x40
04AB9E             0886*  
04AB9E             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04AB9E             0888*  plot_lf_lr_non_bg: equ 0x48
04AB9E             0889*  
04AB9E             0890*  ; &50-&57 	80-87 	Triangle fill
04AB9E             0891*  plot_tf: equ 0x50
04AB9E             0892*  
04AB9E             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04AB9E             0894*  plot_lf_r_bg: equ 0x58
04AB9E             0895*  
04AB9E             0896*  ; &60-&67 	96-103 	Rectangle fill
04AB9E             0897*  plot_rf: equ 0x60
04AB9E             0898*  
04AB9E             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04AB9E             0900*  plot_lf_lr_fg: equ 0x60
04AB9E             0901*  
04AB9E             0902*  ; &70-&77 	112-119 	Parallelogram fill
04AB9E             0903*  plot_pf: equ 0x70
04AB9E             0904*  
04AB9E             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04AB9E             0906*  plot_lf_r_non_fg: equ 0x78
04AB9E             0907*  
04AB9E             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04AB9E             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04AB9E             0910*  
04AB9E             0911*  ; &90-&97 	144-151 	Circle outline
04AB9E             0912*  plot_co: equ 0x90
04AB9E             0913*  
04AB9E             0914*  ; &98-&9F 	152-159 	Circle fill
04AB9E             0915*  plot_cf: equ 0x98
04AB9E             0916*  
04AB9E             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04AB9E             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04AB9E             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04AB9E             0920*  
04AB9E             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04AB9E             0922*  plot_rcm: equ 0xB8
04AB9E             0923*  
04AB9E             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04AB9E             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04AB9E             0926*  ; &D0-&D7 	208-215 	Not defined
04AB9E             0927*  ; &D8-&DF 	216-223 	Not defined
04AB9E             0928*  ; &E0-&E7 	224-231 	Not defined
04AB9E             0929*  
04AB9E             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04AB9E             0931*  plot_bmp: equ 0xE8
04AB9E             0932*  
04AB9E             0933*  ; &F0-&F7 	240-247 	Not defined
04AB9E             0934*  ; &F8-&FF 	248-255 	Not defined
04AB9E             0935*  
04AB9E             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04AB9E             0937*  ; Agon Console8 VDP 2.2.0
04AB9E             0938*  
04AB9E             0939*  ; Within each group of eight plot codes, the effects are as follows:
04AB9E             0940*  ; Plot code 	Effect
04AB9E             0941*  ; 0 	Move relative
04AB9E             0942*  mv_rel: equ 0
04AB9E             0943*  
04AB9E             0944*  ; 1 	Plot relative in current foreground colour
04AB9E             0945*  dr_rel_fg: equ 1
04AB9E             0946*  
04AB9E             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04AB9E             0948*  ; 3 	Plot relative in current background colour
04AB9E             0949*  dr_rel_bg: equ 3
04AB9E             0950*  
04AB9E             0951*  ; 4 	Move absolute
04AB9E             0952*  mv_abs: equ 4
04AB9E             0953*  
04AB9E             0954*  ; 5 	Plot absolute in current foreground colour
04AB9E             0955*  dr_abs_fg: equ 5
04AB9E             0956*  
04AB9E             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04AB9E             0958*  ; 7 	Plot absolute in current background colour
04AB9E             0959*  dr_abs_bg: equ 7
04AB9E             0960*  
04AB9E             0961*  ; Codes 0-3 use the position data provided as part of the command
04AB9E             0962*  ; as a relative position, adding the position given to the current
04AB9E             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04AB9E             0964*  ; as part of the command as an absolute position, setting the current
04AB9E             0965*  ; graphical cursor position to the position given.
04AB9E             0966*  
04AB9E             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04AB9E             0968*  ; current pixel colour. These operations cannot currently be supported
04AB9E             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04AB9E             0970*  ; supported. Support for these codes may be added in a future version
04AB9E             0971*  ; of the VDP firmware.
04AB9E             0972*  
04AB9E             0973*  ; 16 colour palette constants
04AB9E             0974*  c_black: equ 0
04AB9E             0975*  c_red_dk: equ 1
04AB9E             0976*  c_green_dk: equ 2
04AB9E             0977*  c_yellow_dk: equ 3
04AB9E             0978*  c_blue_dk: equ 4
04AB9E             0979*  c_magenta_dk: equ 5
04AB9E             0980*  c_cyan_dk: equ 6
04AB9E             0981*  c_grey: equ 7
04AB9E             0982*  c_grey_dk: equ 8
04AB9E             0983*  c_red: equ 9
04AB9E             0984*  c_green: equ 10
04AB9E             0985*  c_yellow: equ 11
04AB9E             0986*  c_blue: equ 12
04AB9E             0987*  c_magenta: equ 13
04AB9E             0988*  c_cyan: equ 14
04AB9E             0989*  c_white: equ 15
04AB9E             0990*  
04AB9E             0991*  ; VDU 25, mode, x; y;: PLOT command
04AB9E             0992*  ; inputs: a=mode, bc=x0, de=y0
04AB9E             0993*  vdu_plot:
04AB9E 32 B8 AB 04 0994*      ld (@mode),a
04ABA2 ED 43 B9 AB 0995*      ld (@x0),bc
       04          
04ABA7 ED 53 BB AB 0996*      ld (@y0),de
       04          
04ABAC 21 B7 AB 04 0997*  	ld hl,@cmd
04ABB0 01 06 00 00 0998*  	ld bc,@end-@cmd
04ABB4 5B DF       0999*  	rst.lil $18
04ABB6 C9          1000*  	ret
04ABB7 19          1001*  @cmd:   db 25
04ABB8 00          1002*  @mode:  db 0
04ABB9 00 00       1003*  @x0: 	dw 0
04ABBB 00 00       1004*  @y0: 	dw 0
04ABBD 00          1005*  @end:   db 0 ; extra byte to soak up deu
04ABBE             1006*  
04ABBE             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABBE             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABBE             1009*  ; VDU 25, mode, x; y;: PLOT command
04ABBE             1010*  ; inputs: bc=x0, de=y0
04ABBE             1011*  ; prerequisites: vdu_buff_select
04ABBE             1012*  vdu_plot_bmp:
04ABBE ED 43 D5 AB 1013*      ld (@x0),bc
       04          
04ABC3 ED 53 D7 AB 1014*      ld (@y0),de
       04          
04ABC8 21 D3 AB 04 1015*  	ld hl,@cmd
04ABCC 01 06 00 00 1016*  	ld bc,@end-@cmd
04ABD0 5B DF       1017*  	rst.lil $18
04ABD2 C9          1018*  	ret
04ABD3 19          1019*  @cmd:   db 25
04ABD4 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABD5 00 00       1021*  @x0: 	dw 0x0000
04ABD7 00 00       1022*  @y0: 	dw 0x0000
04ABD9 00          1023*  @end:   db 0x00 ; padding
04ABDA             1024*  
04ABDA             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABDA             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABDA             1027*  ; VDU 25, mode, x; y;: PLOT command
04ABDA             1028*  ; inputs: bc=x0, de=y0
04ABDA             1029*  ; USING 16.8 FIXED POINT COORDINATES
04ABDA             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04ABDA             1031*  ;   the fractional portiion of the inputs are truncated
04ABDA             1032*  ;   leaving only the 16-bit integer portion
04ABDA             1033*  ; prerequisites: vdu_buff_select
04ABDA             1034*  vdu_plot_bmp168:
04ABDA             1035*  ; populate in the reverse of normal to keep the
04ABDA             1036*  ; inputs from stomping on each other
04ABDA ED 53 F8 AB 1037*      ld (@y0-1),de
       04          
04ABDF ED 43 F6 AB 1038*      ld (@x0-1),bc
       04          
04ABE4 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04ABE6 32 F6 AB 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04ABEA 21 F5 AB 04 1041*  	ld hl,@cmd
04ABEE 01 06 00 00 1042*  	ld bc,@end-@cmd
04ABF2 5B DF       1043*  	rst.lil $18
04ABF4 C9          1044*  	ret
04ABF5 19          1045*  @cmd:   db 25
04ABF6 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABF7 00 00       1047*  @x0: 	dw 0x0000
04ABF9 00 00       1048*  @y0: 	dw 0x0000
04ABFB             1049*  @end:  ; no padding required b/c we shifted de right
04ABFB             1050*  
04ABFB             1051*  ; draw a filled rectangle
04ABFB             1052*  vdu_plot_rf:
04ABFB ED 43 22 AC 1053*      ld (@x0),bc
       04          
04AC00 ED 53 24 AC 1054*      ld (@y0),de
       04          
04AC05 DD 22 28 AC 1055*      ld (@x1),ix
       04          
04AC0A FD 22 2A AC 1056*      ld (@y1),iy
       04          
04AC0F 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04AC11 32 26 AC 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC15 21 20 AC 04 1059*  	ld hl,@cmd0
04AC19 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04AC1D 5B DF       1061*  	rst.lil $18
04AC1F C9          1062*      ret
04AC20 19          1063*  @cmd0:  db 25 ; plot
04AC21 04          1064*  @arg0:  db plot_sl_both+mv_abs
04AC22 00 00       1065*  @x0:    dw 0x0000
04AC24 00 00       1066*  @y0:    dw 0x0000
04AC26 19          1067*  @cmd1:  db 25 ; plot
04AC27 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04AC28 00 00       1069*  @x1:    dw 0x0000
04AC2A 00 00       1070*  @y1:    dw 0x0000
04AC2C 00          1071*  @end:   db 0x00 ; padding
04AC2D             1072*  
04AC2D             1073*  ; draw a filled circle
04AC2D             1074*  vdu_plot_cf:
04AC2D ED 43 54 AC 1075*      ld (@x0),bc
       04          
04AC32 ED 53 56 AC 1076*      ld (@y0),de
       04          
04AC37 DD 22 5A AC 1077*      ld (@x1),ix
       04          
04AC3C FD 22 5C AC 1078*      ld (@y1),iy
       04          
04AC41 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04AC43 32 58 AC 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC47 21 52 AC 04 1081*  	ld hl,@cmd0
04AC4B 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04AC4F 5B DF       1083*  	rst.lil $18
04AC51 C9          1084*      ret
04AC52 19          1085*  @cmd0:  db 25 ; plot
04AC53 04          1086*  @arg0:  db plot_sl_both+mv_abs
04AC54 00 00       1087*  @x0:    dw 0x0000
04AC56 00 00       1088*  @y0:    dw 0x0000
04AC58 19          1089*  @cmd1:  db 25 ; plot
04AC59 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04AC5A 00 00       1091*  @x1:    dw 0x0000
04AC5C 00 00       1092*  @y1:    dw 0x0000
04AC5E 00          1093*  @end:   db 0x00 ; padding
04AC5F             1094*  
04AC5F             1095*  ; #### from vdu_sprites.asm ####
04AC5F             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04AC5F             1097*  ; the VDP can support up to 256 sprites. They must be defined
04AC5F             1098*  ; contiguously, and so the first sprite is sprite 0.
04AC5F             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04AC5F             1100*  ; Once a selection of sprites have been defined, you can activate
04AC5F             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04AC5F             1102*  ; of sprites to activate. This will activate the first n sprites,
04AC5F             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04AC5F             1104*  
04AC5F             1105*  ; A single sprite can have multiple "frames", referring to
04AC5F             1106*  ; different bitmaps.
04AC5F             1107*  ; (These bitmaps do not need to be the same size.)
04AC5F             1108*  ; This allows a sprite to include an animation sequence,
04AC5F             1109*  ; which can be stepped through one frame at a time, or picked
04AC5F             1110*  ; in any order.
04AC5F             1111*  
04AC5F             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04AC5F             1113*  ; be noted however that "native" format bitmaps are not
04AC5F             1114*  ; recommended for use as sprite frames, as they cannot get
04AC5F             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04AC5F             1116*  ; format is not really intended for general use.) This is part
04AC5F             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04AC5F             1118*  ; screen are now stored in RGBA2222 format.
04AC5F             1119*  
04AC5F             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04AC5F             1121*  ; and then later shown again.
04AC5F             1122*  
04AC5F             1123*  ; Moving sprites around the screen is done by changing the
04AC5F             1124*  ; position of the sprite. This can be done either by setting
04AC5F             1125*  ; the absolute position of the sprite, or by moving the sprite
04AC5F             1126*  ; by a given number of pixels. (Sprites are positioned using
04AC5F             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04AC5F             1128*  ; In the current sprite system, sprites will not update their
04AC5F             1129*  ; position on-screen until either another drawing operation is
04AC5F             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04AC5F             1131*  
04AC5F             1132*  ; Here are the sprite commands:
04AC5F             1133*  ;
04AC5F             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04AC5F             1135*  ; inputs: a is the 8-bit sprite id
04AC5F             1136*  ; vdu_sprite_select:
04AC5F             1137*  
04AC5F             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04AC5F             1139*  ; inputs: none
04AC5F             1140*  ; prerequisites: vdu_sprite_select
04AC5F             1141*  ; vdu_sprite_clear_frames:
04AC5F             1142*  
04AC5F             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC5F             1144*  ; inputs: a is the 8-bit bitmap number
04AC5F             1145*  ; prerequisites: vdu_sprite_select
04AC5F             1146*  ; vdu_sprite_add_bmp:
04AC5F             1147*  
04AC5F             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04AC5F             1149*  ; inputs: a is the number of sprites to activate
04AC5F             1150*  ; vdu_sprite_activate:
04AC5F             1151*  
04AC5F             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04AC5F             1153*  ; inputs: none
04AC5F             1154*  ; prerequisites: vdu_sprite_select
04AC5F             1155*  ; vdu_sprite_next_frame:
04AC5F             1156*  
04AC5F             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04AC5F             1158*  ; inputs: none
04AC5F             1159*  ; prerequisites: vdu_sprite_select
04AC5F             1160*  ; vdu_sprite_prev_frame:
04AC5F             1161*  
04AC5F             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AC5F             1163*  ; inputs: a is frame number to select
04AC5F             1164*  ; prerequisites: vdu_sprite_select
04AC5F             1165*  ; vdu_sprite_select_frame:
04AC5F             1166*  
04AC5F             1167*  ; VDU 23, 27, 11: Show current sprite
04AC5F             1168*  ; inputs: none
04AC5F             1169*  ; prerequisites: vdu_sprite_select
04AC5F             1170*  ; vdu_sprite_show:
04AC5F             1171*  
04AC5F             1172*  ; VDU 23, 27, 12: Hide current sprite
04AC5F             1173*  ; inputs: none
04AC5F             1174*  ; prerequisites: vdu_sprite_select
04AC5F             1175*  ; vdu_sprite_hide:
04AC5F             1176*  
04AC5F             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AC5F             1178*  ; inputs: bc is x coordinate, de is y coordinate
04AC5F             1179*  ; prerequisites: vdu_sprite_select
04AC5F             1180*  ; vdu_sprite_move_abs:
04AC5F             1181*  ;
04AC5F             1182*  ; USING 16.8 FIXED POINT COORDINATES
04AC5F             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AC5F             1184*  ;   the fractional portiion of the inputs are truncated
04AC5F             1185*  ;   leaving only the 16-bit integer portion
04AC5F             1186*  ; prerequisites: vdu_sprite_select
04AC5F             1187*  ; vdu_sprite_move_abs168:
04AC5F             1188*  
04AC5F             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AC5F             1190*  ; inputs: bc is x coordinate, de is y coordinate
04AC5F             1191*  ; prerequisites: vdu_sprite_select
04AC5F             1192*  ; vdu_sprite_move_rel:
04AC5F             1193*  ;
04AC5F             1194*  ; USING 16.8 FIXED POINT COORDINATES
04AC5F             1195*  ; inputs: ub.c is dx, ud.e is dy
04AC5F             1196*  ;   the fractional portiion of the inputs are truncated
04AC5F             1197*  ;   leaving only the 16-bit integer portion
04AC5F             1198*  ; prerequisites: vdu_sprite_select
04AC5F             1199*  ; vdu_sprite_move_rel168:
04AC5F             1200*  
04AC5F             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AC5F             1202*  ; inputs: none
04AC5F             1203*  ; vdu_sprite_update:
04AC5F             1204*  
04AC5F             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AC5F             1206*  ; inputs: none
04AC5F             1207*  ; vdu_sprite_bmp_reset:
04AC5F             1208*  
04AC5F             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AC5F             1210*  ; inputs: none
04AC5F             1211*  ; vdu_sprite_reset:
04AC5F             1212*  
04AC5F             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AC5F             1214*  ; inputs: a is the GCOL paint mode
04AC5F             1215*  ; prerequisites: vdu_sprite_select
04AC5F             1216*  ; vdu_sprite_set_gcol:
04AC5F             1217*  
04AC5F             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AC5F             1219*  ; inputs: hl=bufferId
04AC5F             1220*  ; prerequisites: vdu_sprite_select
04AC5F             1221*  ; vdu_sprite_add_buff:
04AC5F             1222*  
04AC5F             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04AC5F             1224*  
04AC5F             1225*  ; VDU 23, 27, 4, n: Select sprite n
04AC5F             1226*  ; inputs: a is the 8-bit sprite id
04AC5F             1227*  vdu_sprite_select:
04AC5F 32 71 AC 04 1228*      ld (@sprite),a
04AC63 21 6E AC 04 1229*      ld hl,@cmd
04AC67 01 04 00 00 1230*      ld bc,@end-@cmd
04AC6B 5B DF       1231*      rst.lil $18
04AC6D C9          1232*      ret
04AC6E 17 1B 04    1233*  @cmd:    db 23,27,4
04AC71 00          1234*  @sprite: db 0x00
04AC72             1235*  @end:
04AC72             1236*  
04AC72             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04AC72             1238*  ; inputs: none
04AC72             1239*  ; prerequisites: vdu_sprite_select
04AC72             1240*  vdu_sprite_clear_frames:
04AC72 21 7D AC 04 1241*      ld hl,@cmd
04AC76 01 03 00 00 1242*      ld bc,@end-@cmd
04AC7A 5B DF       1243*      rst.lil $18
04AC7C C9          1244*      ret
04AC7D 17 1B 05    1245*  @cmd: db 23,27,5
04AC80             1246*  @end:
04AC80             1247*  
04AC80             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC80             1249*  ; inputs: a is the 8-bit bitmap number
04AC80             1250*  ; prerequisites: vdu_sprite_select
04AC80             1251*  vdu_sprite_add_bmp:
04AC80 32 92 AC 04 1252*      ld (@bmp),a
04AC84 21 8F AC 04 1253*      ld hl,@cmd
04AC88 01 04 00 00 1254*      ld bc,@end-@cmd
04AC8C 5B DF       1255*      rst.lil $18
04AC8E C9          1256*      ret
04AC8F 17 1B 06    1257*  @cmd: db 23,27,6
04AC92 00          1258*  @bmp: db 0x00
04AC93             1259*  @end:
04AC93             1260*  
04AC93             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04AC93             1262*  ; inputs: a is the number of sprites to activate
04AC93             1263*  vdu_sprite_activate:
04AC93 32 A5 AC 04 1264*      ld (@num),a
04AC97 21 A2 AC 04 1265*      ld hl,@cmd
04AC9B 01 04 00 00 1266*      ld bc,@end-@cmd
04AC9F 5B DF       1267*      rst.lil $18
04ACA1 C9          1268*      ret
04ACA2 17 1B 07    1269*  @cmd: db 23,27,7
04ACA5 00          1270*  @num: db 0x00
04ACA6             1271*  @end:
04ACA6             1272*  
04ACA6             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04ACA6             1274*  ; inputs: none
04ACA6             1275*  ; prerequisites: vdu_sprite_select
04ACA6             1276*  vdu_sprite_next_frame:
04ACA6 21 B1 AC 04 1277*      ld hl,@cmd
04ACAA 01 03 00 00 1278*      ld bc,@end-@cmd
04ACAE 5B DF       1279*      rst.lil $18
04ACB0 C9          1280*      ret
04ACB1 17 1B 08    1281*  @cmd: db 23,27,8
04ACB4             1282*  @end:
04ACB4             1283*  
04ACB4             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04ACB4             1285*  ; inputs: none
04ACB4             1286*  ; prerequisites: vdu_sprite_select
04ACB4             1287*  vdu_sprite_prev_frame:
04ACB4 21 BF AC 04 1288*      ld hl,@cmd
04ACB8 01 03 00 00 1289*      ld bc,@end-@cmd
04ACBC 5B DF       1290*      rst.lil $18
04ACBE C9          1291*      ret
04ACBF 17 1B 09    1292*  @cmd: db 23,27,9
04ACC2             1293*  @end:
04ACC2             1294*  
04ACC2             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04ACC2             1296*  ; inputs: a is frame number to select
04ACC2             1297*  ; prerequisites: vdu_sprite_select
04ACC2             1298*  vdu_sprite_select_frame:
04ACC2 32 D4 AC 04 1299*      ld (@frame),a
04ACC6 21 D1 AC 04 1300*      ld hl,@cmd
04ACCA 01 04 00 00 1301*      ld bc,@end-@cmd
04ACCE 5B DF       1302*      rst.lil $18
04ACD0 C9          1303*      ret
04ACD1 17 1B 0A    1304*  @cmd:    db 23,27,10
04ACD4 00          1305*  @frame:  db 0x00
04ACD5             1306*  @end:
04ACD5             1307*  
04ACD5             1308*  ; VDU 23, 27, 11: Show current sprite
04ACD5             1309*  ; inputs: none
04ACD5             1310*  ; prerequisites: vdu_sprite_select
04ACD5             1311*  vdu_sprite_show:
04ACD5 21 E0 AC 04 1312*      ld hl,@cmd
04ACD9 01 03 00 00 1313*      ld bc,@end-@cmd
04ACDD 5B DF       1314*      rst.lil $18
04ACDF C9          1315*      ret
04ACE0 17 1B 0B    1316*  @cmd: db 23,27,11
04ACE3             1317*  @end:
04ACE3             1318*  
04ACE3             1319*  ; VDU 23, 27, 12: Hide current sprite
04ACE3             1320*  ; inputs: none
04ACE3             1321*  ; prerequisites: vdu_sprite_select
04ACE3             1322*  vdu_sprite_hide:
04ACE3 21 EE AC 04 1323*      ld hl,@cmd
04ACE7 01 03 00 00 1324*      ld bc,@end-@cmd
04ACEB 5B DF       1325*      rst.lil $18
04ACED C9          1326*      ret
04ACEE 17 1B 0C    1327*  @cmd: db 23,27,12
04ACF1             1328*  @end:
04ACF1             1329*  
04ACF1             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04ACF1             1331*  ; inputs: bc is x coordinate, de is y coordinate
04ACF1             1332*  ; prerequisites: vdu_sprite_select
04ACF1             1333*  vdu_sprite_move_abs:
04ACF1 ED 43 09 AD 1334*      ld (@xpos),bc
       04          
04ACF6 ED 53 0B AD 1335*      ld (@ypos),de
       04          
04ACFB 21 06 AD 04 1336*      ld hl,@cmd
04ACFF 01 07 00 00 1337*      ld bc,@end-@cmd
04AD03 5B DF       1338*      rst.lil $18
04AD05 C9          1339*      ret
04AD06 17 1B 0D    1340*  @cmd:  db 23,27,13
04AD09 00 00       1341*  @xpos: dw 0x0000
04AD0B 00 00       1342*  @ypos: dw 0x0000
04AD0D 00          1343*  @end:  db 0x00 ; padding
04AD0E             1344*  
04AD0E             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD0E             1346*  ; inputs: bc is x coordinate, de is y coordinate
04AD0E             1347*  ; prerequisites: vdu_sprite_select
04AD0E             1348*  vdu_sprite_move_rel:
04AD0E ED 43 26 AD 1349*      ld (@dx),bc
       04          
04AD13 ED 53 28 AD 1350*      ld (@dy),de
       04          
04AD18 21 23 AD 04 1351*      ld hl,@cmd
04AD1C 01 07 00 00 1352*      ld bc,@end-@cmd
04AD20 5B DF       1353*      rst.lil $18
04AD22 C9          1354*      ret
04AD23 17 1B 0E    1355*  @cmd: db 23,27,14
04AD26 00 00       1356*  @dx:  dw 0x0000
04AD28 00 00       1357*  @dy:  dw 0x0000
04AD2A 00          1358*  @end: db 0x00 ; padding
04AD2B             1359*  
04AD2B             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AD2B             1361*  ; USING 16.8 FIXED POINT COORDINATES
04AD2B             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AD2B             1363*  ;   the fractional portiion of the inputs are truncated
04AD2B             1364*  ;   leaving only the 16-bit integer portion
04AD2B             1365*  ; prerequisites: vdu_sprite_select
04AD2B             1366*  vdu_sprite_move_abs168:
04AD2B             1367*  ; populate in the reverse of normal to keep the
04AD2B             1368*  ; inputs from stomping on each other
04AD2B ED 53 4A AD 1369*      ld (@ypos-1),de
       04          
04AD30 ED 43 48 AD 1370*      ld (@xpos-1),bc
       04          
04AD35 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04AD37 32 48 AD 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD3B 21 46 AD 04 1373*      ld hl,@cmd
04AD3F 01 07 00 00 1374*      ld bc,@end-@cmd
04AD43 5B DF       1375*      rst.lil $18
04AD45 C9          1376*      ret
04AD46 17 1B 0D    1377*  @cmd:  db 23,27,13
04AD49 00 00       1378*  @xpos: dw 0x0000
04AD4B 00 00       1379*  @ypos: dw 0x0000
04AD4D             1380*  @end:  ; no padding required b/c we shifted de right
04AD4D             1381*  
04AD4D             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD4D             1383*  ; USING 16.8 FIXED POINT COORDINATES
04AD4D             1384*  ; inputs: ub.c is dx, ud.e is dy
04AD4D             1385*  ;   the fractional portiion of the inputs are truncated
04AD4D             1386*  ;   leaving only the 16-bit integer portion
04AD4D             1387*  ; prerequisites: vdu_sprite_select
04AD4D             1388*  vdu_sprite_move_rel168:
04AD4D             1389*  ; populate in the reverse of normal to keep the
04AD4D             1390*  ; inputs from stomping on each other
04AD4D ED 53 6C AD 1391*      ld (@dy-1),de
       04          
04AD52 ED 43 6A AD 1392*      ld (@dx-1),bc
       04          
04AD57 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04AD59 32 6A AD 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD5D 21 68 AD 04 1395*      ld hl,@cmd
04AD61 01 07 00 00 1396*      ld bc,@end-@cmd
04AD65 5B DF       1397*      rst.lil $18
04AD67 C9          1398*      ret
04AD68 17 1B 0E    1399*  @cmd:  db 23,27,14
04AD6B 00 00       1400*  @dx: dw 0x0000
04AD6D 00 00       1401*  @dy: dw 0x0000
04AD6F             1402*  @end:  ; no padding required b/c we shifted de right
04AD6F             1403*  
04AD6F             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AD6F             1405*  ; inputs: none
04AD6F             1406*  vdu_sprite_update:
04AD6F 21 7A AD 04 1407*      ld hl,@cmd
04AD73 01 03 00 00 1408*      ld bc,@end-@cmd
04AD77 5B DF       1409*      rst.lil $18
04AD79 C9          1410*      ret
04AD7A 17 1B 0F    1411*  @cmd: db 23,27,15
04AD7D             1412*  @end:
04AD7D             1413*  
04AD7D             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AD7D             1415*  ; inputs: none
04AD7D             1416*  vdu_sprite_bmp_reset:
04AD7D 21 88 AD 04 1417*      ld hl,@cmd
04AD81 01 03 00 00 1418*      ld bc,@end-@cmd
04AD85 5B DF       1419*      rst.lil $18
04AD87 C9          1420*      ret
04AD88 17 1B 10    1421*  @cmd: db 23,27,16
04AD8B             1422*  @end:
04AD8B             1423*  
04AD8B             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AD8B             1425*  ; inputs: none
04AD8B             1426*  vdu_sprite_reset:
04AD8B 21 96 AD 04 1427*      ld hl,@cmd
04AD8F 01 03 00 00 1428*      ld bc,@end-@cmd
04AD93 5B DF       1429*      rst.lil $18
04AD95 C9          1430*      ret
04AD96 17 1B 11    1431*  @cmd: db 23,27,17
04AD99             1432*  @end:
04AD99             1433*  
04AD99             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AD99             1435*  ; inputs: a is the GCOL paint mode
04AD99             1436*  ; prerequisites: vdu_sprite_select
04AD99             1437*  vdu_sprite_set_gcol:
04AD99 32 AB AD 04 1438*      ld (@mode),a
04AD9D 21 A8 AD 04 1439*      ld hl,@cmd
04ADA1 01 04 00 00 1440*      ld bc,@end-@cmd
04ADA5 5B DF       1441*      rst.lil $18
04ADA7 C9          1442*      ret
04ADA8 17 1B 12    1443*  @cmd:  db 23,27,18
04ADAB 00          1444*  @mode: db 0x00
04ADAC             1445*  @end:
04ADAC             1446*  
04ADAC             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04ADAC             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04ADAC             1449*  ; inputs: hl=bufferId
04ADAC             1450*  ; prerequisites: vdu_sprite_select
04ADAC             1451*  vdu_sprite_add_buff:
04ADAC 22 BE AD 04 1452*      ld (@bufferId),hl
04ADB0 21 BB AD 04 1453*      ld hl,@cmd
04ADB4 01 05 00 00 1454*      ld bc,@end-@cmd
04ADB8 5B DF       1455*      rst.lil $18
04ADBA C9          1456*      ret
04ADBB 17 1B 26    1457*  @cmd:      db 23,27,0x26
04ADBE 00 00       1458*  @bufferId: dw 0x0000
04ADC0 00          1459*  @end:      db 0x00 ; padding
04ADC1             1460*  
04ADC1             1461*  
04ADC1             1462*  ; #### from sfx.asm ####
04ADC1 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04ADC2             1464*  
04ADC2             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04ADC2             1466*  ; ; inputs: hl = bufferId
04ADC2             1467*  ; sfx_play:
04ADC2             1468*  ; 	ld iy,sfx_last_channel
04ADC2             1469*  ; 	ld a,(iy+0)
04ADC2             1470*  ; 	ld (@bufferId),hl
04ADC2             1471*  ; @find_next_channel:
04ADC2             1472*  ; 	inc a ; bump to next channel
04ADC2             1473*  ; 	and 31 ; modulo 32 channel
04ADC2             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04ADC2             1475*  ; 	ret z ; so we return to caller without doing anything
04ADC2             1476*  ; 	push af ; back up channel
04ADC2             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04ADC2             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04ADC2             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04ADC2             1480*  ; 	pop af ; restore channel
04ADC2             1481*  ; 	jr @find_next_channel ; try the next channel
04ADC2             1482*  ; @play_sfx:
04ADC2             1483*  ; 	pop af ; restore channel
04ADC2             1484*  ; 	ld (iy+0),a ; store channel
04ADC2             1485*  ; 	ld hl,(@bufferId)
04ADC2             1486*  ; 	ld c,a ; channel
04ADC2             1487*  ; 	ld b,127 ; full volume
04ADC2             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04ADC2             1489*  ; 	jp vdu_play_sample
04ADC2             1490*  ; @bufferId:
04ADC2             1491*  ; 	dw 0x0000 ; 16-bit value
04ADC2             1492*  
04ADC2             1493*  sfx_play_random_hurt:
04ADC2 CD BB B7 04 1494*  	call rand_8
04ADC6 E6 03       1495*  	and 3
04ADC8 FE 00       1496*  	cp 0
04ADCA CA A6 BE 04 1497*  	jp z,sfx_play_ahh
04ADCE FE 01       1498*  	cp 1
04ADD0 CA B2 BE 04 1499*  	jp z,sfx_play_augh
04ADD4 FE 02       1500*  	cp 2
04ADD6 CA BE BE 04 1501*  	jp z,sfx_play_ayee
04ADDA C3 8A BF 04 1502*  	jp sfx_play_ugh
04ADDE             1503*  
04ADDE             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04ADDE             1505*  sfx_load_main:
04ADDE 21 00 00 00 1506*      ld hl,0
04ADE2 22 D0 B7 04 1507*      ld (cur_file_idx),hl
04ADE6             1508*  sfx_load_main_loop:
04ADE6             1509*  ; back up loop counter
04ADE6 C5          1510*      push bc
04ADE7             1511*  ; load the next sound
04ADE7 CD 3B AE 04 1512*      call load_next_sound
04ADEB             1513*  ; draw all the things
04ADEB CD 39 B9 04 1514*      call tmp_draw_all_the_things
04ADEF             1515*  ; move bj
04ADEF CD C1 B8 04 1516*  	call move_bj
04ADF3             1517*  ; print welcome message
04ADF3 DD 21 88 7C 1518*  	ld ix,font_itc_honda
       04          
04ADF8 21 A3 C1 04 1519*  	ld hl,hello_world
04ADFC 01 20 00 00 1520*  	ld bc,32
04AE00 11 02 00 00 1521*  	ld de,2
04AE04 CD 80 65 04 1522*  	call font_bmp_print
04AE08             1523*  ; print current filename
04AE08 CD 84 A8 04 1524*  	call vdu_cls
04AE0C 2A D3 B7 04 1525*  	ld hl,(cur_filename)
04AE10 CD 53 AF 04 1526*  	call printString
04AE14 CD 68 AF 04 1527*  	call printNewLine
04AE18             1528*  
04AE18             1529*  ; print current load stopwatch
04AE18 21 C5 C1 04 1530*  	ld hl,loading_time
04AE1C CD 53 AF 04 1531*  	call printString
04AE20 CD 55 C1 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04AE24 CD A1 AF 04 1533*  	call printDec
04AE28             1534*  
04AE28             1535*  ; flip screen
04AE28 CD 53 AA 04 1536*      call vdu_flip
04AE2C             1537*  ; ; delay for a bit so sound can play
04AE2C             1538*  ;     ld a,%10000000 ; 1 second delay
04AE2C             1539*  ;     call multiPurposeDelay
04AE2C             1540*  ; decrement loop counter
04AE2C C1          1541*      pop bc
04AE2D 0B          1542*  	dec bc
04AE2E             1543*  ; ; DEBUG: DUMP REGISTERS
04AE2E             1544*  ; 	push bc
04AE2E             1545*  ; 	call dumpRegistersHex
04AE2E             1546*  ; 	call vdu_flip
04AE2E             1547*  ; 	pop bc
04AE2E             1548*  ; ; END DEBUG
04AE2E 79          1549*      ld a,c
04AE2F B7          1550*      or a
04AE30 C2 E6 AD 04 1551*      jp nz,sfx_load_main_loop
04AE34 78          1552*      ld a,b
04AE35 B7          1553*      or a
04AE36 C2 E6 AD 04 1554*      jp nz,sfx_load_main_loop
04AE3A C9          1555*      ret
04AE3B             1556*  
04AE3B             1557*  load_next_sound:
04AE3B             1558*  ; look up the load routine for the current file index
04AE3B 2A D0 B7 04 1559*  	ld hl,(cur_file_idx)
04AE3F 29          1560*  	add hl,hl ; multiply current index by 2 ...
04AE40 ED 5B D0 B7 1561*  	ld de,(cur_file_idx)
       04          
04AE45 19          1562*  	add hl,de ; ... now by 3
04AE46 ED 5B DC B7 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04AE4B 19          1564*  	add hl,de
04AE4C ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04AE4E 22 53 AE 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04AE52             1567*  @jump_addr:
04AE52 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04AE56             1569*  ; look up the buffer id for the current file
04AE56 2A D0 B7 04 1570*  	ld hl,(cur_file_idx)
04AE5A 29          1571*  	add hl,hl ; multiply current index by 2 ...
04AE5B ED 5B D0 B7 1572*  	ld de,(cur_file_idx)
       04          
04AE60 19          1573*  	add hl,de ; ... now by 3
04AE61 ED 5B D9 B7 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04AE66 19          1575*  	add hl,de
04AE67 ED 27       1576*  	ld hl,(hl)
04AE69 22 D6 B7 04 1577*  	ld (cur_buffer_id),hl
04AE6D             1578*  ; bump the current file index
04AE6D 2A D0 B7 04 1579*  	ld hl,(cur_file_idx)
04AE71 23          1580*  	inc hl
04AE72 22 D0 B7 04 1581*  	ld (cur_file_idx),hl
04AE76 C9          1582*  	ret
04AE77             1583*  
04AE77             1584*  ; load a sound file to a buffer
04AE77             1585*  ; inputs: hl = bufferId ; ix = file size
04AE77             1586*  vdu_load_sfx:
04AE77             1587*  ; back up input parameters
04AE77 E5          1588*      push hl ; bufferId
04AE78             1589*  ; load the sound
04AE78 CD D4 C3 04 1590*  	call vdu_load_buffer_from_file
04AE7C             1591*  ; now make the buffer a sound sample
04AE7C E1          1592*      pop hl ; bufferId
04AE7D AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04AE7E             1594*      ; push hl ; bufferId
04AE7E CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04AE82             1596*  ; ; play the loaded sound
04AE82             1597*  ;     ld c,0 ; channel
04AE82             1598*  ;     ld b,127 ; full volume
04AE82             1599*  ;     ld de,1000 ; 1 second duration
04AE82             1600*  ;     pop hl ; bufferId
04AE82             1601*  ;     call vdu_play_sample
04AE82 C9          1602*      ret
04AE83             1603*  
04AE83             1604*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AE83             1605*  ; inputs: hl=bufferId
04AE83             1606*  vdu_buff_select_buff:
04AE83 22 9D AE 04 1607*  	ld (@bufferId),hl
04AE87 21 92 AE 04 1608*  	ld hl,@start
04AE8B 01 0D 00 00 1609*  	ld bc,@end-@start
04AE8F 5B DF       1610*  	rst.lil $18
04AE91 C9          1611*  	ret
04AE92             1612*  ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
04AE92 17 00 A0 FE 1613*  @start: db 23,0,0xA0,0xFE,0xFF,0 ; bufferId 65534
       FF 00       
04AE98 05 00       1614*          dw @end-@cmd
04AE9A 17 1B 20    1615*  @cmd: db 23,27,0x20
04AE9D 00 00       1616*  @bufferId: dw 0x0000
04AE9F 00          1617*  @end: db 0x00 ; padding
04AEA0             1618*  
04AEA0             1619*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AEA0             1620*  ; &E8-&EF 	232-239 	Bitmap plot §
04AEA0             1621*  ; VDU 25, mode, x; y;: PLOT command
04AEA0             1622*  ; inputs: bc=x0, de=y0
04AEA0             1623*  ; prerequisites: vdu_buff_select_buff
04AEA0             1624*  vdu_plot_bmp_buff:
04AEA0 ED 43 BF AE 1625*      ld (@x0),bc
       04          
04AEA5 ED 53 C1 AE 1626*      ld (@y0),de
       04          
04AEAA 21 B5 AE 04 1627*  	ld hl,@start
04AEAE 01 0E 00 00 1628*  	ld bc,@end-@start
04AEB2 5B DF       1629*  	rst.lil $18
04AEB4 C9          1630*  	ret
04AEB5             1631*  ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
04AEB5 17 00 A0 FE 1632*  @start: db 23,0,0xA0,0xFE,0xFF,0 ; bufferId 65534
       FF 00       
04AEBB 06 00       1633*          dw @end-@cmd
04AEBD 19          1634*  @cmd:   db 25
04AEBE ED          1635*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04AEBF 00 00       1636*  @x0: 	dw 0x0000
04AEC1 00 00       1637*  @y0: 	dw 0x0000
04AEC3 00          1638*  @end:   db 0x00 ; padding
04AEC4             1639*  
04AEC4             1640*  ; Command 1: Call a buffer
04AEC4             1641*  ; VDU 23, 0 &A0, bufferId; 1
04AEC4             1642*  vdu_buff_call:
04AEC4 22 DC AE 04 1643*  	ld (@bufferId),hl
04AEC8 3E 01       1644*      ld a,1
04AECA 32 DE AE 04 1645*      ld (@end-1),a
04AECE 21 D9 AE 04 1646*  	ld hl,@cmd
04AED2 01 06 00 00 1647*  	ld bc,@end-@cmd
04AED6 5B DF       1648*  	rst.lil $18
04AED8 C9          1649*  	ret
04AED9 17 00 A0    1650*  @cmd: db 23,0,0xA0
04AEDC 00 00       1651*  @bufferId: dw 0x0000
04AEDE 01          1652*      db 0x01 ; call buffer
04AEDF             1653*  @end:
04AEDF             1654*  
04AEDF             1655*  ; Command 2: Clear a buffer
04AEDF             1656*  ; VDU 23, 0, &A0, bufferId; 2
04AEDF             1657*  vdu_buff_clear:
04AEDF 22 F7 AE 04 1658*  	ld (@bufferId),hl
04AEE3 3E 02       1659*      ld a,2
04AEE5 32 F9 AE 04 1660*      ld (@end-1),a
04AEE9 21 F4 AE 04 1661*  	ld hl,@cmd
04AEED 01 06 00 00 1662*  	ld bc,@end-@cmd
04AEF1 5B DF       1663*  	rst.lil $18
04AEF3 C9          1664*  	ret
04AEF4 17 00 A0    1665*  @cmd: db 23,0,0xA0
04AEF7 00 00       1666*  @bufferId: dw 0x0000
04AEF9 02          1667*      db 0x02 ; clear buffer
04AEFA             1668*  @end:
04AEFA             1669*  
04AEFA             1670*  
04AEFA             1671*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04AEFA             1672*  ; inputs: a is the plotting mode, c is the colour
04AEFA             1673*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04AEFA             1674*  vdu_gcol_fg_buff:
04AEFA             1675*  ; This command will set both the current graphics colour,
04AEFA             1676*  ; and the current graphics plotting mode.
04AEFA             1677*  ; As with VDU 17 the colour number will set the foreground colour
04AEFA             1678*  ; if it is in the range 0-127, or the background colour if it is
04AEFA             1679*  ; in the range 128-255, and will be interpreted in the same manner.
04AEFA             1680*  ; Support for different plotting modes on Agon is currently very limited.
04AEFA             1681*  ; The only fully supported mode is mode 0, which is the default mode.
04AEFA             1682*  ; This mode will plot the given colour at the given graphics coordinate,
04AEFA             1683*  ; and will overwrite any existing graphics at that coordinate. There is
04AEFA             1684*  ; very limited support for mode 4, which will invert the colour of any
04AEFA             1685*  ; existing graphics at the given coordinate, but this is not fully supported
04AEFA             1686*  ; and may not work as expected.
04AEFA             1687*  ; Support for other plotting modes, matching those provided by Acorn’s
04AEFA             1688*  ; original VDU system, may be added in the future.
04AEFA             1689*  ; This command is identical to the BASIC GCOL keyword.
04AEFA 32 17 AF 04 1690*  	ld (@mode),a
04AEFE 79          1691*      ld a,c
04AEFF 32 18 AF 04 1692*      ld (@col),a
04AF03 21 0E AF 04 1693*  	ld hl,@start
04AF07 01 0B 00 00 1694*  	ld bc,@end-@start
04AF0B 5B DF       1695*  	rst.lil $18
04AF0D C9          1696*  	ret
04AF0E             1697*  ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
04AF0E 17 00 A0 FE 1698*  @start: db 23,0,0xA0,0xFE,0xFF,0 ; bufferId 65534
       FF 00       
04AF14 03 00       1699*          dw @end-@cmd
04AF16 12          1700*  @cmd: db 18
04AF17 00          1701*  @mode: db 0
04AF18 00          1702*  @col: db 0
04AF19             1703*  @end:
04AF19             1704*  
04AF19             1705*  
04AF19             1706*  ; draw a filled rectangle
04AF19             1707*  vdu_plot_rf_buff:
04AF19 ED 43 48 AF 1708*      ld (@x0),bc
       04          
04AF1E ED 53 4A AF 1709*      ld (@y0),de
       04          
04AF23 DD 22 4E AF 1710*      ld (@x1),ix
       04          
04AF28 FD 22 50 AF 1711*      ld (@y1),iy
       04          
04AF2D 3E 19       1712*      ld a,25 ; we have to reload the 2nd plot command
04AF2F 32 4C AF 04 1713*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AF33 21 3E AF 04 1714*  	ld hl,@start
04AF37 01 14 00 00 1715*  	ld bc,@end-@start
04AF3B 5B DF       1716*  	rst.lil $18
04AF3D C9          1717*      ret
04AF3E             1718*  ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
04AF3E 17 00 A0 FE 1719*  @start: db 23,0,0xA0,0xFE,0xFF,0 ; bufferId 65534
       FF 00       
04AF44 0C 00       1720*          dw @end-@cmd0
04AF46 19          1721*  @cmd0:  db 25 ; plot
04AF47 04          1722*  @arg0:  db plot_sl_both+mv_abs
04AF48 00 00       1723*  @x0:    dw 0x0000
04AF4A 00 00       1724*  @y0:    dw 0x0000
04AF4C 19          1725*  @cmd1:  db 25 ; plot
04AF4D 65          1726*  @arg1:  db plot_rf+dr_abs_fg
04AF4E 00 00       1727*  @x1:    dw 0x0000
04AF50 00 00       1728*  @y1:    dw 0x0000
04AF52 00          1729*  @end:   db 0x00 ; padding
04AF53             0026   	; include "src/asm/vdu_buff.asm"
04AF53             0027       include "src/asm/functions.asm"
04AF53             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04AF53             0002*  ; Print a zero-terminated string
04AF53             0003*  ; HL: Pointer to string
04AF53             0004*  printString:
04AF53 C5          0005*  	PUSH	BC
04AF54 01 00 00 00 0006*  	LD		BC,0
04AF58 3E 00       0007*  	LD 	 	A,0
04AF5A 5B DF       0008*  	RST.LIL 18h
04AF5C C1          0009*  	POP		BC
04AF5D C9          0010*  	RET
04AF5E             0011*  ; print a VDU sequence
04AF5E             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04AF5E             0013*  sendVDUsequence:
04AF5E C5          0014*  	PUSH	BC
04AF5F 01 00 00 00 0015*  	LD		BC, 0
04AF63 4E          0016*  	LD		C, (HL)
04AF64 5B DF       0017*  	RST.LIL	18h
04AF66 C1          0018*  	POP		BC
04AF67 C9          0019*  	RET
04AF68             0020*  ; Print Newline sequence to VDP
04AF68             0021*  printNewLine:
04AF68 3E 0D       0022*  	LD	A, '\r'
04AF6A 5B D7       0023*  	RST.LIL 10h
04AF6C 3E 0A       0024*  	LD	A, '\n'
04AF6E 5B D7       0025*  	RST.LIL 10h
04AF70 C9          0026*  	RET
04AF71             0027*  ; Print a 24-bit HEX number
04AF71             0028*  ; HLU: Number to print
04AF71             0029*  printHex24:
04AF71 E5          0030*  	PUSH	HL
04AF72 21 02 00 00 0031*  	LD		HL, 2
04AF76 39          0032*  	ADD		HL, SP
04AF77 7E          0033*  	LD		A, (HL)
04AF78 E1          0034*  	POP		HL
04AF79 CD 83 AF 04 0035*  	CALL	printHex8
04AF7D             0036*  ; Print a 16-bit HEX number
04AF7D             0037*  ; HL: Number to print
04AF7D             0038*  printHex16:
04AF7D 7C          0039*  	LD		A,H
04AF7E CD 83 AF 04 0040*  	CALL	printHex8
04AF82 7D          0041*  	LD		A,L
04AF83             0042*  ; Print an 8-bit HEX number
04AF83             0043*  ; A: Number to print
04AF83             0044*  printHex8:
04AF83 4F          0045*  	LD		C,A
04AF84 1F          0046*  	RRA
04AF85 1F          0047*  	RRA
04AF86 1F          0048*  	RRA
04AF87 1F          0049*  	RRA
04AF88 CD 8D AF 04 0050*  	CALL	@F
04AF8C 79          0051*  	LD		A,C
04AF8D             0052*  @@:
04AF8D E6 0F       0053*  	AND		0Fh
04AF8F C6 90       0054*  	ADD		A,90h
04AF91 27          0055*  	DAA
04AF92 CE 40       0056*  	ADC		A,40h
04AF94 27          0057*  	DAA
04AF95 5B D7       0058*  	RST.LIL	10h
04AF97 C9          0059*  	RET
04AF98             0060*  
04AF98             0061*  ; Print a 0x HEX prefix
04AF98             0062*  DisplayHexPrefix:
04AF98 3E 30       0063*  	LD	A, '0'
04AF9A 5B D7       0064*  	RST.LIL 10h
04AF9C 3E 78       0065*  	LD	A, 'x'
04AF9E 5B D7       0066*  	RST.LIL 10h
04AFA0 C9          0067*  	RET
04AFA1             0068*  
04AFA1             0069*  
04AFA1             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04AFA1             0071*  ; HL : Value to print
04AFA1             0072*  printDec:
04AFA1 11 C5 AF 04 0073*  	LD	 DE, _printDecBuffer
04AFA5 CD CE AF 04 0074*  	CALL Num2String
04AFA9             0075*  ; BEGIN MY CODE
04AFA9             0076*  ; replace leading zeroes with spaces
04AFA9 21 C5 AF 04 0077*      LD	 HL, _printDecBuffer
04AFAD 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04AFAF             0079*  @loop:
04AFAF 7E          0080*      LD	 A, (HL)
04AFB0 FE 30       0081*      CP	 '0'
04AFB2 C2 C0 AF 04 0082*      JP	 NZ, @done
04AFB6 3E 20       0083*      LD   A, ' '
04AFB8 77          0084*      LD	 (HL), A
04AFB9 23          0085*      INC	 HL
04AFBA CD 75 A8 04 0086*      CALL vdu_cursor_forward
04AFBE 10 EF       0087*      DJNZ @loop
04AFC0             0088*  @done:
04AFC0             0089*  ; END MY CODE
04AFC0             0090*  	; LD	 HL, _printDecBuffer
04AFC0 CD 53 AF 04 0091*  	CALL printString
04AFC4 C9          0092*  	RET
04AFC5 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04AFCE             0094*  
04AFCE             0095*  ; This routine converts the value from HL into it's ASCII representation,
04AFCE             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04AFCE             0097*  ; so it will allways be 8 characters length
04AFCE             0098*  ; HL : Value to convert to string
04AFCE             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04AFCE             0100*  Num2String:
04AFCE 01 80 69 67 0101*  	LD	 BC,-10000000
04AFD2 CD 05 B0 04 0102*  	CALL OneDigit
04AFD6 01 C0 BD F0 0103*  	LD	 BC,-1000000
04AFDA CD 05 B0 04 0104*  	CALL OneDigit
04AFDE 01 60 79 FE 0105*  	LD	 BC,-100000
04AFE2 CD 05 B0 04 0106*  	CALL OneDigit
04AFE6 01 F0 D8 FF 0107*  	LD   BC,-10000
04AFEA CD 05 B0 04 0108*  	CALL OneDigit
04AFEE 01 18 FC FF 0109*  	LD   BC,-1000
04AFF2 CD 05 B0 04 0110*  	CALL OneDigit
04AFF6 01 9C FF FF 0111*  	LD   BC,-100
04AFFA CD 05 B0 04 0112*  	CALL OneDigit
04AFFE 0E F6       0113*  	LD   C,-10
04B000 CD 05 B0 04 0114*  	CALL OneDigit
04B004 48          0115*  	LD   C,B
04B005             0116*  OneDigit:
04B005 3E 2F       0117*  	LD   A,'0'-1
04B007             0118*  DivideMe:
04B007 3C          0119*  	INC  A
04B008 09          0120*  	ADD  HL,BC
04B009 38 FC       0121*  	JR   C,DivideMe
04B00B ED 42       0122*  	SBC  HL,BC
04B00D 12          0123*  	LD   (DE),A
04B00E 13          0124*  	INC  DE
04B00F C9          0125*  	RET
04B010             0126*  
04B010             0127*  
04B010             0128*  ; #### new functions added by Brandon R. Gates ####
04B010             0129*  
04B010             0130*  ; print the binary representation of the 8-bit value in a
04B010             0131*  ; destroys a, hl, bc
04B010             0132*  printBin8:
04B010 06 08       0133*      ld b,8      ; loop counter for 8 bits
04B012 21 2D B0 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04B016             0135*                  ; (which will be the high bit of the value in a)
04B016             0136*  @loop:
04B016 07          0137*      rlca ; put the next highest bit into carry
04B017 38 04       0138*      jr c,@one
04B019 36 30       0139*      ld (hl),'0'
04B01B 18 02       0140*      jr @next_bit
04B01D             0141*  @one:
04B01D 36 31       0142*      ld (hl),'1'
04B01F             0143*  @next_bit:
04B01F 23          0144*      inc hl
04B020 10 F4       0145*      djnz @loop
04B022             0146*  ; print it
04B022 21 2D B0 04 0147*  	ld hl,@cmd
04B026 01 08 00 00 0148*  	ld bc,@end-@cmd
04B02A 5B DF       0149*  	rst.lil $18
04B02C C9          0150*  	ret
04B02D             0151*  @cmd: ds 8 ; eight bytes for eight bits
04B035             0152*  @end:
04B035             0153*  
04B035             0154*  ; print registers to screen in hexidecimal format
04B035             0155*  ; inputs: none
04B035             0156*  ; outputs: values of every register printed to screen
04B035             0157*  ;    values of each register in global scratch memory
04B035             0158*  ; destroys: nothing
04B035             0159*  stepRegistersHex:
04B035             0160*  ; store everything in scratch
04B035 22 38 B2 04 0161*      ld (uhl),hl
04B039 ED 43 3B B2 0162*      ld (ubc),bc
       04          
04B03E ED 53 3E B2 0163*      ld (ude),de
       04          
04B043 DD 22 41 B2 0164*      ld (uix),ix
       04          
04B048 FD 22 44 B2 0165*      ld (uiy),iy
       04          
04B04D F5          0166*      push af ; fml
04B04E E1          0167*      pop hl  ; thanks, zilog
04B04F 22 35 B2 04 0168*      ld (uaf),hl
04B053 F5          0169*      push af ; dammit
04B054             0170*  
04B054             0171*  ; home the cursor
04B054 CD BC A9 04 0172*      call vdu_home_cursor
04B058             0173*  
04B058             0174*  ; print each register
04B058 21 C1 B1 04 0175*      ld hl,str_afu
04B05C CD 53 AF 04 0176*      call printString
04B060 2A 35 B2 04 0177*      ld hl,(uaf)
04B064 CD 71 AF 04 0178*      call printHex24
04B068 CD 68 AF 04 0179*      call printNewLine
04B06C             0180*  
04B06C 21 C5 B1 04 0181*      ld hl,str_hlu
04B070 CD 53 AF 04 0182*      call printString
04B074 2A 38 B2 04 0183*      ld hl,(uhl)
04B078 CD 71 AF 04 0184*      call printHex24
04B07C CD 68 AF 04 0185*      call printNewLine
04B080             0186*  
04B080 21 C9 B1 04 0187*      ld hl,str_bcu
04B084 CD 53 AF 04 0188*      call printString
04B088 2A 3B B2 04 0189*      ld hl,(ubc)
04B08C CD 71 AF 04 0190*      call printHex24
04B090 CD 68 AF 04 0191*      call printNewLine
04B094             0192*  
04B094 21 CD B1 04 0193*      ld hl,str_deu
04B098 CD 53 AF 04 0194*      call printString
04B09C 2A 3E B2 04 0195*      ld hl,(ude)
04B0A0 CD 71 AF 04 0196*      call printHex24
04B0A4 CD 68 AF 04 0197*      call printNewLine
04B0A8             0198*  
04B0A8 21 D1 B1 04 0199*      ld hl,str_ixu
04B0AC CD 53 AF 04 0200*      call printString
04B0B0 2A 41 B2 04 0201*      ld hl,(uix)
04B0B4 CD 71 AF 04 0202*      call printHex24
04B0B8 CD 68 AF 04 0203*      call printNewLine
04B0BC             0204*  
04B0BC 21 D5 B1 04 0205*      ld hl,str_iyu
04B0C0 CD 53 AF 04 0206*      call printString
04B0C4 2A 44 B2 04 0207*      ld hl,(uiy)
04B0C8 CD 71 AF 04 0208*      call printHex24
04B0CC CD 68 AF 04 0209*      call printNewLine
04B0D0             0210*  
04B0D0             0211*      ; call vsync
04B0D0             0212*  
04B0D0 CD 68 AF 04 0213*      call printNewLine
04B0D4             0214*  
04B0D4             0215*  ; check for escape key and quit if pressed
04B0D4             0216*  	MOSCALL mos_getkbmap
04B0D4 3E 1E       0001*M 			LD	A, function
04B0D6 5B CF       0002*M 			RST.LIL	08h
04B0D8             0217*  @stayhere:
04B0D8             0218*  ; 113 Escape
04B0D8 DD CB 0E 46 0219*      bit 0,(ix+14)
04B0DC 20 02       0220*      jr nz,@Escape
04B0DE 18 F8       0221*  	jr @stayhere
04B0E0             0222*  @Escape:
04B0E0 DD CB 0E 86 0223*      res 0,(ix+14) ; debounce the key (hopefully)
04B0E4 3E 80       0224*      ld a,%10000000
04B0E6 CD 68 C1 04 0225*      call multiPurposeDelay
04B0EA             0226*  
04B0EA             0227*  ; restore everything
04B0EA 2A 38 B2 04 0228*      ld hl, (uhl)
04B0EE ED 4B 3B B2 0229*      ld bc, (ubc)
       04          
04B0F3 ED 5B 3E B2 0230*      ld de, (ude)
       04          
04B0F8 DD 2A 41 B2 0231*      ld ix, (uix)
       04          
04B0FD FD 2A 44 B2 0232*      ld iy, (uiy)
       04          
04B102 F1          0233*      pop af
04B103             0234*  ; all done
04B103 C9          0235*      ret
04B104             0236*  
04B104             0237*  ; print registers to screen in hexidecimal format
04B104             0238*  ; inputs: none
04B104             0239*  ; outputs: values of every register printed to screen
04B104             0240*  ;    values of each register in global scratch memory
04B104             0241*  ; destroys: nothing
04B104             0242*  dumpRegistersHex:
04B104             0243*  ; store everything in scratch
04B104 22 38 B2 04 0244*      ld (uhl),hl
04B108 ED 43 3B B2 0245*      ld (ubc),bc
       04          
04B10D ED 53 3E B2 0246*      ld (ude),de
       04          
04B112 DD 22 41 B2 0247*      ld (uix),ix
       04          
04B117 FD 22 44 B2 0248*      ld (uiy),iy
       04          
04B11C F5          0249*      push af ; fml
04B11D E1          0250*      pop hl  ; thanks, zilog
04B11E 22 35 B2 04 0251*      ld (uaf),hl
04B122 F5          0252*      push af ; dammit
04B123             0253*  
04B123             0254*  ; home the cursor
04B123 CD BC A9 04 0255*      call vdu_home_cursor
04B127             0256*  
04B127             0257*  ; print each register
04B127 21 C1 B1 04 0258*      ld hl,str_afu
04B12B CD 53 AF 04 0259*      call printString
04B12F 2A 35 B2 04 0260*      ld hl,(uaf)
04B133 CD 71 AF 04 0261*      call printHex24
04B137 CD 68 AF 04 0262*      call printNewLine
04B13B             0263*  
04B13B 21 C5 B1 04 0264*      ld hl,str_hlu
04B13F CD 53 AF 04 0265*      call printString
04B143 2A 38 B2 04 0266*      ld hl,(uhl)
04B147 CD 71 AF 04 0267*      call printHex24
04B14B CD 68 AF 04 0268*      call printNewLine
04B14F             0269*  
04B14F 21 C9 B1 04 0270*      ld hl,str_bcu
04B153 CD 53 AF 04 0271*      call printString
04B157 2A 3B B2 04 0272*      ld hl,(ubc)
04B15B CD 71 AF 04 0273*      call printHex24
04B15F CD 68 AF 04 0274*      call printNewLine
04B163             0275*  
04B163 21 CD B1 04 0276*      ld hl,str_deu
04B167 CD 53 AF 04 0277*      call printString
04B16B 2A 3E B2 04 0278*      ld hl,(ude)
04B16F CD 71 AF 04 0279*      call printHex24
04B173 CD 68 AF 04 0280*      call printNewLine
04B177             0281*  
04B177 21 D1 B1 04 0282*      ld hl,str_ixu
04B17B CD 53 AF 04 0283*      call printString
04B17F 2A 41 B2 04 0284*      ld hl,(uix)
04B183 CD 71 AF 04 0285*      call printHex24
04B187 CD 68 AF 04 0286*      call printNewLine
04B18B             0287*  
04B18B 21 D5 B1 04 0288*      ld hl,str_iyu
04B18F CD 53 AF 04 0289*      call printString
04B193 2A 44 B2 04 0290*      ld hl,(uiy)
04B197 CD 71 AF 04 0291*      call printHex24
04B19B CD 68 AF 04 0292*      call printNewLine
04B19F             0293*  
04B19F CD DE AA 04 0294*      call vdu_vblank
04B1A3             0295*  
04B1A3 CD 68 AF 04 0296*      call printNewLine
04B1A7             0297*  ; restore everything
04B1A7 2A 38 B2 04 0298*      ld hl, (uhl)
04B1AB ED 4B 3B B2 0299*      ld bc, (ubc)
       04          
04B1B0 ED 5B 3E B2 0300*      ld de, (ude)
       04          
04B1B5 DD 2A 41 B2 0301*      ld ix, (uix)
       04          
04B1BA FD 2A 44 B2 0302*      ld iy, (uiy)
       04          
04B1BF F1          0303*      pop af
04B1C0             0304*  ; all done
04B1C0 C9          0305*      ret
04B1C1             0306*  
04B1C1 61 66 3D 00 0307*  str_afu: db "af=",0
04B1C5 68 6C 3D 00 0308*  str_hlu: db "hl=",0
04B1C9 62 63 3D 00 0309*  str_bcu: db "bc=",0
04B1CD 64 65 3D 00 0310*  str_deu: db "de=",0
04B1D1 69 78 3D 00 0311*  str_ixu: db "ix=",0
04B1D5 69 79 3D 00 0312*  str_iyu: db "iy=",0
04B1D9             0313*  
04B1D9             0314*  ; print udeuhl to screen in hexidecimal format
04B1D9             0315*  ; inputs: none
04B1D9             0316*  ; outputs: concatenated hexidecimal udeuhl
04B1D9             0317*  ; destroys: nothing
04B1D9             0318*  dumpUDEUHLHex:
04B1D9             0319*  ; store everything in scratch
04B1D9 22 38 B2 04 0320*      ld (uhl),hl
04B1DD ED 43 3B B2 0321*      ld (ubc),bc
       04          
04B1E2 ED 53 3E B2 0322*      ld (ude),de
       04          
04B1E7 DD 22 41 B2 0323*      ld (uix),ix
       04          
04B1EC FD 22 44 B2 0324*      ld (uiy),iy
       04          
04B1F1 F5          0325*      push af
04B1F2             0326*  
04B1F2             0327*  ; print each register
04B1F2             0328*  
04B1F2 21 2C B2 04 0329*      ld hl,str_udeuhl
04B1F6 CD 53 AF 04 0330*      call printString
04B1FA 2A 3E B2 04 0331*      ld hl,(ude)
04B1FE CD 71 AF 04 0332*      call printHex24
04B202 3E 2E       0333*  	ld a,'.'	; print a dot to separate the values
04B204 5B D7       0334*  	rst.lil 10h
04B206 2A 38 B2 04 0335*      ld hl,(uhl)
04B20A CD 71 AF 04 0336*      call printHex24
04B20E CD 68 AF 04 0337*      call printNewLine
04B212             0338*  
04B212             0339*  ; restore everything
04B212 2A 38 B2 04 0340*      ld hl, (uhl)
04B216 ED 4B 3B B2 0341*      ld bc, (ubc)
       04          
04B21B ED 5B 3E B2 0342*      ld de, (ude)
       04          
04B220 DD 2A 41 B2 0343*      ld ix, (uix)
       04          
04B225 FD 2A 44 B2 0344*      ld iy, (uiy)
       04          
04B22A F1          0345*      pop af
04B22B             0346*  ; all done
04B22B C9          0347*      ret
04B22C             0348*  
04B22C 75 64 65 2E 0349*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B235             0350*  
04B235             0351*  ; global scratch memory for registers
04B235 00 00 00    0352*  uaf: dl 0
04B238 00 00 00    0353*  uhl: dl 0
04B23B 00 00 00    0354*  ubc: dl 0
04B23E 00 00 00    0355*  ude: dl 0
04B241 00 00 00    0356*  uix: dl 0
04B244 00 00 00    0357*  uiy: dl 0
04B247 00 00 00    0358*  usp: dl 0
04B24A 00 00 00    0359*  upc: dl 0
04B24D             0360*  
04B24D             0361*  ; inputs: whatever is in the flags register
04B24D             0362*  ; outputs: binary representation of flags
04B24D             0363*  ;          with a header so we know which is what
04B24D             0364*  ; destroys: nothing
04B24D             0365*  ; preserves: everything
04B24D             0366*  dumpFlags:
04B24D             0367*  ; first we curse zilog for not giving direct access to flags
04B24D F5          0368*      push af ; this is so we can send it back unharmed
04B24E F5          0369*      push af ; this is so we can pop it to hl
04B24F             0370*  ; store everything in scratch
04B24F 22 38 B2 04 0371*      ld (uhl),hl
04B253 ED 43 3B B2 0372*      ld (ubc),bc
       04          
04B258 ED 53 3E B2 0373*      ld (ude),de
       04          
04B25D DD 22 41 B2 0374*      ld (uix),ix
       04          
04B262 FD 22 44 B2 0375*      ld (uiy),iy
       04          
04B267             0376*  ; next we print the header
04B267 21 93 B2 04 0377*      ld hl,@header
04B26B CD 53 AF 04 0378*      call printString
04B26F E1          0379*      pop hl ; flags are now in l
04B270 7D          0380*      ld a,l ; flags are now in a
04B271 CD 10 B0 04 0381*      call printBin8
04B275 CD 68 AF 04 0382*  	call printNewLine
04B279             0383*  ; restore everything
04B279 2A 38 B2 04 0384*      ld hl, (uhl)
04B27D ED 4B 3B B2 0385*      ld bc, (ubc)
       04          
04B282 ED 5B 3E B2 0386*      ld de, (ude)
       04          
04B287 DD 2A 41 B2 0387*      ld ix, (uix)
       04          
04B28C FD 2A 44 B2 0388*      ld iy, (uiy)
       04          
04B291 F1          0389*      pop af ; send her home the way she came
04B292 C9          0390*      ret
04B293             0391*  ; Bit 7 (S): Sign flag
04B293             0392*  ; Bit 6 (Z): Zero flag
04B293             0393*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B293             0394*  ; Bit 4 (H): Half Carry flag
04B293             0395*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B293             0396*  ; Bit 2 (PV): Parity/Overflow flag
04B293             0397*  ; Bit 1 (N): Subtract flag
04B293             0398*  ; Bit 0 (C): Carry flag
04B293 53 5A 78 48 0399*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B29E             0400*  
04B29E             0401*  ; set all the bits in the flag register
04B29E             0402*  ; more of an academic exercise than anything useful
04B29E             0403*  ; inputs; none
04B29E             0404*  ; outputs; a=0,f=255
04B29E             0405*  ; destroys: flags, hl
04B29E             0406*  ; preserves: a, because why not
04B29E             0407*  setAllFlags:
04B29E 21 FF 00 00 0408*      ld hl,255
04B2A2 67          0409*      ld h,a ; four cycles to preserve a is cheap
04B2A3 E5          0410*      push hl
04B2A4 F1          0411*      pop af
04B2A5 C9          0412*      ret
04B2A6             0413*  
04B2A6             0414*  ; reset all the bits in the flag register
04B2A6             0415*  ; unlike its inverse counterpart, this may actually be useful
04B2A6             0416*  ; inputs; none
04B2A6             0417*  ; outputs; a=0,f=0
04B2A6             0418*  ; destroys: flags, hl
04B2A6             0419*  ; preserves: a, because why not
04B2A6             0420*  resetAllFlags:
04B2A6 21 00 00 00 0421*      ld hl,0
04B2AA 67          0422*      ld h,a ; four cycles to preserve a is cheap
04B2AB E5          0423*      push hl
04B2AC F1          0424*      pop af
04B2AD C9          0425*      ret
04B2AE             0426*  
04B2AE             0427*  ; wait until user presses a key
04B2AE             0428*  ; inputs: none
04B2AE             0429*  ; outputs: none
04B2AE             0430*  ; destroys: af,ix
04B2AE             0431*  waitKeypress:
04B2AE             0432*      MOSCALL mos_sysvars
04B2AE 3E 08       0001*M 			LD	A, function
04B2B0 5B CF       0002*M 			RST.LIL	08h
04B2B2 AF          0433*      xor a ; zero out any prior keypresses
04B2B3 DD 77 05    0434*      ld (ix+sysvar_keyascii),a
04B2B6             0435*  @loop:
04B2B6 DD 7E 05    0436*      ld a,(ix+sysvar_keyascii)
04B2B9 A7          0437*      and a
04B2BA C0          0438*      ret nz
04B2BB 18 F9       0439*      jr @loop
04B2BD             0028   	include "src/asm/player.asm"
04B2BD             0001*  ; ######## GAME STATE VARIABLES #######
04B2BD             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B2BD 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B2C0             0004*  ; player current health,binary
04B2C0             0005*  ; when < 0 player splodes
04B2C0             0006*  ; restores to plyr_max_health when new ship spawns
04B2C0 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B2C3             0008*  ; max player health,binary
04B2C3             0009*  ; can increase with power-ups (todo)
04B2C3 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B2C6             0011*  ; when reaches zero,game ends
04B2C6             0012*  ; can increase based on TODO
04B2C6 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B2C9             0014*  
04B2C9             0015*  ; ######### Player Variables ##########
04B2C9             0016*  ; player position on the map and orientation
04B2C9 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B2CA 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B2CB 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B2CC 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B2CD 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B2CE 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B2CF 00          0023*  cur_x: db 0x00
04B2D0 00          0024*  cur_y: db 0x00
04B2D1 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B2D2 00          0026*  xvel:  db 0x00
04B2D3 00          0027*  yvel:  db 0x00
04B2D4 00          0028*         db 0x00 ; padding
04B2D5 00          0029*  dy:    db 0x00
04B2D6 00          0030*  dx:    db 0x00
04B2D7 00          0031*         db 0x00 ; padding
04B2D8 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B2D9             0033*  
04B2D9 00          0034*  plyr_shot_x:      db 0x00
04B2DA 00          0035*  plyr_shot_y:      db 0x00
04B2DB 00          0036*                      db 0x00 ; padding
04B2DC 00          0037*  plyr_shot_xvel:   db 0x00
04B2DD 00          0038*  plyr_shot_yvel:   db 0x00
04B2DE 00          0039*                      db 0x00 ; padding
04B2DF FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B2E0 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B2E3 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B2E4             0043*  
04B2E4 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B2E5 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B2E6             0046*  plyr_wpn_knife: equ %00000001
04B2E6             0047*  plyr_wpn_pistol: equ %00000010
04B2E6             0048*  plyr_wpn_mg: equ %00000100
04B2E6             0049*  plyr_wpn_gg: equ %00001000
04B2E6 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B2E7 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B2EA 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B2ED             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B2F3             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B2F9 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B2FC             0056*  
04B2FC             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B2FC 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B2FF             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B2FF             0060*  
04B2FF             0061*  
04B2FF 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B302             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B30A 00          0064*                   db 0 ; string terminator
04B30B             0065*  
04B30B             0066*  ; ######### PLAYER CONSTANTS ##########
04B30B             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B30B             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B311             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B311             0070*  
04B311             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B311             0072*  ; uses the same offsets from its table base as the main sprite table:
04B311             0073*  plyr_start_variables: ; label marking beginning of table
04B311 40          0074*  plyr_id:               db table_max_records
04B312 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B313 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B316 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B319 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B31A 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B31B 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B31C 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B31F 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B322 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B325 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B328 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B32B 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B32E 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B331 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B332 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B333             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B333 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B334 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B335 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B336             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B336             0095*  
04B336             0096*  
04B336             0097*  ; set initial player position
04B336             0098*  ; inputs: none,everything is hardcoded
04B336             0099*  ; outputs: player set to the first valid position on the map
04B336             0100*  ; destroys: a
04B336             0101*  plyr_init:
04B336 CD DA 66 04 0102*      call get_start_pos ; a = cell_id, d = map_y, e = map_x
04B33A 32 CB B2 04 0103*      ld (cur_cell),a
04B33E ED 53 CF B2 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B343 AF          0105*      xor a ; north is default orientation
04B344 32 CE B2 04 0106*      ld (orientation),a
04B348 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B34C FD 21 0B B3 0108*      ld iy,plyr_move_timer
       04          
04B351 CD 2C C1 04 0109*      call timestamp_tmr_set
04B355 3E 03       0110*      ld a,3
04B357 32 C6 B2 04 0111*      ld (plyr_lives),a
04B35B 3E 64       0112*      ld a,100
04B35D 32 C0 B2 04 0113*      ld (plyr_health),a
04B361 3E 08       0114*      ld a,8
04B363 32 FF B2 04 0115*      ld (plyr_ammo),a
04B367 3E 01       0116*      ld a,plyr_wpn_knife
04B369 F6 02       0117*      or plyr_wpn_pistol
04B36B 32 E4 B2 04 0118*      ld (plyr_wpns),a
04B36F 3E 01       0119*      ld a,plyr_wpn_knife
04B371 32 E5 B2 04 0120*      ld (plyr_wpn_active),a
04B375 CD D3 B3 04 0121*      call plyr_set_weapon_parameters
04B379 FD 21 ED B2 0122*      ld iy,plyr_wpn_select_tmr
       04          
04B37E 21 00 00 00 0123*      ld hl,0
04B382 CD 2C C1 04 0124*      call timestamp_tmr_set
04B386 C9          0125*      ret
04B387             0126*  
04B387             0127*  plyr_next_weapon:
04B387             0128*  ; check if select weapons timer has expired
04B387 FD 21 ED B2 0129*      ld iy,plyr_wpn_select_tmr
       04          
04B38C CD 37 C1 04 0130*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B390 F0          0131*      ret p ; time left on timer so no weapon select
04B391             0132*  ; reset weapon select timer
04B391 21 14 00 00 0133*      ld hl,120/6 ; 1/6 second
04B395 CD 2C C1 04 0134*      call timestamp_tmr_set
04B399             0135*  ; select next weapon
04B399 21 E4 B2 04 0136*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B39D ED 07       0137*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B39F             0138*  @loop:
04B39F 3A E5 B2 04 0139*      ld a,(plyr_wpn_active)
04B3A3 07          0140*      rlca ; rotate left
04B3A4 32 E5 B2 04 0141*      ld (plyr_wpn_active),a
04B3A8 A6          0142*      and (hl) ; check inventory mask
04B3A9 28 F4       0143*      jr z,@loop
04B3AB C3 D3 B3 04 0144*      jp plyr_set_weapon_parameters
04B3AF             0145*  
04B3AF             0146*  plyr_previous_weapon:
04B3AF             0147*  ; check if select weapons timer has expired
04B3AF FD 21 ED B2 0148*      ld iy,plyr_wpn_select_tmr
       04          
04B3B4 CD 37 C1 04 0149*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B3B8 F0          0150*      ret p ; time left on timer so no weapon select
04B3B9             0151*  ; reset weapon select timer
04B3B9 21 14 00 00 0152*      ld hl,120/6 ; 1/6 second
04B3BD CD 2C C1 04 0153*      call timestamp_tmr_set
04B3C1             0154*  ; select next weapon
04B3C1 21 E4 B2 04 0155*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B3C5 ED 07       0156*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B3C7             0157*  @loop:
04B3C7 3A E5 B2 04 0158*      ld a,(plyr_wpn_active)
04B3CB 0F          0159*      rrca ; rotate right
04B3CC 32 E5 B2 04 0160*      ld (plyr_wpn_active),a
04B3D0 A6          0161*      and (hl) ; check inventory mask
04B3D1 28 F4       0162*      jr z,@loop
04B3D3             0163*      ; fall through to plyr_set_weapon_parameters
04B3D3             0164*  
04B3D3             0165*  plyr_set_weapon_parameters:
04B3D3 FE 01       0166*      cp %00000001 ; knife
04B3D5 CA EC B3 04 0167*      jp z,@knife
04B3D9 FE 02       0168*      cp %00000010 ; pistol
04B3DB CA 14 B4 04 0169*      jp z,@pistol
04B3DF FE 04       0170*      cp %00000100 ; machine gun
04B3E1 CA 3C B4 04 0171*      jp z,@machine_gun
04B3E5 FE 08       0172*      cp %00001000 ; gatling gun
04B3E7 CA 64 B4 04 0173*      jp z,@gatling_gun
04B3EB C9          0174*      ret ; if none of the above do nothing
04B3EC             0175*  @knife:
04B3EC 21 05 21 00 0176*      ld hl,BUF_UI_BJ_KNIFE_00
04B3F0 22 EA B2 04 0177*      ld (plyr_wpn_ui_lg),hl
04B3F4 21 03 20 00 0178*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04B3F8 22 E7 B2 04 0179*      ld (plyr_wpn_ui_sm),hl
04B3FC 3E 14       0180*      ld a,20 ; dps = 60
04B3FE 32 E6 B2 04 0181*      ld (plyr_wpn_damage),a
04B402 21 3C 00 00 0182*      ld hl,120/2 ; 3 times/second
04B406 22 F9 B2 04 0183*      ld (plyr_wpn_fire_rate),hl
04B40A FD 21 F3 B2 0184*      ld iy,plyr_wpn_fire_tmr
       04          
04B40F CD 2C C1 04 0185*      call timestamp_tmr_set
04B413 C9          0186*      ret
04B414             0187*  @pistol:
04B414 21 0F 21 00 0188*      ld hl,BUF_UI_BJ_PISTOL_00
04B418 22 EA B2 04 0189*      ld (plyr_wpn_ui_lg),hl
04B41C 21 05 20 00 0190*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04B420 22 E7 B2 04 0191*      ld (plyr_wpn_ui_sm),hl
04B424             0192*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04B424 3E 1E       0193*      ld a,30 ; damage/burst
04B426 32 E6 B2 04 0194*      ld (plyr_wpn_damage),a
04B42A 21 28 00 00 0195*      ld hl,120/3 ; 3 bursts/second
04B42E 22 F9 B2 04 0196*      ld (plyr_wpn_fire_rate),hl
04B432 FD 21 F3 B2 0197*      ld iy,plyr_wpn_fire_tmr
       04          
04B437 CD 2C C1 04 0198*      call timestamp_tmr_set
04B43B C9          0199*      ret
04B43C             0200*  @machine_gun:
04B43C 21 0A 21 00 0201*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04B440 22 EA B2 04 0202*      ld (plyr_wpn_ui_lg),hl
04B444 21 04 20 00 0203*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04B448 22 E7 B2 04 0204*      ld (plyr_wpn_ui_sm),hl
04B44C             0205*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04B44C 3E 50       0206*      ld a,80 ; damage/burst
04B44E 32 E6 B2 04 0207*      ld (plyr_wpn_damage),a
04B452 21 28 00 00 0208*      ld hl,120/3 ; 3 bursts/second
04B456 22 F9 B2 04 0209*      ld (plyr_wpn_fire_rate),hl
04B45A FD 21 F3 B2 0210*      ld iy,plyr_wpn_fire_tmr
       04          
04B45F CD 2C C1 04 0211*      call timestamp_tmr_set
04B463 C9          0212*      ret
04B464             0213*  @gatling_gun:
04B464 21 00 21 00 0214*      ld hl,BUF_UI_BJ_GATLING_00
04B468 22 EA B2 04 0215*      ld (plyr_wpn_ui_lg),hl
04B46C 21 02 20 00 0216*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04B470 22 E7 B2 04 0217*      ld (plyr_wpn_ui_sm),hl
04B474             0218*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04B474 3E 78       0219*      ld a,120 ; damage/burst
04B476 32 E6 B2 04 0220*      ld (plyr_wpn_damage),a
04B47A 21 28 00 00 0221*      ld hl,120/3 ; 3 bursts/second
04B47E 22 F9 B2 04 0222*      ld (plyr_wpn_fire_rate),hl
04B482 FD 21 F3 B2 0223*      ld iy,plyr_wpn_fire_tmr
       04          
04B487 CD 2C C1 04 0224*      call timestamp_tmr_set
04B48B C9          0225*      ret
04B48C             0226*  
04B48C             0227*  ; adds to player's health by a set amount
04B48C             0228*  ; inputs: a is the signed amount to modify health
04B48C             0229*  ; outputs: a will contain amount of health remaining
04B48C             0230*  ;          carry will be set if health maxes out to 255
04B48C             0231*  plyr_add_health:
04B48C 21 C0 B2 04 0232*      ld hl,plyr_health
04B490 86          0233*      add a,(hl)
04B491 D2 97 B4 04 0234*      jp nc,@update ; if we roll over to zero when adding
04B495 3E FF       0235*      ld a,255 ; ... set health remaining to max
04B497             0236*  @update:
04B497 77          0237*      ld (hl),a
04B498 C9          0238*      ret
04B499             0239*  
04B499             0240*  ; subtracts from player's health by a set amount
04B499             0241*  ; inputs: a is the signed amount to modify health
04B499             0242*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04B499             0243*  ;        a contains remaining health
04B499             0244*  plyr_sub_health:
04B499 21 C0 B2 04 0245*      ld hl,plyr_health
04B49D 86          0246*      add a,(hl)
04B49E CA A6 B4 04 0247*      jp z,@zero
04B4A2 DA AB B4 04 0248*      jp c,@update
04B4A6             0249*  @zero:
04B4A6 AF          0250*      xor a ; clear carry, set health to zero
04B4A7 21 C0 B2 04 0251*      ld hl,plyr_health
04B4AB             0252*  @update:
04B4AB 77          0253*      ld (hl),a
04B4AC C9          0254*      ret
04B4AD             0255*  
04B4AD             0256*  ; modifies the players score by a set amount
04B4AD             0257*  ; inputs: a is the signed amount to modify score
04B4AD             0258*  plyr_mod_score:
04B4AD 11 00 00 00 0259*      ld de,0 ; make sure deu is zero
04B4B1 5F          0260*      ld e,a
04B4B2 2A BD B2 04 0261*      ld hl,(plyr_score)
04B4B6 19          0262*      add hl,de
04B4B7 22 BD B2 04 0263*      ld (plyr_score),hl
04B4BB C9          0264*      ret
04B4BC             0265*  
04B4BC             0266*  ; adds to player's ammo by a set amount
04B4BC             0267*  ; inputs: a is the signed amount to modify ammo
04B4BC             0268*  ; outputs: a will contain amount of ammo remaining
04B4BC             0269*  ;          carry will be set if ammo maxes out to 255
04B4BC             0270*  plyr_add_ammo:
04B4BC 21 FF B2 04 0271*      ld hl,plyr_ammo
04B4C0 86          0272*      add a,(hl)
04B4C1 D2 C7 B4 04 0273*      jp nc,@update ; if we roll over to zero when adding
04B4C5 3E FF       0274*      ld a,255 ; ... set ammo remaining to max
04B4C7             0275*  @update:
04B4C7 77          0276*      ld (hl),a
04B4C8 C9          0277*      ret
04B4C9             0278*  
04B4C9             0279*  ; subtracts from player's ammo by a set amount
04B4C9             0280*  ; inputs: a is the signed amount to modify ammo
04B4C9             0281*  ; outputs: carry reset if player was out of ammo before firing
04B4C9             0282*  ;          a will also contain amount of ammo remaining after shot
04B4C9             0283*  plyr_sub_ammo:
04B4C9 21 FF B2 04 0284*      ld hl,plyr_ammo
04B4CD 86          0285*      add a,(hl)
04B4CE DA E1 B4 04 0286*      jp c,@update
04B4D2 3E 01       0287*      ld a,%00000001 ; knife
04B4D4 32 E5 B2 04 0288*      ld (plyr_wpn_active),a
04B4D8 CD D3 B3 04 0289*      call plyr_set_weapon_parameters
04B4DC AF          0290*      xor a ; clear carry, set ammo to zero
04B4DD 21 FF B2 04 0291*      ld hl,plyr_ammo
04B4E1             0292*  @update:
04B4E1 77          0293*      ld (hl),a
04B4E2 C9          0294*      ret
04B4E3             0295*  
04B4E3             0296*  plyr_shoot_knife:
04B4E3 CD 2A BF 04 0297*      call sfx_play_knife
04B4E7             0298*      ; check whether the player hit anything
04B4E7 3A CE B2 04 0299*      ld a,(orientation) ; direction knife is moving
04B4EB 5F          0300*      ld e,a
04B4EC 16 01       0301*      ld d,1 ; shot "velocity" in map units
04B4EE CD C8 65 04 0302*      call get_dx_dy ; d,e = dy,dx
04B4F2 ED 53 DC B2 0303*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B4F7 2A CF B2 04 0304*      ld hl,(cur_x) ; h,l = player y,x
04B4FB 22 D9 B2 04 0305*      ld (plyr_shot_x),hl ; initial shot position
04B4FF ED 5B DC B2 0306*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B504 2A D9 B2 04 0307*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B508             0308*      ; bump bullet position one map unit in direction of travel
04B508 7D          0309*      ld a,l ; player shot x
04B509 83          0310*      add a,e ; add xvel
04B50A 6F          0311*      ld l,a ; save new x
04B50B 7C          0312*      ld a,h ; player shot y
04B50C 82          0313*      add a,d ; add yvel
04B50D 67          0314*      ld h,a ; save new y
04B50E 22 D9 B2 04 0315*      ld (plyr_shot_x),hl ; and save that position
04B512 EB          0316*      ex de,hl ; d,e = bullet y,x
04B513 CD A3 65 04 0317*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B517             0318*  ; check whether target cell contains a sprite
04B517 DD 7E 03    0319*      ld a,(ix+map_sprite_id)
04B51A FE FF       0320*      cp 255 ; value if not sprite
04B51C C8          0321*      ret z ; if we hit a non-sprite, we're done
04B51D             0322*  ; is a sprite so run its "hurt" behavior routine
04B51D CD 99 9F 04 0323*      call sprite_set_pointer
04B521 3E 02       0324*      ld a,sp_hurt
04B523 CD 67 A0 04 0325*      call do_sprite_behavior ; a = sprite behavior return code
04B527 C9          0326*      ret
04B528             0327*  
04B528             0328*  plyr_shoot_pistol:
04B528 3E FF       0329*      ld a,-1
04B52A CD C9 B4 04 0330*      call plyr_sub_ammo
04B52E DA 37 B5 04 0331*      jp c,@shoot
04B532 CD 12 BF 04 0332*      call sfx_play_gun_empty
04B536 C9          0333*      ret
04B537             0334*  @shoot:
04B537 CD 7E BF 04 0335*      call sfx_play_shot_pistol
04B53B C3 6D B5 04 0336*      jp plyr_move_bullet
04B53F             0337*  
04B53F             0338*  plyr_shoot_machine_gun:
04B53F 3E FC       0339*      ld a,-4
04B541 CD C9 B4 04 0340*      call plyr_sub_ammo
04B545 DA 4E B5 04 0341*      jp c,@shoot
04B549 CD 12 BF 04 0342*      call sfx_play_gun_empty
04B54D C9          0343*      ret
04B54E             0344*  @shoot:
04B54E CD 72 BF 04 0345*      call sfx_play_shot_machine_gun_burst
04B552 C3 6D B5 04 0346*      jp plyr_move_bullet
04B556             0347*  
04B556             0348*  plyr_shoot_gatling_gun:
04B556 3E F8       0349*      ld a,-8
04B558 CD C9 B4 04 0350*      call plyr_sub_ammo
04B55C DA 65 B5 04 0351*      jp c,@shoot
04B560 CD 12 BF 04 0352*      call sfx_play_gun_empty
04B564 C9          0353*      ret
04B565             0354*  @shoot:
04B565 CD 66 BF 04 0355*      call sfx_play_shot_gatling_burst
04B569 C3 6D B5 04 0356*      jp plyr_move_bullet
04B56D             0357*  
04B56D             0358*  plyr_move_bullet:
04B56D             0359*      ; check whether the player hit anything
04B56D 3A CE B2 04 0360*      ld a,(orientation) ; direction shot is moving
04B571 32 DF B2 04 0361*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04B575 5F          0362*      ld e,a
04B576 16 01       0363*      ld d,1 ; shot "velocity" in map units
04B578 CD C8 65 04 0364*      call get_dx_dy ; d,e = dy,dx
04B57C ED 53 DC B2 0365*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B581 2A CF B2 04 0366*      ld hl,(cur_x) ; h,l = player y,x
04B585 22 D9 B2 04 0367*      ld (plyr_shot_x),hl ; initial shot position
04B589 06 05       0368*      ld b,view_distance ; loop counter so player can't shoot past view distance
04B58B             0369*  @loop:
04B58B C5          0370*      push bc ; save loop counter
04B58C ED 5B DC B2 0371*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B591 2A D9 B2 04 0372*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B595             0373*      ; bump bullet position one map unit in direction of travel
04B595 7D          0374*      ld a,l ; player shot x
04B596 83          0375*      add a,e ; add xvel
04B597 6F          0376*      ld l,a ; save new x
04B598 7C          0377*      ld a,h ; player shot y
04B599 82          0378*      add a,d ; add yvel
04B59A 67          0379*      ld h,a ; save new y
04B59B 22 D9 B2 04 0380*      ld (plyr_shot_x),hl ; and save that position
04B59F EB          0381*      ex de,hl ; d,e = bullet y,x
04B5A0 CD A3 65 04 0382*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B5A4             0383*  ; check whether target cell contains a sprite
04B5A4 DD 7E 03    0384*      ld a,(ix+map_sprite_id)
04B5A7 FE FF       0385*      cp 255 ; value if not sprite
04B5A9 28 14       0386*      jr z,@not_sprite
04B5AB             0387*  ; is a sprite so run its "hurt" behavior routine
04B5AB CD 99 9F 04 0388*      call sprite_set_pointer
04B5AF 3E 02       0389*      ld a,sp_hurt
04B5B1 CD 67 A0 04 0390*      call do_sprite_behavior ; a = sprite behavior return code
04B5B5 3A DF B2 04 0391*      ld a,(plyr_shot_status)
04B5B9 FE FF       0392*      cp 255 ; value if shot hit a shootable sprite
04B5BB 28 10       0393*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04B5BD 18 16       0394*      jr @move_bullet ; otherwise keep moving bullet
04B5BF             0395*  @not_sprite:
04B5BF ED 5B DC B2 0396*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04B5C4             0397*  ; read map type/status mask from target cell
04B5C4 DD 7E 00    0398*      ld a,(ix+map_type_status)
04B5C7 E6 03       0399*      and %00000011 ; mask off everything but the render type mask bits
04B5C9             0400*  ; branch on the values in the bitmask
04B5C9 FE 01       0401*      cp render_type_floor
04B5CB 28 08       0402*      jr z,@move_bullet ; keep going if map cell is a floor
04B5CD             0403*  @stop_bullet:
04B5CD C1          0404*      pop bc ; dummy pop to balance stack
04B5CE 3E FF       0405*      ld a,255
04B5D0 32 DF B2 04 0406*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B5D4 C9          0407*      ret ; combat ended
04B5D5             0408*  @move_bullet:
04B5D5 C1          0409*      pop bc ; restore loop counter
04B5D6 10 B3       0410*      djnz @loop ; keep moving bullet if we have more distance to cover
04B5D8 3E FF       0411*      ld a,255
04B5DA 32 DF B2 04 0412*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B5DE C9          0413*      ret ; combat ended
04B5DF             0414*  
04B5DF             0415*  plyr_shoot:
04B5DF             0416*  ; check if fire weapons timer has expired
04B5DF FD 21 F3 B2 0417*      ld iy,plyr_wpn_fire_tmr
       04          
04B5E4 CD 37 C1 04 0418*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B5E8 CA F1 B5 04 0419*      jp z,@time_up ; timer zero so fire weapon
04B5EC FA F1 B5 04 0420*      jp m,@time_up ; timer negative so fire weapon
04B5F0 C9          0421*      ret ; timer not expired so don't fire weapon
04B5F1             0422*  @time_up:
04B5F1             0423*  ; reset fire weapon timer
04B5F1 FD 21 F3 B2 0424*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04B5F6 2A F9 B2 04 0425*      ld hl,(plyr_wpn_fire_rate)
04B5FA CD 2C C1 04 0426*      call timestamp_tmr_set
04B5FE             0427*  ; check animation frame for zero
04B5FE 21 FC B2 04 0428*      ld hl,plyr_wpn_anim_fr
04B602 7E          0429*      ld a,(hl)
04B603 A7          0430*      and a
04B604 20 01       0431*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04B606 34          0432*      inc (hl) ; is zero so bump to first animation frame
04B607             0433*  @shoot:
04B607             0434*  ; roll for damage modifier
04B607 CD BB B7 04 0435*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04B60B 21 E6 B2 04 0436*      ld hl,plyr_wpn_damage
04B60F A6          0437*      and a,(hl) ; a contains modified damage value
04B610 ED 44       0438*      neg ; so we can add the negative
04B612 32 E3 B2 04 0439*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04B616             0440*  ; determine active weapon and shoot it
04B616 3A E5 B2 04 0441*      ld a,(plyr_wpn_active)
04B61A FE 02       0442*      cp plyr_wpn_pistol
04B61C CA 28 B5 04 0443*      jp z,plyr_shoot_pistol
04B620 FE 04       0444*      cp plyr_wpn_mg
04B622 CA 3F B5 04 0445*      jp z,plyr_shoot_machine_gun
04B626 FE 08       0446*      cp plyr_wpn_gg
04B628 CA 56 B5 04 0447*      jp z,plyr_shoot_gatling_gun
04B62C FE 01       0448*      cp plyr_wpn_knife
04B62E CA E3 B4 04 0449*      jp z,plyr_shoot_knife
04B632 C9          0450*      ret
04B633             0451*  
04B633             0452*  ; process player keyboard input
04B633             0453*  ; Inputs: plyr_x/y set at desired position
04B633             0454*  ; Returns: player position updated
04B633             0455*  ; Destroys: probably everything
04B633             0456*  plyr_input:
04B633             0457*  ; check weapon anmation frame for zero
04B633 3A FC B2 04 0458*      ld a,(plyr_wpn_anim_fr)
04B637 E6 03       0459*      and 3 ; modulo 4
04B639 32 FC B2 04 0460*      ld (plyr_wpn_anim_fr),a
04B63D 28 05       0461*      jr z,@get_input
04B63F             0462*  ; ; animation frame is not zero so check animation timer
04B63F             0463*  ;     ld iy,plyr_wpn_anim_tmr
04B63F             0464*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B63F             0465*  ;     jp z,@animate ; timer zero so animate
04B63F             0466*  ;     jp m,@animate ; timer negative so animate
04B63F             0467*  ;     jp @get_input ; time left on timer so no animation
04B63F             0468*  ; bump animation frame
04B63F             0469*  @animate:
04B63F 21 FC B2 04 0470*      ld hl,plyr_wpn_anim_fr
04B643 34          0471*      inc (hl) ; next frame
04B644             0472*  ; ; reset animation timer
04B644             0473*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04B644             0474*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04B644             0475*  ;     call timestamp_tmr_set
04B644             0476*  
04B644             0477*  @get_input:
04B644             0478*  ; reset player component velocities to zero as the default
04B644 21 00 00 00 0479*      ld hl,0
04B648 22 D2 B2 04 0480*      ld (xvel),hl ; implicitly sets yvel
04B64C AF          0481*      xor a ;
04B64D 32 D8 B2 04 0482*      ld (avel),a ; set player angular velocity to zero as default
04B651             0483*  
04B651             0484*  ; check for keypresses and branch accordingly
04B651             0485*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04B651 3E 1E       0001*M 			LD	A, function
04B653 5B CF       0002*M 			RST.LIL	08h
04B655             0486*  
04B655             0487*  ; CHECK WEAPON CONTROL KEYS
04B655             0488*  ; 58 Up player selects next weapon
04B655 DD CB 07 4E 0489*      bit 1,(ix+7)
04B659 28 08       0490*      jr z,@Up
04B65B DD E5       0491*      push ix ; it gets clobbered by the weapon select routine
04B65D CD 87 B3 04 0492*      call plyr_next_weapon
04B661 DD E1       0493*      pop ix
04B663             0494*  @Up:
04B663             0495*  
04B663             0496*  ; 42 Down
04B663 DD CB 05 4E 0497*      bit 1,(ix+5)
04B667 28 08       0498*      jr z,@Down
04B669 DD E5       0499*      push ix ; it gets clobbered by the weapon select routine
04B66B CD AF B3 04 0500*      call plyr_previous_weapon
04B66F DD E1       0501*      pop ix
04B671             0502*  @Down:
04B671             0503*  
04B671             0504*  ; =====================
04B671             0505*  ; 99 Space FIRE ZEE MISSILES!!!111
04B671 DD CB 0C 56 0506*      bit 2,(ix+12)
04B675 28 08       0507*      jr z,@Space
04B677 DD E5       0508*      push ix ; it gets clobbered by the weapon firing
04B679 CD DF B5 04 0509*      call plyr_shoot
04B67D DD E1       0510*      pop ix ; restore ix
04B67F             0511*  @Space:
04B67F             0512*  
04B67F             0513*  ; CHECK MOVEMENT KEYS
04B67F             0514*  ; non-zero means no movement key was pressed
04B67F 3E FF       0515*      ld a,-1
04B681             0516*  
04B681             0517*  ; 34 W player moves forward
04B681 DD CB 04 4E 0518*      bit 1,(ix+4)
04B685 28 07       0519*      jr z,@W
04B687 3E 01       0520*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B689 32 D3 B2 04 0521*      ld (yvel),a
04B68D AF          0522*      xor a
04B68E             0523*  @W:
04B68E             0524*  
04B68E             0525*  ; 82 S player moves backward
04B68E DD CB 0A 4E 0526*      bit 1,(ix+10)
04B692 28 0C       0527*      jr z,@S
04B694 16 FF       0528*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B696 3A D3 B2 04 0529*      ld a,(yvel)
04B69A 82          0530*      add a,d
04B69B 32 D3 B2 04 0531*      ld (yvel),a
04B69F AF          0532*      xor a
04B6A0             0533*  @S:
04B6A0             0534*  
04B6A0             0535*  ; 66 A plyer moves left
04B6A0 DD CB 08 4E 0536*      bit 1,(ix+8)
04B6A4 28 07       0537*      jr z,@A
04B6A6 3E FF       0538*      ld a,-speed_plyr ; no funky axis conversion here
04B6A8 32 D2 B2 04 0539*      ld (xvel),a
04B6AC AF          0540*      xor a
04B6AD             0541*  @A:
04B6AD             0542*  
04B6AD             0543*  ; 51 D player moves right
04B6AD DD CB 06 56 0544*      bit 2,(ix+6)
04B6B1 28 0C       0545*      jr z,@D
04B6B3 16 01       0546*      ld d,speed_plyr ; no funky axis conversion here
04B6B5 3A D2 B2 04 0547*      ld a,(xvel)
04B6B9 82          0548*      add a,d
04B6BA 32 D2 B2 04 0549*      ld (xvel),a
04B6BE AF          0550*      xor a
04B6BF             0551*  @D:
04B6BF             0552*  
04B6BF             0553*  ; 26 Left player rotates anti-clockwise
04B6BF DD CB 03 4E 0554*      bit 1,(ix+3)
04B6C3 28 06       0555*      jr z,@Left
04B6C5 21 D8 B2 04 0556*      ld hl,avel
04B6C9 35          0557*      dec (hl)
04B6CA AF          0558*      xor a
04B6CB             0559*  @Left:
04B6CB             0560*  
04B6CB             0561*  ; 122 Right player rotates clockwise
04B6CB DD CB 0F 4E 0562*      bit 1,(ix+15)
04B6CF 28 06       0563*      jr z,@Right
04B6D1 21 D8 B2 04 0564*      ld hl,avel
04B6D5 34          0565*      inc (hl)
04B6D6 AF          0566*      xor a
04B6D7             0567*  @Right:
04B6D7             0568*  
04B6D7             0569*  ; KEYPRESS DETECTION DONE
04B6D7 A7          0570*      and a ; this will zero if player pressed a movement key
04B6D8 C0          0571*      ret nz ; non zero so no key pressed
04B6D9             0572*  ; check move timer
04B6D9 FD 21 0B B3 0573*      ld iy,plyr_move_timer
       04          
04B6DE CD 37 C1 04 0574*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B6E2 F0          0575*      ret p ; time left on timer so no movement
04B6E3             0576*  ; reset_move_timer
04B6E3 21 1E 00 00 0577*      ld hl,plyr_move_rate
04B6E7 FD 21 0B B3 0578*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04B6EC CD 2C C1 04 0579*      call timestamp_tmr_set
04B6F0             0580*  ; move player according to velocities set by keypresses
04B6F0 ED 5B D2 B2 0581*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04B6F5 3A D8 B2 04 0582*      ld a,(avel)
04B6F9 21 CE B2 04 0583*      ld hl,orientation
04B6FD 86          0584*      add a,(hl)
04B6FE E6 03       0585*      and 0x03 ; modulo 4
04B700 77          0586*      ld (hl),a
04B701 CD 07 66 04 0587*      call trans_dx_dy ; d = dy, e = dx
04B705 ED 53 D6 B2 0588*      ld (dx),de
       04          
04B70A 3A CF B2 04 0589*      ld a,(cur_x)
04B70E 83          0590*      add a,e
04B70F 5F          0591*      ld e,a
04B710 3A D0 B2 04 0592*      ld a,(cur_y)
04B714 82          0593*      add a,d
04B715 57          0594*      ld d,a
04B716 ED 53 D2 B2 0595*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04B71B CD A3 65 04 0596*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B71F             0597*  ; check whether target cell contains a sprite
04B71F DD 7E 03    0598*      ld a,(ix+map_sprite_id)
04B722 FE FF       0599*      cp 255 ; value if not sprite
04B724 28 0A       0600*      jr z,@not_sprite
04B726             0601*  ; is a sprite so run its "use" behavior routine
04B726 CD 99 9F 04 0602*      call sprite_set_pointer
04B72A 3E 01       0603*      ld a,sp_use
04B72C CD 67 A0 04 0604*      call do_sprite_behavior
04B730             0605*  ; fall through because we still need to check out what's going on in the target cell
04B730             0606*  @not_sprite:
04B730 ED 5B D2 B2 0607*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04B735             0608*  ; read map type/status mask from target cell
04B735 DD 7E 00    0609*      ld a,(ix+map_type_status)
04B738 47          0610*      ld b,a ; b = target cell type/status
04B739             0611*  ; branch on the values in the bitmask
04B739 3E 80       0612*      ld a,cell_is_door
04B73B A0          0613*      and b
04B73C 20 06       0614*      jr nz,@door
04B73E 3E 40       0615*      ld a,cell_is_wall
04B740 A0          0616*      and b
04B741 C0          0617*      ret nz ; can't move thru walls
04B742 18 2B       0618*      jr @move_it ; if it wasn't a wall or door, move as normal
04B744             0619*  @door:
04B744 ED 5B D6 B2 0620*      ld de,(dx) ; d = dy, e = dx
       04          
04B749 CD F5 65 04 0621*      call get_dir_from_dy_dx ; a is direction of attempted movement
04B74D F5          0622*      push af
04B74E 16 02       0623*      ld d,2 ; 1 past the door in the movement direction
04B750 5F          0624*      ld e,a
04B751 CD C8 65 04 0625*      call get_dx_dy
04B755 ED 53 D6 B2 0626*      ld (dx),de
       04          
04B75A F1          0627*      pop af
04B75B 5F          0628*      ld e,a
04B75C 16 02       0629*      ld d,2
04B75E ED 4B CF B2 0630*      ld bc,(cur_x)
       04          
04B763 CD 95 65 04 0631*      call get_neighbor ; ix points to cell defs/status, a is target cell current obj_id
04B767 DD 7E 00    0632*      ld a,(ix+map_type_status)
04B76A 47          0633*      ld b,a ; b = target cell type/status
04B76B 3E 40       0634*      ld a,cell_is_wall
04B76D A0          0635*      and b
04B76E C0          0636*      ret nz ; can't move thru walls
04B76F             0637*      ; fall through to @move_it
04B76F             0638*  @move_it:
04B76F             0639*  ; we are cleared for movement so update player position
04B76F 11 00 00 00 0640*      ld de,0 ; make sure deu is zero
04B773 ED 4B D6 B2 0641*      ld bc,(dx) ; b = dy, c = dx
       04          
04B778 3A CF B2 04 0642*      ld a,(cur_x)
04B77C 81          0643*      add a,c
04B77D 5F          0644*      ld e,a
04B77E 32 CF B2 04 0645*      ld (cur_x),a
04B782 3A D0 B2 04 0646*      ld a,(cur_y)
04B786 80          0647*      add a,b
04B787 57          0648*      ld d,a
04B788 32 D0 B2 04 0649*      ld (cur_y),a
04B78C C9          0650*      ret
04B78D             0029   	include "src/asm/maths.asm"
04B78D 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04B791 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04B795             0003*  
04B795             0004*  ; set bcd values in a scratch memory address from registers bcde
04B795             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04B795             0006*  ; destroys ; hl
04B795             0007*  set_bcd:
04B795 73          0008*      ld (hl),e
04B796 23          0009*      inc hl
04B797 72          0010*      ld (hl),d
04B798 23          0011*      inc hl
04B799 71          0012*      ld (hl),c
04B79A 23          0013*      inc hl
04B79B 70          0014*      ld (hl),b
04B79C C9          0015*      ret
04B79D             0016*  
04B79D             0017*  ; load bcd values from a scratch memory address to bcde
04B79D             0018*  ; input: hl; scratch address
04B79D             0019*  ; output: bcde; 8-place bcd number
04B79D             0020*  ; destroys: hl
04B79D             0021*  get_bcd:
04B79D 5E          0022*      ld e,(hl)
04B79E 23          0023*      inc hl
04B79F 56          0024*      ld d,(hl)
04B7A0 23          0025*      inc hl
04B7A1 4E          0026*      ld c,(hl)
04B7A2 23          0027*      inc hl
04B7A3 46          0028*      ld b,(hl)
04B7A4 C9          0029*      ret
04B7A5             0030*  
04B7A5             0031*  ; BCD addition
04B7A5             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B7A5             0033*  ;       a is the number of bytes holding each number (number of places/2)
04B7A5             0034*  ; outputs: (hl) + (de) --> (hl)
04B7A5             0035*  ; destroys: a,b,de,hl
04B7A5             0036*  add_bcd:
04B7A5 47          0037*      ld b,a ; loop counter
04B7A6 AF          0038*      xor a ; reset a, clear carry flag
04B7A7             0039*  adcec:
04B7A7 1A          0040*      ld a,(de) ; addend to acc
04B7A8 8E          0041*      adc a,(hl) ; add (hl) to acc
04B7A9 27          0042*      daa ; adjust result to bcd
04B7AA 77          0043*      ld (hl),a ; store result
04B7AB 23          0044*      inc hl ; advance memory pointers
04B7AC 13          0045*      inc de
04B7AD 10 F8       0046*      djnz adcec ; loop until b == 0
04B7AF C9          0047*      ret
04B7B0             0048*  
04B7B0             0049*  ; BCD subtraction
04B7B0             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B7B0             0051*  ;       a is the number of bytes holding each number (number of places/2)
04B7B0             0052*  ; outputs: (hl) - (de) --> (hl)
04B7B0             0053*  ; destroys: a,b,de,hl
04B7B0             0054*  sub_bcd:
04B7B0 47          0055*      ld b,a ; loop counter
04B7B1 AF          0056*      xor a ; reset a,clear carry flag
04B7B2             0057*  subdec:
04B7B2 1A          0058*      ld a,(de) ; subtrahend to acc
04B7B3 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04B7B4 27          0060*      daa ; adjust result to bcd
04B7B5 77          0061*      ld (hl),a ; store result
04B7B6 23          0062*      inc hl ; advance memory pointers
04B7B7 13          0063*      inc de
04B7B8 10 F8       0064*      djnz subdec ; loop until b == 0
04B7BA C9          0065*      ret
04B7BB             0066*  
04B7BB             0067*  ; http://www.z80.info/pseudo-random.txt
04B7BB             0068*  rand_8:
04B7BB C5          0069*      push bc
04B7BC 3A CF B7 04 0070*      ld a,(r_seed)
04B7C0 4F          0071*      ld c,a
04B7C1             0072*  
04B7C1 0F          0073*      rrca ; multiply by 32
04B7C2 0F          0074*      rrca
04B7C3 0F          0075*      rrca
04B7C4 EE 1F       0076*      xor 0x1f
04B7C6             0077*  
04B7C6 81          0078*      add a,c
04B7C7 DE FF       0079*      sbc a,255 ; carry
04B7C9             0080*  
04B7C9 32 CF B7 04 0081*      ld (r_seed),a
04B7CD C1          0082*      pop bc
04B7CE C9          0083*      ret
04B7CF 50          0084*  r_seed: defb $50
04B7D0             0030   	include "src/asm/img_load.asm"
04B7D0 00 00 00    0001*  cur_file_idx: dl 0
04B7D3 00 00 00    0002*  cur_filename: dl 0
04B7D6 00 00 00    0003*  cur_buffer_id: dl 0
04B7D9 00 00 00    0004*  cur_buffer_id_lut: dl 0
04B7DC 00 00 00    0005*  cur_load_jump_table: dl 0
04B7DF             0006*  
04B7DF             0007*  img_load_init:
04B7DF             0008*  ; initialize bj's position parameters
04B7DF 21 00 00 00 0009*  	ld hl,0
04B7E3 22 2D B9 04 0010*  	ld (bj_yvel),hl
04B7E7             0011*  
04B7E7 21 2D 00 00 0012*      ld hl,45
04B7EB 22 30 B9 04 0013*  	ld (bj_y_cur),hl
04B7EF 22 33 B9 04 0014*  	ld (bj_y_min),hl
04B7F3 22 36 B9 04 0015*      ld (bj_y_max),hl
04B7F7             0016*  
04B7F7 21 01 00 00 0017*  	ld hl,1
04B7FB 22 21 B9 04 0018*  	ld (bj_xvel),hl
04B7FF             0019*  
04B7FF 21 0A 00 00 0020*  	ld hl,10
04B803 22 24 B9 04 0021*  	ld (bj_x_cur),hl
04B807 22 27 B9 04 0022*  	ld (bj_x_min),hl
04B80B             0023*  
04B80B 21 C8 00 00 0024*  	ld hl,320-120
04B80F 22 2A B9 04 0025*  	ld (bj_x_max),hl
04B813             0026*  
04B813 C9          0027*      ret
04B814             0028*  
04B814             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B814             0030*  img_load_main:
04B814 21 00 00 00 0031*      ld hl,0
04B818 22 D0 B7 04 0032*      ld (cur_file_idx),hl
04B81C             0033*  img_load_main_loop:
04B81C             0034*  ; back up loop counter
04B81C C5          0035*      push bc
04B81D             0036*  ; load the next panel
04B81D CD 85 B8 04 0037*      call load_next_panel
04B821             0038*  ; draw all the things
04B821 CD 39 B9 04 0039*      call tmp_draw_all_the_things
04B825             0040*  ; draw the most recently loaded panel
04B825 2A D6 B7 04 0041*  	ld hl,(cur_buffer_id)
04B829 CD ED A9 04 0042*  	call vdu_buff_select
04B82D 01 00 00 00 0043*  	ld bc,0
04B831 11 00 00 00 0044*  	ld de,0
04B835 CD BE AB 04 0045*  	call vdu_plot_bmp
04B839             0046*  ; move bj
04B839 CD C1 B8 04 0047*  	call move_bj
04B83D             0048*  ; print welcome message
04B83D DD 21 88 7C 0049*  	ld ix,font_itc_honda
       04          
04B842 21 A3 C1 04 0050*  	ld hl,hello_world
04B846 01 20 00 00 0051*  	ld bc,32
04B84A 11 02 00 00 0052*  	ld de,2
04B84E CD 80 65 04 0053*  	call font_bmp_print
04B852             0054*  ; print current filename
04B852 CD 84 A8 04 0055*  	call vdu_cls
04B856 2A D3 B7 04 0056*  	ld hl,(cur_filename)
04B85A CD 53 AF 04 0057*  	call printString
04B85E CD 68 AF 04 0058*  	call printNewLine
04B862             0059*  
04B862             0060*  ; print current load stopwatch
04B862 21 C5 C1 04 0061*  	ld hl,loading_time
04B866 CD 53 AF 04 0062*  	call printString
04B86A CD 55 C1 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B86E CD A1 AF 04 0064*  	call printDec
04B872             0065*  
04B872             0066*  ; flip screen
04B872 CD 53 AA 04 0067*      call vdu_flip
04B876             0068*  ; decrement loop counter
04B876 C1          0069*      pop bc
04B877 0B          0070*  	dec bc
04B878             0071*  ; ; DEBUG: DUMP REGISTERS
04B878             0072*  ; 	push bc
04B878             0073*  ; 	call dumpRegistersHex
04B878             0074*  ; 	call vdu_flip
04B878             0075*  ; 	pop bc
04B878             0076*  ; ; END DEBUG
04B878 79          0077*      ld a,c
04B879 B7          0078*      or a
04B87A C2 1C B8 04 0079*      jp nz,img_load_main_loop
04B87E 78          0080*      ld a,b
04B87F B7          0081*      or a
04B880 C2 1C B8 04 0082*      jp nz,img_load_main_loop
04B884 C9          0083*      ret
04B885             0084*  
04B885             0085*  load_next_panel:
04B885             0086*  ; look up the load routine for the current file index
04B885 2A D0 B7 04 0087*  	ld hl,(cur_file_idx)
04B889 29          0088*  	add hl,hl ; multiply current index by 2 ...
04B88A ED 5B D0 B7 0089*  	ld de,(cur_file_idx)
       04          
04B88F 19          0090*  	add hl,de ; ... now by 3
04B890 ED 5B DC B7 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B895 19          0092*  	add hl,de
04B896 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04B898 22 9D B8 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B89C             0095*  @jump_addr:
04B89C CD 00 00 00 0096*  	call 0 ; call the panel load routine
04B8A0             0097*  ; look up the buffer id for the current file
04B8A0 2A D0 B7 04 0098*  	ld hl,(cur_file_idx)
04B8A4 29          0099*  	add hl,hl ; multiply current index by 2 ...
04B8A5 ED 5B D0 B7 0100*  	ld de,(cur_file_idx)
       04          
04B8AA 19          0101*  	add hl,de ; ... now by 3
04B8AB ED 5B D9 B7 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B8B0 19          0103*  	add hl,de
04B8B1 ED 27       0104*  	ld hl,(hl)
04B8B3 22 D6 B7 04 0105*  	ld (cur_buffer_id),hl
04B8B7             0106*  ; bump the current file index
04B8B7 2A D0 B7 04 0107*  	ld hl,(cur_file_idx)
04B8BB 23          0108*  	inc hl
04B8BC 22 D0 B7 04 0109*  	ld (cur_file_idx),hl
04B8C0 C9          0110*  	ret
04B8C1             0111*  
04B8C1             0112*  move_bj:
04B8C1             0113*  ; activate bj bitmap
04B8C1 21 00 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04B8C5 CD ED A9 04 0115*  	call vdu_buff_select
04B8C9             0116*  ; update position based on velocity parameters
04B8C9 2A 24 B9 04 0117*  	ld hl, (bj_x_cur)
04B8CD ED 5B 21 B9 0118*  	ld de, (bj_xvel)
       04          
04B8D2 19          0119*  	add hl, de
04B8D3 22 24 B9 04 0120*  	ld (bj_x_cur), hl
04B8D7 EB          0121*  	ex de,hl ; store x_cur in de
04B8D8             0122*  ; check if we're < x_min
04B8D8 2A 27 B9 04 0123*  	ld hl,(bj_x_min)
04B8DC AF          0124*  	xor a ; clear carry
04B8DD ED 52       0125*  	sbc hl,de ; x_min - x_cur
04B8DF F2 FD B8 04 0126*  	jp p, move_bj_x_min
04B8E3             0127*  ; check if we're > x_max
04B8E3 2A 2A B9 04 0128*  	ld hl,(bj_x_max)
04B8E7 AF          0129*  	xor a ; clear carry
04B8E8 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04B8EA FA 0F B9 04 0131*  	jp m, move_bj_x_max
04B8EE             0132*  ; if not at either boundary, fall through to draw bj's
04B8EE             0133*  draw_bj:
04B8EE ED 4B 24 B9 0134*  	ld bc,(bj_x_cur)
       04          
04B8F3 ED 5B 30 B9 0135*  	ld de,(bj_y_cur)
       04          
04B8F8 CD BE AB 04 0136*  	call vdu_plot_bmp
04B8FC C9          0137*  	ret
04B8FD             0138*  move_bj_x_min:
04B8FD 21 01 00 00 0139*  	ld hl,1
04B901 22 21 B9 04 0140*  	ld (bj_xvel),hl
04B905 2A 27 B9 04 0141*  	ld hl,(bj_x_min)
04B909 22 24 B9 04 0142*  	ld (bj_x_cur),hl
04B90D 18 DF       0143*  	jr draw_bj
04B90F             0144*  move_bj_x_max:
04B90F 21 FF FF FF 0145*  	ld hl,-1
04B913 22 21 B9 04 0146*  	ld (bj_xvel),hl
04B917 2A 2A B9 04 0147*  	ld hl,(bj_x_max)
04B91B 22 24 B9 04 0148*  	ld (bj_x_cur),hl
04B91F 18 CD       0149*  	jr draw_bj
04B921 00 00 00    0150*  bj_xvel: dl 0
04B924 00 00 00    0151*  bj_x_cur: dl 0
04B927 00 00 00    0152*  bj_x_min: dl 0
04B92A 00 00 00    0153*  bj_x_max: dl 0
04B92D             0154*  
04B92D 00 00 00    0155*  bj_yvel: dl 0
04B930 00 00 00    0156*  bj_y_cur: dl 0
04B933 00 00 00    0157*  bj_y_min: dl 0
04B936 00 00 00    0158*  bj_y_max: dl 0
04B939             0159*  
04B939             0160*  tmp_draw_all_the_things:
04B939 21 06 20 00 0161*      ld hl,BUF_UI_SPLASH
04B93D CD ED A9 04 0162*      call vdu_buff_select
04B941 01 00 00 00 0163*      ld bc,0
04B945 11 00 00 00 0164*      ld de,0
04B949 CD BE AB 04 0165*      call vdu_plot_bmp
04B94D C9          0166*  	ret
04B94E             0167*  
04B94E             0168*  ; load an uncompressed rgba2222 image file to a buffer
04B94E             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B94E             0170*  vdu_load_img:
04B94E             0171*  ; back up image dimension parameters
04B94E C5          0172*  	push bc
04B94F D5          0173*  	push de
04B950             0174*  ; load the image
04B950 CD D4 C3 04 0175*  	call vdu_load_buffer_from_file
04B954             0176*  ; now make it a bitmap
04B954 D1          0177*  	pop de
04B955 C1          0178*  	pop bc
04B956 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04B958 C3 02 AA 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04B95C             0181*  
04B95C             0182*  ; load a compressed rgba2222 image file to a buffer
04B95C             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B95C             0184*  vdu_load_img_cmp:
04B95C             0185*  ; back up image dimension parameters
04B95C C5          0186*  	push bc
04B95D D5          0187*  	push de
04B95E             0188*  ; back up the buffer id
04B95E E5          0189*  	push hl
04B95F             0190*  ; load the image
04B95F CD D4 C3 04 0191*  	call vdu_load_buffer_from_file
04B963             0192*  ; decompress the buffer
04B963 E1          0193*  	pop hl ; bufferId
04B964 CD 61 AA 04 0194*  	call vdu_decompress_buffer
04B968             0195*  ; now make it a bitmap
04B968 D1          0196*  	pop de ; image height
04B969 C1          0197*  	pop bc ; image width
04B96A 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04B96C C3 02 AA 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04B970             0031   	include "src/asm/sfx.asm"
04B970             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04B970             0002*  
04B970             0003*  SFX_num_buffers: equ 22
04B970             0004*  ; SFX buffer ids:
04B970             0005*  BUF_ACHTUNG: equ 0xFB00
04B970             0006*  BUF_AHH: equ 0xFB01
04B970             0007*  BUF_AUGH: equ 0xFB02
04B970             0008*  BUF_AYEE: equ 0xFB03
04B970             0009*  BUF_AYEE_HIGH: equ 0xFB04
04B970             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04B970             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04B970             0012*  BUF_DOG_YELP: equ 0xFB07
04B970             0013*  BUF_EXPLODE: equ 0xFB08
04B970             0014*  BUF_GOT_TREASURE: equ 0xFB09
04B970             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04B970             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04B970             0017*  BUF_KNIFE: equ 0xFB0C
04B970             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04B970             0019*  BUF_OOF: equ 0xFB0E
04B970             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04B970             0021*  BUF_SCREAM: equ 0xFB10
04B970             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04B970             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04B970             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04B970             0025*  BUF_UGH: equ 0xFB14
04B970             0026*  BUF_WILHELM: equ 0xFB15
04B970             0027*  
04B970             0028*  ; SFX buffer id reverse lookup:
04B970             0029*  SFX_buffer_id_lut:
04B970 00 FB 00    0030*  	dl BUF_ACHTUNG
04B973 01 FB 00    0031*  	dl BUF_AHH
04B976 02 FB 00    0032*  	dl BUF_AUGH
04B979 03 FB 00    0033*  	dl BUF_AYEE
04B97C 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04B97F 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04B982 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04B985 07 FB 00    0037*  	dl BUF_DOG_YELP
04B988 08 FB 00    0038*  	dl BUF_EXPLODE
04B98B 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04B98E 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04B991 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04B994 0C FB 00    0042*  	dl BUF_KNIFE
04B997 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04B99A 0E FB 00    0044*  	dl BUF_OOF
04B99D 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04B9A0 10 FB 00    0046*  	dl BUF_SCREAM
04B9A3 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04B9A6 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04B9A9 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04B9AC 14 FB 00    0050*  	dl BUF_UGH
04B9AF 15 FB 00    0051*  	dl BUF_WILHELM
04B9B2             0052*  
04B9B2             0053*  ; SFX duration lookup:
04B9B2             0054*  SFX_duration_lut:
04B9B2 58 03       0055*  	dw 856 ; ACHTUNG
04B9B4 91 01       0056*  	dw 401 ; AHH
04B9B6 FC 02       0057*  	dw 764 ; AUGH
04B9B8 E6 01       0058*  	dw 486 ; AYEE
04B9BA 40 04       0059*  	dw 1088 ; AYEE_HIGH
04B9BC 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04B9BE 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04B9C0 B0 01       0062*  	dw 432 ; DOG_YELP
04B9C2 13 05       0063*  	dw 1299 ; EXPLODE
04B9C4 A7 05       0064*  	dw 1447 ; GOT_TREASURE
04B9C6 24 01       0065*  	dw 292 ; GUN_EMPTY
04B9C8 BA 01       0066*  	dw 442 ; GUN_RELOAD
04B9CA F2 00       0067*  	dw 242 ; KNIFE
04B9CC 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04B9CE CE 03       0069*  	dw 974 ; OOF
04B9D0 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04B9D2 E0 02       0071*  	dw 736 ; SCREAM
04B9D4 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04B9D6 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04B9D8 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04B9DA 77 01       0075*  	dw 375 ; UGH
04B9DC FD 04       0076*  	dw 1277 ; WILHELM
04B9DE             0077*  
04B9DE             0078*  ; SFX load routines jump table:
04B9DE             0079*  SFX_load_routines_table:
04B9DE 20 BA 04    0080*  	dl load_sfx_ACHTUNG
04B9E1 42 BA 04    0081*  	dl load_sfx_AHH
04B9E4 64 BA 04    0082*  	dl load_sfx_AUGH
04B9E7 86 BA 04    0083*  	dl load_sfx_AYEE
04B9EA A8 BA 04    0084*  	dl load_sfx_AYEE_HIGH
04B9ED CA BA 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04B9F0 EC BA 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04B9F3 0E BB 04    0087*  	dl load_sfx_DOG_YELP
04B9F6 30 BB 04    0088*  	dl load_sfx_EXPLODE
04B9F9 52 BB 04    0089*  	dl load_sfx_GOT_TREASURE
04B9FC 74 BB 04    0090*  	dl load_sfx_GUN_EMPTY
04B9FF 96 BB 04    0091*  	dl load_sfx_GUN_RELOAD
04BA02 B8 BB 04    0092*  	dl load_sfx_KNIFE
04BA05 DA BB 04    0093*  	dl load_sfx_MEIN_LEBEN
04BA08 FC BB 04    0094*  	dl load_sfx_OOF
04BA0B 1E BC 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04BA0E 40 BC 04    0096*  	dl load_sfx_SCREAM
04BA11 62 BC 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04BA14 84 BC 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04BA17 A6 BC 04    0099*  	dl load_sfx_SHOT_PISTOL
04BA1A C8 BC 04    0100*  	dl load_sfx_UGH
04BA1D EA BC 04    0101*  	dl load_sfx_WILHELM
04BA20             0102*  
04BA20             0103*  ; Import sfx .raw files and load them into VDP buffers
04BA20             0104*  
04BA20             0105*  load_sfx_ACHTUNG:
04BA20 21 0C BD 04 0106*  	ld hl,FACHTUNG
04BA24 22 D3 B7 04 0107*  	ld (cur_filename),hl
04BA28 11 21 C4 04 0108*  	ld de,filedata
04BA2C 01 00 00 01 0109*  	ld bc,65536
04BA30 3E 01       0110*  	ld a,mos_load
04BA32 5B CF       0111*  	RST.LIL 08h
04BA34 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04BA38 DD 21 3A 38 0113*  	ld ix,14394
       00          
04BA3D CD 77 AE 04 0114*  	call vdu_load_sfx
04BA41 C9          0115*  	ret
04BA42             0116*  
04BA42             0117*  load_sfx_AHH:
04BA42 21 1C BD 04 0118*  	ld hl,FAHH
04BA46 22 D3 B7 04 0119*  	ld (cur_filename),hl
04BA4A 11 21 C4 04 0120*  	ld de,filedata
04BA4E 01 00 00 01 0121*  	ld bc,65536
04BA52 3E 01       0122*  	ld a,mos_load
04BA54 5B CF       0123*  	RST.LIL 08h
04BA56 21 01 FB 00 0124*  	ld hl,BUF_AHH
04BA5A DD 21 63 1A 0125*  	ld ix,6755
       00          
04BA5F CD 77 AE 04 0126*  	call vdu_load_sfx
04BA63 C9          0127*  	ret
04BA64             0128*  
04BA64             0129*  load_sfx_AUGH:
04BA64 21 28 BD 04 0130*  	ld hl,FAUGH
04BA68 22 D3 B7 04 0131*  	ld (cur_filename),hl
04BA6C 11 21 C4 04 0132*  	ld de,filedata
04BA70 01 00 00 01 0133*  	ld bc,65536
04BA74 3E 01       0134*  	ld a,mos_load
04BA76 5B CF       0135*  	RST.LIL 08h
04BA78 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04BA7C DD 21 39 32 0137*  	ld ix,12857
       00          
04BA81 CD 77 AE 04 0138*  	call vdu_load_sfx
04BA85 C9          0139*  	ret
04BA86             0140*  
04BA86             0141*  load_sfx_AYEE:
04BA86 21 35 BD 04 0142*  	ld hl,FAYEE
04BA8A 22 D3 B7 04 0143*  	ld (cur_filename),hl
04BA8E 11 21 C4 04 0144*  	ld de,filedata
04BA92 01 00 00 01 0145*  	ld bc,65536
04BA96 3E 01       0146*  	ld a,mos_load
04BA98 5B CF       0147*  	RST.LIL 08h
04BA9A 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04BA9E DD 21 00 20 0149*  	ld ix,8192
       00          
04BAA3 CD 77 AE 04 0150*  	call vdu_load_sfx
04BAA7 C9          0151*  	ret
04BAA8             0152*  
04BAA8             0153*  load_sfx_AYEE_HIGH:
04BAA8 21 42 BD 04 0154*  	ld hl,FAYEE_HIGH
04BAAC 22 D3 B7 04 0155*  	ld (cur_filename),hl
04BAB0 11 21 C4 04 0156*  	ld de,filedata
04BAB4 01 00 00 01 0157*  	ld bc,65536
04BAB8 3E 01       0158*  	ld a,mos_load
04BABA 5B CF       0159*  	RST.LIL 08h
04BABC 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04BAC0 DD 21 77 47 0161*  	ld ix,18295
       00          
04BAC5 CD 77 AE 04 0162*  	call vdu_load_sfx
04BAC9 C9          0163*  	ret
04BACA             0164*  
04BACA             0165*  load_sfx_DOG_WOOF_DOUBLE:
04BACA 21 54 BD 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04BACE 22 D3 B7 04 0167*  	ld (cur_filename),hl
04BAD2 11 21 C4 04 0168*  	ld de,filedata
04BAD6 01 00 00 01 0169*  	ld bc,65536
04BADA 3E 01       0170*  	ld a,mos_load
04BADC 5B CF       0171*  	RST.LIL 08h
04BADE 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BAE2 DD 21 24 28 0173*  	ld ix,10276
       00          
04BAE7 CD 77 AE 04 0174*  	call vdu_load_sfx
04BAEB C9          0175*  	ret
04BAEC             0176*  
04BAEC             0177*  load_sfx_DOG_WOOF_SINGLE:
04BAEC 21 6C BD 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04BAF0 22 D3 B7 04 0179*  	ld (cur_filename),hl
04BAF4 11 21 C4 04 0180*  	ld de,filedata
04BAF8 01 00 00 01 0181*  	ld bc,65536
04BAFC 3E 01       0182*  	ld a,mos_load
04BAFE 5B CF       0183*  	RST.LIL 08h
04BB00 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04BB04 DD 21 10 23 0185*  	ld ix,8976
       00          
04BB09 CD 77 AE 04 0186*  	call vdu_load_sfx
04BB0D C9          0187*  	ret
04BB0E             0188*  
04BB0E             0189*  load_sfx_DOG_YELP:
04BB0E 21 84 BD 04 0190*  	ld hl,FDOG_YELP
04BB12 22 D3 B7 04 0191*  	ld (cur_filename),hl
04BB16 11 21 C4 04 0192*  	ld de,filedata
04BB1A 01 00 00 01 0193*  	ld bc,65536
04BB1E 3E 01       0194*  	ld a,mos_load
04BB20 5B CF       0195*  	RST.LIL 08h
04BB22 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04BB26 DD 21 60 1C 0197*  	ld ix,7264
       00          
04BB2B CD 77 AE 04 0198*  	call vdu_load_sfx
04BB2F C9          0199*  	ret
04BB30             0200*  
04BB30             0201*  load_sfx_EXPLODE:
04BB30 21 95 BD 04 0202*  	ld hl,FEXPLODE
04BB34 22 D3 B7 04 0203*  	ld (cur_filename),hl
04BB38 11 21 C4 04 0204*  	ld de,filedata
04BB3C 01 00 00 01 0205*  	ld bc,65536
04BB40 3E 01       0206*  	ld a,mos_load
04BB42 5B CF       0207*  	RST.LIL 08h
04BB44 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04BB48 DD 21 48 55 0209*  	ld ix,21832
       00          
04BB4D CD 77 AE 04 0210*  	call vdu_load_sfx
04BB51 C9          0211*  	ret
04BB52             0212*  
04BB52             0213*  load_sfx_GOT_TREASURE:
04BB52 21 A5 BD 04 0214*  	ld hl,FGOT_TREASURE
04BB56 22 D3 B7 04 0215*  	ld (cur_filename),hl
04BB5A 11 21 C4 04 0216*  	ld de,filedata
04BB5E 01 00 00 01 0217*  	ld bc,65536
04BB62 3E 01       0218*  	ld a,mos_load
04BB64 5B CF       0219*  	RST.LIL 08h
04BB66 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04BB6A DD 21 07 5F 0221*  	ld ix,24327
       00          
04BB6F CD 77 AE 04 0222*  	call vdu_load_sfx
04BB73 C9          0223*  	ret
04BB74             0224*  
04BB74             0225*  load_sfx_GUN_EMPTY:
04BB74 21 BA BD 04 0226*  	ld hl,FGUN_EMPTY
04BB78 22 D3 B7 04 0227*  	ld (cur_filename),hl
04BB7C 11 21 C4 04 0228*  	ld de,filedata
04BB80 01 00 00 01 0229*  	ld bc,65536
04BB84 3E 01       0230*  	ld a,mos_load
04BB86 5B CF       0231*  	RST.LIL 08h
04BB88 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04BB8C DD 21 3F 13 0233*  	ld ix,4927
       00          
04BB91 CD 77 AE 04 0234*  	call vdu_load_sfx
04BB95 C9          0235*  	ret
04BB96             0236*  
04BB96             0237*  load_sfx_GUN_RELOAD:
04BB96 21 CC BD 04 0238*  	ld hl,FGUN_RELOAD
04BB9A 22 D3 B7 04 0239*  	ld (cur_filename),hl
04BB9E 11 21 C4 04 0240*  	ld de,filedata
04BBA2 01 00 00 01 0241*  	ld bc,65536
04BBA6 3E 01       0242*  	ld a,mos_load
04BBA8 5B CF       0243*  	RST.LIL 08h
04BBAA 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04BBAE DD 21 0F 1D 0245*  	ld ix,7439
       00          
04BBB3 CD 77 AE 04 0246*  	call vdu_load_sfx
04BBB7 C9          0247*  	ret
04BBB8             0248*  
04BBB8             0249*  load_sfx_KNIFE:
04BBB8 21 DF BD 04 0250*  	ld hl,FKNIFE
04BBBC 22 D3 B7 04 0251*  	ld (cur_filename),hl
04BBC0 11 21 C4 04 0252*  	ld de,filedata
04BBC4 01 00 00 01 0253*  	ld bc,65536
04BBC8 3E 01       0254*  	ld a,mos_load
04BBCA 5B CF       0255*  	RST.LIL 08h
04BBCC 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04BBD0 DD 21 F3 0F 0257*  	ld ix,4083
       00          
04BBD5 CD 77 AE 04 0258*  	call vdu_load_sfx
04BBD9 C9          0259*  	ret
04BBDA             0260*  
04BBDA             0261*  load_sfx_MEIN_LEBEN:
04BBDA 21 ED BD 04 0262*  	ld hl,FMEIN_LEBEN
04BBDE 22 D3 B7 04 0263*  	ld (cur_filename),hl
04BBE2 11 21 C4 04 0264*  	ld de,filedata
04BBE6 01 00 00 01 0265*  	ld bc,65536
04BBEA 3E 01       0266*  	ld a,mos_load
04BBEC 5B CF       0267*  	RST.LIL 08h
04BBEE 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04BBF2 DD 21 81 35 0269*  	ld ix,13697
       00          
04BBF7 CD 77 AE 04 0270*  	call vdu_load_sfx
04BBFB C9          0271*  	ret
04BBFC             0272*  
04BBFC             0273*  load_sfx_OOF:
04BBFC 21 00 BE 04 0274*  	ld hl,FOOF
04BC00 22 D3 B7 04 0275*  	ld (cur_filename),hl
04BC04 11 21 C4 04 0276*  	ld de,filedata
04BC08 01 00 00 01 0277*  	ld bc,65536
04BC0C 3E 01       0278*  	ld a,mos_load
04BC0E 5B CF       0279*  	RST.LIL 08h
04BC10 21 0E FB 00 0280*  	ld hl,BUF_OOF
04BC14 DD 21 00 40 0281*  	ld ix,16384
       00          
04BC19 CD 77 AE 04 0282*  	call vdu_load_sfx
04BC1D C9          0283*  	ret
04BC1E             0284*  
04BC1E             0285*  load_sfx_SCHUSSTAFFEL:
04BC1E 21 0C BE 04 0286*  	ld hl,FSCHUSSTAFFEL
04BC22 22 D3 B7 04 0287*  	ld (cur_filename),hl
04BC26 11 21 C4 04 0288*  	ld de,filedata
04BC2A 01 00 00 01 0289*  	ld bc,65536
04BC2E 3E 01       0290*  	ld a,mos_load
04BC30 5B CF       0291*  	RST.LIL 08h
04BC32 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04BC36 DD 21 63 26 0293*  	ld ix,9827
       00          
04BC3B CD 77 AE 04 0294*  	call vdu_load_sfx
04BC3F C9          0295*  	ret
04BC40             0296*  
04BC40             0297*  load_sfx_SCREAM:
04BC40 21 21 BE 04 0298*  	ld hl,FSCREAM
04BC44 22 D3 B7 04 0299*  	ld (cur_filename),hl
04BC48 11 21 C4 04 0300*  	ld de,filedata
04BC4C 01 00 00 01 0301*  	ld bc,65536
04BC50 3E 01       0302*  	ld a,mos_load
04BC52 5B CF       0303*  	RST.LIL 08h
04BC54 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04BC58 DD 21 5E 30 0305*  	ld ix,12382
       00          
04BC5D CD 77 AE 04 0306*  	call vdu_load_sfx
04BC61 C9          0307*  	ret
04BC62             0308*  
04BC62             0309*  load_sfx_SHOT_GATLING_BURST:
04BC62 21 30 BE 04 0310*  	ld hl,FSHOT_GATLING_BURST
04BC66 22 D3 B7 04 0311*  	ld (cur_filename),hl
04BC6A 11 21 C4 04 0312*  	ld de,filedata
04BC6E 01 00 00 01 0313*  	ld bc,65536
04BC72 3E 01       0314*  	ld a,mos_load
04BC74 5B CF       0315*  	RST.LIL 08h
04BC76 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04BC7A DD 21 00 60 0317*  	ld ix,24576
       00          
04BC7F CD 77 AE 04 0318*  	call vdu_load_sfx
04BC83 C9          0319*  	ret
04BC84             0320*  
04BC84             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04BC84 21 4B BE 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04BC88 22 D3 B7 04 0323*  	ld (cur_filename),hl
04BC8C 11 21 C4 04 0324*  	ld de,filedata
04BC90 01 00 00 01 0325*  	ld bc,65536
04BC94 3E 01       0326*  	ld a,mos_load
04BC96 5B CF       0327*  	RST.LIL 08h
04BC98 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BC9C DD 21 C4 42 0329*  	ld ix,17092
       00          
04BCA1 CD 77 AE 04 0330*  	call vdu_load_sfx
04BCA5 C9          0331*  	ret
04BCA6             0332*  
04BCA6             0333*  load_sfx_SHOT_PISTOL:
04BCA6 21 6A BE 04 0334*  	ld hl,FSHOT_PISTOL
04BCAA 22 D3 B7 04 0335*  	ld (cur_filename),hl
04BCAE 11 21 C4 04 0336*  	ld de,filedata
04BCB2 01 00 00 01 0337*  	ld bc,65536
04BCB6 3E 01       0338*  	ld a,mos_load
04BCB8 5B CF       0339*  	RST.LIL 08h
04BCBA 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04BCBE DD 21 61 4B 0341*  	ld ix,19297
       00          
04BCC3 CD 77 AE 04 0342*  	call vdu_load_sfx
04BCC7 C9          0343*  	ret
04BCC8             0344*  
04BCC8             0345*  load_sfx_UGH:
04BCC8 21 7E BE 04 0346*  	ld hl,FUGH
04BCCC 22 D3 B7 04 0347*  	ld (cur_filename),hl
04BCD0 11 21 C4 04 0348*  	ld de,filedata
04BCD4 01 00 00 01 0349*  	ld bc,65536
04BCD8 3E 01       0350*  	ld a,mos_load
04BCDA 5B CF       0351*  	RST.LIL 08h
04BCDC 21 14 FB 00 0352*  	ld hl,BUF_UGH
04BCE0 DD 21 A9 18 0353*  	ld ix,6313
       00          
04BCE5 CD 77 AE 04 0354*  	call vdu_load_sfx
04BCE9 C9          0355*  	ret
04BCEA             0356*  
04BCEA             0357*  load_sfx_WILHELM:
04BCEA 21 8A BE 04 0358*  	ld hl,FWILHELM
04BCEE 22 D3 B7 04 0359*  	ld (cur_filename),hl
04BCF2 11 21 C4 04 0360*  	ld de,filedata
04BCF6 01 00 00 01 0361*  	ld bc,65536
04BCFA 3E 01       0362*  	ld a,mos_load
04BCFC 5B CF       0363*  	RST.LIL 08h
04BCFE 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04BD02 DD 21 D7 53 0365*  	ld ix,21463
       00          
04BD07 CD 77 AE 04 0366*  	call vdu_load_sfx
04BD0B C9          0367*  	ret
04BD0C             0368*  
04BD0C             0369*  ; File name lookups:
04BD0C 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04BD1C 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04BD28 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04BD35 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04BD42 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04BD54 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04BD6C 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04BD84 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04BD95 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04BDA5 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04BDBA 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04BDCC 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04BDDF 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04BDED 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04BE00 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04BE0C 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04BE21 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04BE30 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BE4B 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BE6A 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04BE7E 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04BE8A 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04BE9A             0392*  
04BE9A             0393*  ; Play sfx routines
04BE9A             0394*  
04BE9A             0395*  sfx_play_achtung:
04BE9A 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04BE9E 01 58 03 00 0397*  	ld bc,856
04BEA2 C3 46 00 04 0398*  	jp vdu_play_sfx
04BEA6             0399*  
04BEA6             0400*  sfx_play_ahh:
04BEA6 21 01 FB 00 0401*  	ld hl,BUF_AHH
04BEAA 01 91 01 00 0402*  	ld bc,401
04BEAE C3 46 00 04 0403*  	jp vdu_play_sfx
04BEB2             0404*  
04BEB2             0405*  sfx_play_augh:
04BEB2 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04BEB6 01 FC 02 00 0407*  	ld bc,764
04BEBA C3 46 00 04 0408*  	jp vdu_play_sfx
04BEBE             0409*  
04BEBE             0410*  sfx_play_ayee:
04BEBE 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04BEC2 01 E6 01 00 0412*  	ld bc,486
04BEC6 C3 46 00 04 0413*  	jp vdu_play_sfx
04BECA             0414*  
04BECA             0415*  sfx_play_ayee_high:
04BECA 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04BECE 01 40 04 00 0417*  	ld bc,1088
04BED2 C3 46 00 04 0418*  	jp vdu_play_sfx
04BED6             0419*  
04BED6             0420*  sfx_play_dog_woof_double:
04BED6 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BEDA 01 63 02 00 0422*  	ld bc,611
04BEDE C3 46 00 04 0423*  	jp vdu_play_sfx
04BEE2             0424*  
04BEE2             0425*  sfx_play_dog_woof_single:
04BEE2 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04BEE6 01 15 02 00 0427*  	ld bc,533
04BEEA C3 46 00 04 0428*  	jp vdu_play_sfx
04BEEE             0429*  
04BEEE             0430*  sfx_play_dog_yelp:
04BEEE 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04BEF2 01 B0 01 00 0432*  	ld bc,432
04BEF6 C3 46 00 04 0433*  	jp vdu_play_sfx
04BEFA             0434*  
04BEFA             0435*  sfx_play_explode:
04BEFA 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04BEFE 01 13 05 00 0437*  	ld bc,1299
04BF02 C3 46 00 04 0438*  	jp vdu_play_sfx
04BF06             0439*  
04BF06             0440*  sfx_play_got_treasure:
04BF06 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04BF0A 01 A7 05 00 0442*  	ld bc,1447
04BF0E C3 46 00 04 0443*  	jp vdu_play_sfx
04BF12             0444*  
04BF12             0445*  sfx_play_gun_empty:
04BF12 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04BF16 01 24 01 00 0447*  	ld bc,292
04BF1A C3 46 00 04 0448*  	jp vdu_play_sfx
04BF1E             0449*  
04BF1E             0450*  sfx_play_gun_reload:
04BF1E 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04BF22 01 BA 01 00 0452*  	ld bc,442
04BF26 C3 46 00 04 0453*  	jp vdu_play_sfx
04BF2A             0454*  
04BF2A             0455*  sfx_play_knife:
04BF2A 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04BF2E 01 F2 00 00 0457*  	ld bc,242
04BF32 C3 46 00 04 0458*  	jp vdu_play_sfx
04BF36             0459*  
04BF36             0460*  sfx_play_mein_leben:
04BF36 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04BF3A 01 2E 03 00 0462*  	ld bc,814
04BF3E C3 46 00 04 0463*  	jp vdu_play_sfx
04BF42             0464*  
04BF42             0465*  sfx_play_oof:
04BF42 21 0E FB 00 0466*  	ld hl,BUF_OOF
04BF46 01 CE 03 00 0467*  	ld bc,974
04BF4A C3 46 00 04 0468*  	jp vdu_play_sfx
04BF4E             0469*  
04BF4E             0470*  sfx_play_schusstaffel:
04BF4E 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04BF52 01 48 02 00 0472*  	ld bc,584
04BF56 C3 46 00 04 0473*  	jp vdu_play_sfx
04BF5A             0474*  
04BF5A             0475*  sfx_play_scream:
04BF5A 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04BF5E 01 E0 02 00 0477*  	ld bc,736
04BF62 C3 46 00 04 0478*  	jp vdu_play_sfx
04BF66             0479*  
04BF66             0480*  sfx_play_shot_gatling_burst:
04BF66 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04BF6A 01 B6 05 00 0482*  	ld bc,1462
04BF6E C3 46 00 04 0483*  	jp vdu_play_sfx
04BF72             0484*  
04BF72             0485*  sfx_play_shot_machine_gun_burst:
04BF72 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BF76 01 F9 03 00 0487*  	ld bc,1017
04BF7A C3 46 00 04 0488*  	jp vdu_play_sfx
04BF7E             0489*  
04BF7E             0490*  sfx_play_shot_pistol:
04BF7E 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04BF82 01 7C 04 00 0492*  	ld bc,1148
04BF86 C3 46 00 04 0493*  	jp vdu_play_sfx
04BF8A             0494*  
04BF8A             0495*  sfx_play_ugh:
04BF8A 21 14 FB 00 0496*  	ld hl,BUF_UGH
04BF8E 01 77 01 00 0497*  	ld bc,375
04BF92 C3 46 00 04 0498*  	jp vdu_play_sfx
04BF96             0499*  
04BF96             0500*  sfx_play_wilhelm:
04BF96 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04BF9A 01 FD 04 00 0502*  	ld bc,1277
04BF9E C3 46 00 04 0503*  	jp vdu_play_sfx
04BFA2             0032   	include "src/asm/timer.asm"
04BFA2             0001*  ; Table 32. Timer Control Registers
04BFA2             0002*  ; this constant is the base address of the timer control registers
04BFA2             0003*  ; each timer takes three bytes:
04BFA2             0004*  ;   0: control register
04BFA2             0005*  ;   1: low byte of timer reset value
04BFA2             0006*  ;   2: high byte of timer reset value
04BFA2             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04BFA2             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04BFA2             0009*  TMR_CTL:     equ 80h
04BFA2             0010*  
04BFA2             0011*  ; Timer Control Register Bit Definitions
04BFA2             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04BFA2             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04BFA2             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04BFA2             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04BFA2             0016*                              ; the TMRx_CTL register is read.
04BFA2             0017*  
04BFA2             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04BFA2             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04BFA2             0020*  
04BFA2             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04BFA2             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04BFA2             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04BFA2             0024*                              ; written to the counter when the end-of-count value is reached.
04BFA2             0025*  
04BFA2             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04BFA2             0027*  CLK_DIV_256:  equ %00001100 ;
04BFA2             0028*  CLK_DIV_64:   equ %00001000 ;
04BFA2             0029*  CLK_DIV_16:   equ %00000100 ;
04BFA2             0030*  CLK_DIV_4:    equ %00000000 ;
04BFA2             0031*  
04BFA2             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04BFA2             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04BFA2             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04BFA2             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04BFA2             0036*                              ; programmer must ensure that this bit is set to 1 each time
04BFA2             0037*                              ; SINGLE-PASS mode is used.
04BFA2             0038*  
04BFA2             0039*  ; disable/enable the programmable reload timer
04BFA2             0040*  PRT_EN_0:     equ %00000000 ;
04BFA2             0041*  PRT_EN_1:     equ %00000001 ;
04BFA2             0042*  
04BFA2             0043*  ; Table 37. Timer Input Source Select Register
04BFA2             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04BFA2             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04BFA2             0046*  ;   00: System clock / CLK_DIV
04BFA2             0047*  ;   01: RTC / CLK_DIV
04BFA2             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04BFA2             0049*  ;   10: GPIO port B pin 1.
04BFA2             0050*  ;   11: GPIO port B pin 1.
04BFA2             0051*  TMR_ISS:   equ 92h ; register address
04BFA2             0052*  
04BFA2             0053*  ; Table 51. Real-Time Clock Control Register
04BFA2             0054*  RTC_CTRL: equ EDh ; register address
04BFA2             0055*  
04BFA2             0056*  ; alarm interrupt disable/enable
04BFA2             0057*  RTC_ALARM_0:    equ %00000000
04BFA2             0058*  RTC_ALARM_1:    equ %10000000
04BFA2             0059*  
04BFA2             0060*  ; interrupt on alarm disable/enable
04BFA2             0061*  RTC_INT_ENT_0:  equ %00000000
04BFA2             0062*  RTC_INT_ENT_1:  equ %01000000
04BFA2             0063*  
04BFA2             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04BFA2             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04BFA2             0066*  
04BFA2             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04BFA2             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04BFA2             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04BFA2             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04BFA2             0071*  
04BFA2             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04BFA2             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04BFA2             0074*  
04BFA2             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04BFA2             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04BFA2             0077*  
04BFA2             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04BFA2             0079*                                  ; RTC counter is enabled.
04BFA2             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04BFA2             0081*                                  ; RTC counter is disabled.
04BFA2             0082*  
04BFA2             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04BFA2             0084*  
04BFA2             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04BFA2             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04BFA2 00 00 00    0087*  prt_reload: dl 0x000000
04BFA5             0088*  
04BFA5             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04BFA5             0090*  ;          de = number PRT interrupts during test interval
04BFA5             0091*  prt_calibrate:
04BFA5 CD DE AA 04 0092*      call vdu_vblank
04BFA9             0093*  ; set a MOS timer
04BFA9 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04BFAD FD 21 00 C1 0095*      ld iy,tmr_test
       04          
04BFB2 CD DE C0 04 0096*      call tmr_set
04BFB6             0097*  ; set a PRT timer
04BFB6             0098*      ; ld hl,prt_reload_hardware
04BFB6             0099*      ; ld hl,prt_reload_emulator
04BFB6 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04BFBA 22 A2 BF 04 0101*      ld (prt_reload),hl
04BFBE CD 19 C0 04 0102*      call prt_set
04BFC2             0103*  @loop:
04BFC2             0104*  ; check time remaining on MOS timer
04BFC2 CD EC C0 04 0105*      call tmr_get
04BFC6 CA D0 BF 04 0106*      jp z,@done ; time expired,so quit
04BFCA FA D0 BF 04 0107*      jp m,@done ; time past expiration (negative),so quit
04BFCE 18 F2       0108*      jr @loop
04BFD0             0109*  @done:
04BFD0 ED 5B 67 C0 0110*      ld de,(prt_irq_counter)
       04          
04BFD5 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04BFD9 ED 43 A2 BF 0112*      ld (prt_reload),bc
       04          
04BFDE 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04BFE2 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04BFE3 32 F0 C1 04 0115*      ld (is_emulator),a
04BFE7 ED 52       0116*      sbc hl,de
04BFE9 21 17 C2 04 0117*      ld hl,on_hardware ; default message for running on hardware
04BFED CA A5 BF 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04BFF1 F8          0119*      ret m ; negative result means we're on hardware
04BFF2 3C          0120*      inc a ; we're on emulator
04BFF3 32 F0 C1 04 0121*      ld (is_emulator),a
04BFF7 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04BFFB ED 43 A2 BF 0123*      ld (prt_reload),bc
       04          
04C000 21 F1 C1 04 0124*      ld hl,on_emulator
04C004 C9          0125*      ret
04C005             0126*  
04C005 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04C019             0128*  
04C019             0129*  ; set PRT timer
04C019             0130*  prt_set:
04C019 21 00 00 00 0131*      ld hl,0
04C01D 22 67 C0 04 0132*      ld (prt_irq_counter),hl
04C021 2A A2 BF 04 0133*      ld hl,(prt_reload)
04C025 ED 29 84    0134*      out0 ($84),l
04C028 ED 21 85    0135*  	out0 ($85),h
04C02B             0136*  ; disable timer
04C02B 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04C02D ED 39 83    0138*  	out0 ($83),a
04C030             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04C030 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04C032 ED 39 83    0141*  	out0 ($83),a
04C035 C9          0142*      ret
04C036             0143*  
04C036             0144*  ; ===============================================
04C036             0145*  ; PRT Timer Interrupt Handling
04C036             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04C036             0147*  ; -----------------------------------------------
04C036             0148*  prt_irq_init:
04C036             0149*      ; set up interrupt vector table 2
04C036 21 00 00 00 0150*  	ld hl,0
04C03A 3A 0C 01 00 0151*  	ld a,($10c)
04C03E 6F          0152*  	ld l,a
04C03F 3A 0D 01 00 0153*  	ld a,($10d)
04C043 67          0154*  	ld h,a
04C044             0155*  
04C044             0156*  	; skip over CALL ($c3)
04C044 23          0157*  	inc hl
04C045             0158*  	; load address of jump into vector table 2 (in ram)
04C045 ED 27       0159*  	ld hl,(hl)
04C047             0160*  
04C047             0161*  	; write CALL prt_irq_handler to vector table 2
04C047 3E C3       0162*  	ld a,$c3
04C049 77          0163*  	ld (hl),a
04C04A 23          0164*  	inc hl
04C04B 11 52 C0 04 0165*  	ld de,prt_irq_handler
04C04F ED 1F       0166*  	ld (hl),de
04C051             0167*  
04C051 C9          0168*      ret
04C052             0169*  
04C052             0170*  prt_irq_handler:
04C052 F3          0171*  	di
04C053 F5          0172*  	push af
04C054 E5          0173*      push hl
04C055 ED 38 83    0174*  	in0 a,($83)
04C058 2A 67 C0 04 0175*  	ld hl,(prt_irq_counter)
04C05C 23          0176*  	inc hl
04C05D 22 67 C0 04 0177*  	ld (prt_irq_counter),hl
04C061 E1          0178*      pop hl
04C062 F1          0179*  	pop af
04C063 FB          0180*  	ei
04C064 5B ED 4D    0181*  	reti.l
04C067             0182*  
04C067             0183*  prt_irq_counter:
04C067 00 00 00    0184*  	.dl 0
04C06A             0185*  prt_irq_counter_saved:
04C06A 00 00 00    0186*      .dl 0
04C06D             0187*  
04C06D             0188*  prt_loop_reset:
04C06D E5          0189*      push hl
04C06E 21 00 00 00 0190*  	ld hl,0
04C072 22 67 C0 04 0191*  	ld (prt_irq_counter),hl
04C076 22 D8 C0 04 0192*      ld (prt_loop_counter),hl
04C07A 22 DB C0 04 0193*      ld (prt_loops),hl
04C07E CD 19 C0 04 0194*      call prt_set
04C082 E1          0195*      pop hl
04C083 C9          0196*      ret
04C084             0197*  
04C084             0198*  prt_loop_start:
04C084 E5          0199*      push hl
04C085 21 00 00 00 0200*  	ld hl,0
04C089 22 67 C0 04 0201*  	ld (prt_irq_counter),hl
04C08D E1          0202*      pop hl
04C08E C9          0203*      ret
04C08F             0204*  
04C08F             0205*  prt_loop_stop:
04C08F E5          0206*      push hl
04C090 D5          0207*      push de
04C091 2A 67 C0 04 0208*      ld hl,(prt_irq_counter)
04C095 ED 5B D8 C0 0209*      ld de,(prt_loop_counter)
       04          
04C09A 19          0210*      add hl,de
04C09B 22 D8 C0 04 0211*      ld (prt_loop_counter),hl
04C09F 21 00 00 00 0212*      ld hl,0
04C0A3 22 67 C0 04 0213*      ld (prt_irq_counter),hl
04C0A7 2A DB C0 04 0214*      ld hl,(prt_loops)
04C0AB 23          0215*      inc hl
04C0AC 22 DB C0 04 0216*      ld (prt_loops),hl
04C0B0 D1          0217*      pop de
04C0B1 E1          0218*      pop hl
04C0B2 C9          0219*      ret
04C0B3             0220*  
04C0B3             0221*  ; inputs: bc = y,x text coordinates to print
04C0B3             0222*  prt_loop_print:
04C0B3 F5          0223*      push af
04C0B4 E5          0224*      push hl
04C0B5 C5          0225*      push bc
04C0B6 D5          0226*      push de
04C0B7 DD E5       0227*      push ix
04C0B9 FD E5       0228*      push iy
04C0BB CD C1 A9 04 0229*      call vdu_move_cursor
04C0BF             0230*  
04C0BF 2A D8 C0 04 0231*      ld hl,(prt_loop_counter)
04C0C3 CD A1 AF 04 0232*      call printDec
04C0C7             0233*  
04C0C7 2A DB C0 04 0234*      ld hl,(prt_loops)
04C0CB CD A1 AF 04 0235*      call printDec
04C0CF             0236*  
04C0CF FD E1       0237*      pop iy
04C0D1 DD E1       0238*      pop ix
04C0D3 D1          0239*      pop de
04C0D4 C1          0240*      pop bc
04C0D5 E1          0241*      pop hl
04C0D6 F1          0242*      pop af
04C0D7 C9          0243*      ret
04C0D8             0244*  
04C0D8             0245*  prt_loop_counter:
04C0D8 00 00 00    0246*      .dl 0
04C0DB             0247*  prt_loops:
04C0DB 00 00 00    0248*      .dl 0
04C0DE             0249*  
04C0DE             0250*  ; ===============================================
04C0DE             0251*  ; Timer functions
04C0DE             0252*  ; -----------------------------------------------
04C0DE             0253*  ; set a countdown timer
04C0DE             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C0DE             0255*  ; returns: hl = current time
04C0DE             0256*  tmr_set:
04C0DE FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C0E1             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C0E1 3E 08       0001*M 			LD	A, function
04C0E3 5B CF       0002*M 			RST.LIL	08h
04C0E5 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C0E8 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C0EB C9          0261*      ret
04C0EC             0262*  
04C0EC             0263*  ; gets time remaining on a countdown timer
04C0EC             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C0EC             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C0EC             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C0EC             0267*  tmr_get:
04C0EC             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C0EC 3E 08       0001*M 			LD	A, function
04C0EE 5B CF       0002*M 			RST.LIL	08h
04C0F0 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C0F3 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C0F6 AF          0271*      xor a                   ; clear carry
04C0F7 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C0F9 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C0FC AF          0274*      xor a                   ; clear carry
04C0FD ED 5A       0275*      adc hl,de               ; hl = time remaining
04C0FF             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C0FF C9          0277*      ret
04C100             0278*  
04C100             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C106             0280*  
04C106 00 00 00    0281*  timestamp_now: dl 0
04C109 00 00 00    0282*  timestamp_old: dl 0
04C10C 00 00 00    0283*  timestamp_chg: dl 0
04C10F             0284*  
04C10F             0285*  ; update the global timestamp from the system clock
04C10F             0286*  ; inputs: none
04C10F             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C10F             0288*  ;          de = current time
04C10F             0289*  ;          ix = pointer to syvars table
04C10F             0290*  ; destroys: af,hl,de,ix
04C10F             0291*  timestamp_tick:
04C10F ED 5B 06 C1 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C114 ED 53 09 C1 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C119             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C119 3E 08       0001*M 			LD	A, function
04C11B 5B CF       0002*M 			RST.LIL	08h
04C11D DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C120 22 06 C1 04 0296*      ld (timestamp_now),hl   ; save current time
04C124 AF          0297*      xor a                   ; clear carry
04C125 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C127 22 0C C1 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C12B C9          0300*      ret
04C12C             0301*  
04C12C             0302*  ; set a countdown timer
04C12C             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C12C             0304*  ; requires: timestamp_tick to be called at least once before this function
04C12C             0305*  ; returns: hl = current time
04C12C             0306*  ; destroys: hl
04C12C             0307*  timestamp_tmr_set:
04C12C FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C12F 2A 06 C1 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C133 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C136 C9          0311*      ret
04C137             0312*  
04C137             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C137             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C137             0315*  ; requires: timestamp_tick to be called at least once before this function
04C137             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C137             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C137             0318*  ; destroys: af,hl,de
04C137             0319*  timestamp_tmr_get:
04C137 ED 5B 06 C1 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C13C FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C13F AF          0322*      xor a                   ; clear carry
04C140 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C142 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C145 AF          0325*      xor a                   ; clear carry
04C146 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C148             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C148 C9          0328*      ret
04C149             0329*  
04C149             0330*  ; set a stopwatch
04C149             0331*  ; returns: hl = start time
04C149             0332*  ; destroys: hl,ix
04C149             0333*  stopwatch_set:
04C149             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C149 3E 08       0001*M 			LD	A, function
04C14B 5B CF       0002*M 			RST.LIL	08h
04C14D DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C150 22 65 C1 04 0336*      ld (stopwatch_started),hl            ; set start time
04C154 C9          0337*      ret
04C155             0338*  
04C155             0339*  ; gets time elapsed on a stopwatch
04C155             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C155             0341*  ; destroys: af,hl,de,ix
04C155             0342*  stopwatch_get:
04C155             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C155 3E 08       0001*M 			LD	A, function
04C157 5B CF       0002*M 			RST.LIL	08h
04C159 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C15C ED 5B 65 C1 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C161 AF          0346*      xor a                   ; clear carry
04C162 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C164 C9          0348*      ret
04C165             0349*  
04C165             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C168             0351*  
04C168             0352*  ; ------------------
04C168             0353*  ; delay routine
04C168             0354*  ; Author: Richard Turrnidge
04C168             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C168             0356*  ; routine waits a fixed time,then returns
04C168             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C168             0358*  ; eg. ld A,00000100b
04C168             0359*  
04C168             0360*  multiPurposeDelay:
04C168 F5          0361*      push af
04C169 C5          0362*      push bc
04C16A DD E5       0363*      push ix
04C16C 47          0364*      ld b,a
04C16D 3E 08       0365*      ld a,$08
04C16F 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C171             0367*  
04C171             0368*  waitLoop:
04C171             0369*  
04C171 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C174             0371*  
04C174             0372*                                  ;   we check if bit set is same as last time we checked.
04C174             0373*                                  ;   bit 0 - don't use
04C174             0374*                                  ;   bit 1 - changes 64 times per second
04C174             0375*                                  ;   bit 2 - changes 32 times per second
04C174             0376*                                  ;   bit 3 - changes 16 times per second
04C174             0377*  
04C174             0378*                                  ;   bit 4 - changes 8 times per second
04C174             0379*                                  ;   bit 5 - changes 4 times per second
04C174             0380*                                  ;   bit 6 - changes 2 times per second
04C174             0381*                                  ;   bit 7 - changes 1 times per second
04C174 A0          0382*      and b
04C175 4F          0383*      ld c,a
04C176 3A 87 C1 04 0384*      ld a,(oldTimeStamp)
04C17A B9          0385*      cp c                        ; is A same as last value?
04C17B 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C17D 79          0387*      ld a,c
04C17E 32 87 C1 04 0388*      ld (oldTimeStamp),a        ; set new value
04C182             0389*  
04C182 DD E1       0390*      pop ix
04C184 C1          0391*      pop bc
04C185 F1          0392*      pop af
04C186 C9          0393*      ret
04C187             0394*  
04C187 00          0395*  oldTimeStamp:   .db 00h
04C188             0033   
04C188             0034   
04C188             0035   start:
04C188 F5          0036       push af
04C189 C5          0037       push bc
04C18A D5          0038       push de
04C18B DD E5       0039       push ix
04C18D FD E5       0040       push iy
04C18F             0041   
04C18F CD 3E C2 04 0042   	call init ; Initialization code
04C193 CD 80 C3 04 0043       call main ; Call the main function
04C197             0044   
04C197             0045   exit:
04C197             0046   
04C197 FD E1       0047       pop iy
04C199 DD E1       0048       pop ix
04C19B D1          0049       pop de
04C19C C1          0050       pop bc
04C19D F1          0051       pop af
04C19E 21 00 00 00 0052       ld hl,0
04C1A2             0053   
04C1A2 C9          0054       ret
04C1A3             0055   
04C1A3 57 65 6C 63 0056   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C1BA 4C 6F 61 64 0057   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C1C5 4C 6F 61 64 0058   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C1D3 50 72 65 73 0059   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C1F0 00          0060   is_emulator: defb 0
04C1F1 52 75 6E 6E 0061   on_emulator: defb "Running on emulator, sound enabled.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2C 
       20 73 6F 75 
       6E 64 20 65 
       6E 61 62 6C 
       65 64 2E 0D 
       0A 00       
04C217 52 75 6E 6E 0062   on_hardware: defb "Running on hardware, sound disabled.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2C 
       20 73 6F 75 
       6E 64 20 64 
       69 73 61 62 
       6C 65 64 2E 
       0D 0A 00    
04C23E             0063   
04C23E             0064   init:
04C23E             0065   ; start generic stopwatch to time setup loop
04C23E             0066   ; so we can determine if we're running on emulator or hardware
04C23E CD 49 C1 04 0067   	call stopwatch_set
04C242             0068   
04C242             0069   ; initialize global timestamp
04C242 DD 27 00    0070       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C245 22 06 C1 04 0071       ld (timestamp_now),hl
04C249             0072   
04C249             0073   ; set the cursor off
04C249 CD D0 AA 04 0074   	call cursor_off
04C24D             0075   
04C24D             0076   ; print loading ui message
04C24D 21 BA C1 04 0077   	ld hl,loading_ui
04C251 CD 53 AF 04 0078   	call printString
04C255             0079   
04C255             0080   ; load fonts
04C255 CD AA 7E 04 0081   	call load_font_itc_honda
04C259 CD 8D 8F 04 0082   	call load_font_retro_computer
04C25D             0083   
04C25D             0084   ; load UI images
04C25D CD 16 98 04 0085   	call load_ui_images
04C261 CD E4 99 04 0086   	call load_ui_images_bj
04C265             0087   
04C265             0088   ; set up the display
04C265 3E 88       0089       ld a,8+128 ; 320x240x64 double-buffered
04C267 CD 11 A9 04 0090       call vdu_set_screen_mode
04C26B AF          0091       xor a
04C26C CD 40 AA 04 0092       call vdu_set_scaling
04C270             0093   
04C270             0094   ; set text background color
04C270 3E 84       0095   	ld a,4 + 128
04C272 CD 9D A8 04 0096   	call vdu_colour_text
04C276             0097   
04C276             0098   ; set gfx bg color
04C276 AF          0099   	xor a ; plotting mode 0
04C277 0E 04       0100   	ld c,4 ; dark blue
04C279 CD C5 A8 04 0101   	call vdu_gcol_bg
04C27D CD 98 A8 04 0102   	call vdu_clg
04C281             0103   
04C281             0104   ; set the cursor off again since we changed screen modes
04C281 CD D0 AA 04 0105   	call cursor_off
04C285             0106   
04C285             0107   ; VDU 28, left, bottom, right, top: Set text viewport **
04C285             0108   ; MIND THE LITTLE-ENDIANESS
04C285             0109   ; inputs: c=left,b=bottom,e=right,d=top
04C285 0E 00       0110   	ld c,0 ; left
04C287 16 14       0111   	ld d,20 ; top
04C289 1E 27       0112   	ld e,39 ; right
04C28B 06 1D       0113   	ld b,29; bottom
04C28D CD 86 A9 04 0114   	call vdu_set_txt_viewport
04C291             0115   
04C291             0116   ; initialize image load routine
04C291 CD DF B7 04 0117   	call img_load_init
04C295             0118   
04C295             0119   ; load panels
04C295 01 13 01 00 0120   	ld bc,cube_num_panels
04C299 21 21 02 04 0121   	ld hl,cube_buffer_id_lut
04C29D 22 D9 B7 04 0122   	ld (cur_buffer_id_lut),hl
04C2A1 21 5A 05 04 0123   	ld hl,cube_load_panels_table
04C2A5 22 DC B7 04 0124   	ld (cur_load_jump_table),hl
04C2A9 CD 14 B8 04 0125   	call img_load_main
04C2AD             0126   
04C2AD             0127   ; load sprites
04C2AD 01 5A 00 00 0128   	ld bc,sprite_num_panels
04C2B1 21 2D 4B 04 0129   	ld hl,sprite_buffer_id_lut
04C2B5 22 D9 B7 04 0130   	ld (cur_buffer_id_lut),hl
04C2B9 21 3B 4C 04 0131   	ld hl,sprite_load_panels_table
04C2BD 22 DC B7 04 0132   	ld (cur_load_jump_table),hl
04C2C1 CD 14 B8 04 0133   	call img_load_main
04C2C5             0134   
04C2C5             0135   ; load distance walls
04C2C5 01 09 00 00 0136   	ld bc,dws_num_panels
04C2C9 21 15 63 04 0137   	ld hl,dws_buffer_id_lut
04C2CD 22 D9 B7 04 0138   	ld (cur_buffer_id_lut),hl
04C2D1 21 30 63 04 0139   	ld hl,dws_load_panels_table
04C2D5 22 DC B7 04 0140   	ld (cur_load_jump_table),hl
04C2D9 CD 14 B8 04 0141   	call img_load_main
04C2DD             0142   
04C2DD             0143   ; use loading time to determine if we're running on emulator or hardware
04C2DD CD 55 C1 04 0144   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C2E1 11 40 1F 00 0145   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C2E5 AF          0146   	xor a ; clear carry, default is running on hardware
04C2E6 32 F0 C1 04 0147   	ld (is_emulator),a
04C2EA ED 52       0148   	sbc hl,de
04C2EC FA 21 C3 04 0149   	jp m,@on_emulator
04C2F0 CD BC A9 04 0150   	call vdu_home_cursor
04C2F4 21 17 C2 04 0151   	ld hl,on_hardware
04C2F8 CD 53 AF 04 0152   	call printString
04C2FC             0153   
04C2FC             0154   ; DEBUG: load sfx after all
04C2FC             0155   ; enable all the sound chanels
04C2FC CD 84 01 04 0156   	call vdu_enable_channels
04C300             0157   
04C300             0158   ; load sound effects
04C300 01 16 00 00 0159   	ld bc,SFX_num_buffers
04C304 21 70 B9 04 0160   	ld hl,SFX_buffer_id_lut
04C308 22 D9 B7 04 0161   	ld (cur_buffer_id_lut),hl
04C30C 21 DE B9 04 0162   	ld hl,SFX_load_routines_table
04C310 22 DC B7 04 0163   	ld (cur_load_jump_table),hl
04C314 CD DE AD 04 0164   	call sfx_load_main
04C318             0165   
04C318             0166   ; self modify vdu_play_sfx to enable sound
04C318 AF          0167   	xor a
04C319 32 46 00 04 0168   	ld (vdu_play_sfx_disable),a
04C31D             0169   
04C31D             0170   ; END DEBUG
04C31D C3 54 C3 04 0171   	jp @test_done
04C321             0172   
04C321             0173   @on_emulator:
04C321             0174   ; enable all the sound chanels
04C321 CD 84 01 04 0175   	call vdu_enable_channels
04C325             0176   
04C325             0177   ; load sound effects
04C325 01 16 00 00 0178   	ld bc,SFX_num_buffers
04C329 21 70 B9 04 0179   	ld hl,SFX_buffer_id_lut
04C32D 22 D9 B7 04 0180   	ld (cur_buffer_id_lut),hl
04C331 21 DE B9 04 0181   	ld hl,SFX_load_routines_table
04C335 22 DC B7 04 0182   	ld (cur_load_jump_table),hl
04C339 CD DE AD 04 0183   	call sfx_load_main
04C33D             0184   
04C33D             0185   ; self modify vdu_play_sfx to enable sound
04C33D AF          0186   	xor a
04C33E 32 46 00 04 0187   	ld (vdu_play_sfx_disable),a
04C342             0188   
04C342             0189   ; print emulator message
04C342 3E 01       0190   	ld a,1
04C344 32 F0 C1 04 0191   	ld (is_emulator),a
04C348 CD BC A9 04 0192   	call vdu_home_cursor
04C34C 21 F1 C1 04 0193   	ld hl,on_emulator
04C350 CD 53 AF 04 0194   	call printString
04C354             0195   
04C354             0196   @test_done:
04C354             0197   ; print final loading time
04C354 21 C5 C1 04 0198   	ld hl,loading_time
04C358 CD 53 AF 04 0199   	call printString
04C35C CD 55 C1 04 0200   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C360 CD A1 AF 04 0201   	call printDec
04C364 CD 68 AF 04 0202   	call printNewLine
04C368             0203   
04C368             0204   ; print loading complete message and wait for user keypress
04C368 21 D3 C1 04 0205   	ld hl,loading_complete
04C36C CD 53 AF 04 0206   	call printString
04C370 CD 53 AA 04 0207   	call vdu_flip
04C374 CD AE B2 04 0208   	call waitKeypress
04C378             0209   
04C378             0210   ; initialization done
04C378 C9          0211   	ret
04C379             0212   
04C379             0213   ; DEBUG: set up a simple countdown timer
04C379 01          0214   debug_timer: db 0x01
04C37A             0215   
04C37A             0216   main_loop_tmr: ds 6
04C380             0217   framerate: equ 30
04C380             0218   
04C380             0219   main:
04C380             0220   ; set map variables and load initial map file
04C380 CD 34 66 04 0221   	call map_init
04C384             0222   ; initialize player position
04C384 CD 36 B3 04 0223   	call plyr_init
04C388             0224   
04C388             0225   main_loop:
04C388             0226   ; update global timestamp
04C388 CD 0F C1 04 0227       call timestamp_tick
04C38C             0228   
04C38C             0229   ; move enemies
04C38C CD 85 A7 04 0230   	call sprites_see_plyr ; 220-285  prt ticks
04C390             0231   
04C390             0232   ; get player input and update sprite position
04C390             0233   	; 0-1 prt ticks
04C390 CD 33 B6 04 0234   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04C394             0235   
04C394             0236   ; render the updated scene
04C394 CD 37 68 04 0237   	call render_scene ; 6-12 prt ticks
04C398             0238   ; full loop 12-16 prt ticks
04C398             0239   
04C398             0240   ; flip the screen
04C398 CD 53 AA 04 0241   	call vdu_flip
04C39C             0242   
04C39C             0243   @wait:
04C39C FD 21 7A C3 0244   	ld iy,main_loop_tmr
       04          
04C3A1 CD EC C0 04 0245   	call tmr_get
04C3A5 CA B1 C3 04 0246   	jp z,@continue
04C3A9 FA B1 C3 04 0247   	jp m,@continue
04C3AD C3 9C C3 04 0248   	jp @wait
04C3B1             0249   @continue:
04C3B1             0250   
04C3B1             0251   ; reset main loop timer
04C3B1 FD 21 7A C3 0252   	ld iy,main_loop_tmr
       04          
04C3B6 21 04 00 00 0253   	ld hl,120/framerate
04C3BA CD DE C0 04 0254   	call tmr_set
04C3BE             0255   
04C3BE             0256   ; check for escape key and quit if pressed
04C3BE             0257   	MOSCALL mos_getkbmap
04C3BE 3E 1E       0001M  			LD	A, function
04C3C0 5B CF       0002M  			RST.LIL	08h
04C3C2             0258   ; 113 Escape
04C3C2 DD CB 0E 46 0259       bit 0,(ix+14)
04C3C6 20 02       0260   	jr nz,main_end
04C3C8             0261   @Escape:
04C3C8 18 BE       0262   	jr main_loop
04C3CA             0263   
04C3CA             0264   main_end:
04C3CA             0265   	; call do_outro
04C3CA             0266   ; restore screen to something normalish
04C3CA AF          0267   	xor a
04C3CB CD 11 A9 04 0268   	call vdu_set_screen_mode
04C3CF CD C2 AA 04 0269   	call cursor_on
04C3D3 C9          0270   	ret
04C3D4             0271   
04C3D4             0272   ; files.asm must go here so that filedata doesn't stomp on program data
04C3D4             0273   	include "src/asm/files.asm"
04C3D4             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04C3D4             0002*  ; inputs: hl = bufferId, ix = file size
04C3D4             0003*  vdu_load_buffer_from_file:
04C3D4             0004*  	; load buffer ids
04C3D4 22 11 C4 04 0005*  		ld (@id0),hl
04C3D8 22 17 C4 04 0006*  		ld (@id1),hl
04C3DC 22 1C C4 04 0007*  		ld (@id2),hl
04C3E0             0008*  	; clean up bytes that got stomped on by the ID loads
04C3E0 3E 02       0009*  		ld a,2
04C3E2 32 13 C4 04 0010*  		ld (@id0+2),a
04C3E6 3E 17       0011*  		ld a,23
04C3E8 32 19 C4 04 0012*  		ld (@id1+2),a
04C3EC AF          0013*  		xor a
04C3ED 32 1E C4 04 0014*  		ld (@id2+2),a
04C3F1             0015*  	; read size from ix
04C3F1 DD 7D       0016*  		ld a,ixl
04C3F3 32 1F C4 04 0017*  		ld (@size),a
04C3F7 DD 7C       0018*  		ld a,ixh
04C3F9 32 20 C4 04 0019*  		ld (@size+1),a
04C3FD             0020*  	; get all the ducks in a row for the vdu call
04C3FD 01 13 00 00 0021*  		ld bc,filedata-@start
04C401 DD 09       0022*  		add ix,bc
04C403 DD 44       0023*  		ld b,ixh
04C405 DD 4D       0024*  		ld c,ixl
04C407 21 0E C4 04 0025*  		ld hl,@start
04C40B             0026*  	; push the button
04C40B 5B DF       0027*  		rst.lil $18
04C40D             0028*  	; back to caller
04C40D C9          0029*  		ret
04C40E             0030*  ; vdp command string:
04C40E 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04C411 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04C413 02          0033*  		db 2
04C414             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04C414 17 1B 20    0035*  		db 23,27,0x20
04C417 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04C419             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04C419 17 00 A0    0038*  		db 23,0,0xA0
04C41C 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04C41E 00          0040*  		db 0
04C41F             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04C41F 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04C421             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04C421             0044*  	; ds 65536 ; placeholder for file data	DEBUG
