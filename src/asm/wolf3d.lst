PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 12 C8 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  max_channels: equ 4
040046             0003*  
040046             0004*  vdu_play_sfx:
040046 C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0006*      ld (@bufferId),hl
04004B ED 43 89 00 0007*      ld (@duration),bc
       04          
040050 3E 17       0008*      ld a,23
040052 32 81 00 04 0009*      ld (@bufferId+2),a
040056 3A 45 00 04 0010*      ld a,(last_channel)
04005A 3C          0011*      inc a
04005B             0012*      ; and 31 ; modulo 32
04005B FE 04       0013*      cp max_channels
04005D C2 62 00 04 0014*      jp nz,@load_channel
040061 AF          0015*      xor a
040062             0016*  @load_channel:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; enable enough additional channels so that total enabled = max_channels
04008C             0044*  ; inputs: max_channels set
04008C             0045*  ; returns: nothing
04008C             0046*  ; destroys: af, bc, hl
04008C             0047*  vdu_enable_channels:
04008C 3E 04       0048*      ld a,max_channels
04008E D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040090 F2 97 00 04 0050*      jp p,@loop
040094 C9          0051*      ret
040095 3E 03       0052*      ld a,3 ; first non-default channel
040097             0053*  @loop:
040097 32 B2 00 04 0054*      ld (@channel),a
04009B 21 AF 00 04 0055*      ld hl,@beg
04009F 01 05 00 00 0056*      ld bc,@end-@beg
0400A3 F5          0057*      push af
0400A4 5B DF       0058*      rst.lil $18
0400A6 F1          0059*      pop af
0400A7 3C          0060*      inc a
0400A8 FE 04       0061*      cp max_channels
0400AA C2 97 00 04 0062*      jp nz,@loop
0400AE C9          0063*      ret
0400AF             0064*  @beg:
0400AF 17 00 85    0065*              db 23, 0, $85
0400B2 00          0066*  @channel:   db 0
0400B3 08          0067*              db 8 ; command 8: enable channel
0400B4             0068*  @end:
0400B4             0069*  
0400B4             0070*  ; ############################################################
0400B4             0071*  ; VDU SOUND API
0400B4             0072*  ; ############################################################
0400B4             0073*  ; Command 0: Play note
0400B4             0074*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0400B4             0075*      MACRO PLAY_NOTE channel, volume, frequency, duration
0400B4             0076*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
0400B4             0077*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
0400B4             0078*      rst.lil $18
0400B4             0079*      jr @PLAY_NOTE_END
0400B4             0080*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
0400B4             0081*                   db channel                  ; Channel, 0 (commented out)
0400B4             0082*                   db 0                        ; Play note command
0400B4             0083*                   db volume                   ; Volume
0400B4             0084*                   dw frequency                ; Frequency
0400B4             0085*                   dw duration                 ; Duration
0400B4             0086*  @PLAY_NOTE_END:
0400B4             0087*      ENDMACRO
0400B4             0088*  
0400B4             0089*      MACRO MUTE_CHANNEL channel
0400B4             0090*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
0400B4             0091*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
0400B4             0092*      rst.lil $18
0400B4             0093*      jr @MUTE_CHANNEL_END
0400B4             0094*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
0400B4             0095*                     db channel                ; Channel, 0 (commented out)
0400B4             0096*                     db 2                      ; Set volume command
0400B4             0097*                     db 0                      ; Volume (mute)
0400B4             0098*  @MUTE_CHANNEL_END:
0400B4             0099*      ENDMACRO
0400B4             0100*  
0400B4             0101*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
0400B4             0102*  vdu_play_note:
0400B4 79          0103*      ld a,c
0400B5 32 D5 00 04 0104*      ld (@channel),a
0400B9 78          0105*      ld a,b
0400BA 32 D7 00 04 0106*      ld (@volume),a
0400BE 22 D8 00 04 0107*      ld (@frequency),hl
0400C2 ED 53 DA 00 0108*      ld (@duration),de
       04          
0400C7 21 D2 00 04 0109*      ld hl,@cmd
0400CB 01 0A 00 00 0110*      ld bc,@end-@cmd
0400CF 5B DF       0111*      rst.lil $18
0400D1 C9          0112*      ret
0400D2 17 00 85    0113*  @cmd:       db 23, 0, 0x85
0400D5 00          0114*  @channel:   db 0x00
0400D6 00          0115*              db 0x00 ; play note command
0400D7 00          0116*  @volume:    db 0x00
0400D8 00 00       0117*  @frequency: dw 0x0000
0400DA 00 00       0118*  @duration:  dw 0x0000
0400DC 00          0119*  @end:       db 0x00 ; padding
0400DD             0120*  
0400DD             0121*  ; Command 1: Status
0400DD             0122*  ; VDU 23, 0, &85, channel, 1
0400DD             0123*  ; inputs: a = channel
0400DD             0124*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400DD             0125*  ; Bit 	Name 	Meaning
0400DD             0126*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400DD             0127*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400DD             0128*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400DD             0129*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400DD             0130*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400DD             0131*  
0400DD             0132*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400DD             0133*  vdu_channel_status:
0400DD 32 EF 00 04 0134*      ld (@channel),a
0400E1 21 EC 00 04 0135*      ld hl,@cmd
0400E5 01 05 00 00 0136*      ld bc,@end-@cmd
0400E9 5B DF       0137*      rst.lil $18
0400EB C9          0138*      ret
0400EC 17 00 85    0139*  @cmd:       db 23, 0, 0x85
0400EF 00          0140*  @channel:   db 0x00
0400F0 01          0141*              db 0x01 ; get channel status command
0400F1             0142*  @end:
0400F1             0143*  
0400F1             0144*  ; VDU 23, 0, &85, channel, 2, volume
0400F1             0145*  ; inputs: c = channel, b = volume
0400F1             0146*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400F1             0147*  
0400F1             0148*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400F1             0149*  
0400F1             0150*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400F1             0151*  vdu_channel_volume:
0400F1 79          0152*      ld a,c
0400F2 32 09 01 04 0153*      ld (@channel),a
0400F6 78          0154*      ld a,b
0400F7 32 0B 01 04 0155*      ld (@volume),a
0400FB 21 06 01 04 0156*      ld hl,@cmd
0400FF 01 06 00 00 0157*      ld bc,@end-@cmd
040103 5B DF       0158*      rst.lil $18
040105 C9          0159*      ret
040106 17 00 85    0160*  @cmd:       db 23, 0, 0x85
040109 00          0161*  @channel:   db 0x00
04010A 02          0162*              db 0x02 ; set volume command
04010B 00          0163*  @volume:    db 0x00
04010C             0164*  @end:
04010C             0165*  
04010C             0166*  ; VDU 23, 0, &85, channel, 3, frequency;
04010C             0167*  
04010C             0168*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
04010C             0169*  
04010C             0170*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
04010C             0171*  
04010C             0172*  ; Returns 1 on success, 0 for failure.
04010C             0173*  vdu_channel_frequency:
04010C 79          0174*      ld a,c
04010D 32 24 01 04 0175*      ld (@channel),a
040111 ED 53 26 01 0176*      ld (@frequency),de
       04          
040116 21 21 01 04 0177*      ld hl,@cmd
04011A 01 07 00 00 0178*      ld bc,@end-@cmd
04011E 5B DF       0179*      rst.lil $18
040120 C9          0180*      ret
040121 17 00 85    0181*  @cmd:       db 23, 0, 0x85
040124 00          0182*  @channel:   db 0x00
040125 03          0183*              db 0x03 ; set frequency command
040126 00 00       0184*  @frequency: dw 0x0000
040128 00          0185*  @end:       db 0x00 ; padding
040129             0186*  
040129             0187*  
040129             0188*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040129             0189*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040129             0190*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040129             0191*  
040129             0192*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040129             0193*  
040129             0194*  ; By default a channel is set to use waveform 0 (square wave).
040129             0195*  
040129             0196*  ; Valid waveform values are as follows:
040129             0197*  ; Value 	Waveform
040129             0198*  ; 0 	Square wave
040129             0199*  ; 1 	Triangle wave
040129             0200*  ; 2 	Sawtooth wave
040129             0201*  ; 3 	Sine wave
040129             0202*  ; 4 	Noise (simple white noise with no frequency support)
040129             0203*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040129             0204*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040129             0205*  
040129             0206*  vdu_channel_waveform:
040129 79          0207*      ld a,c
04012A 32 4F 01 04 0208*      ld (@channel),a
04012E 78          0209*      ld a,b
04012F 32 51 01 04 0210*      ld (@waveform),a
040133 FE 08       0211*      cp 8 ; check if the waveform is a sample
040135 28 06       0212*      jr z, @sample
040137 01 06 00 00 0213*      ld bc,@bufferId-@cmd
04013B 18 08       0214*      jr @sendToVdu
04013D             0215*  @sample:
04013D 22 52 01 04 0216*      ld (@bufferId),hl
040141 01 08 00 00 0217*      ld bc,@end-@cmd
040145             0218*  @sendToVdu:
040145 21 4C 01 04 0219*      ld hl,@cmd
040149 5B DF       0220*      rst.lil $18
04014B C9          0221*      ret
04014C 17 00 85    0222*  @cmd:       db 23, 0, 0x85
04014F 00          0223*  @channel:   db 0x00
040150 04          0224*              db 0x04 ; set waveform command
040151 00          0225*  @waveform:  db 0x00
040152 00 00       0226*  @bufferId:  dw 0x0000
040154 00          0227*  @end:       db 0x00 ; padding
040155             0228*  
040155             0229*  
040155             0230*  
040155             0231*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
040155             0232*  ; inputs: hl = bufferId; a = format
040155             0233*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
040155             0234*  ; Value 	Description
040155             0235*  ; 0 	8-bit signed, 16KHz
040155             0236*  ; 1 	8-bit unsigned, 16KHz
040155             0237*  vdu_buffer_to_sound:
040155 22 6E 01 04 0238*      ld (@bufferId),hl
040159 32 70 01 04 0239*      ld (@format),a
04015D 21 68 01 04 0240*      ld hl,@cmd
040161 01 09 00 00 0241*      ld bc,@end-@cmd
040165 5B DF       0242*      rst.lil $18
040167 C9          0243*      ret
040168 17 00 85    0244*  @cmd:       db 23, 0, 0x85
04016B 00          0245*              db 0x00 ; a magic number that is always 0
04016C 05          0246*              db 0x05 ; buffer to sound command
04016D 02          0247*              db 0x02 ; a magic number that is always 2
04016E 00 00       0248*  @bufferId:  dw 0x0000
040170 00          0249*  @format:    db 0x00
040171             0250*  @end:
040171             0251*  
040171             0252*  
040171             0253*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040171             0254*  vdu_play_sample:
040171             0255*      ; populate input parameters
040171 79          0256*      ld a,c
040172 32 9C 01 04 0257*      ld (@channel0),a
040176 32 A4 01 04 0258*      ld (@channel1),a
04017A 78          0259*      ld a,b
04017B 32 A6 01 04 0260*      ld (@volume),a
04017F ED 53 A7 01 0261*      ld (@frequency),de
       04          
040184 22 9F 01 04 0262*      ld (@bufferId),hl
040188             0263*      ; clean up byte that got stomped on by bufferId load from hl
040188 3E 17       0264*      ld a,23
04018A 32 A1 01 04 0265*      ld (@cmd1),a
04018E             0266*      ; prep the vdu command string
04018E 21 99 01 04 0267*      ld hl, @cmd0
040192 01 12 00 00 0268*      ld bc, @end - @cmd0
040196 5B DF       0269*      rst.lil $18
040198 C9          0270*      ret
040199 17 00 85    0271*  @cmd0:       db 23, 0, 0x85
04019C 00          0272*  @channel0:   db 0x00
04019D 04          0273*               db 0x04 ; set waveform command
04019E 08          0274*  @waveform:   db 0x08 ; sample
04019F 00 00       0275*  @bufferId:   dw 0x0000
0401A1 17 00 85    0276*  @cmd1:       db 23, 0, 0x85
0401A4 00          0277*  @channel1:   db 0x00
0401A5 00          0278*               db 0x00 ; play note command
0401A6 00          0279*  @volume:     db 0x00
0401A7 00 00       0280*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0401A9 00 00       0281*  @duration:   dw 0x0000 ; milliseconds
0401AB 00          0282*  @end:        db 0x00 ; padding
0401AC             0013   	include "src/asm/images.asm"
0401AC             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
0401AC             0002*  
0401AC             0003*  ; cube buffer ids:
0401AC             0004*  BUF_10_004: equ 0x0100
0401AC             0005*  BUF_10_009: equ 0x0101
0401AC             0006*  BUF_10_010: equ 0x0102
0401AC             0007*  BUF_10_011: equ 0x0103
0401AC             0008*  BUF_10_012: equ 0x0104
0401AC             0009*  BUF_10_013: equ 0x0105
0401AC             0010*  BUF_10_014: equ 0x0106
0401AC             0011*  BUF_10_015: equ 0x0107
0401AC             0012*  BUF_10_016: equ 0x0108
0401AC             0013*  BUF_10_020: equ 0x0109
0401AC             0014*  BUF_10_024: equ 0x010A
0401AC             0015*  BUF_10_025: equ 0x010B
0401AC             0016*  BUF_10_026: equ 0x010C
0401AC             0017*  BUF_10_027: equ 0x010D
0401AC             0018*  BUF_10_028: equ 0x010E
0401AC             0019*  BUF_10_029: equ 0x010F
0401AC             0020*  BUF_10_032: equ 0x0110
0401AC             0021*  BUF_10_035: equ 0x0111
0401AC             0022*  BUF_10_036: equ 0x0112
0401AC             0023*  BUF_10_037: equ 0x0113
0401AC             0024*  BUF_10_038: equ 0x0114
0401AC             0025*  BUF_10_040: equ 0x0115
0401AC             0026*  BUF_10_042: equ 0x0116
0401AC             0027*  BUF_10_043: equ 0x0117
0401AC             0028*  BUF_10_044: equ 0x0118
0401AC             0029*  BUF_11_004: equ 0x0119
0401AC             0030*  BUF_11_009: equ 0x011A
0401AC             0031*  BUF_11_010: equ 0x011B
0401AC             0032*  BUF_11_011: equ 0x011C
0401AC             0033*  BUF_11_012: equ 0x011D
0401AC             0034*  BUF_11_013: equ 0x011E
0401AC             0035*  BUF_11_014: equ 0x011F
0401AC             0036*  BUF_11_015: equ 0x0120
0401AC             0037*  BUF_11_016: equ 0x0121
0401AC             0038*  BUF_11_020: equ 0x0122
0401AC             0039*  BUF_11_024: equ 0x0123
0401AC             0040*  BUF_11_025: equ 0x0124
0401AC             0041*  BUF_11_026: equ 0x0125
0401AC             0042*  BUF_11_027: equ 0x0126
0401AC             0043*  BUF_11_028: equ 0x0127
0401AC             0044*  BUF_11_029: equ 0x0128
0401AC             0045*  BUF_11_032: equ 0x0129
0401AC             0046*  BUF_11_035: equ 0x012A
0401AC             0047*  BUF_11_036: equ 0x012B
0401AC             0048*  BUF_11_037: equ 0x012C
0401AC             0049*  BUF_11_038: equ 0x012D
0401AC             0050*  BUF_11_040: equ 0x012E
0401AC             0051*  BUF_11_042: equ 0x012F
0401AC             0052*  BUF_11_043: equ 0x0130
0401AC             0053*  BUF_11_044: equ 0x0131
0401AC             0054*  BUF_12_004: equ 0x0132
0401AC             0055*  BUF_12_009: equ 0x0133
0401AC             0056*  BUF_12_010: equ 0x0134
0401AC             0057*  BUF_12_011: equ 0x0135
0401AC             0058*  BUF_12_012: equ 0x0136
0401AC             0059*  BUF_12_013: equ 0x0137
0401AC             0060*  BUF_12_014: equ 0x0138
0401AC             0061*  BUF_12_015: equ 0x0139
0401AC             0062*  BUF_12_016: equ 0x013A
0401AC             0063*  BUF_12_020: equ 0x013B
0401AC             0064*  BUF_12_024: equ 0x013C
0401AC             0065*  BUF_12_025: equ 0x013D
0401AC             0066*  BUF_12_026: equ 0x013E
0401AC             0067*  BUF_12_027: equ 0x013F
0401AC             0068*  BUF_12_028: equ 0x0140
0401AC             0069*  BUF_12_029: equ 0x0141
0401AC             0070*  BUF_12_032: equ 0x0142
0401AC             0071*  BUF_12_035: equ 0x0143
0401AC             0072*  BUF_12_036: equ 0x0144
0401AC             0073*  BUF_12_037: equ 0x0145
0401AC             0074*  BUF_12_038: equ 0x0146
0401AC             0075*  BUF_12_040: equ 0x0147
0401AC             0076*  BUF_12_042: equ 0x0148
0401AC             0077*  BUF_12_043: equ 0x0149
0401AC             0078*  BUF_12_044: equ 0x014A
0401AC             0079*  BUF_13_004: equ 0x014B
0401AC             0080*  BUF_13_009: equ 0x014C
0401AC             0081*  BUF_13_010: equ 0x014D
0401AC             0082*  BUF_13_011: equ 0x014E
0401AC             0083*  BUF_13_012: equ 0x014F
0401AC             0084*  BUF_13_013: equ 0x0150
0401AC             0085*  BUF_13_014: equ 0x0151
0401AC             0086*  BUF_13_015: equ 0x0152
0401AC             0087*  BUF_13_016: equ 0x0153
0401AC             0088*  BUF_13_020: equ 0x0154
0401AC             0089*  BUF_13_024: equ 0x0155
0401AC             0090*  BUF_13_025: equ 0x0156
0401AC             0091*  BUF_13_026: equ 0x0157
0401AC             0092*  BUF_13_027: equ 0x0158
0401AC             0093*  BUF_13_028: equ 0x0159
0401AC             0094*  BUF_13_029: equ 0x015A
0401AC             0095*  BUF_13_032: equ 0x015B
0401AC             0096*  BUF_13_035: equ 0x015C
0401AC             0097*  BUF_13_036: equ 0x015D
0401AC             0098*  BUF_13_037: equ 0x015E
0401AC             0099*  BUF_13_038: equ 0x015F
0401AC             0100*  BUF_13_040: equ 0x0160
0401AC             0101*  BUF_13_042: equ 0x0161
0401AC             0102*  BUF_13_043: equ 0x0162
0401AC             0103*  BUF_13_044: equ 0x0163
0401AC             0104*  BUF_14_004: equ 0x0164
0401AC             0105*  BUF_14_009: equ 0x0165
0401AC             0106*  BUF_14_010: equ 0x0166
0401AC             0107*  BUF_14_011: equ 0x0167
0401AC             0108*  BUF_14_012: equ 0x0168
0401AC             0109*  BUF_14_013: equ 0x0169
0401AC             0110*  BUF_14_014: equ 0x016A
0401AC             0111*  BUF_14_015: equ 0x016B
0401AC             0112*  BUF_14_016: equ 0x016C
0401AC             0113*  BUF_14_020: equ 0x016D
0401AC             0114*  BUF_14_024: equ 0x016E
0401AC             0115*  BUF_14_025: equ 0x016F
0401AC             0116*  BUF_14_026: equ 0x0170
0401AC             0117*  BUF_14_027: equ 0x0171
0401AC             0118*  BUF_14_028: equ 0x0172
0401AC             0119*  BUF_14_029: equ 0x0173
0401AC             0120*  BUF_14_032: equ 0x0174
0401AC             0121*  BUF_14_035: equ 0x0175
0401AC             0122*  BUF_14_036: equ 0x0176
0401AC             0123*  BUF_14_037: equ 0x0177
0401AC             0124*  BUF_14_038: equ 0x0178
0401AC             0125*  BUF_14_040: equ 0x0179
0401AC             0126*  BUF_14_042: equ 0x017A
0401AC             0127*  BUF_14_043: equ 0x017B
0401AC             0128*  BUF_14_044: equ 0x017C
0401AC             0129*  BUF_15_004: equ 0x017D
0401AC             0130*  BUF_15_009: equ 0x017E
0401AC             0131*  BUF_15_010: equ 0x017F
0401AC             0132*  BUF_15_011: equ 0x0180
0401AC             0133*  BUF_15_012: equ 0x0181
0401AC             0134*  BUF_15_013: equ 0x0182
0401AC             0135*  BUF_15_014: equ 0x0183
0401AC             0136*  BUF_15_015: equ 0x0184
0401AC             0137*  BUF_15_016: equ 0x0185
0401AC             0138*  BUF_15_020: equ 0x0186
0401AC             0139*  BUF_15_024: equ 0x0187
0401AC             0140*  BUF_15_025: equ 0x0188
0401AC             0141*  BUF_15_026: equ 0x0189
0401AC             0142*  BUF_15_027: equ 0x018A
0401AC             0143*  BUF_15_028: equ 0x018B
0401AC             0144*  BUF_15_029: equ 0x018C
0401AC             0145*  BUF_15_032: equ 0x018D
0401AC             0146*  BUF_15_035: equ 0x018E
0401AC             0147*  BUF_15_036: equ 0x018F
0401AC             0148*  BUF_15_037: equ 0x0190
0401AC             0149*  BUF_15_038: equ 0x0191
0401AC             0150*  BUF_15_040: equ 0x0192
0401AC             0151*  BUF_15_042: equ 0x0193
0401AC             0152*  BUF_15_043: equ 0x0194
0401AC             0153*  BUF_15_044: equ 0x0195
0401AC             0154*  BUF_16_004: equ 0x0196
0401AC             0155*  BUF_16_009: equ 0x0197
0401AC             0156*  BUF_16_010: equ 0x0198
0401AC             0157*  BUF_16_011: equ 0x0199
0401AC             0158*  BUF_16_012: equ 0x019A
0401AC             0159*  BUF_16_013: equ 0x019B
0401AC             0160*  BUF_16_014: equ 0x019C
0401AC             0161*  BUF_16_015: equ 0x019D
0401AC             0162*  BUF_16_016: equ 0x019E
0401AC             0163*  BUF_16_020: equ 0x019F
0401AC             0164*  BUF_16_024: equ 0x01A0
0401AC             0165*  BUF_16_025: equ 0x01A1
0401AC             0166*  BUF_16_026: equ 0x01A2
0401AC             0167*  BUF_16_027: equ 0x01A3
0401AC             0168*  BUF_16_028: equ 0x01A4
0401AC             0169*  BUF_16_029: equ 0x01A5
0401AC             0170*  BUF_16_032: equ 0x01A6
0401AC             0171*  BUF_16_035: equ 0x01A7
0401AC             0172*  BUF_16_036: equ 0x01A8
0401AC             0173*  BUF_16_037: equ 0x01A9
0401AC             0174*  BUF_16_038: equ 0x01AA
0401AC             0175*  BUF_16_040: equ 0x01AB
0401AC             0176*  BUF_16_042: equ 0x01AC
0401AC             0177*  BUF_16_043: equ 0x01AD
0401AC             0178*  BUF_16_044: equ 0x01AE
0401AC             0179*  BUF_17_004: equ 0x01AF
0401AC             0180*  BUF_17_009: equ 0x01B0
0401AC             0181*  BUF_17_010: equ 0x01B1
0401AC             0182*  BUF_17_011: equ 0x01B2
0401AC             0183*  BUF_17_012: equ 0x01B3
0401AC             0184*  BUF_17_013: equ 0x01B4
0401AC             0185*  BUF_17_014: equ 0x01B5
0401AC             0186*  BUF_17_015: equ 0x01B6
0401AC             0187*  BUF_17_016: equ 0x01B7
0401AC             0188*  BUF_17_020: equ 0x01B8
0401AC             0189*  BUF_17_024: equ 0x01B9
0401AC             0190*  BUF_17_025: equ 0x01BA
0401AC             0191*  BUF_17_026: equ 0x01BB
0401AC             0192*  BUF_17_027: equ 0x01BC
0401AC             0193*  BUF_17_028: equ 0x01BD
0401AC             0194*  BUF_17_029: equ 0x01BE
0401AC             0195*  BUF_17_032: equ 0x01BF
0401AC             0196*  BUF_17_035: equ 0x01C0
0401AC             0197*  BUF_17_036: equ 0x01C1
0401AC             0198*  BUF_17_037: equ 0x01C2
0401AC             0199*  BUF_17_038: equ 0x01C3
0401AC             0200*  BUF_17_040: equ 0x01C4
0401AC             0201*  BUF_17_042: equ 0x01C5
0401AC             0202*  BUF_17_043: equ 0x01C6
0401AC             0203*  BUF_17_044: equ 0x01C7
0401AC             0204*  BUF_57_004: equ 0x01C8
0401AC             0205*  BUF_57_009: equ 0x01C9
0401AC             0206*  BUF_57_010: equ 0x01CA
0401AC             0207*  BUF_57_011: equ 0x01CB
0401AC             0208*  BUF_57_012: equ 0x01CC
0401AC             0209*  BUF_57_013: equ 0x01CD
0401AC             0210*  BUF_57_014: equ 0x01CE
0401AC             0211*  BUF_57_015: equ 0x01CF
0401AC             0212*  BUF_57_016: equ 0x01D0
0401AC             0213*  BUF_57_020: equ 0x01D1
0401AC             0214*  BUF_57_024: equ 0x01D2
0401AC             0215*  BUF_57_025: equ 0x01D3
0401AC             0216*  BUF_57_026: equ 0x01D4
0401AC             0217*  BUF_57_027: equ 0x01D5
0401AC             0218*  BUF_57_028: equ 0x01D6
0401AC             0219*  BUF_57_029: equ 0x01D7
0401AC             0220*  BUF_57_032: equ 0x01D8
0401AC             0221*  BUF_57_035: equ 0x01D9
0401AC             0222*  BUF_57_036: equ 0x01DA
0401AC             0223*  BUF_57_037: equ 0x01DB
0401AC             0224*  BUF_57_038: equ 0x01DC
0401AC             0225*  BUF_57_040: equ 0x01DD
0401AC             0226*  BUF_57_042: equ 0x01DE
0401AC             0227*  BUF_57_043: equ 0x01DF
0401AC             0228*  BUF_57_044: equ 0x01E0
0401AC             0229*  BUF_58_004: equ 0x01E1
0401AC             0230*  BUF_58_009: equ 0x01E2
0401AC             0231*  BUF_58_010: equ 0x01E3
0401AC             0232*  BUF_58_011: equ 0x01E4
0401AC             0233*  BUF_58_012: equ 0x01E5
0401AC             0234*  BUF_58_013: equ 0x01E6
0401AC             0235*  BUF_58_014: equ 0x01E7
0401AC             0236*  BUF_58_015: equ 0x01E8
0401AC             0237*  BUF_58_016: equ 0x01E9
0401AC             0238*  BUF_58_020: equ 0x01EA
0401AC             0239*  BUF_58_024: equ 0x01EB
0401AC             0240*  BUF_58_025: equ 0x01EC
0401AC             0241*  BUF_58_026: equ 0x01ED
0401AC             0242*  BUF_58_027: equ 0x01EE
0401AC             0243*  BUF_58_028: equ 0x01EF
0401AC             0244*  BUF_58_029: equ 0x01F0
0401AC             0245*  BUF_58_032: equ 0x01F1
0401AC             0246*  BUF_58_035: equ 0x01F2
0401AC             0247*  BUF_58_036: equ 0x01F3
0401AC             0248*  BUF_58_037: equ 0x01F4
0401AC             0249*  BUF_58_038: equ 0x01F5
0401AC             0250*  BUF_58_040: equ 0x01F6
0401AC             0251*  BUF_58_042: equ 0x01F7
0401AC             0252*  BUF_58_043: equ 0x01F8
0401AC             0253*  BUF_58_044: equ 0x01F9
0401AC             0254*  BUF_59_004: equ 0x01FA
0401AC             0255*  BUF_59_009: equ 0x01FB
0401AC             0256*  BUF_59_010: equ 0x01FC
0401AC             0257*  BUF_59_011: equ 0x01FD
0401AC             0258*  BUF_59_012: equ 0x01FE
0401AC             0259*  BUF_59_013: equ 0x01FF
0401AC             0260*  BUF_59_014: equ 0x0200
0401AC             0261*  BUF_59_015: equ 0x0201
0401AC             0262*  BUF_59_016: equ 0x0202
0401AC             0263*  BUF_59_020: equ 0x0203
0401AC             0264*  BUF_59_024: equ 0x0204
0401AC             0265*  BUF_59_025: equ 0x0205
0401AC             0266*  BUF_59_026: equ 0x0206
0401AC             0267*  BUF_59_027: equ 0x0207
0401AC             0268*  BUF_59_028: equ 0x0208
0401AC             0269*  BUF_59_029: equ 0x0209
0401AC             0270*  BUF_59_032: equ 0x020A
0401AC             0271*  BUF_59_035: equ 0x020B
0401AC             0272*  BUF_59_036: equ 0x020C
0401AC             0273*  BUF_59_037: equ 0x020D
0401AC             0274*  BUF_59_038: equ 0x020E
0401AC             0275*  BUF_59_040: equ 0x020F
0401AC             0276*  BUF_59_042: equ 0x0210
0401AC             0277*  BUF_59_043: equ 0x0211
0401AC             0278*  BUF_59_044: equ 0x0212
0401AC             0279*  
0401AC             0280*  cube_num_panels: equ 275
0401AC             0281*  
0401AC             0282*  ; cube buffer id reverse lookup:
0401AC             0283*  cube_buffer_id_lut:
0401AC 00 01 00    0284*  	dl BUF_10_004
0401AF 01 01 00    0285*  	dl BUF_10_009
0401B2 02 01 00    0286*  	dl BUF_10_010
0401B5 03 01 00    0287*  	dl BUF_10_011
0401B8 04 01 00    0288*  	dl BUF_10_012
0401BB 05 01 00    0289*  	dl BUF_10_013
0401BE 06 01 00    0290*  	dl BUF_10_014
0401C1 07 01 00    0291*  	dl BUF_10_015
0401C4 08 01 00    0292*  	dl BUF_10_016
0401C7 09 01 00    0293*  	dl BUF_10_020
0401CA 0A 01 00    0294*  	dl BUF_10_024
0401CD 0B 01 00    0295*  	dl BUF_10_025
0401D0 0C 01 00    0296*  	dl BUF_10_026
0401D3 0D 01 00    0297*  	dl BUF_10_027
0401D6 0E 01 00    0298*  	dl BUF_10_028
0401D9 0F 01 00    0299*  	dl BUF_10_029
0401DC 10 01 00    0300*  	dl BUF_10_032
0401DF 11 01 00    0301*  	dl BUF_10_035
0401E2 12 01 00    0302*  	dl BUF_10_036
0401E5 13 01 00    0303*  	dl BUF_10_037
0401E8 14 01 00    0304*  	dl BUF_10_038
0401EB 15 01 00    0305*  	dl BUF_10_040
0401EE 16 01 00    0306*  	dl BUF_10_042
0401F1 17 01 00    0307*  	dl BUF_10_043
0401F4 18 01 00    0308*  	dl BUF_10_044
0401F7 19 01 00    0309*  	dl BUF_11_004
0401FA 1A 01 00    0310*  	dl BUF_11_009
0401FD 1B 01 00    0311*  	dl BUF_11_010
040200 1C 01 00    0312*  	dl BUF_11_011
040203 1D 01 00    0313*  	dl BUF_11_012
040206 1E 01 00    0314*  	dl BUF_11_013
040209 1F 01 00    0315*  	dl BUF_11_014
04020C 20 01 00    0316*  	dl BUF_11_015
04020F 21 01 00    0317*  	dl BUF_11_016
040212 22 01 00    0318*  	dl BUF_11_020
040215 23 01 00    0319*  	dl BUF_11_024
040218 24 01 00    0320*  	dl BUF_11_025
04021B 25 01 00    0321*  	dl BUF_11_026
04021E 26 01 00    0322*  	dl BUF_11_027
040221 27 01 00    0323*  	dl BUF_11_028
040224 28 01 00    0324*  	dl BUF_11_029
040227 29 01 00    0325*  	dl BUF_11_032
04022A 2A 01 00    0326*  	dl BUF_11_035
04022D 2B 01 00    0327*  	dl BUF_11_036
040230 2C 01 00    0328*  	dl BUF_11_037
040233 2D 01 00    0329*  	dl BUF_11_038
040236 2E 01 00    0330*  	dl BUF_11_040
040239 2F 01 00    0331*  	dl BUF_11_042
04023C 30 01 00    0332*  	dl BUF_11_043
04023F 31 01 00    0333*  	dl BUF_11_044
040242 32 01 00    0334*  	dl BUF_12_004
040245 33 01 00    0335*  	dl BUF_12_009
040248 34 01 00    0336*  	dl BUF_12_010
04024B 35 01 00    0337*  	dl BUF_12_011
04024E 36 01 00    0338*  	dl BUF_12_012
040251 37 01 00    0339*  	dl BUF_12_013
040254 38 01 00    0340*  	dl BUF_12_014
040257 39 01 00    0341*  	dl BUF_12_015
04025A 3A 01 00    0342*  	dl BUF_12_016
04025D 3B 01 00    0343*  	dl BUF_12_020
040260 3C 01 00    0344*  	dl BUF_12_024
040263 3D 01 00    0345*  	dl BUF_12_025
040266 3E 01 00    0346*  	dl BUF_12_026
040269 3F 01 00    0347*  	dl BUF_12_027
04026C 40 01 00    0348*  	dl BUF_12_028
04026F 41 01 00    0349*  	dl BUF_12_029
040272 42 01 00    0350*  	dl BUF_12_032
040275 43 01 00    0351*  	dl BUF_12_035
040278 44 01 00    0352*  	dl BUF_12_036
04027B 45 01 00    0353*  	dl BUF_12_037
04027E 46 01 00    0354*  	dl BUF_12_038
040281 47 01 00    0355*  	dl BUF_12_040
040284 48 01 00    0356*  	dl BUF_12_042
040287 49 01 00    0357*  	dl BUF_12_043
04028A 4A 01 00    0358*  	dl BUF_12_044
04028D 4B 01 00    0359*  	dl BUF_13_004
040290 4C 01 00    0360*  	dl BUF_13_009
040293 4D 01 00    0361*  	dl BUF_13_010
040296 4E 01 00    0362*  	dl BUF_13_011
040299 4F 01 00    0363*  	dl BUF_13_012
04029C 50 01 00    0364*  	dl BUF_13_013
04029F 51 01 00    0365*  	dl BUF_13_014
0402A2 52 01 00    0366*  	dl BUF_13_015
0402A5 53 01 00    0367*  	dl BUF_13_016
0402A8 54 01 00    0368*  	dl BUF_13_020
0402AB 55 01 00    0369*  	dl BUF_13_024
0402AE 56 01 00    0370*  	dl BUF_13_025
0402B1 57 01 00    0371*  	dl BUF_13_026
0402B4 58 01 00    0372*  	dl BUF_13_027
0402B7 59 01 00    0373*  	dl BUF_13_028
0402BA 5A 01 00    0374*  	dl BUF_13_029
0402BD 5B 01 00    0375*  	dl BUF_13_032
0402C0 5C 01 00    0376*  	dl BUF_13_035
0402C3 5D 01 00    0377*  	dl BUF_13_036
0402C6 5E 01 00    0378*  	dl BUF_13_037
0402C9 5F 01 00    0379*  	dl BUF_13_038
0402CC 60 01 00    0380*  	dl BUF_13_040
0402CF 61 01 00    0381*  	dl BUF_13_042
0402D2 62 01 00    0382*  	dl BUF_13_043
0402D5 63 01 00    0383*  	dl BUF_13_044
0402D8 64 01 00    0384*  	dl BUF_14_004
0402DB 65 01 00    0385*  	dl BUF_14_009
0402DE 66 01 00    0386*  	dl BUF_14_010
0402E1 67 01 00    0387*  	dl BUF_14_011
0402E4 68 01 00    0388*  	dl BUF_14_012
0402E7 69 01 00    0389*  	dl BUF_14_013
0402EA 6A 01 00    0390*  	dl BUF_14_014
0402ED 6B 01 00    0391*  	dl BUF_14_015
0402F0 6C 01 00    0392*  	dl BUF_14_016
0402F3 6D 01 00    0393*  	dl BUF_14_020
0402F6 6E 01 00    0394*  	dl BUF_14_024
0402F9 6F 01 00    0395*  	dl BUF_14_025
0402FC 70 01 00    0396*  	dl BUF_14_026
0402FF 71 01 00    0397*  	dl BUF_14_027
040302 72 01 00    0398*  	dl BUF_14_028
040305 73 01 00    0399*  	dl BUF_14_029
040308 74 01 00    0400*  	dl BUF_14_032
04030B 75 01 00    0401*  	dl BUF_14_035
04030E 76 01 00    0402*  	dl BUF_14_036
040311 77 01 00    0403*  	dl BUF_14_037
040314 78 01 00    0404*  	dl BUF_14_038
040317 79 01 00    0405*  	dl BUF_14_040
04031A 7A 01 00    0406*  	dl BUF_14_042
04031D 7B 01 00    0407*  	dl BUF_14_043
040320 7C 01 00    0408*  	dl BUF_14_044
040323 7D 01 00    0409*  	dl BUF_15_004
040326 7E 01 00    0410*  	dl BUF_15_009
040329 7F 01 00    0411*  	dl BUF_15_010
04032C 80 01 00    0412*  	dl BUF_15_011
04032F 81 01 00    0413*  	dl BUF_15_012
040332 82 01 00    0414*  	dl BUF_15_013
040335 83 01 00    0415*  	dl BUF_15_014
040338 84 01 00    0416*  	dl BUF_15_015
04033B 85 01 00    0417*  	dl BUF_15_016
04033E 86 01 00    0418*  	dl BUF_15_020
040341 87 01 00    0419*  	dl BUF_15_024
040344 88 01 00    0420*  	dl BUF_15_025
040347 89 01 00    0421*  	dl BUF_15_026
04034A 8A 01 00    0422*  	dl BUF_15_027
04034D 8B 01 00    0423*  	dl BUF_15_028
040350 8C 01 00    0424*  	dl BUF_15_029
040353 8D 01 00    0425*  	dl BUF_15_032
040356 8E 01 00    0426*  	dl BUF_15_035
040359 8F 01 00    0427*  	dl BUF_15_036
04035C 90 01 00    0428*  	dl BUF_15_037
04035F 91 01 00    0429*  	dl BUF_15_038
040362 92 01 00    0430*  	dl BUF_15_040
040365 93 01 00    0431*  	dl BUF_15_042
040368 94 01 00    0432*  	dl BUF_15_043
04036B 95 01 00    0433*  	dl BUF_15_044
04036E 96 01 00    0434*  	dl BUF_16_004
040371 97 01 00    0435*  	dl BUF_16_009
040374 98 01 00    0436*  	dl BUF_16_010
040377 99 01 00    0437*  	dl BUF_16_011
04037A 9A 01 00    0438*  	dl BUF_16_012
04037D 9B 01 00    0439*  	dl BUF_16_013
040380 9C 01 00    0440*  	dl BUF_16_014
040383 9D 01 00    0441*  	dl BUF_16_015
040386 9E 01 00    0442*  	dl BUF_16_016
040389 9F 01 00    0443*  	dl BUF_16_020
04038C A0 01 00    0444*  	dl BUF_16_024
04038F A1 01 00    0445*  	dl BUF_16_025
040392 A2 01 00    0446*  	dl BUF_16_026
040395 A3 01 00    0447*  	dl BUF_16_027
040398 A4 01 00    0448*  	dl BUF_16_028
04039B A5 01 00    0449*  	dl BUF_16_029
04039E A6 01 00    0450*  	dl BUF_16_032
0403A1 A7 01 00    0451*  	dl BUF_16_035
0403A4 A8 01 00    0452*  	dl BUF_16_036
0403A7 A9 01 00    0453*  	dl BUF_16_037
0403AA AA 01 00    0454*  	dl BUF_16_038
0403AD AB 01 00    0455*  	dl BUF_16_040
0403B0 AC 01 00    0456*  	dl BUF_16_042
0403B3 AD 01 00    0457*  	dl BUF_16_043
0403B6 AE 01 00    0458*  	dl BUF_16_044
0403B9 AF 01 00    0459*  	dl BUF_17_004
0403BC B0 01 00    0460*  	dl BUF_17_009
0403BF B1 01 00    0461*  	dl BUF_17_010
0403C2 B2 01 00    0462*  	dl BUF_17_011
0403C5 B3 01 00    0463*  	dl BUF_17_012
0403C8 B4 01 00    0464*  	dl BUF_17_013
0403CB B5 01 00    0465*  	dl BUF_17_014
0403CE B6 01 00    0466*  	dl BUF_17_015
0403D1 B7 01 00    0467*  	dl BUF_17_016
0403D4 B8 01 00    0468*  	dl BUF_17_020
0403D7 B9 01 00    0469*  	dl BUF_17_024
0403DA BA 01 00    0470*  	dl BUF_17_025
0403DD BB 01 00    0471*  	dl BUF_17_026
0403E0 BC 01 00    0472*  	dl BUF_17_027
0403E3 BD 01 00    0473*  	dl BUF_17_028
0403E6 BE 01 00    0474*  	dl BUF_17_029
0403E9 BF 01 00    0475*  	dl BUF_17_032
0403EC C0 01 00    0476*  	dl BUF_17_035
0403EF C1 01 00    0477*  	dl BUF_17_036
0403F2 C2 01 00    0478*  	dl BUF_17_037
0403F5 C3 01 00    0479*  	dl BUF_17_038
0403F8 C4 01 00    0480*  	dl BUF_17_040
0403FB C5 01 00    0481*  	dl BUF_17_042
0403FE C6 01 00    0482*  	dl BUF_17_043
040401 C7 01 00    0483*  	dl BUF_17_044
040404 C8 01 00    0484*  	dl BUF_57_004
040407 C9 01 00    0485*  	dl BUF_57_009
04040A CA 01 00    0486*  	dl BUF_57_010
04040D CB 01 00    0487*  	dl BUF_57_011
040410 CC 01 00    0488*  	dl BUF_57_012
040413 CD 01 00    0489*  	dl BUF_57_013
040416 CE 01 00    0490*  	dl BUF_57_014
040419 CF 01 00    0491*  	dl BUF_57_015
04041C D0 01 00    0492*  	dl BUF_57_016
04041F D1 01 00    0493*  	dl BUF_57_020
040422 D2 01 00    0494*  	dl BUF_57_024
040425 D3 01 00    0495*  	dl BUF_57_025
040428 D4 01 00    0496*  	dl BUF_57_026
04042B D5 01 00    0497*  	dl BUF_57_027
04042E D6 01 00    0498*  	dl BUF_57_028
040431 D7 01 00    0499*  	dl BUF_57_029
040434 D8 01 00    0500*  	dl BUF_57_032
040437 D9 01 00    0501*  	dl BUF_57_035
04043A DA 01 00    0502*  	dl BUF_57_036
04043D DB 01 00    0503*  	dl BUF_57_037
040440 DC 01 00    0504*  	dl BUF_57_038
040443 DD 01 00    0505*  	dl BUF_57_040
040446 DE 01 00    0506*  	dl BUF_57_042
040449 DF 01 00    0507*  	dl BUF_57_043
04044C E0 01 00    0508*  	dl BUF_57_044
04044F E1 01 00    0509*  	dl BUF_58_004
040452 E2 01 00    0510*  	dl BUF_58_009
040455 E3 01 00    0511*  	dl BUF_58_010
040458 E4 01 00    0512*  	dl BUF_58_011
04045B E5 01 00    0513*  	dl BUF_58_012
04045E E6 01 00    0514*  	dl BUF_58_013
040461 E7 01 00    0515*  	dl BUF_58_014
040464 E8 01 00    0516*  	dl BUF_58_015
040467 E9 01 00    0517*  	dl BUF_58_016
04046A EA 01 00    0518*  	dl BUF_58_020
04046D EB 01 00    0519*  	dl BUF_58_024
040470 EC 01 00    0520*  	dl BUF_58_025
040473 ED 01 00    0521*  	dl BUF_58_026
040476 EE 01 00    0522*  	dl BUF_58_027
040479 EF 01 00    0523*  	dl BUF_58_028
04047C F0 01 00    0524*  	dl BUF_58_029
04047F F1 01 00    0525*  	dl BUF_58_032
040482 F2 01 00    0526*  	dl BUF_58_035
040485 F3 01 00    0527*  	dl BUF_58_036
040488 F4 01 00    0528*  	dl BUF_58_037
04048B F5 01 00    0529*  	dl BUF_58_038
04048E F6 01 00    0530*  	dl BUF_58_040
040491 F7 01 00    0531*  	dl BUF_58_042
040494 F8 01 00    0532*  	dl BUF_58_043
040497 F9 01 00    0533*  	dl BUF_58_044
04049A FA 01 00    0534*  	dl BUF_59_004
04049D FB 01 00    0535*  	dl BUF_59_009
0404A0 FC 01 00    0536*  	dl BUF_59_010
0404A3 FD 01 00    0537*  	dl BUF_59_011
0404A6 FE 01 00    0538*  	dl BUF_59_012
0404A9 FF 01 00    0539*  	dl BUF_59_013
0404AC 00 02 00    0540*  	dl BUF_59_014
0404AF 01 02 00    0541*  	dl BUF_59_015
0404B2 02 02 00    0542*  	dl BUF_59_016
0404B5 03 02 00    0543*  	dl BUF_59_020
0404B8 04 02 00    0544*  	dl BUF_59_024
0404BB 05 02 00    0545*  	dl BUF_59_025
0404BE 06 02 00    0546*  	dl BUF_59_026
0404C1 07 02 00    0547*  	dl BUF_59_027
0404C4 08 02 00    0548*  	dl BUF_59_028
0404C7 09 02 00    0549*  	dl BUF_59_029
0404CA 0A 02 00    0550*  	dl BUF_59_032
0404CD 0B 02 00    0551*  	dl BUF_59_035
0404D0 0C 02 00    0552*  	dl BUF_59_036
0404D3 0D 02 00    0553*  	dl BUF_59_037
0404D6 0E 02 00    0554*  	dl BUF_59_038
0404D9 0F 02 00    0555*  	dl BUF_59_040
0404DC 10 02 00    0556*  	dl BUF_59_042
0404DF 11 02 00    0557*  	dl BUF_59_043
0404E2 12 02 00    0558*  	dl BUF_59_044
0404E5             0559*  
0404E5             0560*  ; cube load routines jump table:
0404E5             0561*  cube_load_panels_table:
0404E5 1E 08 04    0562*  	dl ld_10_004
0404E8 48 08 04    0563*  	dl ld_10_009
0404EB 72 08 04    0564*  	dl ld_10_010
0404EE 9C 08 04    0565*  	dl ld_10_011
0404F1 C6 08 04    0566*  	dl ld_10_012
0404F4 F0 08 04    0567*  	dl ld_10_013
0404F7 1A 09 04    0568*  	dl ld_10_014
0404FA 44 09 04    0569*  	dl ld_10_015
0404FD 6E 09 04    0570*  	dl ld_10_016
040500 98 09 04    0571*  	dl ld_10_020
040503 C2 09 04    0572*  	dl ld_10_024
040506 EC 09 04    0573*  	dl ld_10_025
040509 16 0A 04    0574*  	dl ld_10_026
04050C 40 0A 04    0575*  	dl ld_10_027
04050F 6A 0A 04    0576*  	dl ld_10_028
040512 94 0A 04    0577*  	dl ld_10_029
040515 BE 0A 04    0578*  	dl ld_10_032
040518 E8 0A 04    0579*  	dl ld_10_035
04051B 12 0B 04    0580*  	dl ld_10_036
04051E 3C 0B 04    0581*  	dl ld_10_037
040521 66 0B 04    0582*  	dl ld_10_038
040524 90 0B 04    0583*  	dl ld_10_040
040527 BA 0B 04    0584*  	dl ld_10_042
04052A E4 0B 04    0585*  	dl ld_10_043
04052D 0E 0C 04    0586*  	dl ld_10_044
040530 38 0C 04    0587*  	dl ld_11_004
040533 62 0C 04    0588*  	dl ld_11_009
040536 8C 0C 04    0589*  	dl ld_11_010
040539 B6 0C 04    0590*  	dl ld_11_011
04053C E0 0C 04    0591*  	dl ld_11_012
04053F 0A 0D 04    0592*  	dl ld_11_013
040542 34 0D 04    0593*  	dl ld_11_014
040545 5E 0D 04    0594*  	dl ld_11_015
040548 88 0D 04    0595*  	dl ld_11_016
04054B B2 0D 04    0596*  	dl ld_11_020
04054E DC 0D 04    0597*  	dl ld_11_024
040551 06 0E 04    0598*  	dl ld_11_025
040554 30 0E 04    0599*  	dl ld_11_026
040557 5A 0E 04    0600*  	dl ld_11_027
04055A 84 0E 04    0601*  	dl ld_11_028
04055D AE 0E 04    0602*  	dl ld_11_029
040560 D8 0E 04    0603*  	dl ld_11_032
040563 02 0F 04    0604*  	dl ld_11_035
040566 2C 0F 04    0605*  	dl ld_11_036
040569 56 0F 04    0606*  	dl ld_11_037
04056C 80 0F 04    0607*  	dl ld_11_038
04056F AA 0F 04    0608*  	dl ld_11_040
040572 D4 0F 04    0609*  	dl ld_11_042
040575 FE 0F 04    0610*  	dl ld_11_043
040578 28 10 04    0611*  	dl ld_11_044
04057B 52 10 04    0612*  	dl ld_12_004
04057E 7C 10 04    0613*  	dl ld_12_009
040581 A6 10 04    0614*  	dl ld_12_010
040584 D0 10 04    0615*  	dl ld_12_011
040587 FA 10 04    0616*  	dl ld_12_012
04058A 24 11 04    0617*  	dl ld_12_013
04058D 4E 11 04    0618*  	dl ld_12_014
040590 78 11 04    0619*  	dl ld_12_015
040593 A2 11 04    0620*  	dl ld_12_016
040596 CC 11 04    0621*  	dl ld_12_020
040599 F6 11 04    0622*  	dl ld_12_024
04059C 20 12 04    0623*  	dl ld_12_025
04059F 4A 12 04    0624*  	dl ld_12_026
0405A2 74 12 04    0625*  	dl ld_12_027
0405A5 9E 12 04    0626*  	dl ld_12_028
0405A8 C8 12 04    0627*  	dl ld_12_029
0405AB F2 12 04    0628*  	dl ld_12_032
0405AE 1C 13 04    0629*  	dl ld_12_035
0405B1 46 13 04    0630*  	dl ld_12_036
0405B4 70 13 04    0631*  	dl ld_12_037
0405B7 9A 13 04    0632*  	dl ld_12_038
0405BA C4 13 04    0633*  	dl ld_12_040
0405BD EE 13 04    0634*  	dl ld_12_042
0405C0 18 14 04    0635*  	dl ld_12_043
0405C3 42 14 04    0636*  	dl ld_12_044
0405C6 6C 14 04    0637*  	dl ld_13_004
0405C9 96 14 04    0638*  	dl ld_13_009
0405CC C0 14 04    0639*  	dl ld_13_010
0405CF EA 14 04    0640*  	dl ld_13_011
0405D2 14 15 04    0641*  	dl ld_13_012
0405D5 3E 15 04    0642*  	dl ld_13_013
0405D8 68 15 04    0643*  	dl ld_13_014
0405DB 92 15 04    0644*  	dl ld_13_015
0405DE BC 15 04    0645*  	dl ld_13_016
0405E1 E6 15 04    0646*  	dl ld_13_020
0405E4 10 16 04    0647*  	dl ld_13_024
0405E7 3A 16 04    0648*  	dl ld_13_025
0405EA 64 16 04    0649*  	dl ld_13_026
0405ED 8E 16 04    0650*  	dl ld_13_027
0405F0 B8 16 04    0651*  	dl ld_13_028
0405F3 E2 16 04    0652*  	dl ld_13_029
0405F6 0C 17 04    0653*  	dl ld_13_032
0405F9 36 17 04    0654*  	dl ld_13_035
0405FC 60 17 04    0655*  	dl ld_13_036
0405FF 8A 17 04    0656*  	dl ld_13_037
040602 B4 17 04    0657*  	dl ld_13_038
040605 DE 17 04    0658*  	dl ld_13_040
040608 08 18 04    0659*  	dl ld_13_042
04060B 32 18 04    0660*  	dl ld_13_043
04060E 5C 18 04    0661*  	dl ld_13_044
040611 86 18 04    0662*  	dl ld_14_004
040614 B0 18 04    0663*  	dl ld_14_009
040617 DA 18 04    0664*  	dl ld_14_010
04061A 04 19 04    0665*  	dl ld_14_011
04061D 2E 19 04    0666*  	dl ld_14_012
040620 58 19 04    0667*  	dl ld_14_013
040623 82 19 04    0668*  	dl ld_14_014
040626 AC 19 04    0669*  	dl ld_14_015
040629 D6 19 04    0670*  	dl ld_14_016
04062C 00 1A 04    0671*  	dl ld_14_020
04062F 2A 1A 04    0672*  	dl ld_14_024
040632 54 1A 04    0673*  	dl ld_14_025
040635 7E 1A 04    0674*  	dl ld_14_026
040638 A8 1A 04    0675*  	dl ld_14_027
04063B D2 1A 04    0676*  	dl ld_14_028
04063E FC 1A 04    0677*  	dl ld_14_029
040641 26 1B 04    0678*  	dl ld_14_032
040644 50 1B 04    0679*  	dl ld_14_035
040647 7A 1B 04    0680*  	dl ld_14_036
04064A A4 1B 04    0681*  	dl ld_14_037
04064D CE 1B 04    0682*  	dl ld_14_038
040650 F8 1B 04    0683*  	dl ld_14_040
040653 22 1C 04    0684*  	dl ld_14_042
040656 4C 1C 04    0685*  	dl ld_14_043
040659 76 1C 04    0686*  	dl ld_14_044
04065C A0 1C 04    0687*  	dl ld_15_004
04065F CA 1C 04    0688*  	dl ld_15_009
040662 F4 1C 04    0689*  	dl ld_15_010
040665 1E 1D 04    0690*  	dl ld_15_011
040668 48 1D 04    0691*  	dl ld_15_012
04066B 72 1D 04    0692*  	dl ld_15_013
04066E 9C 1D 04    0693*  	dl ld_15_014
040671 C6 1D 04    0694*  	dl ld_15_015
040674 F0 1D 04    0695*  	dl ld_15_016
040677 1A 1E 04    0696*  	dl ld_15_020
04067A 44 1E 04    0697*  	dl ld_15_024
04067D 6E 1E 04    0698*  	dl ld_15_025
040680 98 1E 04    0699*  	dl ld_15_026
040683 C2 1E 04    0700*  	dl ld_15_027
040686 EC 1E 04    0701*  	dl ld_15_028
040689 16 1F 04    0702*  	dl ld_15_029
04068C 40 1F 04    0703*  	dl ld_15_032
04068F 6A 1F 04    0704*  	dl ld_15_035
040692 94 1F 04    0705*  	dl ld_15_036
040695 BE 1F 04    0706*  	dl ld_15_037
040698 E8 1F 04    0707*  	dl ld_15_038
04069B 12 20 04    0708*  	dl ld_15_040
04069E 3C 20 04    0709*  	dl ld_15_042
0406A1 66 20 04    0710*  	dl ld_15_043
0406A4 90 20 04    0711*  	dl ld_15_044
0406A7 BA 20 04    0712*  	dl ld_16_004
0406AA E4 20 04    0713*  	dl ld_16_009
0406AD 0E 21 04    0714*  	dl ld_16_010
0406B0 38 21 04    0715*  	dl ld_16_011
0406B3 62 21 04    0716*  	dl ld_16_012
0406B6 8C 21 04    0717*  	dl ld_16_013
0406B9 B6 21 04    0718*  	dl ld_16_014
0406BC E0 21 04    0719*  	dl ld_16_015
0406BF 0A 22 04    0720*  	dl ld_16_016
0406C2 34 22 04    0721*  	dl ld_16_020
0406C5 5E 22 04    0722*  	dl ld_16_024
0406C8 88 22 04    0723*  	dl ld_16_025
0406CB B2 22 04    0724*  	dl ld_16_026
0406CE DC 22 04    0725*  	dl ld_16_027
0406D1 06 23 04    0726*  	dl ld_16_028
0406D4 30 23 04    0727*  	dl ld_16_029
0406D7 5A 23 04    0728*  	dl ld_16_032
0406DA 84 23 04    0729*  	dl ld_16_035
0406DD AE 23 04    0730*  	dl ld_16_036
0406E0 D8 23 04    0731*  	dl ld_16_037
0406E3 02 24 04    0732*  	dl ld_16_038
0406E6 2C 24 04    0733*  	dl ld_16_040
0406E9 56 24 04    0734*  	dl ld_16_042
0406EC 80 24 04    0735*  	dl ld_16_043
0406EF AA 24 04    0736*  	dl ld_16_044
0406F2 D4 24 04    0737*  	dl ld_17_004
0406F5 FE 24 04    0738*  	dl ld_17_009
0406F8 28 25 04    0739*  	dl ld_17_010
0406FB 52 25 04    0740*  	dl ld_17_011
0406FE 7C 25 04    0741*  	dl ld_17_012
040701 A6 25 04    0742*  	dl ld_17_013
040704 D0 25 04    0743*  	dl ld_17_014
040707 FA 25 04    0744*  	dl ld_17_015
04070A 24 26 04    0745*  	dl ld_17_016
04070D 4E 26 04    0746*  	dl ld_17_020
040710 78 26 04    0747*  	dl ld_17_024
040713 A2 26 04    0748*  	dl ld_17_025
040716 CC 26 04    0749*  	dl ld_17_026
040719 F6 26 04    0750*  	dl ld_17_027
04071C 20 27 04    0751*  	dl ld_17_028
04071F 4A 27 04    0752*  	dl ld_17_029
040722 74 27 04    0753*  	dl ld_17_032
040725 9E 27 04    0754*  	dl ld_17_035
040728 C8 27 04    0755*  	dl ld_17_036
04072B F2 27 04    0756*  	dl ld_17_037
04072E 1C 28 04    0757*  	dl ld_17_038
040731 46 28 04    0758*  	dl ld_17_040
040734 70 28 04    0759*  	dl ld_17_042
040737 9A 28 04    0760*  	dl ld_17_043
04073A C4 28 04    0761*  	dl ld_17_044
04073D EE 28 04    0762*  	dl ld_57_004
040740 18 29 04    0763*  	dl ld_57_009
040743 42 29 04    0764*  	dl ld_57_010
040746 6C 29 04    0765*  	dl ld_57_011
040749 96 29 04    0766*  	dl ld_57_012
04074C C0 29 04    0767*  	dl ld_57_013
04074F EA 29 04    0768*  	dl ld_57_014
040752 14 2A 04    0769*  	dl ld_57_015
040755 3E 2A 04    0770*  	dl ld_57_016
040758 68 2A 04    0771*  	dl ld_57_020
04075B 92 2A 04    0772*  	dl ld_57_024
04075E BC 2A 04    0773*  	dl ld_57_025
040761 E6 2A 04    0774*  	dl ld_57_026
040764 10 2B 04    0775*  	dl ld_57_027
040767 3A 2B 04    0776*  	dl ld_57_028
04076A 64 2B 04    0777*  	dl ld_57_029
04076D 8E 2B 04    0778*  	dl ld_57_032
040770 B8 2B 04    0779*  	dl ld_57_035
040773 E2 2B 04    0780*  	dl ld_57_036
040776 0C 2C 04    0781*  	dl ld_57_037
040779 36 2C 04    0782*  	dl ld_57_038
04077C 60 2C 04    0783*  	dl ld_57_040
04077F 8A 2C 04    0784*  	dl ld_57_042
040782 B4 2C 04    0785*  	dl ld_57_043
040785 DE 2C 04    0786*  	dl ld_57_044
040788 08 2D 04    0787*  	dl ld_58_004
04078B 32 2D 04    0788*  	dl ld_58_009
04078E 5C 2D 04    0789*  	dl ld_58_010
040791 86 2D 04    0790*  	dl ld_58_011
040794 B0 2D 04    0791*  	dl ld_58_012
040797 DA 2D 04    0792*  	dl ld_58_013
04079A 04 2E 04    0793*  	dl ld_58_014
04079D 2E 2E 04    0794*  	dl ld_58_015
0407A0 58 2E 04    0795*  	dl ld_58_016
0407A3 82 2E 04    0796*  	dl ld_58_020
0407A6 AC 2E 04    0797*  	dl ld_58_024
0407A9 D6 2E 04    0798*  	dl ld_58_025
0407AC 00 2F 04    0799*  	dl ld_58_026
0407AF 2A 2F 04    0800*  	dl ld_58_027
0407B2 54 2F 04    0801*  	dl ld_58_028
0407B5 7E 2F 04    0802*  	dl ld_58_029
0407B8 A8 2F 04    0803*  	dl ld_58_032
0407BB D2 2F 04    0804*  	dl ld_58_035
0407BE FC 2F 04    0805*  	dl ld_58_036
0407C1 26 30 04    0806*  	dl ld_58_037
0407C4 50 30 04    0807*  	dl ld_58_038
0407C7 7A 30 04    0808*  	dl ld_58_040
0407CA A4 30 04    0809*  	dl ld_58_042
0407CD CE 30 04    0810*  	dl ld_58_043
0407D0 F8 30 04    0811*  	dl ld_58_044
0407D3 22 31 04    0812*  	dl ld_59_004
0407D6 4C 31 04    0813*  	dl ld_59_009
0407D9 76 31 04    0814*  	dl ld_59_010
0407DC A0 31 04    0815*  	dl ld_59_011
0407DF CA 31 04    0816*  	dl ld_59_012
0407E2 F4 31 04    0817*  	dl ld_59_013
0407E5 1E 32 04    0818*  	dl ld_59_014
0407E8 48 32 04    0819*  	dl ld_59_015
0407EB 72 32 04    0820*  	dl ld_59_016
0407EE 9C 32 04    0821*  	dl ld_59_020
0407F1 C6 32 04    0822*  	dl ld_59_024
0407F4 F0 32 04    0823*  	dl ld_59_025
0407F7 1A 33 04    0824*  	dl ld_59_026
0407FA 44 33 04    0825*  	dl ld_59_027
0407FD 6E 33 04    0826*  	dl ld_59_028
040800 98 33 04    0827*  	dl ld_59_029
040803 C2 33 04    0828*  	dl ld_59_032
040806 EC 33 04    0829*  	dl ld_59_035
040809 16 34 04    0830*  	dl ld_59_036
04080C 40 34 04    0831*  	dl ld_59_037
04080F 6A 34 04    0832*  	dl ld_59_038
040812 94 34 04    0833*  	dl ld_59_040
040815 BE 34 04    0834*  	dl ld_59_042
040818 E8 34 04    0835*  	dl ld_59_043
04081B 12 35 04    0836*  	dl ld_59_044
04081E             0837*  
04081E             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
04081E             0839*  
04081E             0840*  ld_10_004:
04081E 21 3C 35 04 0841*  	ld hl,F10_004
040822 22 5D BE 04 0842*  	ld (cur_filename),hl
040826 11 8D CA 04 0843*  	ld de,filedata
04082A 01 00 00 01 0844*  	ld bc,65536
04082E 3E 01       0845*  	ld a,mos_load
040830 5B CF       0846*  	RST.LIL 08h
040832 21 00 01 00 0847*  	ld hl,BUF_10_004
040836 01 24 00 00 0848*  	ld bc,36
04083A 11 23 00 00 0849*  	ld de,35
04083E DD 21 EC 04 0850*  	ld ix,1260
       00          
040843 CD D8 BF 04 0851*  	call vdu_load_img
040847 C9          0852*  	ret
040848             0853*  
040848             0854*  ld_10_009:
040848 21 50 35 04 0855*  	ld hl,F10_009
04084C 22 5D BE 04 0856*  	ld (cur_filename),hl
040850 11 8D CA 04 0857*  	ld de,filedata
040854 01 00 00 01 0858*  	ld bc,65536
040858 3E 01       0859*  	ld a,mos_load
04085A 5B CF       0860*  	RST.LIL 08h
04085C 21 01 01 00 0861*  	ld hl,BUF_10_009
040860 01 23 00 00 0862*  	ld bc,35
040864 11 2D 00 00 0863*  	ld de,45
040868 DD 21 27 06 0864*  	ld ix,1575
       00          
04086D CD D8 BF 04 0865*  	call vdu_load_img
040871 C9          0866*  	ret
040872             0867*  
040872             0868*  ld_10_010:
040872 21 64 35 04 0869*  	ld hl,F10_010
040876 22 5D BE 04 0870*  	ld (cur_filename),hl
04087A 11 8D CA 04 0871*  	ld de,filedata
04087E 01 00 00 01 0872*  	ld bc,65536
040882 3E 01       0873*  	ld a,mos_load
040884 5B CF       0874*  	RST.LIL 08h
040886 21 02 01 00 0875*  	ld hl,BUF_10_010
04088A 01 19 00 00 0876*  	ld bc,25
04088E 11 2D 00 00 0877*  	ld de,45
040892 DD 21 65 04 0878*  	ld ix,1125
       00          
040897 CD D8 BF 04 0879*  	call vdu_load_img
04089B C9          0880*  	ret
04089C             0881*  
04089C             0882*  ld_10_011:
04089C 21 78 35 04 0883*  	ld hl,F10_011
0408A0 22 5D BE 04 0884*  	ld (cur_filename),hl
0408A4 11 8D CA 04 0885*  	ld de,filedata
0408A8 01 00 00 01 0886*  	ld bc,65536
0408AC 3E 01       0887*  	ld a,mos_load
0408AE 5B CF       0888*  	RST.LIL 08h
0408B0 21 03 01 00 0889*  	ld hl,BUF_10_011
0408B4 01 0F 00 00 0890*  	ld bc,15
0408B8 11 2D 00 00 0891*  	ld de,45
0408BC DD 21 A3 02 0892*  	ld ix,675
       00          
0408C1 CD D8 BF 04 0893*  	call vdu_load_img
0408C5 C9          0894*  	ret
0408C6             0895*  
0408C6             0896*  ld_10_012:
0408C6 21 8C 35 04 0897*  	ld hl,F10_012
0408CA 22 5D BE 04 0898*  	ld (cur_filename),hl
0408CE 11 8D CA 04 0899*  	ld de,filedata
0408D2 01 00 00 01 0900*  	ld bc,65536
0408D6 3E 01       0901*  	ld a,mos_load
0408D8 5B CF       0902*  	RST.LIL 08h
0408DA 21 04 01 00 0903*  	ld hl,BUF_10_012
0408DE 01 05 00 00 0904*  	ld bc,5
0408E2 11 2D 00 00 0905*  	ld de,45
0408E6 DD 21 E1 00 0906*  	ld ix,225
       00          
0408EB CD D8 BF 04 0907*  	call vdu_load_img
0408EF C9          0908*  	ret
0408F0             0909*  
0408F0             0910*  ld_10_013:
0408F0 21 A0 35 04 0911*  	ld hl,F10_013
0408F4 22 5D BE 04 0912*  	ld (cur_filename),hl
0408F8 11 8D CA 04 0913*  	ld de,filedata
0408FC 01 00 00 01 0914*  	ld bc,65536
040900 3E 01       0915*  	ld a,mos_load
040902 5B CF       0916*  	RST.LIL 08h
040904 21 05 01 00 0917*  	ld hl,BUF_10_013
040908 01 05 00 00 0918*  	ld bc,5
04090C 11 2B 00 00 0919*  	ld de,43
040910 DD 21 D7 00 0920*  	ld ix,215
       00          
040915 CD D8 BF 04 0921*  	call vdu_load_img
040919 C9          0922*  	ret
04091A             0923*  
04091A             0924*  ld_10_014:
04091A 21 B4 35 04 0925*  	ld hl,F10_014
04091E 22 5D BE 04 0926*  	ld (cur_filename),hl
040922 11 8D CA 04 0927*  	ld de,filedata
040926 01 00 00 01 0928*  	ld bc,65536
04092A 3E 01       0929*  	ld a,mos_load
04092C 5B CF       0930*  	RST.LIL 08h
04092E 21 06 01 00 0931*  	ld hl,BUF_10_014
040932 01 0F 00 00 0932*  	ld bc,15
040936 11 2D 00 00 0933*  	ld de,45
04093A DD 21 A3 02 0934*  	ld ix,675
       00          
04093F CD D8 BF 04 0935*  	call vdu_load_img
040943 C9          0936*  	ret
040944             0937*  
040944             0938*  ld_10_015:
040944 21 C8 35 04 0939*  	ld hl,F10_015
040948 22 5D BE 04 0940*  	ld (cur_filename),hl
04094C 11 8D CA 04 0941*  	ld de,filedata
040950 01 00 00 01 0942*  	ld bc,65536
040954 3E 01       0943*  	ld a,mos_load
040956 5B CF       0944*  	RST.LIL 08h
040958 21 07 01 00 0945*  	ld hl,BUF_10_015
04095C 01 19 00 00 0946*  	ld bc,25
040960 11 2D 00 00 0947*  	ld de,45
040964 DD 21 65 04 0948*  	ld ix,1125
       00          
040969 CD D8 BF 04 0949*  	call vdu_load_img
04096D C9          0950*  	ret
04096E             0951*  
04096E             0952*  ld_10_016:
04096E 21 DC 35 04 0953*  	ld hl,F10_016
040972 22 5D BE 04 0954*  	ld (cur_filename),hl
040976 11 8D CA 04 0955*  	ld de,filedata
04097A 01 00 00 01 0956*  	ld bc,65536
04097E 3E 01       0957*  	ld a,mos_load
040980 5B CF       0958*  	RST.LIL 08h
040982 21 08 01 00 0959*  	ld hl,BUF_10_016
040986 01 23 00 00 0960*  	ld bc,35
04098A 11 2D 00 00 0961*  	ld de,45
04098E DD 21 27 06 0962*  	ld ix,1575
       00          
040993 CD D8 BF 04 0963*  	call vdu_load_img
040997 C9          0964*  	ret
040998             0965*  
040998             0966*  ld_10_020:
040998 21 F0 35 04 0967*  	ld hl,F10_020
04099C 22 5D BE 04 0968*  	ld (cur_filename),hl
0409A0 11 8D CA 04 0969*  	ld de,filedata
0409A4 01 00 00 01 0970*  	ld bc,65536
0409A8 3E 01       0971*  	ld a,mos_load
0409AA 5B CF       0972*  	RST.LIL 08h
0409AC 21 09 01 00 0973*  	ld hl,BUF_10_020
0409B0 01 2E 00 00 0974*  	ld bc,46
0409B4 11 2D 00 00 0975*  	ld de,45
0409B8 DD 21 16 08 0976*  	ld ix,2070
       00          
0409BD CD D8 BF 04 0977*  	call vdu_load_img
0409C1 C9          0978*  	ret
0409C2             0979*  
0409C2             0980*  ld_10_024:
0409C2 21 04 36 04 0981*  	ld hl,F10_024
0409C6 22 5D BE 04 0982*  	ld (cur_filename),hl
0409CA 11 8D CA 04 0983*  	ld de,filedata
0409CE 01 00 00 01 0984*  	ld bc,65536
0409D2 3E 01       0985*  	ld a,mos_load
0409D4 5B CF       0986*  	RST.LIL 08h
0409D6 21 0A 01 00 0987*  	ld hl,BUF_10_024
0409DA 01 2E 00 00 0988*  	ld bc,46
0409DE 11 40 00 00 0989*  	ld de,64
0409E2 DD 21 80 0B 0990*  	ld ix,2944
       00          
0409E7 CD D8 BF 04 0991*  	call vdu_load_img
0409EB C9          0992*  	ret
0409EC             0993*  
0409EC             0994*  ld_10_025:
0409EC 21 18 36 04 0995*  	ld hl,F10_025
0409F0 22 5D BE 04 0996*  	ld (cur_filename),hl
0409F4 11 8D CA 04 0997*  	ld de,filedata
0409F8 01 00 00 01 0998*  	ld bc,65536
0409FC 3E 01       0999*  	ld a,mos_load
0409FE 5B CF       1000*  	RST.LIL 08h
040A00 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A04 01 1C 00 00 1002*  	ld bc,28
040A08 11 40 00 00 1003*  	ld de,64
040A0C DD 21 00 07 1004*  	ld ix,1792
       00          
040A11 CD D8 BF 04 1005*  	call vdu_load_img
040A15 C9          1006*  	ret
040A16             1007*  
040A16             1008*  ld_10_026:
040A16 21 2C 36 04 1009*  	ld hl,F10_026
040A1A 22 5D BE 04 1010*  	ld (cur_filename),hl
040A1E 11 8D CA 04 1011*  	ld de,filedata
040A22 01 00 00 01 1012*  	ld bc,65536
040A26 3E 01       1013*  	ld a,mos_load
040A28 5B CF       1014*  	RST.LIL 08h
040A2A 21 0C 01 00 1015*  	ld hl,BUF_10_026
040A2E 01 09 00 00 1016*  	ld bc,9
040A32 11 40 00 00 1017*  	ld de,64
040A36 DD 21 40 02 1018*  	ld ix,576
       00          
040A3B CD D8 BF 04 1019*  	call vdu_load_img
040A3F C9          1020*  	ret
040A40             1021*  
040A40             1022*  ld_10_027:
040A40 21 40 36 04 1023*  	ld hl,F10_027
040A44 22 5D BE 04 1024*  	ld (cur_filename),hl
040A48 11 8D CA 04 1025*  	ld de,filedata
040A4C 01 00 00 01 1026*  	ld bc,65536
040A50 3E 01       1027*  	ld a,mos_load
040A52 5B CF       1028*  	RST.LIL 08h
040A54 21 0D 01 00 1029*  	ld hl,BUF_10_027
040A58 01 0A 00 00 1030*  	ld bc,10
040A5C 11 3E 00 00 1031*  	ld de,62
040A60 DD 21 6C 02 1032*  	ld ix,620
       00          
040A65 CD D8 BF 04 1033*  	call vdu_load_img
040A69 C9          1034*  	ret
040A6A             1035*  
040A6A             1036*  ld_10_028:
040A6A 21 54 36 04 1037*  	ld hl,F10_028
040A6E 22 5D BE 04 1038*  	ld (cur_filename),hl
040A72 11 8D CA 04 1039*  	ld de,filedata
040A76 01 00 00 01 1040*  	ld bc,65536
040A7A 3E 01       1041*  	ld a,mos_load
040A7C 5B CF       1042*  	RST.LIL 08h
040A7E 21 0E 01 00 1043*  	ld hl,BUF_10_028
040A82 01 1C 00 00 1044*  	ld bc,28
040A86 11 40 00 00 1045*  	ld de,64
040A8A DD 21 00 07 1046*  	ld ix,1792
       00          
040A8F CD D8 BF 04 1047*  	call vdu_load_img
040A93 C9          1048*  	ret
040A94             1049*  
040A94             1050*  ld_10_029:
040A94 21 68 36 04 1051*  	ld hl,F10_029
040A98 22 5D BE 04 1052*  	ld (cur_filename),hl
040A9C 11 8D CA 04 1053*  	ld de,filedata
040AA0 01 00 00 01 1054*  	ld bc,65536
040AA4 3E 01       1055*  	ld a,mos_load
040AA6 5B CF       1056*  	RST.LIL 08h
040AA8 21 0F 01 00 1057*  	ld hl,BUF_10_029
040AAC 01 2F 00 00 1058*  	ld bc,47
040AB0 11 40 00 00 1059*  	ld de,64
040AB4 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040AB9 CD D8 BF 04 1061*  	call vdu_load_img
040ABD C9          1062*  	ret
040ABE             1063*  
040ABE             1064*  ld_10_032:
040ABE 21 7C 36 04 1065*  	ld hl,F10_032
040AC2 22 5D BE 04 1066*  	ld (cur_filename),hl
040AC6 11 8D CA 04 1067*  	ld de,filedata
040ACA 01 00 00 01 1068*  	ld bc,65536
040ACE 3E 01       1069*  	ld a,mos_load
040AD0 5B CF       1070*  	RST.LIL 08h
040AD2 21 10 01 00 1071*  	ld hl,BUF_10_032
040AD6 01 41 00 00 1072*  	ld bc,65
040ADA 11 40 00 00 1073*  	ld de,64
040ADE DD 21 40 10 1074*  	ld ix,4160
       00          
040AE3 CD D8 BF 04 1075*  	call vdu_load_img
040AE7 C9          1076*  	ret
040AE8             1077*  
040AE8             1078*  ld_10_035:
040AE8 21 90 36 04 1079*  	ld hl,F10_035
040AEC 22 5D BE 04 1080*  	ld (cur_filename),hl
040AF0 11 8D CA 04 1081*  	ld de,filedata
040AF4 01 00 00 01 1082*  	ld bc,65536
040AF8 3E 01       1083*  	ld a,mos_load
040AFA 5B CF       1084*  	RST.LIL 08h
040AFC 21 11 01 00 1085*  	ld hl,BUF_10_035
040B00 01 3F 00 00 1086*  	ld bc,63
040B04 11 6B 00 00 1087*  	ld de,107
040B08 DD 21 55 1A 1088*  	ld ix,6741
       00          
040B0D CD D8 BF 04 1089*  	call vdu_load_img
040B11 C9          1090*  	ret
040B12             1091*  
040B12             1092*  ld_10_036:
040B12 21 A4 36 04 1093*  	ld hl,F10_036
040B16 22 5D BE 04 1094*  	ld (cur_filename),hl
040B1A 11 8D CA 04 1095*  	ld de,filedata
040B1E 01 00 00 01 1096*  	ld bc,65536
040B22 3E 01       1097*  	ld a,mos_load
040B24 5B CF       1098*  	RST.LIL 08h
040B26 21 12 01 00 1099*  	ld hl,BUF_10_036
040B2A 01 16 00 00 1100*  	ld bc,22
040B2E 11 6B 00 00 1101*  	ld de,107
040B32 DD 21 32 09 1102*  	ld ix,2354
       00          
040B37 CD D8 BF 04 1103*  	call vdu_load_img
040B3B C9          1104*  	ret
040B3C             1105*  
040B3C             1106*  ld_10_037:
040B3C 21 B8 36 04 1107*  	ld hl,F10_037
040B40 22 5D BE 04 1108*  	ld (cur_filename),hl
040B44 11 8D CA 04 1109*  	ld de,filedata
040B48 01 00 00 01 1110*  	ld bc,65536
040B4C 3E 01       1111*  	ld a,mos_load
040B4E 5B CF       1112*  	RST.LIL 08h
040B50 21 13 01 00 1113*  	ld hl,BUF_10_037
040B54 01 15 00 00 1114*  	ld bc,21
040B58 11 69 00 00 1115*  	ld de,105
040B5C DD 21 9D 08 1116*  	ld ix,2205
       00          
040B61 CD D8 BF 04 1117*  	call vdu_load_img
040B65 C9          1118*  	ret
040B66             1119*  
040B66             1120*  ld_10_038:
040B66 21 CC 36 04 1121*  	ld hl,F10_038
040B6A 22 5D BE 04 1122*  	ld (cur_filename),hl
040B6E 11 8D CA 04 1123*  	ld de,filedata
040B72 01 00 00 01 1124*  	ld bc,65536
040B76 3E 01       1125*  	ld a,mos_load
040B78 5B CF       1126*  	RST.LIL 08h
040B7A 21 14 01 00 1127*  	ld hl,BUF_10_038
040B7E 01 3F 00 00 1128*  	ld bc,63
040B82 11 6B 00 00 1129*  	ld de,107
040B86 DD 21 55 1A 1130*  	ld ix,6741
       00          
040B8B CD D8 BF 04 1131*  	call vdu_load_img
040B8F C9          1132*  	ret
040B90             1133*  
040B90             1134*  ld_10_040:
040B90 21 E0 36 04 1135*  	ld hl,F10_040
040B94 22 5D BE 04 1136*  	ld (cur_filename),hl
040B98 11 8D CA 04 1137*  	ld de,filedata
040B9C 01 00 00 01 1138*  	ld bc,65536
040BA0 3E 01       1139*  	ld a,mos_load
040BA2 5B CF       1140*  	RST.LIL 08h
040BA4 21 15 01 00 1141*  	ld hl,BUF_10_040
040BA8 01 6C 00 00 1142*  	ld bc,108
040BAC 11 6B 00 00 1143*  	ld de,107
040BB0 DD 21 24 2D 1144*  	ld ix,11556
       00          
040BB5 CD D8 BF 04 1145*  	call vdu_load_img
040BB9 C9          1146*  	ret
040BBA             1147*  
040BBA             1148*  ld_10_042:
040BBA 21 F4 36 04 1149*  	ld hl,F10_042
040BBE 22 5D BE 04 1150*  	ld (cur_filename),hl
040BC2 11 8D CA 04 1151*  	ld de,filedata
040BC6 01 00 00 01 1152*  	ld bc,65536
040BCA 3E 01       1153*  	ld a,mos_load
040BCC 5B CF       1154*  	RST.LIL 08h
040BCE 21 16 01 00 1155*  	ld hl,BUF_10_042
040BD2 01 6A 00 00 1156*  	ld bc,106
040BD6 11 A0 00 00 1157*  	ld de,160
040BDA DD 21 40 42 1158*  	ld ix,16960
       00          
040BDF CD D8 BF 04 1159*  	call vdu_load_img
040BE3 C9          1160*  	ret
040BE4             1161*  
040BE4             1162*  ld_10_043:
040BE4 21 08 37 04 1163*  	ld hl,F10_043
040BE8 22 5D BE 04 1164*  	ld (cur_filename),hl
040BEC 11 8D CA 04 1165*  	ld de,filedata
040BF0 01 00 00 01 1166*  	ld bc,65536
040BF4 3E 01       1167*  	ld a,mos_load
040BF6 5B CF       1168*  	RST.LIL 08h
040BF8 21 17 01 00 1169*  	ld hl,BUF_10_043
040BFC 01 6B 00 00 1170*  	ld bc,107
040C00 11 A0 00 00 1171*  	ld de,160
040C04 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C09 CD D8 BF 04 1173*  	call vdu_load_img
040C0D C9          1174*  	ret
040C0E             1175*  
040C0E             1176*  ld_10_044:
040C0E 21 1C 37 04 1177*  	ld hl,F10_044
040C12 22 5D BE 04 1178*  	ld (cur_filename),hl
040C16 11 8D CA 04 1179*  	ld de,filedata
040C1A 01 00 00 01 1180*  	ld bc,65536
040C1E 3E 01       1181*  	ld a,mos_load
040C20 5B CF       1182*  	RST.LIL 08h
040C22 21 18 01 00 1183*  	ld hl,BUF_10_044
040C26 01 40 01 00 1184*  	ld bc,320
040C2A 11 A0 00 00 1185*  	ld de,160
040C2E DD 21 00 C8 1186*  	ld ix,51200
       00          
040C33 CD D8 BF 04 1187*  	call vdu_load_img
040C37 C9          1188*  	ret
040C38             1189*  
040C38             1190*  ld_11_004:
040C38 21 30 37 04 1191*  	ld hl,F11_004
040C3C 22 5D BE 04 1192*  	ld (cur_filename),hl
040C40 11 8D CA 04 1193*  	ld de,filedata
040C44 01 00 00 01 1194*  	ld bc,65536
040C48 3E 01       1195*  	ld a,mos_load
040C4A 5B CF       1196*  	RST.LIL 08h
040C4C 21 19 01 00 1197*  	ld hl,BUF_11_004
040C50 01 24 00 00 1198*  	ld bc,36
040C54 11 23 00 00 1199*  	ld de,35
040C58 DD 21 EC 04 1200*  	ld ix,1260
       00          
040C5D CD D8 BF 04 1201*  	call vdu_load_img
040C61 C9          1202*  	ret
040C62             1203*  
040C62             1204*  ld_11_009:
040C62 21 44 37 04 1205*  	ld hl,F11_009
040C66 22 5D BE 04 1206*  	ld (cur_filename),hl
040C6A 11 8D CA 04 1207*  	ld de,filedata
040C6E 01 00 00 01 1208*  	ld bc,65536
040C72 3E 01       1209*  	ld a,mos_load
040C74 5B CF       1210*  	RST.LIL 08h
040C76 21 1A 01 00 1211*  	ld hl,BUF_11_009
040C7A 01 23 00 00 1212*  	ld bc,35
040C7E 11 2D 00 00 1213*  	ld de,45
040C82 DD 21 27 06 1214*  	ld ix,1575
       00          
040C87 CD D8 BF 04 1215*  	call vdu_load_img
040C8B C9          1216*  	ret
040C8C             1217*  
040C8C             1218*  ld_11_010:
040C8C 21 58 37 04 1219*  	ld hl,F11_010
040C90 22 5D BE 04 1220*  	ld (cur_filename),hl
040C94 11 8D CA 04 1221*  	ld de,filedata
040C98 01 00 00 01 1222*  	ld bc,65536
040C9C 3E 01       1223*  	ld a,mos_load
040C9E 5B CF       1224*  	RST.LIL 08h
040CA0 21 1B 01 00 1225*  	ld hl,BUF_11_010
040CA4 01 19 00 00 1226*  	ld bc,25
040CA8 11 2D 00 00 1227*  	ld de,45
040CAC DD 21 65 04 1228*  	ld ix,1125
       00          
040CB1 CD D8 BF 04 1229*  	call vdu_load_img
040CB5 C9          1230*  	ret
040CB6             1231*  
040CB6             1232*  ld_11_011:
040CB6 21 6C 37 04 1233*  	ld hl,F11_011
040CBA 22 5D BE 04 1234*  	ld (cur_filename),hl
040CBE 11 8D CA 04 1235*  	ld de,filedata
040CC2 01 00 00 01 1236*  	ld bc,65536
040CC6 3E 01       1237*  	ld a,mos_load
040CC8 5B CF       1238*  	RST.LIL 08h
040CCA 21 1C 01 00 1239*  	ld hl,BUF_11_011
040CCE 01 0F 00 00 1240*  	ld bc,15
040CD2 11 2D 00 00 1241*  	ld de,45
040CD6 DD 21 A3 02 1242*  	ld ix,675
       00          
040CDB CD D8 BF 04 1243*  	call vdu_load_img
040CDF C9          1244*  	ret
040CE0             1245*  
040CE0             1246*  ld_11_012:
040CE0 21 80 37 04 1247*  	ld hl,F11_012
040CE4 22 5D BE 04 1248*  	ld (cur_filename),hl
040CE8 11 8D CA 04 1249*  	ld de,filedata
040CEC 01 00 00 01 1250*  	ld bc,65536
040CF0 3E 01       1251*  	ld a,mos_load
040CF2 5B CF       1252*  	RST.LIL 08h
040CF4 21 1D 01 00 1253*  	ld hl,BUF_11_012
040CF8 01 05 00 00 1254*  	ld bc,5
040CFC 11 2D 00 00 1255*  	ld de,45
040D00 DD 21 E1 00 1256*  	ld ix,225
       00          
040D05 CD D8 BF 04 1257*  	call vdu_load_img
040D09 C9          1258*  	ret
040D0A             1259*  
040D0A             1260*  ld_11_013:
040D0A 21 94 37 04 1261*  	ld hl,F11_013
040D0E 22 5D BE 04 1262*  	ld (cur_filename),hl
040D12 11 8D CA 04 1263*  	ld de,filedata
040D16 01 00 00 01 1264*  	ld bc,65536
040D1A 3E 01       1265*  	ld a,mos_load
040D1C 5B CF       1266*  	RST.LIL 08h
040D1E 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D22 01 05 00 00 1268*  	ld bc,5
040D26 11 2B 00 00 1269*  	ld de,43
040D2A DD 21 D7 00 1270*  	ld ix,215
       00          
040D2F CD D8 BF 04 1271*  	call vdu_load_img
040D33 C9          1272*  	ret
040D34             1273*  
040D34             1274*  ld_11_014:
040D34 21 A8 37 04 1275*  	ld hl,F11_014
040D38 22 5D BE 04 1276*  	ld (cur_filename),hl
040D3C 11 8D CA 04 1277*  	ld de,filedata
040D40 01 00 00 01 1278*  	ld bc,65536
040D44 3E 01       1279*  	ld a,mos_load
040D46 5B CF       1280*  	RST.LIL 08h
040D48 21 1F 01 00 1281*  	ld hl,BUF_11_014
040D4C 01 0F 00 00 1282*  	ld bc,15
040D50 11 2D 00 00 1283*  	ld de,45
040D54 DD 21 A3 02 1284*  	ld ix,675
       00          
040D59 CD D8 BF 04 1285*  	call vdu_load_img
040D5D C9          1286*  	ret
040D5E             1287*  
040D5E             1288*  ld_11_015:
040D5E 21 BC 37 04 1289*  	ld hl,F11_015
040D62 22 5D BE 04 1290*  	ld (cur_filename),hl
040D66 11 8D CA 04 1291*  	ld de,filedata
040D6A 01 00 00 01 1292*  	ld bc,65536
040D6E 3E 01       1293*  	ld a,mos_load
040D70 5B CF       1294*  	RST.LIL 08h
040D72 21 20 01 00 1295*  	ld hl,BUF_11_015
040D76 01 19 00 00 1296*  	ld bc,25
040D7A 11 2D 00 00 1297*  	ld de,45
040D7E DD 21 65 04 1298*  	ld ix,1125
       00          
040D83 CD D8 BF 04 1299*  	call vdu_load_img
040D87 C9          1300*  	ret
040D88             1301*  
040D88             1302*  ld_11_016:
040D88 21 D0 37 04 1303*  	ld hl,F11_016
040D8C 22 5D BE 04 1304*  	ld (cur_filename),hl
040D90 11 8D CA 04 1305*  	ld de,filedata
040D94 01 00 00 01 1306*  	ld bc,65536
040D98 3E 01       1307*  	ld a,mos_load
040D9A 5B CF       1308*  	RST.LIL 08h
040D9C 21 21 01 00 1309*  	ld hl,BUF_11_016
040DA0 01 23 00 00 1310*  	ld bc,35
040DA4 11 2D 00 00 1311*  	ld de,45
040DA8 DD 21 27 06 1312*  	ld ix,1575
       00          
040DAD CD D8 BF 04 1313*  	call vdu_load_img
040DB1 C9          1314*  	ret
040DB2             1315*  
040DB2             1316*  ld_11_020:
040DB2 21 E4 37 04 1317*  	ld hl,F11_020
040DB6 22 5D BE 04 1318*  	ld (cur_filename),hl
040DBA 11 8D CA 04 1319*  	ld de,filedata
040DBE 01 00 00 01 1320*  	ld bc,65536
040DC2 3E 01       1321*  	ld a,mos_load
040DC4 5B CF       1322*  	RST.LIL 08h
040DC6 21 22 01 00 1323*  	ld hl,BUF_11_020
040DCA 01 2E 00 00 1324*  	ld bc,46
040DCE 11 2D 00 00 1325*  	ld de,45
040DD2 DD 21 16 08 1326*  	ld ix,2070
       00          
040DD7 CD D8 BF 04 1327*  	call vdu_load_img
040DDB C9          1328*  	ret
040DDC             1329*  
040DDC             1330*  ld_11_024:
040DDC 21 F8 37 04 1331*  	ld hl,F11_024
040DE0 22 5D BE 04 1332*  	ld (cur_filename),hl
040DE4 11 8D CA 04 1333*  	ld de,filedata
040DE8 01 00 00 01 1334*  	ld bc,65536
040DEC 3E 01       1335*  	ld a,mos_load
040DEE 5B CF       1336*  	RST.LIL 08h
040DF0 21 23 01 00 1337*  	ld hl,BUF_11_024
040DF4 01 2E 00 00 1338*  	ld bc,46
040DF8 11 40 00 00 1339*  	ld de,64
040DFC DD 21 80 0B 1340*  	ld ix,2944
       00          
040E01 CD D8 BF 04 1341*  	call vdu_load_img
040E05 C9          1342*  	ret
040E06             1343*  
040E06             1344*  ld_11_025:
040E06 21 0C 38 04 1345*  	ld hl,F11_025
040E0A 22 5D BE 04 1346*  	ld (cur_filename),hl
040E0E 11 8D CA 04 1347*  	ld de,filedata
040E12 01 00 00 01 1348*  	ld bc,65536
040E16 3E 01       1349*  	ld a,mos_load
040E18 5B CF       1350*  	RST.LIL 08h
040E1A 21 24 01 00 1351*  	ld hl,BUF_11_025
040E1E 01 1C 00 00 1352*  	ld bc,28
040E22 11 40 00 00 1353*  	ld de,64
040E26 DD 21 00 07 1354*  	ld ix,1792
       00          
040E2B CD D8 BF 04 1355*  	call vdu_load_img
040E2F C9          1356*  	ret
040E30             1357*  
040E30             1358*  ld_11_026:
040E30 21 20 38 04 1359*  	ld hl,F11_026
040E34 22 5D BE 04 1360*  	ld (cur_filename),hl
040E38 11 8D CA 04 1361*  	ld de,filedata
040E3C 01 00 00 01 1362*  	ld bc,65536
040E40 3E 01       1363*  	ld a,mos_load
040E42 5B CF       1364*  	RST.LIL 08h
040E44 21 25 01 00 1365*  	ld hl,BUF_11_026
040E48 01 09 00 00 1366*  	ld bc,9
040E4C 11 40 00 00 1367*  	ld de,64
040E50 DD 21 40 02 1368*  	ld ix,576
       00          
040E55 CD D8 BF 04 1369*  	call vdu_load_img
040E59 C9          1370*  	ret
040E5A             1371*  
040E5A             1372*  ld_11_027:
040E5A 21 34 38 04 1373*  	ld hl,F11_027
040E5E 22 5D BE 04 1374*  	ld (cur_filename),hl
040E62 11 8D CA 04 1375*  	ld de,filedata
040E66 01 00 00 01 1376*  	ld bc,65536
040E6A 3E 01       1377*  	ld a,mos_load
040E6C 5B CF       1378*  	RST.LIL 08h
040E6E 21 26 01 00 1379*  	ld hl,BUF_11_027
040E72 01 0A 00 00 1380*  	ld bc,10
040E76 11 3E 00 00 1381*  	ld de,62
040E7A DD 21 6C 02 1382*  	ld ix,620
       00          
040E7F CD D8 BF 04 1383*  	call vdu_load_img
040E83 C9          1384*  	ret
040E84             1385*  
040E84             1386*  ld_11_028:
040E84 21 48 38 04 1387*  	ld hl,F11_028
040E88 22 5D BE 04 1388*  	ld (cur_filename),hl
040E8C 11 8D CA 04 1389*  	ld de,filedata
040E90 01 00 00 01 1390*  	ld bc,65536
040E94 3E 01       1391*  	ld a,mos_load
040E96 5B CF       1392*  	RST.LIL 08h
040E98 21 27 01 00 1393*  	ld hl,BUF_11_028
040E9C 01 1C 00 00 1394*  	ld bc,28
040EA0 11 40 00 00 1395*  	ld de,64
040EA4 DD 21 00 07 1396*  	ld ix,1792
       00          
040EA9 CD D8 BF 04 1397*  	call vdu_load_img
040EAD C9          1398*  	ret
040EAE             1399*  
040EAE             1400*  ld_11_029:
040EAE 21 5C 38 04 1401*  	ld hl,F11_029
040EB2 22 5D BE 04 1402*  	ld (cur_filename),hl
040EB6 11 8D CA 04 1403*  	ld de,filedata
040EBA 01 00 00 01 1404*  	ld bc,65536
040EBE 3E 01       1405*  	ld a,mos_load
040EC0 5B CF       1406*  	RST.LIL 08h
040EC2 21 28 01 00 1407*  	ld hl,BUF_11_029
040EC6 01 2F 00 00 1408*  	ld bc,47
040ECA 11 40 00 00 1409*  	ld de,64
040ECE DD 21 C0 0B 1410*  	ld ix,3008
       00          
040ED3 CD D8 BF 04 1411*  	call vdu_load_img
040ED7 C9          1412*  	ret
040ED8             1413*  
040ED8             1414*  ld_11_032:
040ED8 21 70 38 04 1415*  	ld hl,F11_032
040EDC 22 5D BE 04 1416*  	ld (cur_filename),hl
040EE0 11 8D CA 04 1417*  	ld de,filedata
040EE4 01 00 00 01 1418*  	ld bc,65536
040EE8 3E 01       1419*  	ld a,mos_load
040EEA 5B CF       1420*  	RST.LIL 08h
040EEC 21 29 01 00 1421*  	ld hl,BUF_11_032
040EF0 01 41 00 00 1422*  	ld bc,65
040EF4 11 40 00 00 1423*  	ld de,64
040EF8 DD 21 40 10 1424*  	ld ix,4160
       00          
040EFD CD D8 BF 04 1425*  	call vdu_load_img
040F01 C9          1426*  	ret
040F02             1427*  
040F02             1428*  ld_11_035:
040F02 21 84 38 04 1429*  	ld hl,F11_035
040F06 22 5D BE 04 1430*  	ld (cur_filename),hl
040F0A 11 8D CA 04 1431*  	ld de,filedata
040F0E 01 00 00 01 1432*  	ld bc,65536
040F12 3E 01       1433*  	ld a,mos_load
040F14 5B CF       1434*  	RST.LIL 08h
040F16 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F1A 01 3F 00 00 1436*  	ld bc,63
040F1E 11 6B 00 00 1437*  	ld de,107
040F22 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F27 CD D8 BF 04 1439*  	call vdu_load_img
040F2B C9          1440*  	ret
040F2C             1441*  
040F2C             1442*  ld_11_036:
040F2C 21 98 38 04 1443*  	ld hl,F11_036
040F30 22 5D BE 04 1444*  	ld (cur_filename),hl
040F34 11 8D CA 04 1445*  	ld de,filedata
040F38 01 00 00 01 1446*  	ld bc,65536
040F3C 3E 01       1447*  	ld a,mos_load
040F3E 5B CF       1448*  	RST.LIL 08h
040F40 21 2B 01 00 1449*  	ld hl,BUF_11_036
040F44 01 16 00 00 1450*  	ld bc,22
040F48 11 6B 00 00 1451*  	ld de,107
040F4C DD 21 32 09 1452*  	ld ix,2354
       00          
040F51 CD D8 BF 04 1453*  	call vdu_load_img
040F55 C9          1454*  	ret
040F56             1455*  
040F56             1456*  ld_11_037:
040F56 21 AC 38 04 1457*  	ld hl,F11_037
040F5A 22 5D BE 04 1458*  	ld (cur_filename),hl
040F5E 11 8D CA 04 1459*  	ld de,filedata
040F62 01 00 00 01 1460*  	ld bc,65536
040F66 3E 01       1461*  	ld a,mos_load
040F68 5B CF       1462*  	RST.LIL 08h
040F6A 21 2C 01 00 1463*  	ld hl,BUF_11_037
040F6E 01 15 00 00 1464*  	ld bc,21
040F72 11 69 00 00 1465*  	ld de,105
040F76 DD 21 9D 08 1466*  	ld ix,2205
       00          
040F7B CD D8 BF 04 1467*  	call vdu_load_img
040F7F C9          1468*  	ret
040F80             1469*  
040F80             1470*  ld_11_038:
040F80 21 C0 38 04 1471*  	ld hl,F11_038
040F84 22 5D BE 04 1472*  	ld (cur_filename),hl
040F88 11 8D CA 04 1473*  	ld de,filedata
040F8C 01 00 00 01 1474*  	ld bc,65536
040F90 3E 01       1475*  	ld a,mos_load
040F92 5B CF       1476*  	RST.LIL 08h
040F94 21 2D 01 00 1477*  	ld hl,BUF_11_038
040F98 01 3F 00 00 1478*  	ld bc,63
040F9C 11 6B 00 00 1479*  	ld de,107
040FA0 DD 21 55 1A 1480*  	ld ix,6741
       00          
040FA5 CD D8 BF 04 1481*  	call vdu_load_img
040FA9 C9          1482*  	ret
040FAA             1483*  
040FAA             1484*  ld_11_040:
040FAA 21 D4 38 04 1485*  	ld hl,F11_040
040FAE 22 5D BE 04 1486*  	ld (cur_filename),hl
040FB2 11 8D CA 04 1487*  	ld de,filedata
040FB6 01 00 00 01 1488*  	ld bc,65536
040FBA 3E 01       1489*  	ld a,mos_load
040FBC 5B CF       1490*  	RST.LIL 08h
040FBE 21 2E 01 00 1491*  	ld hl,BUF_11_040
040FC2 01 6C 00 00 1492*  	ld bc,108
040FC6 11 6B 00 00 1493*  	ld de,107
040FCA DD 21 24 2D 1494*  	ld ix,11556
       00          
040FCF CD D8 BF 04 1495*  	call vdu_load_img
040FD3 C9          1496*  	ret
040FD4             1497*  
040FD4             1498*  ld_11_042:
040FD4 21 E8 38 04 1499*  	ld hl,F11_042
040FD8 22 5D BE 04 1500*  	ld (cur_filename),hl
040FDC 11 8D CA 04 1501*  	ld de,filedata
040FE0 01 00 00 01 1502*  	ld bc,65536
040FE4 3E 01       1503*  	ld a,mos_load
040FE6 5B CF       1504*  	RST.LIL 08h
040FE8 21 2F 01 00 1505*  	ld hl,BUF_11_042
040FEC 01 6A 00 00 1506*  	ld bc,106
040FF0 11 A0 00 00 1507*  	ld de,160
040FF4 DD 21 40 42 1508*  	ld ix,16960
       00          
040FF9 CD D8 BF 04 1509*  	call vdu_load_img
040FFD C9          1510*  	ret
040FFE             1511*  
040FFE             1512*  ld_11_043:
040FFE 21 FC 38 04 1513*  	ld hl,F11_043
041002 22 5D BE 04 1514*  	ld (cur_filename),hl
041006 11 8D CA 04 1515*  	ld de,filedata
04100A 01 00 00 01 1516*  	ld bc,65536
04100E 3E 01       1517*  	ld a,mos_load
041010 5B CF       1518*  	RST.LIL 08h
041012 21 30 01 00 1519*  	ld hl,BUF_11_043
041016 01 6B 00 00 1520*  	ld bc,107
04101A 11 A0 00 00 1521*  	ld de,160
04101E DD 21 E0 42 1522*  	ld ix,17120
       00          
041023 CD D8 BF 04 1523*  	call vdu_load_img
041027 C9          1524*  	ret
041028             1525*  
041028             1526*  ld_11_044:
041028 21 10 39 04 1527*  	ld hl,F11_044
04102C 22 5D BE 04 1528*  	ld (cur_filename),hl
041030 11 8D CA 04 1529*  	ld de,filedata
041034 01 00 00 01 1530*  	ld bc,65536
041038 3E 01       1531*  	ld a,mos_load
04103A 5B CF       1532*  	RST.LIL 08h
04103C 21 31 01 00 1533*  	ld hl,BUF_11_044
041040 01 40 01 00 1534*  	ld bc,320
041044 11 A0 00 00 1535*  	ld de,160
041048 DD 21 00 C8 1536*  	ld ix,51200
       00          
04104D CD D8 BF 04 1537*  	call vdu_load_img
041051 C9          1538*  	ret
041052             1539*  
041052             1540*  ld_12_004:
041052 21 24 39 04 1541*  	ld hl,F12_004
041056 22 5D BE 04 1542*  	ld (cur_filename),hl
04105A 11 8D CA 04 1543*  	ld de,filedata
04105E 01 00 00 01 1544*  	ld bc,65536
041062 3E 01       1545*  	ld a,mos_load
041064 5B CF       1546*  	RST.LIL 08h
041066 21 32 01 00 1547*  	ld hl,BUF_12_004
04106A 01 24 00 00 1548*  	ld bc,36
04106E 11 23 00 00 1549*  	ld de,35
041072 DD 21 EC 04 1550*  	ld ix,1260
       00          
041077 CD D8 BF 04 1551*  	call vdu_load_img
04107B C9          1552*  	ret
04107C             1553*  
04107C             1554*  ld_12_009:
04107C 21 38 39 04 1555*  	ld hl,F12_009
041080 22 5D BE 04 1556*  	ld (cur_filename),hl
041084 11 8D CA 04 1557*  	ld de,filedata
041088 01 00 00 01 1558*  	ld bc,65536
04108C 3E 01       1559*  	ld a,mos_load
04108E 5B CF       1560*  	RST.LIL 08h
041090 21 33 01 00 1561*  	ld hl,BUF_12_009
041094 01 23 00 00 1562*  	ld bc,35
041098 11 2D 00 00 1563*  	ld de,45
04109C DD 21 27 06 1564*  	ld ix,1575
       00          
0410A1 CD D8 BF 04 1565*  	call vdu_load_img
0410A5 C9          1566*  	ret
0410A6             1567*  
0410A6             1568*  ld_12_010:
0410A6 21 4C 39 04 1569*  	ld hl,F12_010
0410AA 22 5D BE 04 1570*  	ld (cur_filename),hl
0410AE 11 8D CA 04 1571*  	ld de,filedata
0410B2 01 00 00 01 1572*  	ld bc,65536
0410B6 3E 01       1573*  	ld a,mos_load
0410B8 5B CF       1574*  	RST.LIL 08h
0410BA 21 34 01 00 1575*  	ld hl,BUF_12_010
0410BE 01 19 00 00 1576*  	ld bc,25
0410C2 11 2D 00 00 1577*  	ld de,45
0410C6 DD 21 65 04 1578*  	ld ix,1125
       00          
0410CB CD D8 BF 04 1579*  	call vdu_load_img
0410CF C9          1580*  	ret
0410D0             1581*  
0410D0             1582*  ld_12_011:
0410D0 21 60 39 04 1583*  	ld hl,F12_011
0410D4 22 5D BE 04 1584*  	ld (cur_filename),hl
0410D8 11 8D CA 04 1585*  	ld de,filedata
0410DC 01 00 00 01 1586*  	ld bc,65536
0410E0 3E 01       1587*  	ld a,mos_load
0410E2 5B CF       1588*  	RST.LIL 08h
0410E4 21 35 01 00 1589*  	ld hl,BUF_12_011
0410E8 01 0F 00 00 1590*  	ld bc,15
0410EC 11 2D 00 00 1591*  	ld de,45
0410F0 DD 21 A3 02 1592*  	ld ix,675
       00          
0410F5 CD D8 BF 04 1593*  	call vdu_load_img
0410F9 C9          1594*  	ret
0410FA             1595*  
0410FA             1596*  ld_12_012:
0410FA 21 74 39 04 1597*  	ld hl,F12_012
0410FE 22 5D BE 04 1598*  	ld (cur_filename),hl
041102 11 8D CA 04 1599*  	ld de,filedata
041106 01 00 00 01 1600*  	ld bc,65536
04110A 3E 01       1601*  	ld a,mos_load
04110C 5B CF       1602*  	RST.LIL 08h
04110E 21 36 01 00 1603*  	ld hl,BUF_12_012
041112 01 05 00 00 1604*  	ld bc,5
041116 11 2D 00 00 1605*  	ld de,45
04111A DD 21 E1 00 1606*  	ld ix,225
       00          
04111F CD D8 BF 04 1607*  	call vdu_load_img
041123 C9          1608*  	ret
041124             1609*  
041124             1610*  ld_12_013:
041124 21 88 39 04 1611*  	ld hl,F12_013
041128 22 5D BE 04 1612*  	ld (cur_filename),hl
04112C 11 8D CA 04 1613*  	ld de,filedata
041130 01 00 00 01 1614*  	ld bc,65536
041134 3E 01       1615*  	ld a,mos_load
041136 5B CF       1616*  	RST.LIL 08h
041138 21 37 01 00 1617*  	ld hl,BUF_12_013
04113C 01 05 00 00 1618*  	ld bc,5
041140 11 2B 00 00 1619*  	ld de,43
041144 DD 21 D7 00 1620*  	ld ix,215
       00          
041149 CD D8 BF 04 1621*  	call vdu_load_img
04114D C9          1622*  	ret
04114E             1623*  
04114E             1624*  ld_12_014:
04114E 21 9C 39 04 1625*  	ld hl,F12_014
041152 22 5D BE 04 1626*  	ld (cur_filename),hl
041156 11 8D CA 04 1627*  	ld de,filedata
04115A 01 00 00 01 1628*  	ld bc,65536
04115E 3E 01       1629*  	ld a,mos_load
041160 5B CF       1630*  	RST.LIL 08h
041162 21 38 01 00 1631*  	ld hl,BUF_12_014
041166 01 0F 00 00 1632*  	ld bc,15
04116A 11 2D 00 00 1633*  	ld de,45
04116E DD 21 A3 02 1634*  	ld ix,675
       00          
041173 CD D8 BF 04 1635*  	call vdu_load_img
041177 C9          1636*  	ret
041178             1637*  
041178             1638*  ld_12_015:
041178 21 B0 39 04 1639*  	ld hl,F12_015
04117C 22 5D BE 04 1640*  	ld (cur_filename),hl
041180 11 8D CA 04 1641*  	ld de,filedata
041184 01 00 00 01 1642*  	ld bc,65536
041188 3E 01       1643*  	ld a,mos_load
04118A 5B CF       1644*  	RST.LIL 08h
04118C 21 39 01 00 1645*  	ld hl,BUF_12_015
041190 01 19 00 00 1646*  	ld bc,25
041194 11 2D 00 00 1647*  	ld de,45
041198 DD 21 65 04 1648*  	ld ix,1125
       00          
04119D CD D8 BF 04 1649*  	call vdu_load_img
0411A1 C9          1650*  	ret
0411A2             1651*  
0411A2             1652*  ld_12_016:
0411A2 21 C4 39 04 1653*  	ld hl,F12_016
0411A6 22 5D BE 04 1654*  	ld (cur_filename),hl
0411AA 11 8D CA 04 1655*  	ld de,filedata
0411AE 01 00 00 01 1656*  	ld bc,65536
0411B2 3E 01       1657*  	ld a,mos_load
0411B4 5B CF       1658*  	RST.LIL 08h
0411B6 21 3A 01 00 1659*  	ld hl,BUF_12_016
0411BA 01 23 00 00 1660*  	ld bc,35
0411BE 11 2D 00 00 1661*  	ld de,45
0411C2 DD 21 27 06 1662*  	ld ix,1575
       00          
0411C7 CD D8 BF 04 1663*  	call vdu_load_img
0411CB C9          1664*  	ret
0411CC             1665*  
0411CC             1666*  ld_12_020:
0411CC 21 D8 39 04 1667*  	ld hl,F12_020
0411D0 22 5D BE 04 1668*  	ld (cur_filename),hl
0411D4 11 8D CA 04 1669*  	ld de,filedata
0411D8 01 00 00 01 1670*  	ld bc,65536
0411DC 3E 01       1671*  	ld a,mos_load
0411DE 5B CF       1672*  	RST.LIL 08h
0411E0 21 3B 01 00 1673*  	ld hl,BUF_12_020
0411E4 01 2E 00 00 1674*  	ld bc,46
0411E8 11 2D 00 00 1675*  	ld de,45
0411EC DD 21 16 08 1676*  	ld ix,2070
       00          
0411F1 CD D8 BF 04 1677*  	call vdu_load_img
0411F5 C9          1678*  	ret
0411F6             1679*  
0411F6             1680*  ld_12_024:
0411F6 21 EC 39 04 1681*  	ld hl,F12_024
0411FA 22 5D BE 04 1682*  	ld (cur_filename),hl
0411FE 11 8D CA 04 1683*  	ld de,filedata
041202 01 00 00 01 1684*  	ld bc,65536
041206 3E 01       1685*  	ld a,mos_load
041208 5B CF       1686*  	RST.LIL 08h
04120A 21 3C 01 00 1687*  	ld hl,BUF_12_024
04120E 01 2E 00 00 1688*  	ld bc,46
041212 11 40 00 00 1689*  	ld de,64
041216 DD 21 80 0B 1690*  	ld ix,2944
       00          
04121B CD D8 BF 04 1691*  	call vdu_load_img
04121F C9          1692*  	ret
041220             1693*  
041220             1694*  ld_12_025:
041220 21 00 3A 04 1695*  	ld hl,F12_025
041224 22 5D BE 04 1696*  	ld (cur_filename),hl
041228 11 8D CA 04 1697*  	ld de,filedata
04122C 01 00 00 01 1698*  	ld bc,65536
041230 3E 01       1699*  	ld a,mos_load
041232 5B CF       1700*  	RST.LIL 08h
041234 21 3D 01 00 1701*  	ld hl,BUF_12_025
041238 01 1C 00 00 1702*  	ld bc,28
04123C 11 40 00 00 1703*  	ld de,64
041240 DD 21 00 07 1704*  	ld ix,1792
       00          
041245 CD D8 BF 04 1705*  	call vdu_load_img
041249 C9          1706*  	ret
04124A             1707*  
04124A             1708*  ld_12_026:
04124A 21 14 3A 04 1709*  	ld hl,F12_026
04124E 22 5D BE 04 1710*  	ld (cur_filename),hl
041252 11 8D CA 04 1711*  	ld de,filedata
041256 01 00 00 01 1712*  	ld bc,65536
04125A 3E 01       1713*  	ld a,mos_load
04125C 5B CF       1714*  	RST.LIL 08h
04125E 21 3E 01 00 1715*  	ld hl,BUF_12_026
041262 01 09 00 00 1716*  	ld bc,9
041266 11 40 00 00 1717*  	ld de,64
04126A DD 21 40 02 1718*  	ld ix,576
       00          
04126F CD D8 BF 04 1719*  	call vdu_load_img
041273 C9          1720*  	ret
041274             1721*  
041274             1722*  ld_12_027:
041274 21 28 3A 04 1723*  	ld hl,F12_027
041278 22 5D BE 04 1724*  	ld (cur_filename),hl
04127C 11 8D CA 04 1725*  	ld de,filedata
041280 01 00 00 01 1726*  	ld bc,65536
041284 3E 01       1727*  	ld a,mos_load
041286 5B CF       1728*  	RST.LIL 08h
041288 21 3F 01 00 1729*  	ld hl,BUF_12_027
04128C 01 0A 00 00 1730*  	ld bc,10
041290 11 3E 00 00 1731*  	ld de,62
041294 DD 21 6C 02 1732*  	ld ix,620
       00          
041299 CD D8 BF 04 1733*  	call vdu_load_img
04129D C9          1734*  	ret
04129E             1735*  
04129E             1736*  ld_12_028:
04129E 21 3C 3A 04 1737*  	ld hl,F12_028
0412A2 22 5D BE 04 1738*  	ld (cur_filename),hl
0412A6 11 8D CA 04 1739*  	ld de,filedata
0412AA 01 00 00 01 1740*  	ld bc,65536
0412AE 3E 01       1741*  	ld a,mos_load
0412B0 5B CF       1742*  	RST.LIL 08h
0412B2 21 40 01 00 1743*  	ld hl,BUF_12_028
0412B6 01 1C 00 00 1744*  	ld bc,28
0412BA 11 40 00 00 1745*  	ld de,64
0412BE DD 21 00 07 1746*  	ld ix,1792
       00          
0412C3 CD D8 BF 04 1747*  	call vdu_load_img
0412C7 C9          1748*  	ret
0412C8             1749*  
0412C8             1750*  ld_12_029:
0412C8 21 50 3A 04 1751*  	ld hl,F12_029
0412CC 22 5D BE 04 1752*  	ld (cur_filename),hl
0412D0 11 8D CA 04 1753*  	ld de,filedata
0412D4 01 00 00 01 1754*  	ld bc,65536
0412D8 3E 01       1755*  	ld a,mos_load
0412DA 5B CF       1756*  	RST.LIL 08h
0412DC 21 41 01 00 1757*  	ld hl,BUF_12_029
0412E0 01 2F 00 00 1758*  	ld bc,47
0412E4 11 40 00 00 1759*  	ld de,64
0412E8 DD 21 C0 0B 1760*  	ld ix,3008
       00          
0412ED CD D8 BF 04 1761*  	call vdu_load_img
0412F1 C9          1762*  	ret
0412F2             1763*  
0412F2             1764*  ld_12_032:
0412F2 21 64 3A 04 1765*  	ld hl,F12_032
0412F6 22 5D BE 04 1766*  	ld (cur_filename),hl
0412FA 11 8D CA 04 1767*  	ld de,filedata
0412FE 01 00 00 01 1768*  	ld bc,65536
041302 3E 01       1769*  	ld a,mos_load
041304 5B CF       1770*  	RST.LIL 08h
041306 21 42 01 00 1771*  	ld hl,BUF_12_032
04130A 01 41 00 00 1772*  	ld bc,65
04130E 11 40 00 00 1773*  	ld de,64
041312 DD 21 40 10 1774*  	ld ix,4160
       00          
041317 CD D8 BF 04 1775*  	call vdu_load_img
04131B C9          1776*  	ret
04131C             1777*  
04131C             1778*  ld_12_035:
04131C 21 78 3A 04 1779*  	ld hl,F12_035
041320 22 5D BE 04 1780*  	ld (cur_filename),hl
041324 11 8D CA 04 1781*  	ld de,filedata
041328 01 00 00 01 1782*  	ld bc,65536
04132C 3E 01       1783*  	ld a,mos_load
04132E 5B CF       1784*  	RST.LIL 08h
041330 21 43 01 00 1785*  	ld hl,BUF_12_035
041334 01 3F 00 00 1786*  	ld bc,63
041338 11 6B 00 00 1787*  	ld de,107
04133C DD 21 55 1A 1788*  	ld ix,6741
       00          
041341 CD D8 BF 04 1789*  	call vdu_load_img
041345 C9          1790*  	ret
041346             1791*  
041346             1792*  ld_12_036:
041346 21 8C 3A 04 1793*  	ld hl,F12_036
04134A 22 5D BE 04 1794*  	ld (cur_filename),hl
04134E 11 8D CA 04 1795*  	ld de,filedata
041352 01 00 00 01 1796*  	ld bc,65536
041356 3E 01       1797*  	ld a,mos_load
041358 5B CF       1798*  	RST.LIL 08h
04135A 21 44 01 00 1799*  	ld hl,BUF_12_036
04135E 01 16 00 00 1800*  	ld bc,22
041362 11 6B 00 00 1801*  	ld de,107
041366 DD 21 32 09 1802*  	ld ix,2354
       00          
04136B CD D8 BF 04 1803*  	call vdu_load_img
04136F C9          1804*  	ret
041370             1805*  
041370             1806*  ld_12_037:
041370 21 A0 3A 04 1807*  	ld hl,F12_037
041374 22 5D BE 04 1808*  	ld (cur_filename),hl
041378 11 8D CA 04 1809*  	ld de,filedata
04137C 01 00 00 01 1810*  	ld bc,65536
041380 3E 01       1811*  	ld a,mos_load
041382 5B CF       1812*  	RST.LIL 08h
041384 21 45 01 00 1813*  	ld hl,BUF_12_037
041388 01 15 00 00 1814*  	ld bc,21
04138C 11 69 00 00 1815*  	ld de,105
041390 DD 21 9D 08 1816*  	ld ix,2205
       00          
041395 CD D8 BF 04 1817*  	call vdu_load_img
041399 C9          1818*  	ret
04139A             1819*  
04139A             1820*  ld_12_038:
04139A 21 B4 3A 04 1821*  	ld hl,F12_038
04139E 22 5D BE 04 1822*  	ld (cur_filename),hl
0413A2 11 8D CA 04 1823*  	ld de,filedata
0413A6 01 00 00 01 1824*  	ld bc,65536
0413AA 3E 01       1825*  	ld a,mos_load
0413AC 5B CF       1826*  	RST.LIL 08h
0413AE 21 46 01 00 1827*  	ld hl,BUF_12_038
0413B2 01 3F 00 00 1828*  	ld bc,63
0413B6 11 6B 00 00 1829*  	ld de,107
0413BA DD 21 55 1A 1830*  	ld ix,6741
       00          
0413BF CD D8 BF 04 1831*  	call vdu_load_img
0413C3 C9          1832*  	ret
0413C4             1833*  
0413C4             1834*  ld_12_040:
0413C4 21 C8 3A 04 1835*  	ld hl,F12_040
0413C8 22 5D BE 04 1836*  	ld (cur_filename),hl
0413CC 11 8D CA 04 1837*  	ld de,filedata
0413D0 01 00 00 01 1838*  	ld bc,65536
0413D4 3E 01       1839*  	ld a,mos_load
0413D6 5B CF       1840*  	RST.LIL 08h
0413D8 21 47 01 00 1841*  	ld hl,BUF_12_040
0413DC 01 6C 00 00 1842*  	ld bc,108
0413E0 11 6B 00 00 1843*  	ld de,107
0413E4 DD 21 24 2D 1844*  	ld ix,11556
       00          
0413E9 CD D8 BF 04 1845*  	call vdu_load_img
0413ED C9          1846*  	ret
0413EE             1847*  
0413EE             1848*  ld_12_042:
0413EE 21 DC 3A 04 1849*  	ld hl,F12_042
0413F2 22 5D BE 04 1850*  	ld (cur_filename),hl
0413F6 11 8D CA 04 1851*  	ld de,filedata
0413FA 01 00 00 01 1852*  	ld bc,65536
0413FE 3E 01       1853*  	ld a,mos_load
041400 5B CF       1854*  	RST.LIL 08h
041402 21 48 01 00 1855*  	ld hl,BUF_12_042
041406 01 6A 00 00 1856*  	ld bc,106
04140A 11 A0 00 00 1857*  	ld de,160
04140E DD 21 40 42 1858*  	ld ix,16960
       00          
041413 CD D8 BF 04 1859*  	call vdu_load_img
041417 C9          1860*  	ret
041418             1861*  
041418             1862*  ld_12_043:
041418 21 F0 3A 04 1863*  	ld hl,F12_043
04141C 22 5D BE 04 1864*  	ld (cur_filename),hl
041420 11 8D CA 04 1865*  	ld de,filedata
041424 01 00 00 01 1866*  	ld bc,65536
041428 3E 01       1867*  	ld a,mos_load
04142A 5B CF       1868*  	RST.LIL 08h
04142C 21 49 01 00 1869*  	ld hl,BUF_12_043
041430 01 6B 00 00 1870*  	ld bc,107
041434 11 A0 00 00 1871*  	ld de,160
041438 DD 21 E0 42 1872*  	ld ix,17120
       00          
04143D CD D8 BF 04 1873*  	call vdu_load_img
041441 C9          1874*  	ret
041442             1875*  
041442             1876*  ld_12_044:
041442 21 04 3B 04 1877*  	ld hl,F12_044
041446 22 5D BE 04 1878*  	ld (cur_filename),hl
04144A 11 8D CA 04 1879*  	ld de,filedata
04144E 01 00 00 01 1880*  	ld bc,65536
041452 3E 01       1881*  	ld a,mos_load
041454 5B CF       1882*  	RST.LIL 08h
041456 21 4A 01 00 1883*  	ld hl,BUF_12_044
04145A 01 40 01 00 1884*  	ld bc,320
04145E 11 A0 00 00 1885*  	ld de,160
041462 DD 21 00 C8 1886*  	ld ix,51200
       00          
041467 CD D8 BF 04 1887*  	call vdu_load_img
04146B C9          1888*  	ret
04146C             1889*  
04146C             1890*  ld_13_004:
04146C 21 18 3B 04 1891*  	ld hl,F13_004
041470 22 5D BE 04 1892*  	ld (cur_filename),hl
041474 11 8D CA 04 1893*  	ld de,filedata
041478 01 00 00 01 1894*  	ld bc,65536
04147C 3E 01       1895*  	ld a,mos_load
04147E 5B CF       1896*  	RST.LIL 08h
041480 21 4B 01 00 1897*  	ld hl,BUF_13_004
041484 01 24 00 00 1898*  	ld bc,36
041488 11 23 00 00 1899*  	ld de,35
04148C DD 21 EC 04 1900*  	ld ix,1260
       00          
041491 CD D8 BF 04 1901*  	call vdu_load_img
041495 C9          1902*  	ret
041496             1903*  
041496             1904*  ld_13_009:
041496 21 2C 3B 04 1905*  	ld hl,F13_009
04149A 22 5D BE 04 1906*  	ld (cur_filename),hl
04149E 11 8D CA 04 1907*  	ld de,filedata
0414A2 01 00 00 01 1908*  	ld bc,65536
0414A6 3E 01       1909*  	ld a,mos_load
0414A8 5B CF       1910*  	RST.LIL 08h
0414AA 21 4C 01 00 1911*  	ld hl,BUF_13_009
0414AE 01 23 00 00 1912*  	ld bc,35
0414B2 11 2D 00 00 1913*  	ld de,45
0414B6 DD 21 27 06 1914*  	ld ix,1575
       00          
0414BB CD D8 BF 04 1915*  	call vdu_load_img
0414BF C9          1916*  	ret
0414C0             1917*  
0414C0             1918*  ld_13_010:
0414C0 21 40 3B 04 1919*  	ld hl,F13_010
0414C4 22 5D BE 04 1920*  	ld (cur_filename),hl
0414C8 11 8D CA 04 1921*  	ld de,filedata
0414CC 01 00 00 01 1922*  	ld bc,65536
0414D0 3E 01       1923*  	ld a,mos_load
0414D2 5B CF       1924*  	RST.LIL 08h
0414D4 21 4D 01 00 1925*  	ld hl,BUF_13_010
0414D8 01 19 00 00 1926*  	ld bc,25
0414DC 11 2D 00 00 1927*  	ld de,45
0414E0 DD 21 65 04 1928*  	ld ix,1125
       00          
0414E5 CD D8 BF 04 1929*  	call vdu_load_img
0414E9 C9          1930*  	ret
0414EA             1931*  
0414EA             1932*  ld_13_011:
0414EA 21 54 3B 04 1933*  	ld hl,F13_011
0414EE 22 5D BE 04 1934*  	ld (cur_filename),hl
0414F2 11 8D CA 04 1935*  	ld de,filedata
0414F6 01 00 00 01 1936*  	ld bc,65536
0414FA 3E 01       1937*  	ld a,mos_load
0414FC 5B CF       1938*  	RST.LIL 08h
0414FE 21 4E 01 00 1939*  	ld hl,BUF_13_011
041502 01 0F 00 00 1940*  	ld bc,15
041506 11 2D 00 00 1941*  	ld de,45
04150A DD 21 A3 02 1942*  	ld ix,675
       00          
04150F CD D8 BF 04 1943*  	call vdu_load_img
041513 C9          1944*  	ret
041514             1945*  
041514             1946*  ld_13_012:
041514 21 68 3B 04 1947*  	ld hl,F13_012
041518 22 5D BE 04 1948*  	ld (cur_filename),hl
04151C 11 8D CA 04 1949*  	ld de,filedata
041520 01 00 00 01 1950*  	ld bc,65536
041524 3E 01       1951*  	ld a,mos_load
041526 5B CF       1952*  	RST.LIL 08h
041528 21 4F 01 00 1953*  	ld hl,BUF_13_012
04152C 01 05 00 00 1954*  	ld bc,5
041530 11 2D 00 00 1955*  	ld de,45
041534 DD 21 E1 00 1956*  	ld ix,225
       00          
041539 CD D8 BF 04 1957*  	call vdu_load_img
04153D C9          1958*  	ret
04153E             1959*  
04153E             1960*  ld_13_013:
04153E 21 7C 3B 04 1961*  	ld hl,F13_013
041542 22 5D BE 04 1962*  	ld (cur_filename),hl
041546 11 8D CA 04 1963*  	ld de,filedata
04154A 01 00 00 01 1964*  	ld bc,65536
04154E 3E 01       1965*  	ld a,mos_load
041550 5B CF       1966*  	RST.LIL 08h
041552 21 50 01 00 1967*  	ld hl,BUF_13_013
041556 01 05 00 00 1968*  	ld bc,5
04155A 11 2B 00 00 1969*  	ld de,43
04155E DD 21 D7 00 1970*  	ld ix,215
       00          
041563 CD D8 BF 04 1971*  	call vdu_load_img
041567 C9          1972*  	ret
041568             1973*  
041568             1974*  ld_13_014:
041568 21 90 3B 04 1975*  	ld hl,F13_014
04156C 22 5D BE 04 1976*  	ld (cur_filename),hl
041570 11 8D CA 04 1977*  	ld de,filedata
041574 01 00 00 01 1978*  	ld bc,65536
041578 3E 01       1979*  	ld a,mos_load
04157A 5B CF       1980*  	RST.LIL 08h
04157C 21 51 01 00 1981*  	ld hl,BUF_13_014
041580 01 0F 00 00 1982*  	ld bc,15
041584 11 2D 00 00 1983*  	ld de,45
041588 DD 21 A3 02 1984*  	ld ix,675
       00          
04158D CD D8 BF 04 1985*  	call vdu_load_img
041591 C9          1986*  	ret
041592             1987*  
041592             1988*  ld_13_015:
041592 21 A4 3B 04 1989*  	ld hl,F13_015
041596 22 5D BE 04 1990*  	ld (cur_filename),hl
04159A 11 8D CA 04 1991*  	ld de,filedata
04159E 01 00 00 01 1992*  	ld bc,65536
0415A2 3E 01       1993*  	ld a,mos_load
0415A4 5B CF       1994*  	RST.LIL 08h
0415A6 21 52 01 00 1995*  	ld hl,BUF_13_015
0415AA 01 19 00 00 1996*  	ld bc,25
0415AE 11 2D 00 00 1997*  	ld de,45
0415B2 DD 21 65 04 1998*  	ld ix,1125
       00          
0415B7 CD D8 BF 04 1999*  	call vdu_load_img
0415BB C9          2000*  	ret
0415BC             2001*  
0415BC             2002*  ld_13_016:
0415BC 21 B8 3B 04 2003*  	ld hl,F13_016
0415C0 22 5D BE 04 2004*  	ld (cur_filename),hl
0415C4 11 8D CA 04 2005*  	ld de,filedata
0415C8 01 00 00 01 2006*  	ld bc,65536
0415CC 3E 01       2007*  	ld a,mos_load
0415CE 5B CF       2008*  	RST.LIL 08h
0415D0 21 53 01 00 2009*  	ld hl,BUF_13_016
0415D4 01 23 00 00 2010*  	ld bc,35
0415D8 11 2D 00 00 2011*  	ld de,45
0415DC DD 21 27 06 2012*  	ld ix,1575
       00          
0415E1 CD D8 BF 04 2013*  	call vdu_load_img
0415E5 C9          2014*  	ret
0415E6             2015*  
0415E6             2016*  ld_13_020:
0415E6 21 CC 3B 04 2017*  	ld hl,F13_020
0415EA 22 5D BE 04 2018*  	ld (cur_filename),hl
0415EE 11 8D CA 04 2019*  	ld de,filedata
0415F2 01 00 00 01 2020*  	ld bc,65536
0415F6 3E 01       2021*  	ld a,mos_load
0415F8 5B CF       2022*  	RST.LIL 08h
0415FA 21 54 01 00 2023*  	ld hl,BUF_13_020
0415FE 01 2E 00 00 2024*  	ld bc,46
041602 11 2D 00 00 2025*  	ld de,45
041606 DD 21 16 08 2026*  	ld ix,2070
       00          
04160B CD D8 BF 04 2027*  	call vdu_load_img
04160F C9          2028*  	ret
041610             2029*  
041610             2030*  ld_13_024:
041610 21 E0 3B 04 2031*  	ld hl,F13_024
041614 22 5D BE 04 2032*  	ld (cur_filename),hl
041618 11 8D CA 04 2033*  	ld de,filedata
04161C 01 00 00 01 2034*  	ld bc,65536
041620 3E 01       2035*  	ld a,mos_load
041622 5B CF       2036*  	RST.LIL 08h
041624 21 55 01 00 2037*  	ld hl,BUF_13_024
041628 01 2E 00 00 2038*  	ld bc,46
04162C 11 40 00 00 2039*  	ld de,64
041630 DD 21 80 0B 2040*  	ld ix,2944
       00          
041635 CD D8 BF 04 2041*  	call vdu_load_img
041639 C9          2042*  	ret
04163A             2043*  
04163A             2044*  ld_13_025:
04163A 21 F4 3B 04 2045*  	ld hl,F13_025
04163E 22 5D BE 04 2046*  	ld (cur_filename),hl
041642 11 8D CA 04 2047*  	ld de,filedata
041646 01 00 00 01 2048*  	ld bc,65536
04164A 3E 01       2049*  	ld a,mos_load
04164C 5B CF       2050*  	RST.LIL 08h
04164E 21 56 01 00 2051*  	ld hl,BUF_13_025
041652 01 1C 00 00 2052*  	ld bc,28
041656 11 40 00 00 2053*  	ld de,64
04165A DD 21 00 07 2054*  	ld ix,1792
       00          
04165F CD D8 BF 04 2055*  	call vdu_load_img
041663 C9          2056*  	ret
041664             2057*  
041664             2058*  ld_13_026:
041664 21 08 3C 04 2059*  	ld hl,F13_026
041668 22 5D BE 04 2060*  	ld (cur_filename),hl
04166C 11 8D CA 04 2061*  	ld de,filedata
041670 01 00 00 01 2062*  	ld bc,65536
041674 3E 01       2063*  	ld a,mos_load
041676 5B CF       2064*  	RST.LIL 08h
041678 21 57 01 00 2065*  	ld hl,BUF_13_026
04167C 01 09 00 00 2066*  	ld bc,9
041680 11 40 00 00 2067*  	ld de,64
041684 DD 21 40 02 2068*  	ld ix,576
       00          
041689 CD D8 BF 04 2069*  	call vdu_load_img
04168D C9          2070*  	ret
04168E             2071*  
04168E             2072*  ld_13_027:
04168E 21 1C 3C 04 2073*  	ld hl,F13_027
041692 22 5D BE 04 2074*  	ld (cur_filename),hl
041696 11 8D CA 04 2075*  	ld de,filedata
04169A 01 00 00 01 2076*  	ld bc,65536
04169E 3E 01       2077*  	ld a,mos_load
0416A0 5B CF       2078*  	RST.LIL 08h
0416A2 21 58 01 00 2079*  	ld hl,BUF_13_027
0416A6 01 0A 00 00 2080*  	ld bc,10
0416AA 11 3E 00 00 2081*  	ld de,62
0416AE DD 21 6C 02 2082*  	ld ix,620
       00          
0416B3 CD D8 BF 04 2083*  	call vdu_load_img
0416B7 C9          2084*  	ret
0416B8             2085*  
0416B8             2086*  ld_13_028:
0416B8 21 30 3C 04 2087*  	ld hl,F13_028
0416BC 22 5D BE 04 2088*  	ld (cur_filename),hl
0416C0 11 8D CA 04 2089*  	ld de,filedata
0416C4 01 00 00 01 2090*  	ld bc,65536
0416C8 3E 01       2091*  	ld a,mos_load
0416CA 5B CF       2092*  	RST.LIL 08h
0416CC 21 59 01 00 2093*  	ld hl,BUF_13_028
0416D0 01 1C 00 00 2094*  	ld bc,28
0416D4 11 40 00 00 2095*  	ld de,64
0416D8 DD 21 00 07 2096*  	ld ix,1792
       00          
0416DD CD D8 BF 04 2097*  	call vdu_load_img
0416E1 C9          2098*  	ret
0416E2             2099*  
0416E2             2100*  ld_13_029:
0416E2 21 44 3C 04 2101*  	ld hl,F13_029
0416E6 22 5D BE 04 2102*  	ld (cur_filename),hl
0416EA 11 8D CA 04 2103*  	ld de,filedata
0416EE 01 00 00 01 2104*  	ld bc,65536
0416F2 3E 01       2105*  	ld a,mos_load
0416F4 5B CF       2106*  	RST.LIL 08h
0416F6 21 5A 01 00 2107*  	ld hl,BUF_13_029
0416FA 01 2F 00 00 2108*  	ld bc,47
0416FE 11 40 00 00 2109*  	ld de,64
041702 DD 21 C0 0B 2110*  	ld ix,3008
       00          
041707 CD D8 BF 04 2111*  	call vdu_load_img
04170B C9          2112*  	ret
04170C             2113*  
04170C             2114*  ld_13_032:
04170C 21 58 3C 04 2115*  	ld hl,F13_032
041710 22 5D BE 04 2116*  	ld (cur_filename),hl
041714 11 8D CA 04 2117*  	ld de,filedata
041718 01 00 00 01 2118*  	ld bc,65536
04171C 3E 01       2119*  	ld a,mos_load
04171E 5B CF       2120*  	RST.LIL 08h
041720 21 5B 01 00 2121*  	ld hl,BUF_13_032
041724 01 41 00 00 2122*  	ld bc,65
041728 11 40 00 00 2123*  	ld de,64
04172C DD 21 40 10 2124*  	ld ix,4160
       00          
041731 CD D8 BF 04 2125*  	call vdu_load_img
041735 C9          2126*  	ret
041736             2127*  
041736             2128*  ld_13_035:
041736 21 6C 3C 04 2129*  	ld hl,F13_035
04173A 22 5D BE 04 2130*  	ld (cur_filename),hl
04173E 11 8D CA 04 2131*  	ld de,filedata
041742 01 00 00 01 2132*  	ld bc,65536
041746 3E 01       2133*  	ld a,mos_load
041748 5B CF       2134*  	RST.LIL 08h
04174A 21 5C 01 00 2135*  	ld hl,BUF_13_035
04174E 01 3F 00 00 2136*  	ld bc,63
041752 11 6B 00 00 2137*  	ld de,107
041756 DD 21 55 1A 2138*  	ld ix,6741
       00          
04175B CD D8 BF 04 2139*  	call vdu_load_img
04175F C9          2140*  	ret
041760             2141*  
041760             2142*  ld_13_036:
041760 21 80 3C 04 2143*  	ld hl,F13_036
041764 22 5D BE 04 2144*  	ld (cur_filename),hl
041768 11 8D CA 04 2145*  	ld de,filedata
04176C 01 00 00 01 2146*  	ld bc,65536
041770 3E 01       2147*  	ld a,mos_load
041772 5B CF       2148*  	RST.LIL 08h
041774 21 5D 01 00 2149*  	ld hl,BUF_13_036
041778 01 16 00 00 2150*  	ld bc,22
04177C 11 6B 00 00 2151*  	ld de,107
041780 DD 21 32 09 2152*  	ld ix,2354
       00          
041785 CD D8 BF 04 2153*  	call vdu_load_img
041789 C9          2154*  	ret
04178A             2155*  
04178A             2156*  ld_13_037:
04178A 21 94 3C 04 2157*  	ld hl,F13_037
04178E 22 5D BE 04 2158*  	ld (cur_filename),hl
041792 11 8D CA 04 2159*  	ld de,filedata
041796 01 00 00 01 2160*  	ld bc,65536
04179A 3E 01       2161*  	ld a,mos_load
04179C 5B CF       2162*  	RST.LIL 08h
04179E 21 5E 01 00 2163*  	ld hl,BUF_13_037
0417A2 01 15 00 00 2164*  	ld bc,21
0417A6 11 69 00 00 2165*  	ld de,105
0417AA DD 21 9D 08 2166*  	ld ix,2205
       00          
0417AF CD D8 BF 04 2167*  	call vdu_load_img
0417B3 C9          2168*  	ret
0417B4             2169*  
0417B4             2170*  ld_13_038:
0417B4 21 A8 3C 04 2171*  	ld hl,F13_038
0417B8 22 5D BE 04 2172*  	ld (cur_filename),hl
0417BC 11 8D CA 04 2173*  	ld de,filedata
0417C0 01 00 00 01 2174*  	ld bc,65536
0417C4 3E 01       2175*  	ld a,mos_load
0417C6 5B CF       2176*  	RST.LIL 08h
0417C8 21 5F 01 00 2177*  	ld hl,BUF_13_038
0417CC 01 3F 00 00 2178*  	ld bc,63
0417D0 11 6B 00 00 2179*  	ld de,107
0417D4 DD 21 55 1A 2180*  	ld ix,6741
       00          
0417D9 CD D8 BF 04 2181*  	call vdu_load_img
0417DD C9          2182*  	ret
0417DE             2183*  
0417DE             2184*  ld_13_040:
0417DE 21 BC 3C 04 2185*  	ld hl,F13_040
0417E2 22 5D BE 04 2186*  	ld (cur_filename),hl
0417E6 11 8D CA 04 2187*  	ld de,filedata
0417EA 01 00 00 01 2188*  	ld bc,65536
0417EE 3E 01       2189*  	ld a,mos_load
0417F0 5B CF       2190*  	RST.LIL 08h
0417F2 21 60 01 00 2191*  	ld hl,BUF_13_040
0417F6 01 6C 00 00 2192*  	ld bc,108
0417FA 11 6B 00 00 2193*  	ld de,107
0417FE DD 21 24 2D 2194*  	ld ix,11556
       00          
041803 CD D8 BF 04 2195*  	call vdu_load_img
041807 C9          2196*  	ret
041808             2197*  
041808             2198*  ld_13_042:
041808 21 D0 3C 04 2199*  	ld hl,F13_042
04180C 22 5D BE 04 2200*  	ld (cur_filename),hl
041810 11 8D CA 04 2201*  	ld de,filedata
041814 01 00 00 01 2202*  	ld bc,65536
041818 3E 01       2203*  	ld a,mos_load
04181A 5B CF       2204*  	RST.LIL 08h
04181C 21 61 01 00 2205*  	ld hl,BUF_13_042
041820 01 6A 00 00 2206*  	ld bc,106
041824 11 A0 00 00 2207*  	ld de,160
041828 DD 21 40 42 2208*  	ld ix,16960
       00          
04182D CD D8 BF 04 2209*  	call vdu_load_img
041831 C9          2210*  	ret
041832             2211*  
041832             2212*  ld_13_043:
041832 21 E4 3C 04 2213*  	ld hl,F13_043
041836 22 5D BE 04 2214*  	ld (cur_filename),hl
04183A 11 8D CA 04 2215*  	ld de,filedata
04183E 01 00 00 01 2216*  	ld bc,65536
041842 3E 01       2217*  	ld a,mos_load
041844 5B CF       2218*  	RST.LIL 08h
041846 21 62 01 00 2219*  	ld hl,BUF_13_043
04184A 01 6B 00 00 2220*  	ld bc,107
04184E 11 A0 00 00 2221*  	ld de,160
041852 DD 21 E0 42 2222*  	ld ix,17120
       00          
041857 CD D8 BF 04 2223*  	call vdu_load_img
04185B C9          2224*  	ret
04185C             2225*  
04185C             2226*  ld_13_044:
04185C 21 F8 3C 04 2227*  	ld hl,F13_044
041860 22 5D BE 04 2228*  	ld (cur_filename),hl
041864 11 8D CA 04 2229*  	ld de,filedata
041868 01 00 00 01 2230*  	ld bc,65536
04186C 3E 01       2231*  	ld a,mos_load
04186E 5B CF       2232*  	RST.LIL 08h
041870 21 63 01 00 2233*  	ld hl,BUF_13_044
041874 01 40 01 00 2234*  	ld bc,320
041878 11 A0 00 00 2235*  	ld de,160
04187C DD 21 00 C8 2236*  	ld ix,51200
       00          
041881 CD D8 BF 04 2237*  	call vdu_load_img
041885 C9          2238*  	ret
041886             2239*  
041886             2240*  ld_14_004:
041886 21 0C 3D 04 2241*  	ld hl,F14_004
04188A 22 5D BE 04 2242*  	ld (cur_filename),hl
04188E 11 8D CA 04 2243*  	ld de,filedata
041892 01 00 00 01 2244*  	ld bc,65536
041896 3E 01       2245*  	ld a,mos_load
041898 5B CF       2246*  	RST.LIL 08h
04189A 21 64 01 00 2247*  	ld hl,BUF_14_004
04189E 01 24 00 00 2248*  	ld bc,36
0418A2 11 23 00 00 2249*  	ld de,35
0418A6 DD 21 EC 04 2250*  	ld ix,1260
       00          
0418AB CD D8 BF 04 2251*  	call vdu_load_img
0418AF C9          2252*  	ret
0418B0             2253*  
0418B0             2254*  ld_14_009:
0418B0 21 20 3D 04 2255*  	ld hl,F14_009
0418B4 22 5D BE 04 2256*  	ld (cur_filename),hl
0418B8 11 8D CA 04 2257*  	ld de,filedata
0418BC 01 00 00 01 2258*  	ld bc,65536
0418C0 3E 01       2259*  	ld a,mos_load
0418C2 5B CF       2260*  	RST.LIL 08h
0418C4 21 65 01 00 2261*  	ld hl,BUF_14_009
0418C8 01 23 00 00 2262*  	ld bc,35
0418CC 11 2D 00 00 2263*  	ld de,45
0418D0 DD 21 27 06 2264*  	ld ix,1575
       00          
0418D5 CD D8 BF 04 2265*  	call vdu_load_img
0418D9 C9          2266*  	ret
0418DA             2267*  
0418DA             2268*  ld_14_010:
0418DA 21 34 3D 04 2269*  	ld hl,F14_010
0418DE 22 5D BE 04 2270*  	ld (cur_filename),hl
0418E2 11 8D CA 04 2271*  	ld de,filedata
0418E6 01 00 00 01 2272*  	ld bc,65536
0418EA 3E 01       2273*  	ld a,mos_load
0418EC 5B CF       2274*  	RST.LIL 08h
0418EE 21 66 01 00 2275*  	ld hl,BUF_14_010
0418F2 01 19 00 00 2276*  	ld bc,25
0418F6 11 2D 00 00 2277*  	ld de,45
0418FA DD 21 65 04 2278*  	ld ix,1125
       00          
0418FF CD D8 BF 04 2279*  	call vdu_load_img
041903 C9          2280*  	ret
041904             2281*  
041904             2282*  ld_14_011:
041904 21 48 3D 04 2283*  	ld hl,F14_011
041908 22 5D BE 04 2284*  	ld (cur_filename),hl
04190C 11 8D CA 04 2285*  	ld de,filedata
041910 01 00 00 01 2286*  	ld bc,65536
041914 3E 01       2287*  	ld a,mos_load
041916 5B CF       2288*  	RST.LIL 08h
041918 21 67 01 00 2289*  	ld hl,BUF_14_011
04191C 01 0F 00 00 2290*  	ld bc,15
041920 11 2D 00 00 2291*  	ld de,45
041924 DD 21 A3 02 2292*  	ld ix,675
       00          
041929 CD D8 BF 04 2293*  	call vdu_load_img
04192D C9          2294*  	ret
04192E             2295*  
04192E             2296*  ld_14_012:
04192E 21 5C 3D 04 2297*  	ld hl,F14_012
041932 22 5D BE 04 2298*  	ld (cur_filename),hl
041936 11 8D CA 04 2299*  	ld de,filedata
04193A 01 00 00 01 2300*  	ld bc,65536
04193E 3E 01       2301*  	ld a,mos_load
041940 5B CF       2302*  	RST.LIL 08h
041942 21 68 01 00 2303*  	ld hl,BUF_14_012
041946 01 05 00 00 2304*  	ld bc,5
04194A 11 2D 00 00 2305*  	ld de,45
04194E DD 21 E1 00 2306*  	ld ix,225
       00          
041953 CD D8 BF 04 2307*  	call vdu_load_img
041957 C9          2308*  	ret
041958             2309*  
041958             2310*  ld_14_013:
041958 21 70 3D 04 2311*  	ld hl,F14_013
04195C 22 5D BE 04 2312*  	ld (cur_filename),hl
041960 11 8D CA 04 2313*  	ld de,filedata
041964 01 00 00 01 2314*  	ld bc,65536
041968 3E 01       2315*  	ld a,mos_load
04196A 5B CF       2316*  	RST.LIL 08h
04196C 21 69 01 00 2317*  	ld hl,BUF_14_013
041970 01 05 00 00 2318*  	ld bc,5
041974 11 2B 00 00 2319*  	ld de,43
041978 DD 21 D7 00 2320*  	ld ix,215
       00          
04197D CD D8 BF 04 2321*  	call vdu_load_img
041981 C9          2322*  	ret
041982             2323*  
041982             2324*  ld_14_014:
041982 21 84 3D 04 2325*  	ld hl,F14_014
041986 22 5D BE 04 2326*  	ld (cur_filename),hl
04198A 11 8D CA 04 2327*  	ld de,filedata
04198E 01 00 00 01 2328*  	ld bc,65536
041992 3E 01       2329*  	ld a,mos_load
041994 5B CF       2330*  	RST.LIL 08h
041996 21 6A 01 00 2331*  	ld hl,BUF_14_014
04199A 01 0F 00 00 2332*  	ld bc,15
04199E 11 2D 00 00 2333*  	ld de,45
0419A2 DD 21 A3 02 2334*  	ld ix,675
       00          
0419A7 CD D8 BF 04 2335*  	call vdu_load_img
0419AB C9          2336*  	ret
0419AC             2337*  
0419AC             2338*  ld_14_015:
0419AC 21 98 3D 04 2339*  	ld hl,F14_015
0419B0 22 5D BE 04 2340*  	ld (cur_filename),hl
0419B4 11 8D CA 04 2341*  	ld de,filedata
0419B8 01 00 00 01 2342*  	ld bc,65536
0419BC 3E 01       2343*  	ld a,mos_load
0419BE 5B CF       2344*  	RST.LIL 08h
0419C0 21 6B 01 00 2345*  	ld hl,BUF_14_015
0419C4 01 19 00 00 2346*  	ld bc,25
0419C8 11 2D 00 00 2347*  	ld de,45
0419CC DD 21 65 04 2348*  	ld ix,1125
       00          
0419D1 CD D8 BF 04 2349*  	call vdu_load_img
0419D5 C9          2350*  	ret
0419D6             2351*  
0419D6             2352*  ld_14_016:
0419D6 21 AC 3D 04 2353*  	ld hl,F14_016
0419DA 22 5D BE 04 2354*  	ld (cur_filename),hl
0419DE 11 8D CA 04 2355*  	ld de,filedata
0419E2 01 00 00 01 2356*  	ld bc,65536
0419E6 3E 01       2357*  	ld a,mos_load
0419E8 5B CF       2358*  	RST.LIL 08h
0419EA 21 6C 01 00 2359*  	ld hl,BUF_14_016
0419EE 01 23 00 00 2360*  	ld bc,35
0419F2 11 2D 00 00 2361*  	ld de,45
0419F6 DD 21 27 06 2362*  	ld ix,1575
       00          
0419FB CD D8 BF 04 2363*  	call vdu_load_img
0419FF C9          2364*  	ret
041A00             2365*  
041A00             2366*  ld_14_020:
041A00 21 C0 3D 04 2367*  	ld hl,F14_020
041A04 22 5D BE 04 2368*  	ld (cur_filename),hl
041A08 11 8D CA 04 2369*  	ld de,filedata
041A0C 01 00 00 01 2370*  	ld bc,65536
041A10 3E 01       2371*  	ld a,mos_load
041A12 5B CF       2372*  	RST.LIL 08h
041A14 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A18 01 2E 00 00 2374*  	ld bc,46
041A1C 11 2D 00 00 2375*  	ld de,45
041A20 DD 21 16 08 2376*  	ld ix,2070
       00          
041A25 CD D8 BF 04 2377*  	call vdu_load_img
041A29 C9          2378*  	ret
041A2A             2379*  
041A2A             2380*  ld_14_024:
041A2A 21 D4 3D 04 2381*  	ld hl,F14_024
041A2E 22 5D BE 04 2382*  	ld (cur_filename),hl
041A32 11 8D CA 04 2383*  	ld de,filedata
041A36 01 00 00 01 2384*  	ld bc,65536
041A3A 3E 01       2385*  	ld a,mos_load
041A3C 5B CF       2386*  	RST.LIL 08h
041A3E 21 6E 01 00 2387*  	ld hl,BUF_14_024
041A42 01 2E 00 00 2388*  	ld bc,46
041A46 11 40 00 00 2389*  	ld de,64
041A4A DD 21 80 0B 2390*  	ld ix,2944
       00          
041A4F CD D8 BF 04 2391*  	call vdu_load_img
041A53 C9          2392*  	ret
041A54             2393*  
041A54             2394*  ld_14_025:
041A54 21 E8 3D 04 2395*  	ld hl,F14_025
041A58 22 5D BE 04 2396*  	ld (cur_filename),hl
041A5C 11 8D CA 04 2397*  	ld de,filedata
041A60 01 00 00 01 2398*  	ld bc,65536
041A64 3E 01       2399*  	ld a,mos_load
041A66 5B CF       2400*  	RST.LIL 08h
041A68 21 6F 01 00 2401*  	ld hl,BUF_14_025
041A6C 01 1C 00 00 2402*  	ld bc,28
041A70 11 40 00 00 2403*  	ld de,64
041A74 DD 21 00 07 2404*  	ld ix,1792
       00          
041A79 CD D8 BF 04 2405*  	call vdu_load_img
041A7D C9          2406*  	ret
041A7E             2407*  
041A7E             2408*  ld_14_026:
041A7E 21 FC 3D 04 2409*  	ld hl,F14_026
041A82 22 5D BE 04 2410*  	ld (cur_filename),hl
041A86 11 8D CA 04 2411*  	ld de,filedata
041A8A 01 00 00 01 2412*  	ld bc,65536
041A8E 3E 01       2413*  	ld a,mos_load
041A90 5B CF       2414*  	RST.LIL 08h
041A92 21 70 01 00 2415*  	ld hl,BUF_14_026
041A96 01 09 00 00 2416*  	ld bc,9
041A9A 11 40 00 00 2417*  	ld de,64
041A9E DD 21 40 02 2418*  	ld ix,576
       00          
041AA3 CD D8 BF 04 2419*  	call vdu_load_img
041AA7 C9          2420*  	ret
041AA8             2421*  
041AA8             2422*  ld_14_027:
041AA8 21 10 3E 04 2423*  	ld hl,F14_027
041AAC 22 5D BE 04 2424*  	ld (cur_filename),hl
041AB0 11 8D CA 04 2425*  	ld de,filedata
041AB4 01 00 00 01 2426*  	ld bc,65536
041AB8 3E 01       2427*  	ld a,mos_load
041ABA 5B CF       2428*  	RST.LIL 08h
041ABC 21 71 01 00 2429*  	ld hl,BUF_14_027
041AC0 01 0A 00 00 2430*  	ld bc,10
041AC4 11 3E 00 00 2431*  	ld de,62
041AC8 DD 21 6C 02 2432*  	ld ix,620
       00          
041ACD CD D8 BF 04 2433*  	call vdu_load_img
041AD1 C9          2434*  	ret
041AD2             2435*  
041AD2             2436*  ld_14_028:
041AD2 21 24 3E 04 2437*  	ld hl,F14_028
041AD6 22 5D BE 04 2438*  	ld (cur_filename),hl
041ADA 11 8D CA 04 2439*  	ld de,filedata
041ADE 01 00 00 01 2440*  	ld bc,65536
041AE2 3E 01       2441*  	ld a,mos_load
041AE4 5B CF       2442*  	RST.LIL 08h
041AE6 21 72 01 00 2443*  	ld hl,BUF_14_028
041AEA 01 1C 00 00 2444*  	ld bc,28
041AEE 11 40 00 00 2445*  	ld de,64
041AF2 DD 21 00 07 2446*  	ld ix,1792
       00          
041AF7 CD D8 BF 04 2447*  	call vdu_load_img
041AFB C9          2448*  	ret
041AFC             2449*  
041AFC             2450*  ld_14_029:
041AFC 21 38 3E 04 2451*  	ld hl,F14_029
041B00 22 5D BE 04 2452*  	ld (cur_filename),hl
041B04 11 8D CA 04 2453*  	ld de,filedata
041B08 01 00 00 01 2454*  	ld bc,65536
041B0C 3E 01       2455*  	ld a,mos_load
041B0E 5B CF       2456*  	RST.LIL 08h
041B10 21 73 01 00 2457*  	ld hl,BUF_14_029
041B14 01 2F 00 00 2458*  	ld bc,47
041B18 11 40 00 00 2459*  	ld de,64
041B1C DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B21 CD D8 BF 04 2461*  	call vdu_load_img
041B25 C9          2462*  	ret
041B26             2463*  
041B26             2464*  ld_14_032:
041B26 21 4C 3E 04 2465*  	ld hl,F14_032
041B2A 22 5D BE 04 2466*  	ld (cur_filename),hl
041B2E 11 8D CA 04 2467*  	ld de,filedata
041B32 01 00 00 01 2468*  	ld bc,65536
041B36 3E 01       2469*  	ld a,mos_load
041B38 5B CF       2470*  	RST.LIL 08h
041B3A 21 74 01 00 2471*  	ld hl,BUF_14_032
041B3E 01 41 00 00 2472*  	ld bc,65
041B42 11 40 00 00 2473*  	ld de,64
041B46 DD 21 40 10 2474*  	ld ix,4160
       00          
041B4B CD D8 BF 04 2475*  	call vdu_load_img
041B4F C9          2476*  	ret
041B50             2477*  
041B50             2478*  ld_14_035:
041B50 21 60 3E 04 2479*  	ld hl,F14_035
041B54 22 5D BE 04 2480*  	ld (cur_filename),hl
041B58 11 8D CA 04 2481*  	ld de,filedata
041B5C 01 00 00 01 2482*  	ld bc,65536
041B60 3E 01       2483*  	ld a,mos_load
041B62 5B CF       2484*  	RST.LIL 08h
041B64 21 75 01 00 2485*  	ld hl,BUF_14_035
041B68 01 3F 00 00 2486*  	ld bc,63
041B6C 11 6B 00 00 2487*  	ld de,107
041B70 DD 21 55 1A 2488*  	ld ix,6741
       00          
041B75 CD D8 BF 04 2489*  	call vdu_load_img
041B79 C9          2490*  	ret
041B7A             2491*  
041B7A             2492*  ld_14_036:
041B7A 21 74 3E 04 2493*  	ld hl,F14_036
041B7E 22 5D BE 04 2494*  	ld (cur_filename),hl
041B82 11 8D CA 04 2495*  	ld de,filedata
041B86 01 00 00 01 2496*  	ld bc,65536
041B8A 3E 01       2497*  	ld a,mos_load
041B8C 5B CF       2498*  	RST.LIL 08h
041B8E 21 76 01 00 2499*  	ld hl,BUF_14_036
041B92 01 16 00 00 2500*  	ld bc,22
041B96 11 6B 00 00 2501*  	ld de,107
041B9A DD 21 32 09 2502*  	ld ix,2354
       00          
041B9F CD D8 BF 04 2503*  	call vdu_load_img
041BA3 C9          2504*  	ret
041BA4             2505*  
041BA4             2506*  ld_14_037:
041BA4 21 88 3E 04 2507*  	ld hl,F14_037
041BA8 22 5D BE 04 2508*  	ld (cur_filename),hl
041BAC 11 8D CA 04 2509*  	ld de,filedata
041BB0 01 00 00 01 2510*  	ld bc,65536
041BB4 3E 01       2511*  	ld a,mos_load
041BB6 5B CF       2512*  	RST.LIL 08h
041BB8 21 77 01 00 2513*  	ld hl,BUF_14_037
041BBC 01 15 00 00 2514*  	ld bc,21
041BC0 11 69 00 00 2515*  	ld de,105
041BC4 DD 21 9D 08 2516*  	ld ix,2205
       00          
041BC9 CD D8 BF 04 2517*  	call vdu_load_img
041BCD C9          2518*  	ret
041BCE             2519*  
041BCE             2520*  ld_14_038:
041BCE 21 9C 3E 04 2521*  	ld hl,F14_038
041BD2 22 5D BE 04 2522*  	ld (cur_filename),hl
041BD6 11 8D CA 04 2523*  	ld de,filedata
041BDA 01 00 00 01 2524*  	ld bc,65536
041BDE 3E 01       2525*  	ld a,mos_load
041BE0 5B CF       2526*  	RST.LIL 08h
041BE2 21 78 01 00 2527*  	ld hl,BUF_14_038
041BE6 01 3F 00 00 2528*  	ld bc,63
041BEA 11 6B 00 00 2529*  	ld de,107
041BEE DD 21 55 1A 2530*  	ld ix,6741
       00          
041BF3 CD D8 BF 04 2531*  	call vdu_load_img
041BF7 C9          2532*  	ret
041BF8             2533*  
041BF8             2534*  ld_14_040:
041BF8 21 B0 3E 04 2535*  	ld hl,F14_040
041BFC 22 5D BE 04 2536*  	ld (cur_filename),hl
041C00 11 8D CA 04 2537*  	ld de,filedata
041C04 01 00 00 01 2538*  	ld bc,65536
041C08 3E 01       2539*  	ld a,mos_load
041C0A 5B CF       2540*  	RST.LIL 08h
041C0C 21 79 01 00 2541*  	ld hl,BUF_14_040
041C10 01 6C 00 00 2542*  	ld bc,108
041C14 11 6B 00 00 2543*  	ld de,107
041C18 DD 21 24 2D 2544*  	ld ix,11556
       00          
041C1D CD D8 BF 04 2545*  	call vdu_load_img
041C21 C9          2546*  	ret
041C22             2547*  
041C22             2548*  ld_14_042:
041C22 21 C4 3E 04 2549*  	ld hl,F14_042
041C26 22 5D BE 04 2550*  	ld (cur_filename),hl
041C2A 11 8D CA 04 2551*  	ld de,filedata
041C2E 01 00 00 01 2552*  	ld bc,65536
041C32 3E 01       2553*  	ld a,mos_load
041C34 5B CF       2554*  	RST.LIL 08h
041C36 21 7A 01 00 2555*  	ld hl,BUF_14_042
041C3A 01 6A 00 00 2556*  	ld bc,106
041C3E 11 A0 00 00 2557*  	ld de,160
041C42 DD 21 40 42 2558*  	ld ix,16960
       00          
041C47 CD D8 BF 04 2559*  	call vdu_load_img
041C4B C9          2560*  	ret
041C4C             2561*  
041C4C             2562*  ld_14_043:
041C4C 21 D8 3E 04 2563*  	ld hl,F14_043
041C50 22 5D BE 04 2564*  	ld (cur_filename),hl
041C54 11 8D CA 04 2565*  	ld de,filedata
041C58 01 00 00 01 2566*  	ld bc,65536
041C5C 3E 01       2567*  	ld a,mos_load
041C5E 5B CF       2568*  	RST.LIL 08h
041C60 21 7B 01 00 2569*  	ld hl,BUF_14_043
041C64 01 6B 00 00 2570*  	ld bc,107
041C68 11 A0 00 00 2571*  	ld de,160
041C6C DD 21 E0 42 2572*  	ld ix,17120
       00          
041C71 CD D8 BF 04 2573*  	call vdu_load_img
041C75 C9          2574*  	ret
041C76             2575*  
041C76             2576*  ld_14_044:
041C76 21 EC 3E 04 2577*  	ld hl,F14_044
041C7A 22 5D BE 04 2578*  	ld (cur_filename),hl
041C7E 11 8D CA 04 2579*  	ld de,filedata
041C82 01 00 00 01 2580*  	ld bc,65536
041C86 3E 01       2581*  	ld a,mos_load
041C88 5B CF       2582*  	RST.LIL 08h
041C8A 21 7C 01 00 2583*  	ld hl,BUF_14_044
041C8E 01 40 01 00 2584*  	ld bc,320
041C92 11 A0 00 00 2585*  	ld de,160
041C96 DD 21 00 C8 2586*  	ld ix,51200
       00          
041C9B CD D8 BF 04 2587*  	call vdu_load_img
041C9F C9          2588*  	ret
041CA0             2589*  
041CA0             2590*  ld_15_004:
041CA0 21 00 3F 04 2591*  	ld hl,F15_004
041CA4 22 5D BE 04 2592*  	ld (cur_filename),hl
041CA8 11 8D CA 04 2593*  	ld de,filedata
041CAC 01 00 00 01 2594*  	ld bc,65536
041CB0 3E 01       2595*  	ld a,mos_load
041CB2 5B CF       2596*  	RST.LIL 08h
041CB4 21 7D 01 00 2597*  	ld hl,BUF_15_004
041CB8 01 24 00 00 2598*  	ld bc,36
041CBC 11 23 00 00 2599*  	ld de,35
041CC0 DD 21 EC 04 2600*  	ld ix,1260
       00          
041CC5 CD D8 BF 04 2601*  	call vdu_load_img
041CC9 C9          2602*  	ret
041CCA             2603*  
041CCA             2604*  ld_15_009:
041CCA 21 14 3F 04 2605*  	ld hl,F15_009
041CCE 22 5D BE 04 2606*  	ld (cur_filename),hl
041CD2 11 8D CA 04 2607*  	ld de,filedata
041CD6 01 00 00 01 2608*  	ld bc,65536
041CDA 3E 01       2609*  	ld a,mos_load
041CDC 5B CF       2610*  	RST.LIL 08h
041CDE 21 7E 01 00 2611*  	ld hl,BUF_15_009
041CE2 01 23 00 00 2612*  	ld bc,35
041CE6 11 2D 00 00 2613*  	ld de,45
041CEA DD 21 27 06 2614*  	ld ix,1575
       00          
041CEF CD D8 BF 04 2615*  	call vdu_load_img
041CF3 C9          2616*  	ret
041CF4             2617*  
041CF4             2618*  ld_15_010:
041CF4 21 28 3F 04 2619*  	ld hl,F15_010
041CF8 22 5D BE 04 2620*  	ld (cur_filename),hl
041CFC 11 8D CA 04 2621*  	ld de,filedata
041D00 01 00 00 01 2622*  	ld bc,65536
041D04 3E 01       2623*  	ld a,mos_load
041D06 5B CF       2624*  	RST.LIL 08h
041D08 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D0C 01 19 00 00 2626*  	ld bc,25
041D10 11 2D 00 00 2627*  	ld de,45
041D14 DD 21 65 04 2628*  	ld ix,1125
       00          
041D19 CD D8 BF 04 2629*  	call vdu_load_img
041D1D C9          2630*  	ret
041D1E             2631*  
041D1E             2632*  ld_15_011:
041D1E 21 3C 3F 04 2633*  	ld hl,F15_011
041D22 22 5D BE 04 2634*  	ld (cur_filename),hl
041D26 11 8D CA 04 2635*  	ld de,filedata
041D2A 01 00 00 01 2636*  	ld bc,65536
041D2E 3E 01       2637*  	ld a,mos_load
041D30 5B CF       2638*  	RST.LIL 08h
041D32 21 80 01 00 2639*  	ld hl,BUF_15_011
041D36 01 0F 00 00 2640*  	ld bc,15
041D3A 11 2D 00 00 2641*  	ld de,45
041D3E DD 21 A3 02 2642*  	ld ix,675
       00          
041D43 CD D8 BF 04 2643*  	call vdu_load_img
041D47 C9          2644*  	ret
041D48             2645*  
041D48             2646*  ld_15_012:
041D48 21 50 3F 04 2647*  	ld hl,F15_012
041D4C 22 5D BE 04 2648*  	ld (cur_filename),hl
041D50 11 8D CA 04 2649*  	ld de,filedata
041D54 01 00 00 01 2650*  	ld bc,65536
041D58 3E 01       2651*  	ld a,mos_load
041D5A 5B CF       2652*  	RST.LIL 08h
041D5C 21 81 01 00 2653*  	ld hl,BUF_15_012
041D60 01 05 00 00 2654*  	ld bc,5
041D64 11 2D 00 00 2655*  	ld de,45
041D68 DD 21 E1 00 2656*  	ld ix,225
       00          
041D6D CD D8 BF 04 2657*  	call vdu_load_img
041D71 C9          2658*  	ret
041D72             2659*  
041D72             2660*  ld_15_013:
041D72 21 64 3F 04 2661*  	ld hl,F15_013
041D76 22 5D BE 04 2662*  	ld (cur_filename),hl
041D7A 11 8D CA 04 2663*  	ld de,filedata
041D7E 01 00 00 01 2664*  	ld bc,65536
041D82 3E 01       2665*  	ld a,mos_load
041D84 5B CF       2666*  	RST.LIL 08h
041D86 21 82 01 00 2667*  	ld hl,BUF_15_013
041D8A 01 05 00 00 2668*  	ld bc,5
041D8E 11 2B 00 00 2669*  	ld de,43
041D92 DD 21 D7 00 2670*  	ld ix,215
       00          
041D97 CD D8 BF 04 2671*  	call vdu_load_img
041D9B C9          2672*  	ret
041D9C             2673*  
041D9C             2674*  ld_15_014:
041D9C 21 78 3F 04 2675*  	ld hl,F15_014
041DA0 22 5D BE 04 2676*  	ld (cur_filename),hl
041DA4 11 8D CA 04 2677*  	ld de,filedata
041DA8 01 00 00 01 2678*  	ld bc,65536
041DAC 3E 01       2679*  	ld a,mos_load
041DAE 5B CF       2680*  	RST.LIL 08h
041DB0 21 83 01 00 2681*  	ld hl,BUF_15_014
041DB4 01 0F 00 00 2682*  	ld bc,15
041DB8 11 2D 00 00 2683*  	ld de,45
041DBC DD 21 A3 02 2684*  	ld ix,675
       00          
041DC1 CD D8 BF 04 2685*  	call vdu_load_img
041DC5 C9          2686*  	ret
041DC6             2687*  
041DC6             2688*  ld_15_015:
041DC6 21 8C 3F 04 2689*  	ld hl,F15_015
041DCA 22 5D BE 04 2690*  	ld (cur_filename),hl
041DCE 11 8D CA 04 2691*  	ld de,filedata
041DD2 01 00 00 01 2692*  	ld bc,65536
041DD6 3E 01       2693*  	ld a,mos_load
041DD8 5B CF       2694*  	RST.LIL 08h
041DDA 21 84 01 00 2695*  	ld hl,BUF_15_015
041DDE 01 19 00 00 2696*  	ld bc,25
041DE2 11 2D 00 00 2697*  	ld de,45
041DE6 DD 21 65 04 2698*  	ld ix,1125
       00          
041DEB CD D8 BF 04 2699*  	call vdu_load_img
041DEF C9          2700*  	ret
041DF0             2701*  
041DF0             2702*  ld_15_016:
041DF0 21 A0 3F 04 2703*  	ld hl,F15_016
041DF4 22 5D BE 04 2704*  	ld (cur_filename),hl
041DF8 11 8D CA 04 2705*  	ld de,filedata
041DFC 01 00 00 01 2706*  	ld bc,65536
041E00 3E 01       2707*  	ld a,mos_load
041E02 5B CF       2708*  	RST.LIL 08h
041E04 21 85 01 00 2709*  	ld hl,BUF_15_016
041E08 01 23 00 00 2710*  	ld bc,35
041E0C 11 2D 00 00 2711*  	ld de,45
041E10 DD 21 27 06 2712*  	ld ix,1575
       00          
041E15 CD D8 BF 04 2713*  	call vdu_load_img
041E19 C9          2714*  	ret
041E1A             2715*  
041E1A             2716*  ld_15_020:
041E1A 21 B4 3F 04 2717*  	ld hl,F15_020
041E1E 22 5D BE 04 2718*  	ld (cur_filename),hl
041E22 11 8D CA 04 2719*  	ld de,filedata
041E26 01 00 00 01 2720*  	ld bc,65536
041E2A 3E 01       2721*  	ld a,mos_load
041E2C 5B CF       2722*  	RST.LIL 08h
041E2E 21 86 01 00 2723*  	ld hl,BUF_15_020
041E32 01 2E 00 00 2724*  	ld bc,46
041E36 11 2D 00 00 2725*  	ld de,45
041E3A DD 21 16 08 2726*  	ld ix,2070
       00          
041E3F CD D8 BF 04 2727*  	call vdu_load_img
041E43 C9          2728*  	ret
041E44             2729*  
041E44             2730*  ld_15_024:
041E44 21 C8 3F 04 2731*  	ld hl,F15_024
041E48 22 5D BE 04 2732*  	ld (cur_filename),hl
041E4C 11 8D CA 04 2733*  	ld de,filedata
041E50 01 00 00 01 2734*  	ld bc,65536
041E54 3E 01       2735*  	ld a,mos_load
041E56 5B CF       2736*  	RST.LIL 08h
041E58 21 87 01 00 2737*  	ld hl,BUF_15_024
041E5C 01 2E 00 00 2738*  	ld bc,46
041E60 11 40 00 00 2739*  	ld de,64
041E64 DD 21 80 0B 2740*  	ld ix,2944
       00          
041E69 CD D8 BF 04 2741*  	call vdu_load_img
041E6D C9          2742*  	ret
041E6E             2743*  
041E6E             2744*  ld_15_025:
041E6E 21 DC 3F 04 2745*  	ld hl,F15_025
041E72 22 5D BE 04 2746*  	ld (cur_filename),hl
041E76 11 8D CA 04 2747*  	ld de,filedata
041E7A 01 00 00 01 2748*  	ld bc,65536
041E7E 3E 01       2749*  	ld a,mos_load
041E80 5B CF       2750*  	RST.LIL 08h
041E82 21 88 01 00 2751*  	ld hl,BUF_15_025
041E86 01 1C 00 00 2752*  	ld bc,28
041E8A 11 40 00 00 2753*  	ld de,64
041E8E DD 21 00 07 2754*  	ld ix,1792
       00          
041E93 CD D8 BF 04 2755*  	call vdu_load_img
041E97 C9          2756*  	ret
041E98             2757*  
041E98             2758*  ld_15_026:
041E98 21 F0 3F 04 2759*  	ld hl,F15_026
041E9C 22 5D BE 04 2760*  	ld (cur_filename),hl
041EA0 11 8D CA 04 2761*  	ld de,filedata
041EA4 01 00 00 01 2762*  	ld bc,65536
041EA8 3E 01       2763*  	ld a,mos_load
041EAA 5B CF       2764*  	RST.LIL 08h
041EAC 21 89 01 00 2765*  	ld hl,BUF_15_026
041EB0 01 09 00 00 2766*  	ld bc,9
041EB4 11 40 00 00 2767*  	ld de,64
041EB8 DD 21 40 02 2768*  	ld ix,576
       00          
041EBD CD D8 BF 04 2769*  	call vdu_load_img
041EC1 C9          2770*  	ret
041EC2             2771*  
041EC2             2772*  ld_15_027:
041EC2 21 04 40 04 2773*  	ld hl,F15_027
041EC6 22 5D BE 04 2774*  	ld (cur_filename),hl
041ECA 11 8D CA 04 2775*  	ld de,filedata
041ECE 01 00 00 01 2776*  	ld bc,65536
041ED2 3E 01       2777*  	ld a,mos_load
041ED4 5B CF       2778*  	RST.LIL 08h
041ED6 21 8A 01 00 2779*  	ld hl,BUF_15_027
041EDA 01 0A 00 00 2780*  	ld bc,10
041EDE 11 3E 00 00 2781*  	ld de,62
041EE2 DD 21 6C 02 2782*  	ld ix,620
       00          
041EE7 CD D8 BF 04 2783*  	call vdu_load_img
041EEB C9          2784*  	ret
041EEC             2785*  
041EEC             2786*  ld_15_028:
041EEC 21 18 40 04 2787*  	ld hl,F15_028
041EF0 22 5D BE 04 2788*  	ld (cur_filename),hl
041EF4 11 8D CA 04 2789*  	ld de,filedata
041EF8 01 00 00 01 2790*  	ld bc,65536
041EFC 3E 01       2791*  	ld a,mos_load
041EFE 5B CF       2792*  	RST.LIL 08h
041F00 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F04 01 1C 00 00 2794*  	ld bc,28
041F08 11 40 00 00 2795*  	ld de,64
041F0C DD 21 00 07 2796*  	ld ix,1792
       00          
041F11 CD D8 BF 04 2797*  	call vdu_load_img
041F15 C9          2798*  	ret
041F16             2799*  
041F16             2800*  ld_15_029:
041F16 21 2C 40 04 2801*  	ld hl,F15_029
041F1A 22 5D BE 04 2802*  	ld (cur_filename),hl
041F1E 11 8D CA 04 2803*  	ld de,filedata
041F22 01 00 00 01 2804*  	ld bc,65536
041F26 3E 01       2805*  	ld a,mos_load
041F28 5B CF       2806*  	RST.LIL 08h
041F2A 21 8C 01 00 2807*  	ld hl,BUF_15_029
041F2E 01 2F 00 00 2808*  	ld bc,47
041F32 11 40 00 00 2809*  	ld de,64
041F36 DD 21 C0 0B 2810*  	ld ix,3008
       00          
041F3B CD D8 BF 04 2811*  	call vdu_load_img
041F3F C9          2812*  	ret
041F40             2813*  
041F40             2814*  ld_15_032:
041F40 21 40 40 04 2815*  	ld hl,F15_032
041F44 22 5D BE 04 2816*  	ld (cur_filename),hl
041F48 11 8D CA 04 2817*  	ld de,filedata
041F4C 01 00 00 01 2818*  	ld bc,65536
041F50 3E 01       2819*  	ld a,mos_load
041F52 5B CF       2820*  	RST.LIL 08h
041F54 21 8D 01 00 2821*  	ld hl,BUF_15_032
041F58 01 41 00 00 2822*  	ld bc,65
041F5C 11 40 00 00 2823*  	ld de,64
041F60 DD 21 40 10 2824*  	ld ix,4160
       00          
041F65 CD D8 BF 04 2825*  	call vdu_load_img
041F69 C9          2826*  	ret
041F6A             2827*  
041F6A             2828*  ld_15_035:
041F6A 21 54 40 04 2829*  	ld hl,F15_035
041F6E 22 5D BE 04 2830*  	ld (cur_filename),hl
041F72 11 8D CA 04 2831*  	ld de,filedata
041F76 01 00 00 01 2832*  	ld bc,65536
041F7A 3E 01       2833*  	ld a,mos_load
041F7C 5B CF       2834*  	RST.LIL 08h
041F7E 21 8E 01 00 2835*  	ld hl,BUF_15_035
041F82 01 3F 00 00 2836*  	ld bc,63
041F86 11 6B 00 00 2837*  	ld de,107
041F8A DD 21 55 1A 2838*  	ld ix,6741
       00          
041F8F CD D8 BF 04 2839*  	call vdu_load_img
041F93 C9          2840*  	ret
041F94             2841*  
041F94             2842*  ld_15_036:
041F94 21 68 40 04 2843*  	ld hl,F15_036
041F98 22 5D BE 04 2844*  	ld (cur_filename),hl
041F9C 11 8D CA 04 2845*  	ld de,filedata
041FA0 01 00 00 01 2846*  	ld bc,65536
041FA4 3E 01       2847*  	ld a,mos_load
041FA6 5B CF       2848*  	RST.LIL 08h
041FA8 21 8F 01 00 2849*  	ld hl,BUF_15_036
041FAC 01 16 00 00 2850*  	ld bc,22
041FB0 11 6B 00 00 2851*  	ld de,107
041FB4 DD 21 32 09 2852*  	ld ix,2354
       00          
041FB9 CD D8 BF 04 2853*  	call vdu_load_img
041FBD C9          2854*  	ret
041FBE             2855*  
041FBE             2856*  ld_15_037:
041FBE 21 7C 40 04 2857*  	ld hl,F15_037
041FC2 22 5D BE 04 2858*  	ld (cur_filename),hl
041FC6 11 8D CA 04 2859*  	ld de,filedata
041FCA 01 00 00 01 2860*  	ld bc,65536
041FCE 3E 01       2861*  	ld a,mos_load
041FD0 5B CF       2862*  	RST.LIL 08h
041FD2 21 90 01 00 2863*  	ld hl,BUF_15_037
041FD6 01 15 00 00 2864*  	ld bc,21
041FDA 11 69 00 00 2865*  	ld de,105
041FDE DD 21 9D 08 2866*  	ld ix,2205
       00          
041FE3 CD D8 BF 04 2867*  	call vdu_load_img
041FE7 C9          2868*  	ret
041FE8             2869*  
041FE8             2870*  ld_15_038:
041FE8 21 90 40 04 2871*  	ld hl,F15_038
041FEC 22 5D BE 04 2872*  	ld (cur_filename),hl
041FF0 11 8D CA 04 2873*  	ld de,filedata
041FF4 01 00 00 01 2874*  	ld bc,65536
041FF8 3E 01       2875*  	ld a,mos_load
041FFA 5B CF       2876*  	RST.LIL 08h
041FFC 21 91 01 00 2877*  	ld hl,BUF_15_038
042000 01 3F 00 00 2878*  	ld bc,63
042004 11 6B 00 00 2879*  	ld de,107
042008 DD 21 55 1A 2880*  	ld ix,6741
       00          
04200D CD D8 BF 04 2881*  	call vdu_load_img
042011 C9          2882*  	ret
042012             2883*  
042012             2884*  ld_15_040:
042012 21 A4 40 04 2885*  	ld hl,F15_040
042016 22 5D BE 04 2886*  	ld (cur_filename),hl
04201A 11 8D CA 04 2887*  	ld de,filedata
04201E 01 00 00 01 2888*  	ld bc,65536
042022 3E 01       2889*  	ld a,mos_load
042024 5B CF       2890*  	RST.LIL 08h
042026 21 92 01 00 2891*  	ld hl,BUF_15_040
04202A 01 6C 00 00 2892*  	ld bc,108
04202E 11 6B 00 00 2893*  	ld de,107
042032 DD 21 24 2D 2894*  	ld ix,11556
       00          
042037 CD D8 BF 04 2895*  	call vdu_load_img
04203B C9          2896*  	ret
04203C             2897*  
04203C             2898*  ld_15_042:
04203C 21 B8 40 04 2899*  	ld hl,F15_042
042040 22 5D BE 04 2900*  	ld (cur_filename),hl
042044 11 8D CA 04 2901*  	ld de,filedata
042048 01 00 00 01 2902*  	ld bc,65536
04204C 3E 01       2903*  	ld a,mos_load
04204E 5B CF       2904*  	RST.LIL 08h
042050 21 93 01 00 2905*  	ld hl,BUF_15_042
042054 01 6A 00 00 2906*  	ld bc,106
042058 11 A0 00 00 2907*  	ld de,160
04205C DD 21 40 42 2908*  	ld ix,16960
       00          
042061 CD D8 BF 04 2909*  	call vdu_load_img
042065 C9          2910*  	ret
042066             2911*  
042066             2912*  ld_15_043:
042066 21 CC 40 04 2913*  	ld hl,F15_043
04206A 22 5D BE 04 2914*  	ld (cur_filename),hl
04206E 11 8D CA 04 2915*  	ld de,filedata
042072 01 00 00 01 2916*  	ld bc,65536
042076 3E 01       2917*  	ld a,mos_load
042078 5B CF       2918*  	RST.LIL 08h
04207A 21 94 01 00 2919*  	ld hl,BUF_15_043
04207E 01 6B 00 00 2920*  	ld bc,107
042082 11 A0 00 00 2921*  	ld de,160
042086 DD 21 E0 42 2922*  	ld ix,17120
       00          
04208B CD D8 BF 04 2923*  	call vdu_load_img
04208F C9          2924*  	ret
042090             2925*  
042090             2926*  ld_15_044:
042090 21 E0 40 04 2927*  	ld hl,F15_044
042094 22 5D BE 04 2928*  	ld (cur_filename),hl
042098 11 8D CA 04 2929*  	ld de,filedata
04209C 01 00 00 01 2930*  	ld bc,65536
0420A0 3E 01       2931*  	ld a,mos_load
0420A2 5B CF       2932*  	RST.LIL 08h
0420A4 21 95 01 00 2933*  	ld hl,BUF_15_044
0420A8 01 40 01 00 2934*  	ld bc,320
0420AC 11 A0 00 00 2935*  	ld de,160
0420B0 DD 21 00 C8 2936*  	ld ix,51200
       00          
0420B5 CD D8 BF 04 2937*  	call vdu_load_img
0420B9 C9          2938*  	ret
0420BA             2939*  
0420BA             2940*  ld_16_004:
0420BA 21 F4 40 04 2941*  	ld hl,F16_004
0420BE 22 5D BE 04 2942*  	ld (cur_filename),hl
0420C2 11 8D CA 04 2943*  	ld de,filedata
0420C6 01 00 00 01 2944*  	ld bc,65536
0420CA 3E 01       2945*  	ld a,mos_load
0420CC 5B CF       2946*  	RST.LIL 08h
0420CE 21 96 01 00 2947*  	ld hl,BUF_16_004
0420D2 01 24 00 00 2948*  	ld bc,36
0420D6 11 23 00 00 2949*  	ld de,35
0420DA DD 21 EC 04 2950*  	ld ix,1260
       00          
0420DF CD D8 BF 04 2951*  	call vdu_load_img
0420E3 C9          2952*  	ret
0420E4             2953*  
0420E4             2954*  ld_16_009:
0420E4 21 08 41 04 2955*  	ld hl,F16_009
0420E8 22 5D BE 04 2956*  	ld (cur_filename),hl
0420EC 11 8D CA 04 2957*  	ld de,filedata
0420F0 01 00 00 01 2958*  	ld bc,65536
0420F4 3E 01       2959*  	ld a,mos_load
0420F6 5B CF       2960*  	RST.LIL 08h
0420F8 21 97 01 00 2961*  	ld hl,BUF_16_009
0420FC 01 23 00 00 2962*  	ld bc,35
042100 11 2D 00 00 2963*  	ld de,45
042104 DD 21 27 06 2964*  	ld ix,1575
       00          
042109 CD D8 BF 04 2965*  	call vdu_load_img
04210D C9          2966*  	ret
04210E             2967*  
04210E             2968*  ld_16_010:
04210E 21 1C 41 04 2969*  	ld hl,F16_010
042112 22 5D BE 04 2970*  	ld (cur_filename),hl
042116 11 8D CA 04 2971*  	ld de,filedata
04211A 01 00 00 01 2972*  	ld bc,65536
04211E 3E 01       2973*  	ld a,mos_load
042120 5B CF       2974*  	RST.LIL 08h
042122 21 98 01 00 2975*  	ld hl,BUF_16_010
042126 01 19 00 00 2976*  	ld bc,25
04212A 11 2D 00 00 2977*  	ld de,45
04212E DD 21 65 04 2978*  	ld ix,1125
       00          
042133 CD D8 BF 04 2979*  	call vdu_load_img
042137 C9          2980*  	ret
042138             2981*  
042138             2982*  ld_16_011:
042138 21 30 41 04 2983*  	ld hl,F16_011
04213C 22 5D BE 04 2984*  	ld (cur_filename),hl
042140 11 8D CA 04 2985*  	ld de,filedata
042144 01 00 00 01 2986*  	ld bc,65536
042148 3E 01       2987*  	ld a,mos_load
04214A 5B CF       2988*  	RST.LIL 08h
04214C 21 99 01 00 2989*  	ld hl,BUF_16_011
042150 01 0F 00 00 2990*  	ld bc,15
042154 11 2D 00 00 2991*  	ld de,45
042158 DD 21 A3 02 2992*  	ld ix,675
       00          
04215D CD D8 BF 04 2993*  	call vdu_load_img
042161 C9          2994*  	ret
042162             2995*  
042162             2996*  ld_16_012:
042162 21 44 41 04 2997*  	ld hl,F16_012
042166 22 5D BE 04 2998*  	ld (cur_filename),hl
04216A 11 8D CA 04 2999*  	ld de,filedata
04216E 01 00 00 01 3000*  	ld bc,65536
042172 3E 01       3001*  	ld a,mos_load
042174 5B CF       3002*  	RST.LIL 08h
042176 21 9A 01 00 3003*  	ld hl,BUF_16_012
04217A 01 05 00 00 3004*  	ld bc,5
04217E 11 2D 00 00 3005*  	ld de,45
042182 DD 21 E1 00 3006*  	ld ix,225
       00          
042187 CD D8 BF 04 3007*  	call vdu_load_img
04218B C9          3008*  	ret
04218C             3009*  
04218C             3010*  ld_16_013:
04218C 21 58 41 04 3011*  	ld hl,F16_013
042190 22 5D BE 04 3012*  	ld (cur_filename),hl
042194 11 8D CA 04 3013*  	ld de,filedata
042198 01 00 00 01 3014*  	ld bc,65536
04219C 3E 01       3015*  	ld a,mos_load
04219E 5B CF       3016*  	RST.LIL 08h
0421A0 21 9B 01 00 3017*  	ld hl,BUF_16_013
0421A4 01 05 00 00 3018*  	ld bc,5
0421A8 11 2B 00 00 3019*  	ld de,43
0421AC DD 21 D7 00 3020*  	ld ix,215
       00          
0421B1 CD D8 BF 04 3021*  	call vdu_load_img
0421B5 C9          3022*  	ret
0421B6             3023*  
0421B6             3024*  ld_16_014:
0421B6 21 6C 41 04 3025*  	ld hl,F16_014
0421BA 22 5D BE 04 3026*  	ld (cur_filename),hl
0421BE 11 8D CA 04 3027*  	ld de,filedata
0421C2 01 00 00 01 3028*  	ld bc,65536
0421C6 3E 01       3029*  	ld a,mos_load
0421C8 5B CF       3030*  	RST.LIL 08h
0421CA 21 9C 01 00 3031*  	ld hl,BUF_16_014
0421CE 01 0F 00 00 3032*  	ld bc,15
0421D2 11 2D 00 00 3033*  	ld de,45
0421D6 DD 21 A3 02 3034*  	ld ix,675
       00          
0421DB CD D8 BF 04 3035*  	call vdu_load_img
0421DF C9          3036*  	ret
0421E0             3037*  
0421E0             3038*  ld_16_015:
0421E0 21 80 41 04 3039*  	ld hl,F16_015
0421E4 22 5D BE 04 3040*  	ld (cur_filename),hl
0421E8 11 8D CA 04 3041*  	ld de,filedata
0421EC 01 00 00 01 3042*  	ld bc,65536
0421F0 3E 01       3043*  	ld a,mos_load
0421F2 5B CF       3044*  	RST.LIL 08h
0421F4 21 9D 01 00 3045*  	ld hl,BUF_16_015
0421F8 01 19 00 00 3046*  	ld bc,25
0421FC 11 2D 00 00 3047*  	ld de,45
042200 DD 21 65 04 3048*  	ld ix,1125
       00          
042205 CD D8 BF 04 3049*  	call vdu_load_img
042209 C9          3050*  	ret
04220A             3051*  
04220A             3052*  ld_16_016:
04220A 21 94 41 04 3053*  	ld hl,F16_016
04220E 22 5D BE 04 3054*  	ld (cur_filename),hl
042212 11 8D CA 04 3055*  	ld de,filedata
042216 01 00 00 01 3056*  	ld bc,65536
04221A 3E 01       3057*  	ld a,mos_load
04221C 5B CF       3058*  	RST.LIL 08h
04221E 21 9E 01 00 3059*  	ld hl,BUF_16_016
042222 01 23 00 00 3060*  	ld bc,35
042226 11 2D 00 00 3061*  	ld de,45
04222A DD 21 27 06 3062*  	ld ix,1575
       00          
04222F CD D8 BF 04 3063*  	call vdu_load_img
042233 C9          3064*  	ret
042234             3065*  
042234             3066*  ld_16_020:
042234 21 A8 41 04 3067*  	ld hl,F16_020
042238 22 5D BE 04 3068*  	ld (cur_filename),hl
04223C 11 8D CA 04 3069*  	ld de,filedata
042240 01 00 00 01 3070*  	ld bc,65536
042244 3E 01       3071*  	ld a,mos_load
042246 5B CF       3072*  	RST.LIL 08h
042248 21 9F 01 00 3073*  	ld hl,BUF_16_020
04224C 01 2E 00 00 3074*  	ld bc,46
042250 11 2D 00 00 3075*  	ld de,45
042254 DD 21 16 08 3076*  	ld ix,2070
       00          
042259 CD D8 BF 04 3077*  	call vdu_load_img
04225D C9          3078*  	ret
04225E             3079*  
04225E             3080*  ld_16_024:
04225E 21 BC 41 04 3081*  	ld hl,F16_024
042262 22 5D BE 04 3082*  	ld (cur_filename),hl
042266 11 8D CA 04 3083*  	ld de,filedata
04226A 01 00 00 01 3084*  	ld bc,65536
04226E 3E 01       3085*  	ld a,mos_load
042270 5B CF       3086*  	RST.LIL 08h
042272 21 A0 01 00 3087*  	ld hl,BUF_16_024
042276 01 2E 00 00 3088*  	ld bc,46
04227A 11 40 00 00 3089*  	ld de,64
04227E DD 21 80 0B 3090*  	ld ix,2944
       00          
042283 CD D8 BF 04 3091*  	call vdu_load_img
042287 C9          3092*  	ret
042288             3093*  
042288             3094*  ld_16_025:
042288 21 D0 41 04 3095*  	ld hl,F16_025
04228C 22 5D BE 04 3096*  	ld (cur_filename),hl
042290 11 8D CA 04 3097*  	ld de,filedata
042294 01 00 00 01 3098*  	ld bc,65536
042298 3E 01       3099*  	ld a,mos_load
04229A 5B CF       3100*  	RST.LIL 08h
04229C 21 A1 01 00 3101*  	ld hl,BUF_16_025
0422A0 01 1C 00 00 3102*  	ld bc,28
0422A4 11 40 00 00 3103*  	ld de,64
0422A8 DD 21 00 07 3104*  	ld ix,1792
       00          
0422AD CD D8 BF 04 3105*  	call vdu_load_img
0422B1 C9          3106*  	ret
0422B2             3107*  
0422B2             3108*  ld_16_026:
0422B2 21 E4 41 04 3109*  	ld hl,F16_026
0422B6 22 5D BE 04 3110*  	ld (cur_filename),hl
0422BA 11 8D CA 04 3111*  	ld de,filedata
0422BE 01 00 00 01 3112*  	ld bc,65536
0422C2 3E 01       3113*  	ld a,mos_load
0422C4 5B CF       3114*  	RST.LIL 08h
0422C6 21 A2 01 00 3115*  	ld hl,BUF_16_026
0422CA 01 09 00 00 3116*  	ld bc,9
0422CE 11 40 00 00 3117*  	ld de,64
0422D2 DD 21 40 02 3118*  	ld ix,576
       00          
0422D7 CD D8 BF 04 3119*  	call vdu_load_img
0422DB C9          3120*  	ret
0422DC             3121*  
0422DC             3122*  ld_16_027:
0422DC 21 F8 41 04 3123*  	ld hl,F16_027
0422E0 22 5D BE 04 3124*  	ld (cur_filename),hl
0422E4 11 8D CA 04 3125*  	ld de,filedata
0422E8 01 00 00 01 3126*  	ld bc,65536
0422EC 3E 01       3127*  	ld a,mos_load
0422EE 5B CF       3128*  	RST.LIL 08h
0422F0 21 A3 01 00 3129*  	ld hl,BUF_16_027
0422F4 01 0A 00 00 3130*  	ld bc,10
0422F8 11 3E 00 00 3131*  	ld de,62
0422FC DD 21 6C 02 3132*  	ld ix,620
       00          
042301 CD D8 BF 04 3133*  	call vdu_load_img
042305 C9          3134*  	ret
042306             3135*  
042306             3136*  ld_16_028:
042306 21 0C 42 04 3137*  	ld hl,F16_028
04230A 22 5D BE 04 3138*  	ld (cur_filename),hl
04230E 11 8D CA 04 3139*  	ld de,filedata
042312 01 00 00 01 3140*  	ld bc,65536
042316 3E 01       3141*  	ld a,mos_load
042318 5B CF       3142*  	RST.LIL 08h
04231A 21 A4 01 00 3143*  	ld hl,BUF_16_028
04231E 01 1C 00 00 3144*  	ld bc,28
042322 11 40 00 00 3145*  	ld de,64
042326 DD 21 00 07 3146*  	ld ix,1792
       00          
04232B CD D8 BF 04 3147*  	call vdu_load_img
04232F C9          3148*  	ret
042330             3149*  
042330             3150*  ld_16_029:
042330 21 20 42 04 3151*  	ld hl,F16_029
042334 22 5D BE 04 3152*  	ld (cur_filename),hl
042338 11 8D CA 04 3153*  	ld de,filedata
04233C 01 00 00 01 3154*  	ld bc,65536
042340 3E 01       3155*  	ld a,mos_load
042342 5B CF       3156*  	RST.LIL 08h
042344 21 A5 01 00 3157*  	ld hl,BUF_16_029
042348 01 2F 00 00 3158*  	ld bc,47
04234C 11 40 00 00 3159*  	ld de,64
042350 DD 21 C0 0B 3160*  	ld ix,3008
       00          
042355 CD D8 BF 04 3161*  	call vdu_load_img
042359 C9          3162*  	ret
04235A             3163*  
04235A             3164*  ld_16_032:
04235A 21 34 42 04 3165*  	ld hl,F16_032
04235E 22 5D BE 04 3166*  	ld (cur_filename),hl
042362 11 8D CA 04 3167*  	ld de,filedata
042366 01 00 00 01 3168*  	ld bc,65536
04236A 3E 01       3169*  	ld a,mos_load
04236C 5B CF       3170*  	RST.LIL 08h
04236E 21 A6 01 00 3171*  	ld hl,BUF_16_032
042372 01 41 00 00 3172*  	ld bc,65
042376 11 40 00 00 3173*  	ld de,64
04237A DD 21 40 10 3174*  	ld ix,4160
       00          
04237F CD D8 BF 04 3175*  	call vdu_load_img
042383 C9          3176*  	ret
042384             3177*  
042384             3178*  ld_16_035:
042384 21 48 42 04 3179*  	ld hl,F16_035
042388 22 5D BE 04 3180*  	ld (cur_filename),hl
04238C 11 8D CA 04 3181*  	ld de,filedata
042390 01 00 00 01 3182*  	ld bc,65536
042394 3E 01       3183*  	ld a,mos_load
042396 5B CF       3184*  	RST.LIL 08h
042398 21 A7 01 00 3185*  	ld hl,BUF_16_035
04239C 01 3F 00 00 3186*  	ld bc,63
0423A0 11 6B 00 00 3187*  	ld de,107
0423A4 DD 21 55 1A 3188*  	ld ix,6741
       00          
0423A9 CD D8 BF 04 3189*  	call vdu_load_img
0423AD C9          3190*  	ret
0423AE             3191*  
0423AE             3192*  ld_16_036:
0423AE 21 5C 42 04 3193*  	ld hl,F16_036
0423B2 22 5D BE 04 3194*  	ld (cur_filename),hl
0423B6 11 8D CA 04 3195*  	ld de,filedata
0423BA 01 00 00 01 3196*  	ld bc,65536
0423BE 3E 01       3197*  	ld a,mos_load
0423C0 5B CF       3198*  	RST.LIL 08h
0423C2 21 A8 01 00 3199*  	ld hl,BUF_16_036
0423C6 01 16 00 00 3200*  	ld bc,22
0423CA 11 6B 00 00 3201*  	ld de,107
0423CE DD 21 32 09 3202*  	ld ix,2354
       00          
0423D3 CD D8 BF 04 3203*  	call vdu_load_img
0423D7 C9          3204*  	ret
0423D8             3205*  
0423D8             3206*  ld_16_037:
0423D8 21 70 42 04 3207*  	ld hl,F16_037
0423DC 22 5D BE 04 3208*  	ld (cur_filename),hl
0423E0 11 8D CA 04 3209*  	ld de,filedata
0423E4 01 00 00 01 3210*  	ld bc,65536
0423E8 3E 01       3211*  	ld a,mos_load
0423EA 5B CF       3212*  	RST.LIL 08h
0423EC 21 A9 01 00 3213*  	ld hl,BUF_16_037
0423F0 01 15 00 00 3214*  	ld bc,21
0423F4 11 69 00 00 3215*  	ld de,105
0423F8 DD 21 9D 08 3216*  	ld ix,2205
       00          
0423FD CD D8 BF 04 3217*  	call vdu_load_img
042401 C9          3218*  	ret
042402             3219*  
042402             3220*  ld_16_038:
042402 21 84 42 04 3221*  	ld hl,F16_038
042406 22 5D BE 04 3222*  	ld (cur_filename),hl
04240A 11 8D CA 04 3223*  	ld de,filedata
04240E 01 00 00 01 3224*  	ld bc,65536
042412 3E 01       3225*  	ld a,mos_load
042414 5B CF       3226*  	RST.LIL 08h
042416 21 AA 01 00 3227*  	ld hl,BUF_16_038
04241A 01 3F 00 00 3228*  	ld bc,63
04241E 11 6B 00 00 3229*  	ld de,107
042422 DD 21 55 1A 3230*  	ld ix,6741
       00          
042427 CD D8 BF 04 3231*  	call vdu_load_img
04242B C9          3232*  	ret
04242C             3233*  
04242C             3234*  ld_16_040:
04242C 21 98 42 04 3235*  	ld hl,F16_040
042430 22 5D BE 04 3236*  	ld (cur_filename),hl
042434 11 8D CA 04 3237*  	ld de,filedata
042438 01 00 00 01 3238*  	ld bc,65536
04243C 3E 01       3239*  	ld a,mos_load
04243E 5B CF       3240*  	RST.LIL 08h
042440 21 AB 01 00 3241*  	ld hl,BUF_16_040
042444 01 6C 00 00 3242*  	ld bc,108
042448 11 6B 00 00 3243*  	ld de,107
04244C DD 21 24 2D 3244*  	ld ix,11556
       00          
042451 CD D8 BF 04 3245*  	call vdu_load_img
042455 C9          3246*  	ret
042456             3247*  
042456             3248*  ld_16_042:
042456 21 AC 42 04 3249*  	ld hl,F16_042
04245A 22 5D BE 04 3250*  	ld (cur_filename),hl
04245E 11 8D CA 04 3251*  	ld de,filedata
042462 01 00 00 01 3252*  	ld bc,65536
042466 3E 01       3253*  	ld a,mos_load
042468 5B CF       3254*  	RST.LIL 08h
04246A 21 AC 01 00 3255*  	ld hl,BUF_16_042
04246E 01 6A 00 00 3256*  	ld bc,106
042472 11 A0 00 00 3257*  	ld de,160
042476 DD 21 40 42 3258*  	ld ix,16960
       00          
04247B CD D8 BF 04 3259*  	call vdu_load_img
04247F C9          3260*  	ret
042480             3261*  
042480             3262*  ld_16_043:
042480 21 C0 42 04 3263*  	ld hl,F16_043
042484 22 5D BE 04 3264*  	ld (cur_filename),hl
042488 11 8D CA 04 3265*  	ld de,filedata
04248C 01 00 00 01 3266*  	ld bc,65536
042490 3E 01       3267*  	ld a,mos_load
042492 5B CF       3268*  	RST.LIL 08h
042494 21 AD 01 00 3269*  	ld hl,BUF_16_043
042498 01 6B 00 00 3270*  	ld bc,107
04249C 11 A0 00 00 3271*  	ld de,160
0424A0 DD 21 E0 42 3272*  	ld ix,17120
       00          
0424A5 CD D8 BF 04 3273*  	call vdu_load_img
0424A9 C9          3274*  	ret
0424AA             3275*  
0424AA             3276*  ld_16_044:
0424AA 21 D4 42 04 3277*  	ld hl,F16_044
0424AE 22 5D BE 04 3278*  	ld (cur_filename),hl
0424B2 11 8D CA 04 3279*  	ld de,filedata
0424B6 01 00 00 01 3280*  	ld bc,65536
0424BA 3E 01       3281*  	ld a,mos_load
0424BC 5B CF       3282*  	RST.LIL 08h
0424BE 21 AE 01 00 3283*  	ld hl,BUF_16_044
0424C2 01 40 01 00 3284*  	ld bc,320
0424C6 11 A0 00 00 3285*  	ld de,160
0424CA DD 21 00 C8 3286*  	ld ix,51200
       00          
0424CF CD D8 BF 04 3287*  	call vdu_load_img
0424D3 C9          3288*  	ret
0424D4             3289*  
0424D4             3290*  ld_17_004:
0424D4 21 E8 42 04 3291*  	ld hl,F17_004
0424D8 22 5D BE 04 3292*  	ld (cur_filename),hl
0424DC 11 8D CA 04 3293*  	ld de,filedata
0424E0 01 00 00 01 3294*  	ld bc,65536
0424E4 3E 01       3295*  	ld a,mos_load
0424E6 5B CF       3296*  	RST.LIL 08h
0424E8 21 AF 01 00 3297*  	ld hl,BUF_17_004
0424EC 01 24 00 00 3298*  	ld bc,36
0424F0 11 23 00 00 3299*  	ld de,35
0424F4 DD 21 EC 04 3300*  	ld ix,1260
       00          
0424F9 CD D8 BF 04 3301*  	call vdu_load_img
0424FD C9          3302*  	ret
0424FE             3303*  
0424FE             3304*  ld_17_009:
0424FE 21 FC 42 04 3305*  	ld hl,F17_009
042502 22 5D BE 04 3306*  	ld (cur_filename),hl
042506 11 8D CA 04 3307*  	ld de,filedata
04250A 01 00 00 01 3308*  	ld bc,65536
04250E 3E 01       3309*  	ld a,mos_load
042510 5B CF       3310*  	RST.LIL 08h
042512 21 B0 01 00 3311*  	ld hl,BUF_17_009
042516 01 23 00 00 3312*  	ld bc,35
04251A 11 2D 00 00 3313*  	ld de,45
04251E DD 21 27 06 3314*  	ld ix,1575
       00          
042523 CD D8 BF 04 3315*  	call vdu_load_img
042527 C9          3316*  	ret
042528             3317*  
042528             3318*  ld_17_010:
042528 21 10 43 04 3319*  	ld hl,F17_010
04252C 22 5D BE 04 3320*  	ld (cur_filename),hl
042530 11 8D CA 04 3321*  	ld de,filedata
042534 01 00 00 01 3322*  	ld bc,65536
042538 3E 01       3323*  	ld a,mos_load
04253A 5B CF       3324*  	RST.LIL 08h
04253C 21 B1 01 00 3325*  	ld hl,BUF_17_010
042540 01 19 00 00 3326*  	ld bc,25
042544 11 2D 00 00 3327*  	ld de,45
042548 DD 21 65 04 3328*  	ld ix,1125
       00          
04254D CD D8 BF 04 3329*  	call vdu_load_img
042551 C9          3330*  	ret
042552             3331*  
042552             3332*  ld_17_011:
042552 21 24 43 04 3333*  	ld hl,F17_011
042556 22 5D BE 04 3334*  	ld (cur_filename),hl
04255A 11 8D CA 04 3335*  	ld de,filedata
04255E 01 00 00 01 3336*  	ld bc,65536
042562 3E 01       3337*  	ld a,mos_load
042564 5B CF       3338*  	RST.LIL 08h
042566 21 B2 01 00 3339*  	ld hl,BUF_17_011
04256A 01 0F 00 00 3340*  	ld bc,15
04256E 11 2D 00 00 3341*  	ld de,45
042572 DD 21 A3 02 3342*  	ld ix,675
       00          
042577 CD D8 BF 04 3343*  	call vdu_load_img
04257B C9          3344*  	ret
04257C             3345*  
04257C             3346*  ld_17_012:
04257C 21 38 43 04 3347*  	ld hl,F17_012
042580 22 5D BE 04 3348*  	ld (cur_filename),hl
042584 11 8D CA 04 3349*  	ld de,filedata
042588 01 00 00 01 3350*  	ld bc,65536
04258C 3E 01       3351*  	ld a,mos_load
04258E 5B CF       3352*  	RST.LIL 08h
042590 21 B3 01 00 3353*  	ld hl,BUF_17_012
042594 01 05 00 00 3354*  	ld bc,5
042598 11 2D 00 00 3355*  	ld de,45
04259C DD 21 E1 00 3356*  	ld ix,225
       00          
0425A1 CD D8 BF 04 3357*  	call vdu_load_img
0425A5 C9          3358*  	ret
0425A6             3359*  
0425A6             3360*  ld_17_013:
0425A6 21 4C 43 04 3361*  	ld hl,F17_013
0425AA 22 5D BE 04 3362*  	ld (cur_filename),hl
0425AE 11 8D CA 04 3363*  	ld de,filedata
0425B2 01 00 00 01 3364*  	ld bc,65536
0425B6 3E 01       3365*  	ld a,mos_load
0425B8 5B CF       3366*  	RST.LIL 08h
0425BA 21 B4 01 00 3367*  	ld hl,BUF_17_013
0425BE 01 05 00 00 3368*  	ld bc,5
0425C2 11 2B 00 00 3369*  	ld de,43
0425C6 DD 21 D7 00 3370*  	ld ix,215
       00          
0425CB CD D8 BF 04 3371*  	call vdu_load_img
0425CF C9          3372*  	ret
0425D0             3373*  
0425D0             3374*  ld_17_014:
0425D0 21 60 43 04 3375*  	ld hl,F17_014
0425D4 22 5D BE 04 3376*  	ld (cur_filename),hl
0425D8 11 8D CA 04 3377*  	ld de,filedata
0425DC 01 00 00 01 3378*  	ld bc,65536
0425E0 3E 01       3379*  	ld a,mos_load
0425E2 5B CF       3380*  	RST.LIL 08h
0425E4 21 B5 01 00 3381*  	ld hl,BUF_17_014
0425E8 01 0F 00 00 3382*  	ld bc,15
0425EC 11 2D 00 00 3383*  	ld de,45
0425F0 DD 21 A3 02 3384*  	ld ix,675
       00          
0425F5 CD D8 BF 04 3385*  	call vdu_load_img
0425F9 C9          3386*  	ret
0425FA             3387*  
0425FA             3388*  ld_17_015:
0425FA 21 74 43 04 3389*  	ld hl,F17_015
0425FE 22 5D BE 04 3390*  	ld (cur_filename),hl
042602 11 8D CA 04 3391*  	ld de,filedata
042606 01 00 00 01 3392*  	ld bc,65536
04260A 3E 01       3393*  	ld a,mos_load
04260C 5B CF       3394*  	RST.LIL 08h
04260E 21 B6 01 00 3395*  	ld hl,BUF_17_015
042612 01 19 00 00 3396*  	ld bc,25
042616 11 2D 00 00 3397*  	ld de,45
04261A DD 21 65 04 3398*  	ld ix,1125
       00          
04261F CD D8 BF 04 3399*  	call vdu_load_img
042623 C9          3400*  	ret
042624             3401*  
042624             3402*  ld_17_016:
042624 21 88 43 04 3403*  	ld hl,F17_016
042628 22 5D BE 04 3404*  	ld (cur_filename),hl
04262C 11 8D CA 04 3405*  	ld de,filedata
042630 01 00 00 01 3406*  	ld bc,65536
042634 3E 01       3407*  	ld a,mos_load
042636 5B CF       3408*  	RST.LIL 08h
042638 21 B7 01 00 3409*  	ld hl,BUF_17_016
04263C 01 23 00 00 3410*  	ld bc,35
042640 11 2D 00 00 3411*  	ld de,45
042644 DD 21 27 06 3412*  	ld ix,1575
       00          
042649 CD D8 BF 04 3413*  	call vdu_load_img
04264D C9          3414*  	ret
04264E             3415*  
04264E             3416*  ld_17_020:
04264E 21 9C 43 04 3417*  	ld hl,F17_020
042652 22 5D BE 04 3418*  	ld (cur_filename),hl
042656 11 8D CA 04 3419*  	ld de,filedata
04265A 01 00 00 01 3420*  	ld bc,65536
04265E 3E 01       3421*  	ld a,mos_load
042660 5B CF       3422*  	RST.LIL 08h
042662 21 B8 01 00 3423*  	ld hl,BUF_17_020
042666 01 2E 00 00 3424*  	ld bc,46
04266A 11 2D 00 00 3425*  	ld de,45
04266E DD 21 16 08 3426*  	ld ix,2070
       00          
042673 CD D8 BF 04 3427*  	call vdu_load_img
042677 C9          3428*  	ret
042678             3429*  
042678             3430*  ld_17_024:
042678 21 B0 43 04 3431*  	ld hl,F17_024
04267C 22 5D BE 04 3432*  	ld (cur_filename),hl
042680 11 8D CA 04 3433*  	ld de,filedata
042684 01 00 00 01 3434*  	ld bc,65536
042688 3E 01       3435*  	ld a,mos_load
04268A 5B CF       3436*  	RST.LIL 08h
04268C 21 B9 01 00 3437*  	ld hl,BUF_17_024
042690 01 2E 00 00 3438*  	ld bc,46
042694 11 40 00 00 3439*  	ld de,64
042698 DD 21 80 0B 3440*  	ld ix,2944
       00          
04269D CD D8 BF 04 3441*  	call vdu_load_img
0426A1 C9          3442*  	ret
0426A2             3443*  
0426A2             3444*  ld_17_025:
0426A2 21 C4 43 04 3445*  	ld hl,F17_025
0426A6 22 5D BE 04 3446*  	ld (cur_filename),hl
0426AA 11 8D CA 04 3447*  	ld de,filedata
0426AE 01 00 00 01 3448*  	ld bc,65536
0426B2 3E 01       3449*  	ld a,mos_load
0426B4 5B CF       3450*  	RST.LIL 08h
0426B6 21 BA 01 00 3451*  	ld hl,BUF_17_025
0426BA 01 1C 00 00 3452*  	ld bc,28
0426BE 11 40 00 00 3453*  	ld de,64
0426C2 DD 21 00 07 3454*  	ld ix,1792
       00          
0426C7 CD D8 BF 04 3455*  	call vdu_load_img
0426CB C9          3456*  	ret
0426CC             3457*  
0426CC             3458*  ld_17_026:
0426CC 21 D8 43 04 3459*  	ld hl,F17_026
0426D0 22 5D BE 04 3460*  	ld (cur_filename),hl
0426D4 11 8D CA 04 3461*  	ld de,filedata
0426D8 01 00 00 01 3462*  	ld bc,65536
0426DC 3E 01       3463*  	ld a,mos_load
0426DE 5B CF       3464*  	RST.LIL 08h
0426E0 21 BB 01 00 3465*  	ld hl,BUF_17_026
0426E4 01 09 00 00 3466*  	ld bc,9
0426E8 11 40 00 00 3467*  	ld de,64
0426EC DD 21 40 02 3468*  	ld ix,576
       00          
0426F1 CD D8 BF 04 3469*  	call vdu_load_img
0426F5 C9          3470*  	ret
0426F6             3471*  
0426F6             3472*  ld_17_027:
0426F6 21 EC 43 04 3473*  	ld hl,F17_027
0426FA 22 5D BE 04 3474*  	ld (cur_filename),hl
0426FE 11 8D CA 04 3475*  	ld de,filedata
042702 01 00 00 01 3476*  	ld bc,65536
042706 3E 01       3477*  	ld a,mos_load
042708 5B CF       3478*  	RST.LIL 08h
04270A 21 BC 01 00 3479*  	ld hl,BUF_17_027
04270E 01 0A 00 00 3480*  	ld bc,10
042712 11 3E 00 00 3481*  	ld de,62
042716 DD 21 6C 02 3482*  	ld ix,620
       00          
04271B CD D8 BF 04 3483*  	call vdu_load_img
04271F C9          3484*  	ret
042720             3485*  
042720             3486*  ld_17_028:
042720 21 00 44 04 3487*  	ld hl,F17_028
042724 22 5D BE 04 3488*  	ld (cur_filename),hl
042728 11 8D CA 04 3489*  	ld de,filedata
04272C 01 00 00 01 3490*  	ld bc,65536
042730 3E 01       3491*  	ld a,mos_load
042732 5B CF       3492*  	RST.LIL 08h
042734 21 BD 01 00 3493*  	ld hl,BUF_17_028
042738 01 1C 00 00 3494*  	ld bc,28
04273C 11 40 00 00 3495*  	ld de,64
042740 DD 21 00 07 3496*  	ld ix,1792
       00          
042745 CD D8 BF 04 3497*  	call vdu_load_img
042749 C9          3498*  	ret
04274A             3499*  
04274A             3500*  ld_17_029:
04274A 21 14 44 04 3501*  	ld hl,F17_029
04274E 22 5D BE 04 3502*  	ld (cur_filename),hl
042752 11 8D CA 04 3503*  	ld de,filedata
042756 01 00 00 01 3504*  	ld bc,65536
04275A 3E 01       3505*  	ld a,mos_load
04275C 5B CF       3506*  	RST.LIL 08h
04275E 21 BE 01 00 3507*  	ld hl,BUF_17_029
042762 01 2F 00 00 3508*  	ld bc,47
042766 11 40 00 00 3509*  	ld de,64
04276A DD 21 C0 0B 3510*  	ld ix,3008
       00          
04276F CD D8 BF 04 3511*  	call vdu_load_img
042773 C9          3512*  	ret
042774             3513*  
042774             3514*  ld_17_032:
042774 21 28 44 04 3515*  	ld hl,F17_032
042778 22 5D BE 04 3516*  	ld (cur_filename),hl
04277C 11 8D CA 04 3517*  	ld de,filedata
042780 01 00 00 01 3518*  	ld bc,65536
042784 3E 01       3519*  	ld a,mos_load
042786 5B CF       3520*  	RST.LIL 08h
042788 21 BF 01 00 3521*  	ld hl,BUF_17_032
04278C 01 41 00 00 3522*  	ld bc,65
042790 11 40 00 00 3523*  	ld de,64
042794 DD 21 40 10 3524*  	ld ix,4160
       00          
042799 CD D8 BF 04 3525*  	call vdu_load_img
04279D C9          3526*  	ret
04279E             3527*  
04279E             3528*  ld_17_035:
04279E 21 3C 44 04 3529*  	ld hl,F17_035
0427A2 22 5D BE 04 3530*  	ld (cur_filename),hl
0427A6 11 8D CA 04 3531*  	ld de,filedata
0427AA 01 00 00 01 3532*  	ld bc,65536
0427AE 3E 01       3533*  	ld a,mos_load
0427B0 5B CF       3534*  	RST.LIL 08h
0427B2 21 C0 01 00 3535*  	ld hl,BUF_17_035
0427B6 01 3F 00 00 3536*  	ld bc,63
0427BA 11 6B 00 00 3537*  	ld de,107
0427BE DD 21 55 1A 3538*  	ld ix,6741
       00          
0427C3 CD D8 BF 04 3539*  	call vdu_load_img
0427C7 C9          3540*  	ret
0427C8             3541*  
0427C8             3542*  ld_17_036:
0427C8 21 50 44 04 3543*  	ld hl,F17_036
0427CC 22 5D BE 04 3544*  	ld (cur_filename),hl
0427D0 11 8D CA 04 3545*  	ld de,filedata
0427D4 01 00 00 01 3546*  	ld bc,65536
0427D8 3E 01       3547*  	ld a,mos_load
0427DA 5B CF       3548*  	RST.LIL 08h
0427DC 21 C1 01 00 3549*  	ld hl,BUF_17_036
0427E0 01 16 00 00 3550*  	ld bc,22
0427E4 11 6B 00 00 3551*  	ld de,107
0427E8 DD 21 32 09 3552*  	ld ix,2354
       00          
0427ED CD D8 BF 04 3553*  	call vdu_load_img
0427F1 C9          3554*  	ret
0427F2             3555*  
0427F2             3556*  ld_17_037:
0427F2 21 64 44 04 3557*  	ld hl,F17_037
0427F6 22 5D BE 04 3558*  	ld (cur_filename),hl
0427FA 11 8D CA 04 3559*  	ld de,filedata
0427FE 01 00 00 01 3560*  	ld bc,65536
042802 3E 01       3561*  	ld a,mos_load
042804 5B CF       3562*  	RST.LIL 08h
042806 21 C2 01 00 3563*  	ld hl,BUF_17_037
04280A 01 15 00 00 3564*  	ld bc,21
04280E 11 69 00 00 3565*  	ld de,105
042812 DD 21 9D 08 3566*  	ld ix,2205
       00          
042817 CD D8 BF 04 3567*  	call vdu_load_img
04281B C9          3568*  	ret
04281C             3569*  
04281C             3570*  ld_17_038:
04281C 21 78 44 04 3571*  	ld hl,F17_038
042820 22 5D BE 04 3572*  	ld (cur_filename),hl
042824 11 8D CA 04 3573*  	ld de,filedata
042828 01 00 00 01 3574*  	ld bc,65536
04282C 3E 01       3575*  	ld a,mos_load
04282E 5B CF       3576*  	RST.LIL 08h
042830 21 C3 01 00 3577*  	ld hl,BUF_17_038
042834 01 3F 00 00 3578*  	ld bc,63
042838 11 6B 00 00 3579*  	ld de,107
04283C DD 21 55 1A 3580*  	ld ix,6741
       00          
042841 CD D8 BF 04 3581*  	call vdu_load_img
042845 C9          3582*  	ret
042846             3583*  
042846             3584*  ld_17_040:
042846 21 8C 44 04 3585*  	ld hl,F17_040
04284A 22 5D BE 04 3586*  	ld (cur_filename),hl
04284E 11 8D CA 04 3587*  	ld de,filedata
042852 01 00 00 01 3588*  	ld bc,65536
042856 3E 01       3589*  	ld a,mos_load
042858 5B CF       3590*  	RST.LIL 08h
04285A 21 C4 01 00 3591*  	ld hl,BUF_17_040
04285E 01 6C 00 00 3592*  	ld bc,108
042862 11 6B 00 00 3593*  	ld de,107
042866 DD 21 24 2D 3594*  	ld ix,11556
       00          
04286B CD D8 BF 04 3595*  	call vdu_load_img
04286F C9          3596*  	ret
042870             3597*  
042870             3598*  ld_17_042:
042870 21 A0 44 04 3599*  	ld hl,F17_042
042874 22 5D BE 04 3600*  	ld (cur_filename),hl
042878 11 8D CA 04 3601*  	ld de,filedata
04287C 01 00 00 01 3602*  	ld bc,65536
042880 3E 01       3603*  	ld a,mos_load
042882 5B CF       3604*  	RST.LIL 08h
042884 21 C5 01 00 3605*  	ld hl,BUF_17_042
042888 01 6A 00 00 3606*  	ld bc,106
04288C 11 A0 00 00 3607*  	ld de,160
042890 DD 21 40 42 3608*  	ld ix,16960
       00          
042895 CD D8 BF 04 3609*  	call vdu_load_img
042899 C9          3610*  	ret
04289A             3611*  
04289A             3612*  ld_17_043:
04289A 21 B4 44 04 3613*  	ld hl,F17_043
04289E 22 5D BE 04 3614*  	ld (cur_filename),hl
0428A2 11 8D CA 04 3615*  	ld de,filedata
0428A6 01 00 00 01 3616*  	ld bc,65536
0428AA 3E 01       3617*  	ld a,mos_load
0428AC 5B CF       3618*  	RST.LIL 08h
0428AE 21 C6 01 00 3619*  	ld hl,BUF_17_043
0428B2 01 6B 00 00 3620*  	ld bc,107
0428B6 11 A0 00 00 3621*  	ld de,160
0428BA DD 21 E0 42 3622*  	ld ix,17120
       00          
0428BF CD D8 BF 04 3623*  	call vdu_load_img
0428C3 C9          3624*  	ret
0428C4             3625*  
0428C4             3626*  ld_17_044:
0428C4 21 C8 44 04 3627*  	ld hl,F17_044
0428C8 22 5D BE 04 3628*  	ld (cur_filename),hl
0428CC 11 8D CA 04 3629*  	ld de,filedata
0428D0 01 00 00 01 3630*  	ld bc,65536
0428D4 3E 01       3631*  	ld a,mos_load
0428D6 5B CF       3632*  	RST.LIL 08h
0428D8 21 C7 01 00 3633*  	ld hl,BUF_17_044
0428DC 01 40 01 00 3634*  	ld bc,320
0428E0 11 A0 00 00 3635*  	ld de,160
0428E4 DD 21 00 C8 3636*  	ld ix,51200
       00          
0428E9 CD D8 BF 04 3637*  	call vdu_load_img
0428ED C9          3638*  	ret
0428EE             3639*  
0428EE             3640*  ld_57_004:
0428EE 21 DC 44 04 3641*  	ld hl,F57_004
0428F2 22 5D BE 04 3642*  	ld (cur_filename),hl
0428F6 11 8D CA 04 3643*  	ld de,filedata
0428FA 01 00 00 01 3644*  	ld bc,65536
0428FE 3E 01       3645*  	ld a,mos_load
042900 5B CF       3646*  	RST.LIL 08h
042902 21 C8 01 00 3647*  	ld hl,BUF_57_004
042906 01 24 00 00 3648*  	ld bc,36
04290A 11 23 00 00 3649*  	ld de,35
04290E DD 21 EC 04 3650*  	ld ix,1260
       00          
042913 CD D8 BF 04 3651*  	call vdu_load_img
042917 C9          3652*  	ret
042918             3653*  
042918             3654*  ld_57_009:
042918 21 F0 44 04 3655*  	ld hl,F57_009
04291C 22 5D BE 04 3656*  	ld (cur_filename),hl
042920 11 8D CA 04 3657*  	ld de,filedata
042924 01 00 00 01 3658*  	ld bc,65536
042928 3E 01       3659*  	ld a,mos_load
04292A 5B CF       3660*  	RST.LIL 08h
04292C 21 C9 01 00 3661*  	ld hl,BUF_57_009
042930 01 23 00 00 3662*  	ld bc,35
042934 11 2D 00 00 3663*  	ld de,45
042938 DD 21 27 06 3664*  	ld ix,1575
       00          
04293D CD D8 BF 04 3665*  	call vdu_load_img
042941 C9          3666*  	ret
042942             3667*  
042942             3668*  ld_57_010:
042942 21 04 45 04 3669*  	ld hl,F57_010
042946 22 5D BE 04 3670*  	ld (cur_filename),hl
04294A 11 8D CA 04 3671*  	ld de,filedata
04294E 01 00 00 01 3672*  	ld bc,65536
042952 3E 01       3673*  	ld a,mos_load
042954 5B CF       3674*  	RST.LIL 08h
042956 21 CA 01 00 3675*  	ld hl,BUF_57_010
04295A 01 19 00 00 3676*  	ld bc,25
04295E 11 2D 00 00 3677*  	ld de,45
042962 DD 21 65 04 3678*  	ld ix,1125
       00          
042967 CD D8 BF 04 3679*  	call vdu_load_img
04296B C9          3680*  	ret
04296C             3681*  
04296C             3682*  ld_57_011:
04296C 21 18 45 04 3683*  	ld hl,F57_011
042970 22 5D BE 04 3684*  	ld (cur_filename),hl
042974 11 8D CA 04 3685*  	ld de,filedata
042978 01 00 00 01 3686*  	ld bc,65536
04297C 3E 01       3687*  	ld a,mos_load
04297E 5B CF       3688*  	RST.LIL 08h
042980 21 CB 01 00 3689*  	ld hl,BUF_57_011
042984 01 0F 00 00 3690*  	ld bc,15
042988 11 2D 00 00 3691*  	ld de,45
04298C DD 21 A3 02 3692*  	ld ix,675
       00          
042991 CD D8 BF 04 3693*  	call vdu_load_img
042995 C9          3694*  	ret
042996             3695*  
042996             3696*  ld_57_012:
042996 21 2C 45 04 3697*  	ld hl,F57_012
04299A 22 5D BE 04 3698*  	ld (cur_filename),hl
04299E 11 8D CA 04 3699*  	ld de,filedata
0429A2 01 00 00 01 3700*  	ld bc,65536
0429A6 3E 01       3701*  	ld a,mos_load
0429A8 5B CF       3702*  	RST.LIL 08h
0429AA 21 CC 01 00 3703*  	ld hl,BUF_57_012
0429AE 01 05 00 00 3704*  	ld bc,5
0429B2 11 2D 00 00 3705*  	ld de,45
0429B6 DD 21 E1 00 3706*  	ld ix,225
       00          
0429BB CD D8 BF 04 3707*  	call vdu_load_img
0429BF C9          3708*  	ret
0429C0             3709*  
0429C0             3710*  ld_57_013:
0429C0 21 40 45 04 3711*  	ld hl,F57_013
0429C4 22 5D BE 04 3712*  	ld (cur_filename),hl
0429C8 11 8D CA 04 3713*  	ld de,filedata
0429CC 01 00 00 01 3714*  	ld bc,65536
0429D0 3E 01       3715*  	ld a,mos_load
0429D2 5B CF       3716*  	RST.LIL 08h
0429D4 21 CD 01 00 3717*  	ld hl,BUF_57_013
0429D8 01 05 00 00 3718*  	ld bc,5
0429DC 11 2B 00 00 3719*  	ld de,43
0429E0 DD 21 D7 00 3720*  	ld ix,215
       00          
0429E5 CD D8 BF 04 3721*  	call vdu_load_img
0429E9 C9          3722*  	ret
0429EA             3723*  
0429EA             3724*  ld_57_014:
0429EA 21 54 45 04 3725*  	ld hl,F57_014
0429EE 22 5D BE 04 3726*  	ld (cur_filename),hl
0429F2 11 8D CA 04 3727*  	ld de,filedata
0429F6 01 00 00 01 3728*  	ld bc,65536
0429FA 3E 01       3729*  	ld a,mos_load
0429FC 5B CF       3730*  	RST.LIL 08h
0429FE 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A02 01 0F 00 00 3732*  	ld bc,15
042A06 11 2D 00 00 3733*  	ld de,45
042A0A DD 21 A3 02 3734*  	ld ix,675
       00          
042A0F CD D8 BF 04 3735*  	call vdu_load_img
042A13 C9          3736*  	ret
042A14             3737*  
042A14             3738*  ld_57_015:
042A14 21 68 45 04 3739*  	ld hl,F57_015
042A18 22 5D BE 04 3740*  	ld (cur_filename),hl
042A1C 11 8D CA 04 3741*  	ld de,filedata
042A20 01 00 00 01 3742*  	ld bc,65536
042A24 3E 01       3743*  	ld a,mos_load
042A26 5B CF       3744*  	RST.LIL 08h
042A28 21 CF 01 00 3745*  	ld hl,BUF_57_015
042A2C 01 19 00 00 3746*  	ld bc,25
042A30 11 2D 00 00 3747*  	ld de,45
042A34 DD 21 65 04 3748*  	ld ix,1125
       00          
042A39 CD D8 BF 04 3749*  	call vdu_load_img
042A3D C9          3750*  	ret
042A3E             3751*  
042A3E             3752*  ld_57_016:
042A3E 21 7C 45 04 3753*  	ld hl,F57_016
042A42 22 5D BE 04 3754*  	ld (cur_filename),hl
042A46 11 8D CA 04 3755*  	ld de,filedata
042A4A 01 00 00 01 3756*  	ld bc,65536
042A4E 3E 01       3757*  	ld a,mos_load
042A50 5B CF       3758*  	RST.LIL 08h
042A52 21 D0 01 00 3759*  	ld hl,BUF_57_016
042A56 01 23 00 00 3760*  	ld bc,35
042A5A 11 2D 00 00 3761*  	ld de,45
042A5E DD 21 27 06 3762*  	ld ix,1575
       00          
042A63 CD D8 BF 04 3763*  	call vdu_load_img
042A67 C9          3764*  	ret
042A68             3765*  
042A68             3766*  ld_57_020:
042A68 21 90 45 04 3767*  	ld hl,F57_020
042A6C 22 5D BE 04 3768*  	ld (cur_filename),hl
042A70 11 8D CA 04 3769*  	ld de,filedata
042A74 01 00 00 01 3770*  	ld bc,65536
042A78 3E 01       3771*  	ld a,mos_load
042A7A 5B CF       3772*  	RST.LIL 08h
042A7C 21 D1 01 00 3773*  	ld hl,BUF_57_020
042A80 01 2E 00 00 3774*  	ld bc,46
042A84 11 2D 00 00 3775*  	ld de,45
042A88 DD 21 16 08 3776*  	ld ix,2070
       00          
042A8D CD D8 BF 04 3777*  	call vdu_load_img
042A91 C9          3778*  	ret
042A92             3779*  
042A92             3780*  ld_57_024:
042A92 21 A4 45 04 3781*  	ld hl,F57_024
042A96 22 5D BE 04 3782*  	ld (cur_filename),hl
042A9A 11 8D CA 04 3783*  	ld de,filedata
042A9E 01 00 00 01 3784*  	ld bc,65536
042AA2 3E 01       3785*  	ld a,mos_load
042AA4 5B CF       3786*  	RST.LIL 08h
042AA6 21 D2 01 00 3787*  	ld hl,BUF_57_024
042AAA 01 2E 00 00 3788*  	ld bc,46
042AAE 11 40 00 00 3789*  	ld de,64
042AB2 DD 21 80 0B 3790*  	ld ix,2944
       00          
042AB7 CD D8 BF 04 3791*  	call vdu_load_img
042ABB C9          3792*  	ret
042ABC             3793*  
042ABC             3794*  ld_57_025:
042ABC 21 B8 45 04 3795*  	ld hl,F57_025
042AC0 22 5D BE 04 3796*  	ld (cur_filename),hl
042AC4 11 8D CA 04 3797*  	ld de,filedata
042AC8 01 00 00 01 3798*  	ld bc,65536
042ACC 3E 01       3799*  	ld a,mos_load
042ACE 5B CF       3800*  	RST.LIL 08h
042AD0 21 D3 01 00 3801*  	ld hl,BUF_57_025
042AD4 01 1C 00 00 3802*  	ld bc,28
042AD8 11 40 00 00 3803*  	ld de,64
042ADC DD 21 00 07 3804*  	ld ix,1792
       00          
042AE1 CD D8 BF 04 3805*  	call vdu_load_img
042AE5 C9          3806*  	ret
042AE6             3807*  
042AE6             3808*  ld_57_026:
042AE6 21 CC 45 04 3809*  	ld hl,F57_026
042AEA 22 5D BE 04 3810*  	ld (cur_filename),hl
042AEE 11 8D CA 04 3811*  	ld de,filedata
042AF2 01 00 00 01 3812*  	ld bc,65536
042AF6 3E 01       3813*  	ld a,mos_load
042AF8 5B CF       3814*  	RST.LIL 08h
042AFA 21 D4 01 00 3815*  	ld hl,BUF_57_026
042AFE 01 09 00 00 3816*  	ld bc,9
042B02 11 40 00 00 3817*  	ld de,64
042B06 DD 21 40 02 3818*  	ld ix,576
       00          
042B0B CD D8 BF 04 3819*  	call vdu_load_img
042B0F C9          3820*  	ret
042B10             3821*  
042B10             3822*  ld_57_027:
042B10 21 E0 45 04 3823*  	ld hl,F57_027
042B14 22 5D BE 04 3824*  	ld (cur_filename),hl
042B18 11 8D CA 04 3825*  	ld de,filedata
042B1C 01 00 00 01 3826*  	ld bc,65536
042B20 3E 01       3827*  	ld a,mos_load
042B22 5B CF       3828*  	RST.LIL 08h
042B24 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B28 01 0A 00 00 3830*  	ld bc,10
042B2C 11 3E 00 00 3831*  	ld de,62
042B30 DD 21 6C 02 3832*  	ld ix,620
       00          
042B35 CD D8 BF 04 3833*  	call vdu_load_img
042B39 C9          3834*  	ret
042B3A             3835*  
042B3A             3836*  ld_57_028:
042B3A 21 F4 45 04 3837*  	ld hl,F57_028
042B3E 22 5D BE 04 3838*  	ld (cur_filename),hl
042B42 11 8D CA 04 3839*  	ld de,filedata
042B46 01 00 00 01 3840*  	ld bc,65536
042B4A 3E 01       3841*  	ld a,mos_load
042B4C 5B CF       3842*  	RST.LIL 08h
042B4E 21 D6 01 00 3843*  	ld hl,BUF_57_028
042B52 01 1C 00 00 3844*  	ld bc,28
042B56 11 40 00 00 3845*  	ld de,64
042B5A DD 21 00 07 3846*  	ld ix,1792
       00          
042B5F CD D8 BF 04 3847*  	call vdu_load_img
042B63 C9          3848*  	ret
042B64             3849*  
042B64             3850*  ld_57_029:
042B64 21 08 46 04 3851*  	ld hl,F57_029
042B68 22 5D BE 04 3852*  	ld (cur_filename),hl
042B6C 11 8D CA 04 3853*  	ld de,filedata
042B70 01 00 00 01 3854*  	ld bc,65536
042B74 3E 01       3855*  	ld a,mos_load
042B76 5B CF       3856*  	RST.LIL 08h
042B78 21 D7 01 00 3857*  	ld hl,BUF_57_029
042B7C 01 2F 00 00 3858*  	ld bc,47
042B80 11 40 00 00 3859*  	ld de,64
042B84 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042B89 CD D8 BF 04 3861*  	call vdu_load_img
042B8D C9          3862*  	ret
042B8E             3863*  
042B8E             3864*  ld_57_032:
042B8E 21 1C 46 04 3865*  	ld hl,F57_032
042B92 22 5D BE 04 3866*  	ld (cur_filename),hl
042B96 11 8D CA 04 3867*  	ld de,filedata
042B9A 01 00 00 01 3868*  	ld bc,65536
042B9E 3E 01       3869*  	ld a,mos_load
042BA0 5B CF       3870*  	RST.LIL 08h
042BA2 21 D8 01 00 3871*  	ld hl,BUF_57_032
042BA6 01 41 00 00 3872*  	ld bc,65
042BAA 11 40 00 00 3873*  	ld de,64
042BAE DD 21 40 10 3874*  	ld ix,4160
       00          
042BB3 CD D8 BF 04 3875*  	call vdu_load_img
042BB7 C9          3876*  	ret
042BB8             3877*  
042BB8             3878*  ld_57_035:
042BB8 21 30 46 04 3879*  	ld hl,F57_035
042BBC 22 5D BE 04 3880*  	ld (cur_filename),hl
042BC0 11 8D CA 04 3881*  	ld de,filedata
042BC4 01 00 00 01 3882*  	ld bc,65536
042BC8 3E 01       3883*  	ld a,mos_load
042BCA 5B CF       3884*  	RST.LIL 08h
042BCC 21 D9 01 00 3885*  	ld hl,BUF_57_035
042BD0 01 3F 00 00 3886*  	ld bc,63
042BD4 11 6B 00 00 3887*  	ld de,107
042BD8 DD 21 55 1A 3888*  	ld ix,6741
       00          
042BDD CD D8 BF 04 3889*  	call vdu_load_img
042BE1 C9          3890*  	ret
042BE2             3891*  
042BE2             3892*  ld_57_036:
042BE2 21 44 46 04 3893*  	ld hl,F57_036
042BE6 22 5D BE 04 3894*  	ld (cur_filename),hl
042BEA 11 8D CA 04 3895*  	ld de,filedata
042BEE 01 00 00 01 3896*  	ld bc,65536
042BF2 3E 01       3897*  	ld a,mos_load
042BF4 5B CF       3898*  	RST.LIL 08h
042BF6 21 DA 01 00 3899*  	ld hl,BUF_57_036
042BFA 01 16 00 00 3900*  	ld bc,22
042BFE 11 6B 00 00 3901*  	ld de,107
042C02 DD 21 32 09 3902*  	ld ix,2354
       00          
042C07 CD D8 BF 04 3903*  	call vdu_load_img
042C0B C9          3904*  	ret
042C0C             3905*  
042C0C             3906*  ld_57_037:
042C0C 21 58 46 04 3907*  	ld hl,F57_037
042C10 22 5D BE 04 3908*  	ld (cur_filename),hl
042C14 11 8D CA 04 3909*  	ld de,filedata
042C18 01 00 00 01 3910*  	ld bc,65536
042C1C 3E 01       3911*  	ld a,mos_load
042C1E 5B CF       3912*  	RST.LIL 08h
042C20 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C24 01 15 00 00 3914*  	ld bc,21
042C28 11 69 00 00 3915*  	ld de,105
042C2C DD 21 9D 08 3916*  	ld ix,2205
       00          
042C31 CD D8 BF 04 3917*  	call vdu_load_img
042C35 C9          3918*  	ret
042C36             3919*  
042C36             3920*  ld_57_038:
042C36 21 6C 46 04 3921*  	ld hl,F57_038
042C3A 22 5D BE 04 3922*  	ld (cur_filename),hl
042C3E 11 8D CA 04 3923*  	ld de,filedata
042C42 01 00 00 01 3924*  	ld bc,65536
042C46 3E 01       3925*  	ld a,mos_load
042C48 5B CF       3926*  	RST.LIL 08h
042C4A 21 DC 01 00 3927*  	ld hl,BUF_57_038
042C4E 01 3F 00 00 3928*  	ld bc,63
042C52 11 6B 00 00 3929*  	ld de,107
042C56 DD 21 55 1A 3930*  	ld ix,6741
       00          
042C5B CD D8 BF 04 3931*  	call vdu_load_img
042C5F C9          3932*  	ret
042C60             3933*  
042C60             3934*  ld_57_040:
042C60 21 80 46 04 3935*  	ld hl,F57_040
042C64 22 5D BE 04 3936*  	ld (cur_filename),hl
042C68 11 8D CA 04 3937*  	ld de,filedata
042C6C 01 00 00 01 3938*  	ld bc,65536
042C70 3E 01       3939*  	ld a,mos_load
042C72 5B CF       3940*  	RST.LIL 08h
042C74 21 DD 01 00 3941*  	ld hl,BUF_57_040
042C78 01 6C 00 00 3942*  	ld bc,108
042C7C 11 6B 00 00 3943*  	ld de,107
042C80 DD 21 24 2D 3944*  	ld ix,11556
       00          
042C85 CD D8 BF 04 3945*  	call vdu_load_img
042C89 C9          3946*  	ret
042C8A             3947*  
042C8A             3948*  ld_57_042:
042C8A 21 94 46 04 3949*  	ld hl,F57_042
042C8E 22 5D BE 04 3950*  	ld (cur_filename),hl
042C92 11 8D CA 04 3951*  	ld de,filedata
042C96 01 00 00 01 3952*  	ld bc,65536
042C9A 3E 01       3953*  	ld a,mos_load
042C9C 5B CF       3954*  	RST.LIL 08h
042C9E 21 DE 01 00 3955*  	ld hl,BUF_57_042
042CA2 01 6A 00 00 3956*  	ld bc,106
042CA6 11 A0 00 00 3957*  	ld de,160
042CAA DD 21 40 42 3958*  	ld ix,16960
       00          
042CAF CD D8 BF 04 3959*  	call vdu_load_img
042CB3 C9          3960*  	ret
042CB4             3961*  
042CB4             3962*  ld_57_043:
042CB4 21 A8 46 04 3963*  	ld hl,F57_043
042CB8 22 5D BE 04 3964*  	ld (cur_filename),hl
042CBC 11 8D CA 04 3965*  	ld de,filedata
042CC0 01 00 00 01 3966*  	ld bc,65536
042CC4 3E 01       3967*  	ld a,mos_load
042CC6 5B CF       3968*  	RST.LIL 08h
042CC8 21 DF 01 00 3969*  	ld hl,BUF_57_043
042CCC 01 6B 00 00 3970*  	ld bc,107
042CD0 11 A0 00 00 3971*  	ld de,160
042CD4 DD 21 E0 42 3972*  	ld ix,17120
       00          
042CD9 CD D8 BF 04 3973*  	call vdu_load_img
042CDD C9          3974*  	ret
042CDE             3975*  
042CDE             3976*  ld_57_044:
042CDE 21 BC 46 04 3977*  	ld hl,F57_044
042CE2 22 5D BE 04 3978*  	ld (cur_filename),hl
042CE6 11 8D CA 04 3979*  	ld de,filedata
042CEA 01 00 00 01 3980*  	ld bc,65536
042CEE 3E 01       3981*  	ld a,mos_load
042CF0 5B CF       3982*  	RST.LIL 08h
042CF2 21 E0 01 00 3983*  	ld hl,BUF_57_044
042CF6 01 40 01 00 3984*  	ld bc,320
042CFA 11 A0 00 00 3985*  	ld de,160
042CFE DD 21 00 C8 3986*  	ld ix,51200
       00          
042D03 CD D8 BF 04 3987*  	call vdu_load_img
042D07 C9          3988*  	ret
042D08             3989*  
042D08             3990*  ld_58_004:
042D08 21 D0 46 04 3991*  	ld hl,F58_004
042D0C 22 5D BE 04 3992*  	ld (cur_filename),hl
042D10 11 8D CA 04 3993*  	ld de,filedata
042D14 01 00 00 01 3994*  	ld bc,65536
042D18 3E 01       3995*  	ld a,mos_load
042D1A 5B CF       3996*  	RST.LIL 08h
042D1C 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D20 01 24 00 00 3998*  	ld bc,36
042D24 11 23 00 00 3999*  	ld de,35
042D28 DD 21 EC 04 4000*  	ld ix,1260
       00          
042D2D CD D8 BF 04 4001*  	call vdu_load_img
042D31 C9          4002*  	ret
042D32             4003*  
042D32             4004*  ld_58_009:
042D32 21 E4 46 04 4005*  	ld hl,F58_009
042D36 22 5D BE 04 4006*  	ld (cur_filename),hl
042D3A 11 8D CA 04 4007*  	ld de,filedata
042D3E 01 00 00 01 4008*  	ld bc,65536
042D42 3E 01       4009*  	ld a,mos_load
042D44 5B CF       4010*  	RST.LIL 08h
042D46 21 E2 01 00 4011*  	ld hl,BUF_58_009
042D4A 01 23 00 00 4012*  	ld bc,35
042D4E 11 2D 00 00 4013*  	ld de,45
042D52 DD 21 27 06 4014*  	ld ix,1575
       00          
042D57 CD D8 BF 04 4015*  	call vdu_load_img
042D5B C9          4016*  	ret
042D5C             4017*  
042D5C             4018*  ld_58_010:
042D5C 21 F8 46 04 4019*  	ld hl,F58_010
042D60 22 5D BE 04 4020*  	ld (cur_filename),hl
042D64 11 8D CA 04 4021*  	ld de,filedata
042D68 01 00 00 01 4022*  	ld bc,65536
042D6C 3E 01       4023*  	ld a,mos_load
042D6E 5B CF       4024*  	RST.LIL 08h
042D70 21 E3 01 00 4025*  	ld hl,BUF_58_010
042D74 01 19 00 00 4026*  	ld bc,25
042D78 11 2D 00 00 4027*  	ld de,45
042D7C DD 21 65 04 4028*  	ld ix,1125
       00          
042D81 CD D8 BF 04 4029*  	call vdu_load_img
042D85 C9          4030*  	ret
042D86             4031*  
042D86             4032*  ld_58_011:
042D86 21 0C 47 04 4033*  	ld hl,F58_011
042D8A 22 5D BE 04 4034*  	ld (cur_filename),hl
042D8E 11 8D CA 04 4035*  	ld de,filedata
042D92 01 00 00 01 4036*  	ld bc,65536
042D96 3E 01       4037*  	ld a,mos_load
042D98 5B CF       4038*  	RST.LIL 08h
042D9A 21 E4 01 00 4039*  	ld hl,BUF_58_011
042D9E 01 0F 00 00 4040*  	ld bc,15
042DA2 11 2D 00 00 4041*  	ld de,45
042DA6 DD 21 A3 02 4042*  	ld ix,675
       00          
042DAB CD D8 BF 04 4043*  	call vdu_load_img
042DAF C9          4044*  	ret
042DB0             4045*  
042DB0             4046*  ld_58_012:
042DB0 21 20 47 04 4047*  	ld hl,F58_012
042DB4 22 5D BE 04 4048*  	ld (cur_filename),hl
042DB8 11 8D CA 04 4049*  	ld de,filedata
042DBC 01 00 00 01 4050*  	ld bc,65536
042DC0 3E 01       4051*  	ld a,mos_load
042DC2 5B CF       4052*  	RST.LIL 08h
042DC4 21 E5 01 00 4053*  	ld hl,BUF_58_012
042DC8 01 05 00 00 4054*  	ld bc,5
042DCC 11 2D 00 00 4055*  	ld de,45
042DD0 DD 21 E1 00 4056*  	ld ix,225
       00          
042DD5 CD D8 BF 04 4057*  	call vdu_load_img
042DD9 C9          4058*  	ret
042DDA             4059*  
042DDA             4060*  ld_58_013:
042DDA 21 34 47 04 4061*  	ld hl,F58_013
042DDE 22 5D BE 04 4062*  	ld (cur_filename),hl
042DE2 11 8D CA 04 4063*  	ld de,filedata
042DE6 01 00 00 01 4064*  	ld bc,65536
042DEA 3E 01       4065*  	ld a,mos_load
042DEC 5B CF       4066*  	RST.LIL 08h
042DEE 21 E6 01 00 4067*  	ld hl,BUF_58_013
042DF2 01 05 00 00 4068*  	ld bc,5
042DF6 11 2B 00 00 4069*  	ld de,43
042DFA DD 21 D7 00 4070*  	ld ix,215
       00          
042DFF CD D8 BF 04 4071*  	call vdu_load_img
042E03 C9          4072*  	ret
042E04             4073*  
042E04             4074*  ld_58_014:
042E04 21 48 47 04 4075*  	ld hl,F58_014
042E08 22 5D BE 04 4076*  	ld (cur_filename),hl
042E0C 11 8D CA 04 4077*  	ld de,filedata
042E10 01 00 00 01 4078*  	ld bc,65536
042E14 3E 01       4079*  	ld a,mos_load
042E16 5B CF       4080*  	RST.LIL 08h
042E18 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E1C 01 0F 00 00 4082*  	ld bc,15
042E20 11 2D 00 00 4083*  	ld de,45
042E24 DD 21 A3 02 4084*  	ld ix,675
       00          
042E29 CD D8 BF 04 4085*  	call vdu_load_img
042E2D C9          4086*  	ret
042E2E             4087*  
042E2E             4088*  ld_58_015:
042E2E 21 5C 47 04 4089*  	ld hl,F58_015
042E32 22 5D BE 04 4090*  	ld (cur_filename),hl
042E36 11 8D CA 04 4091*  	ld de,filedata
042E3A 01 00 00 01 4092*  	ld bc,65536
042E3E 3E 01       4093*  	ld a,mos_load
042E40 5B CF       4094*  	RST.LIL 08h
042E42 21 E8 01 00 4095*  	ld hl,BUF_58_015
042E46 01 19 00 00 4096*  	ld bc,25
042E4A 11 2D 00 00 4097*  	ld de,45
042E4E DD 21 65 04 4098*  	ld ix,1125
       00          
042E53 CD D8 BF 04 4099*  	call vdu_load_img
042E57 C9          4100*  	ret
042E58             4101*  
042E58             4102*  ld_58_016:
042E58 21 70 47 04 4103*  	ld hl,F58_016
042E5C 22 5D BE 04 4104*  	ld (cur_filename),hl
042E60 11 8D CA 04 4105*  	ld de,filedata
042E64 01 00 00 01 4106*  	ld bc,65536
042E68 3E 01       4107*  	ld a,mos_load
042E6A 5B CF       4108*  	RST.LIL 08h
042E6C 21 E9 01 00 4109*  	ld hl,BUF_58_016
042E70 01 23 00 00 4110*  	ld bc,35
042E74 11 2D 00 00 4111*  	ld de,45
042E78 DD 21 27 06 4112*  	ld ix,1575
       00          
042E7D CD D8 BF 04 4113*  	call vdu_load_img
042E81 C9          4114*  	ret
042E82             4115*  
042E82             4116*  ld_58_020:
042E82 21 84 47 04 4117*  	ld hl,F58_020
042E86 22 5D BE 04 4118*  	ld (cur_filename),hl
042E8A 11 8D CA 04 4119*  	ld de,filedata
042E8E 01 00 00 01 4120*  	ld bc,65536
042E92 3E 01       4121*  	ld a,mos_load
042E94 5B CF       4122*  	RST.LIL 08h
042E96 21 EA 01 00 4123*  	ld hl,BUF_58_020
042E9A 01 2E 00 00 4124*  	ld bc,46
042E9E 11 2D 00 00 4125*  	ld de,45
042EA2 DD 21 16 08 4126*  	ld ix,2070
       00          
042EA7 CD D8 BF 04 4127*  	call vdu_load_img
042EAB C9          4128*  	ret
042EAC             4129*  
042EAC             4130*  ld_58_024:
042EAC 21 98 47 04 4131*  	ld hl,F58_024
042EB0 22 5D BE 04 4132*  	ld (cur_filename),hl
042EB4 11 8D CA 04 4133*  	ld de,filedata
042EB8 01 00 00 01 4134*  	ld bc,65536
042EBC 3E 01       4135*  	ld a,mos_load
042EBE 5B CF       4136*  	RST.LIL 08h
042EC0 21 EB 01 00 4137*  	ld hl,BUF_58_024
042EC4 01 2E 00 00 4138*  	ld bc,46
042EC8 11 40 00 00 4139*  	ld de,64
042ECC DD 21 80 0B 4140*  	ld ix,2944
       00          
042ED1 CD D8 BF 04 4141*  	call vdu_load_img
042ED5 C9          4142*  	ret
042ED6             4143*  
042ED6             4144*  ld_58_025:
042ED6 21 AC 47 04 4145*  	ld hl,F58_025
042EDA 22 5D BE 04 4146*  	ld (cur_filename),hl
042EDE 11 8D CA 04 4147*  	ld de,filedata
042EE2 01 00 00 01 4148*  	ld bc,65536
042EE6 3E 01       4149*  	ld a,mos_load
042EE8 5B CF       4150*  	RST.LIL 08h
042EEA 21 EC 01 00 4151*  	ld hl,BUF_58_025
042EEE 01 1C 00 00 4152*  	ld bc,28
042EF2 11 40 00 00 4153*  	ld de,64
042EF6 DD 21 00 07 4154*  	ld ix,1792
       00          
042EFB CD D8 BF 04 4155*  	call vdu_load_img
042EFF C9          4156*  	ret
042F00             4157*  
042F00             4158*  ld_58_026:
042F00 21 C0 47 04 4159*  	ld hl,F58_026
042F04 22 5D BE 04 4160*  	ld (cur_filename),hl
042F08 11 8D CA 04 4161*  	ld de,filedata
042F0C 01 00 00 01 4162*  	ld bc,65536
042F10 3E 01       4163*  	ld a,mos_load
042F12 5B CF       4164*  	RST.LIL 08h
042F14 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F18 01 09 00 00 4166*  	ld bc,9
042F1C 11 40 00 00 4167*  	ld de,64
042F20 DD 21 40 02 4168*  	ld ix,576
       00          
042F25 CD D8 BF 04 4169*  	call vdu_load_img
042F29 C9          4170*  	ret
042F2A             4171*  
042F2A             4172*  ld_58_027:
042F2A 21 D4 47 04 4173*  	ld hl,F58_027
042F2E 22 5D BE 04 4174*  	ld (cur_filename),hl
042F32 11 8D CA 04 4175*  	ld de,filedata
042F36 01 00 00 01 4176*  	ld bc,65536
042F3A 3E 01       4177*  	ld a,mos_load
042F3C 5B CF       4178*  	RST.LIL 08h
042F3E 21 EE 01 00 4179*  	ld hl,BUF_58_027
042F42 01 0A 00 00 4180*  	ld bc,10
042F46 11 3E 00 00 4181*  	ld de,62
042F4A DD 21 6C 02 4182*  	ld ix,620
       00          
042F4F CD D8 BF 04 4183*  	call vdu_load_img
042F53 C9          4184*  	ret
042F54             4185*  
042F54             4186*  ld_58_028:
042F54 21 E8 47 04 4187*  	ld hl,F58_028
042F58 22 5D BE 04 4188*  	ld (cur_filename),hl
042F5C 11 8D CA 04 4189*  	ld de,filedata
042F60 01 00 00 01 4190*  	ld bc,65536
042F64 3E 01       4191*  	ld a,mos_load
042F66 5B CF       4192*  	RST.LIL 08h
042F68 21 EF 01 00 4193*  	ld hl,BUF_58_028
042F6C 01 1C 00 00 4194*  	ld bc,28
042F70 11 40 00 00 4195*  	ld de,64
042F74 DD 21 00 07 4196*  	ld ix,1792
       00          
042F79 CD D8 BF 04 4197*  	call vdu_load_img
042F7D C9          4198*  	ret
042F7E             4199*  
042F7E             4200*  ld_58_029:
042F7E 21 FC 47 04 4201*  	ld hl,F58_029
042F82 22 5D BE 04 4202*  	ld (cur_filename),hl
042F86 11 8D CA 04 4203*  	ld de,filedata
042F8A 01 00 00 01 4204*  	ld bc,65536
042F8E 3E 01       4205*  	ld a,mos_load
042F90 5B CF       4206*  	RST.LIL 08h
042F92 21 F0 01 00 4207*  	ld hl,BUF_58_029
042F96 01 2F 00 00 4208*  	ld bc,47
042F9A 11 40 00 00 4209*  	ld de,64
042F9E DD 21 C0 0B 4210*  	ld ix,3008
       00          
042FA3 CD D8 BF 04 4211*  	call vdu_load_img
042FA7 C9          4212*  	ret
042FA8             4213*  
042FA8             4214*  ld_58_032:
042FA8 21 10 48 04 4215*  	ld hl,F58_032
042FAC 22 5D BE 04 4216*  	ld (cur_filename),hl
042FB0 11 8D CA 04 4217*  	ld de,filedata
042FB4 01 00 00 01 4218*  	ld bc,65536
042FB8 3E 01       4219*  	ld a,mos_load
042FBA 5B CF       4220*  	RST.LIL 08h
042FBC 21 F1 01 00 4221*  	ld hl,BUF_58_032
042FC0 01 41 00 00 4222*  	ld bc,65
042FC4 11 40 00 00 4223*  	ld de,64
042FC8 DD 21 40 10 4224*  	ld ix,4160
       00          
042FCD CD D8 BF 04 4225*  	call vdu_load_img
042FD1 C9          4226*  	ret
042FD2             4227*  
042FD2             4228*  ld_58_035:
042FD2 21 24 48 04 4229*  	ld hl,F58_035
042FD6 22 5D BE 04 4230*  	ld (cur_filename),hl
042FDA 11 8D CA 04 4231*  	ld de,filedata
042FDE 01 00 00 01 4232*  	ld bc,65536
042FE2 3E 01       4233*  	ld a,mos_load
042FE4 5B CF       4234*  	RST.LIL 08h
042FE6 21 F2 01 00 4235*  	ld hl,BUF_58_035
042FEA 01 3F 00 00 4236*  	ld bc,63
042FEE 11 6B 00 00 4237*  	ld de,107
042FF2 DD 21 55 1A 4238*  	ld ix,6741
       00          
042FF7 CD D8 BF 04 4239*  	call vdu_load_img
042FFB C9          4240*  	ret
042FFC             4241*  
042FFC             4242*  ld_58_036:
042FFC 21 38 48 04 4243*  	ld hl,F58_036
043000 22 5D BE 04 4244*  	ld (cur_filename),hl
043004 11 8D CA 04 4245*  	ld de,filedata
043008 01 00 00 01 4246*  	ld bc,65536
04300C 3E 01       4247*  	ld a,mos_load
04300E 5B CF       4248*  	RST.LIL 08h
043010 21 F3 01 00 4249*  	ld hl,BUF_58_036
043014 01 16 00 00 4250*  	ld bc,22
043018 11 6B 00 00 4251*  	ld de,107
04301C DD 21 32 09 4252*  	ld ix,2354
       00          
043021 CD D8 BF 04 4253*  	call vdu_load_img
043025 C9          4254*  	ret
043026             4255*  
043026             4256*  ld_58_037:
043026 21 4C 48 04 4257*  	ld hl,F58_037
04302A 22 5D BE 04 4258*  	ld (cur_filename),hl
04302E 11 8D CA 04 4259*  	ld de,filedata
043032 01 00 00 01 4260*  	ld bc,65536
043036 3E 01       4261*  	ld a,mos_load
043038 5B CF       4262*  	RST.LIL 08h
04303A 21 F4 01 00 4263*  	ld hl,BUF_58_037
04303E 01 15 00 00 4264*  	ld bc,21
043042 11 69 00 00 4265*  	ld de,105
043046 DD 21 9D 08 4266*  	ld ix,2205
       00          
04304B CD D8 BF 04 4267*  	call vdu_load_img
04304F C9          4268*  	ret
043050             4269*  
043050             4270*  ld_58_038:
043050 21 60 48 04 4271*  	ld hl,F58_038
043054 22 5D BE 04 4272*  	ld (cur_filename),hl
043058 11 8D CA 04 4273*  	ld de,filedata
04305C 01 00 00 01 4274*  	ld bc,65536
043060 3E 01       4275*  	ld a,mos_load
043062 5B CF       4276*  	RST.LIL 08h
043064 21 F5 01 00 4277*  	ld hl,BUF_58_038
043068 01 3F 00 00 4278*  	ld bc,63
04306C 11 6B 00 00 4279*  	ld de,107
043070 DD 21 55 1A 4280*  	ld ix,6741
       00          
043075 CD D8 BF 04 4281*  	call vdu_load_img
043079 C9          4282*  	ret
04307A             4283*  
04307A             4284*  ld_58_040:
04307A 21 74 48 04 4285*  	ld hl,F58_040
04307E 22 5D BE 04 4286*  	ld (cur_filename),hl
043082 11 8D CA 04 4287*  	ld de,filedata
043086 01 00 00 01 4288*  	ld bc,65536
04308A 3E 01       4289*  	ld a,mos_load
04308C 5B CF       4290*  	RST.LIL 08h
04308E 21 F6 01 00 4291*  	ld hl,BUF_58_040
043092 01 6C 00 00 4292*  	ld bc,108
043096 11 6B 00 00 4293*  	ld de,107
04309A DD 21 24 2D 4294*  	ld ix,11556
       00          
04309F CD D8 BF 04 4295*  	call vdu_load_img
0430A3 C9          4296*  	ret
0430A4             4297*  
0430A4             4298*  ld_58_042:
0430A4 21 88 48 04 4299*  	ld hl,F58_042
0430A8 22 5D BE 04 4300*  	ld (cur_filename),hl
0430AC 11 8D CA 04 4301*  	ld de,filedata
0430B0 01 00 00 01 4302*  	ld bc,65536
0430B4 3E 01       4303*  	ld a,mos_load
0430B6 5B CF       4304*  	RST.LIL 08h
0430B8 21 F7 01 00 4305*  	ld hl,BUF_58_042
0430BC 01 6A 00 00 4306*  	ld bc,106
0430C0 11 A0 00 00 4307*  	ld de,160
0430C4 DD 21 40 42 4308*  	ld ix,16960
       00          
0430C9 CD D8 BF 04 4309*  	call vdu_load_img
0430CD C9          4310*  	ret
0430CE             4311*  
0430CE             4312*  ld_58_043:
0430CE 21 9C 48 04 4313*  	ld hl,F58_043
0430D2 22 5D BE 04 4314*  	ld (cur_filename),hl
0430D6 11 8D CA 04 4315*  	ld de,filedata
0430DA 01 00 00 01 4316*  	ld bc,65536
0430DE 3E 01       4317*  	ld a,mos_load
0430E0 5B CF       4318*  	RST.LIL 08h
0430E2 21 F8 01 00 4319*  	ld hl,BUF_58_043
0430E6 01 6B 00 00 4320*  	ld bc,107
0430EA 11 A0 00 00 4321*  	ld de,160
0430EE DD 21 E0 42 4322*  	ld ix,17120
       00          
0430F3 CD D8 BF 04 4323*  	call vdu_load_img
0430F7 C9          4324*  	ret
0430F8             4325*  
0430F8             4326*  ld_58_044:
0430F8 21 B0 48 04 4327*  	ld hl,F58_044
0430FC 22 5D BE 04 4328*  	ld (cur_filename),hl
043100 11 8D CA 04 4329*  	ld de,filedata
043104 01 00 00 01 4330*  	ld bc,65536
043108 3E 01       4331*  	ld a,mos_load
04310A 5B CF       4332*  	RST.LIL 08h
04310C 21 F9 01 00 4333*  	ld hl,BUF_58_044
043110 01 40 01 00 4334*  	ld bc,320
043114 11 A0 00 00 4335*  	ld de,160
043118 DD 21 00 C8 4336*  	ld ix,51200
       00          
04311D CD D8 BF 04 4337*  	call vdu_load_img
043121 C9          4338*  	ret
043122             4339*  
043122             4340*  ld_59_004:
043122 21 C4 48 04 4341*  	ld hl,F59_004
043126 22 5D BE 04 4342*  	ld (cur_filename),hl
04312A 11 8D CA 04 4343*  	ld de,filedata
04312E 01 00 00 01 4344*  	ld bc,65536
043132 3E 01       4345*  	ld a,mos_load
043134 5B CF       4346*  	RST.LIL 08h
043136 21 FA 01 00 4347*  	ld hl,BUF_59_004
04313A 01 24 00 00 4348*  	ld bc,36
04313E 11 23 00 00 4349*  	ld de,35
043142 DD 21 EC 04 4350*  	ld ix,1260
       00          
043147 CD D8 BF 04 4351*  	call vdu_load_img
04314B C9          4352*  	ret
04314C             4353*  
04314C             4354*  ld_59_009:
04314C 21 D8 48 04 4355*  	ld hl,F59_009
043150 22 5D BE 04 4356*  	ld (cur_filename),hl
043154 11 8D CA 04 4357*  	ld de,filedata
043158 01 00 00 01 4358*  	ld bc,65536
04315C 3E 01       4359*  	ld a,mos_load
04315E 5B CF       4360*  	RST.LIL 08h
043160 21 FB 01 00 4361*  	ld hl,BUF_59_009
043164 01 23 00 00 4362*  	ld bc,35
043168 11 2D 00 00 4363*  	ld de,45
04316C DD 21 27 06 4364*  	ld ix,1575
       00          
043171 CD D8 BF 04 4365*  	call vdu_load_img
043175 C9          4366*  	ret
043176             4367*  
043176             4368*  ld_59_010:
043176 21 EC 48 04 4369*  	ld hl,F59_010
04317A 22 5D BE 04 4370*  	ld (cur_filename),hl
04317E 11 8D CA 04 4371*  	ld de,filedata
043182 01 00 00 01 4372*  	ld bc,65536
043186 3E 01       4373*  	ld a,mos_load
043188 5B CF       4374*  	RST.LIL 08h
04318A 21 FC 01 00 4375*  	ld hl,BUF_59_010
04318E 01 19 00 00 4376*  	ld bc,25
043192 11 2D 00 00 4377*  	ld de,45
043196 DD 21 65 04 4378*  	ld ix,1125
       00          
04319B CD D8 BF 04 4379*  	call vdu_load_img
04319F C9          4380*  	ret
0431A0             4381*  
0431A0             4382*  ld_59_011:
0431A0 21 00 49 04 4383*  	ld hl,F59_011
0431A4 22 5D BE 04 4384*  	ld (cur_filename),hl
0431A8 11 8D CA 04 4385*  	ld de,filedata
0431AC 01 00 00 01 4386*  	ld bc,65536
0431B0 3E 01       4387*  	ld a,mos_load
0431B2 5B CF       4388*  	RST.LIL 08h
0431B4 21 FD 01 00 4389*  	ld hl,BUF_59_011
0431B8 01 0F 00 00 4390*  	ld bc,15
0431BC 11 2D 00 00 4391*  	ld de,45
0431C0 DD 21 A3 02 4392*  	ld ix,675
       00          
0431C5 CD D8 BF 04 4393*  	call vdu_load_img
0431C9 C9          4394*  	ret
0431CA             4395*  
0431CA             4396*  ld_59_012:
0431CA 21 14 49 04 4397*  	ld hl,F59_012
0431CE 22 5D BE 04 4398*  	ld (cur_filename),hl
0431D2 11 8D CA 04 4399*  	ld de,filedata
0431D6 01 00 00 01 4400*  	ld bc,65536
0431DA 3E 01       4401*  	ld a,mos_load
0431DC 5B CF       4402*  	RST.LIL 08h
0431DE 21 FE 01 00 4403*  	ld hl,BUF_59_012
0431E2 01 05 00 00 4404*  	ld bc,5
0431E6 11 2D 00 00 4405*  	ld de,45
0431EA DD 21 E1 00 4406*  	ld ix,225
       00          
0431EF CD D8 BF 04 4407*  	call vdu_load_img
0431F3 C9          4408*  	ret
0431F4             4409*  
0431F4             4410*  ld_59_013:
0431F4 21 28 49 04 4411*  	ld hl,F59_013
0431F8 22 5D BE 04 4412*  	ld (cur_filename),hl
0431FC 11 8D CA 04 4413*  	ld de,filedata
043200 01 00 00 01 4414*  	ld bc,65536
043204 3E 01       4415*  	ld a,mos_load
043206 5B CF       4416*  	RST.LIL 08h
043208 21 FF 01 00 4417*  	ld hl,BUF_59_013
04320C 01 05 00 00 4418*  	ld bc,5
043210 11 2B 00 00 4419*  	ld de,43
043214 DD 21 D7 00 4420*  	ld ix,215
       00          
043219 CD D8 BF 04 4421*  	call vdu_load_img
04321D C9          4422*  	ret
04321E             4423*  
04321E             4424*  ld_59_014:
04321E 21 3C 49 04 4425*  	ld hl,F59_014
043222 22 5D BE 04 4426*  	ld (cur_filename),hl
043226 11 8D CA 04 4427*  	ld de,filedata
04322A 01 00 00 01 4428*  	ld bc,65536
04322E 3E 01       4429*  	ld a,mos_load
043230 5B CF       4430*  	RST.LIL 08h
043232 21 00 02 00 4431*  	ld hl,BUF_59_014
043236 01 0F 00 00 4432*  	ld bc,15
04323A 11 2D 00 00 4433*  	ld de,45
04323E DD 21 A3 02 4434*  	ld ix,675
       00          
043243 CD D8 BF 04 4435*  	call vdu_load_img
043247 C9          4436*  	ret
043248             4437*  
043248             4438*  ld_59_015:
043248 21 50 49 04 4439*  	ld hl,F59_015
04324C 22 5D BE 04 4440*  	ld (cur_filename),hl
043250 11 8D CA 04 4441*  	ld de,filedata
043254 01 00 00 01 4442*  	ld bc,65536
043258 3E 01       4443*  	ld a,mos_load
04325A 5B CF       4444*  	RST.LIL 08h
04325C 21 01 02 00 4445*  	ld hl,BUF_59_015
043260 01 19 00 00 4446*  	ld bc,25
043264 11 2D 00 00 4447*  	ld de,45
043268 DD 21 65 04 4448*  	ld ix,1125
       00          
04326D CD D8 BF 04 4449*  	call vdu_load_img
043271 C9          4450*  	ret
043272             4451*  
043272             4452*  ld_59_016:
043272 21 64 49 04 4453*  	ld hl,F59_016
043276 22 5D BE 04 4454*  	ld (cur_filename),hl
04327A 11 8D CA 04 4455*  	ld de,filedata
04327E 01 00 00 01 4456*  	ld bc,65536
043282 3E 01       4457*  	ld a,mos_load
043284 5B CF       4458*  	RST.LIL 08h
043286 21 02 02 00 4459*  	ld hl,BUF_59_016
04328A 01 23 00 00 4460*  	ld bc,35
04328E 11 2D 00 00 4461*  	ld de,45
043292 DD 21 27 06 4462*  	ld ix,1575
       00          
043297 CD D8 BF 04 4463*  	call vdu_load_img
04329B C9          4464*  	ret
04329C             4465*  
04329C             4466*  ld_59_020:
04329C 21 78 49 04 4467*  	ld hl,F59_020
0432A0 22 5D BE 04 4468*  	ld (cur_filename),hl
0432A4 11 8D CA 04 4469*  	ld de,filedata
0432A8 01 00 00 01 4470*  	ld bc,65536
0432AC 3E 01       4471*  	ld a,mos_load
0432AE 5B CF       4472*  	RST.LIL 08h
0432B0 21 03 02 00 4473*  	ld hl,BUF_59_020
0432B4 01 2E 00 00 4474*  	ld bc,46
0432B8 11 2D 00 00 4475*  	ld de,45
0432BC DD 21 16 08 4476*  	ld ix,2070
       00          
0432C1 CD D8 BF 04 4477*  	call vdu_load_img
0432C5 C9          4478*  	ret
0432C6             4479*  
0432C6             4480*  ld_59_024:
0432C6 21 8C 49 04 4481*  	ld hl,F59_024
0432CA 22 5D BE 04 4482*  	ld (cur_filename),hl
0432CE 11 8D CA 04 4483*  	ld de,filedata
0432D2 01 00 00 01 4484*  	ld bc,65536
0432D6 3E 01       4485*  	ld a,mos_load
0432D8 5B CF       4486*  	RST.LIL 08h
0432DA 21 04 02 00 4487*  	ld hl,BUF_59_024
0432DE 01 2E 00 00 4488*  	ld bc,46
0432E2 11 40 00 00 4489*  	ld de,64
0432E6 DD 21 80 0B 4490*  	ld ix,2944
       00          
0432EB CD D8 BF 04 4491*  	call vdu_load_img
0432EF C9          4492*  	ret
0432F0             4493*  
0432F0             4494*  ld_59_025:
0432F0 21 A0 49 04 4495*  	ld hl,F59_025
0432F4 22 5D BE 04 4496*  	ld (cur_filename),hl
0432F8 11 8D CA 04 4497*  	ld de,filedata
0432FC 01 00 00 01 4498*  	ld bc,65536
043300 3E 01       4499*  	ld a,mos_load
043302 5B CF       4500*  	RST.LIL 08h
043304 21 05 02 00 4501*  	ld hl,BUF_59_025
043308 01 1C 00 00 4502*  	ld bc,28
04330C 11 40 00 00 4503*  	ld de,64
043310 DD 21 00 07 4504*  	ld ix,1792
       00          
043315 CD D8 BF 04 4505*  	call vdu_load_img
043319 C9          4506*  	ret
04331A             4507*  
04331A             4508*  ld_59_026:
04331A 21 B4 49 04 4509*  	ld hl,F59_026
04331E 22 5D BE 04 4510*  	ld (cur_filename),hl
043322 11 8D CA 04 4511*  	ld de,filedata
043326 01 00 00 01 4512*  	ld bc,65536
04332A 3E 01       4513*  	ld a,mos_load
04332C 5B CF       4514*  	RST.LIL 08h
04332E 21 06 02 00 4515*  	ld hl,BUF_59_026
043332 01 09 00 00 4516*  	ld bc,9
043336 11 40 00 00 4517*  	ld de,64
04333A DD 21 40 02 4518*  	ld ix,576
       00          
04333F CD D8 BF 04 4519*  	call vdu_load_img
043343 C9          4520*  	ret
043344             4521*  
043344             4522*  ld_59_027:
043344 21 C8 49 04 4523*  	ld hl,F59_027
043348 22 5D BE 04 4524*  	ld (cur_filename),hl
04334C 11 8D CA 04 4525*  	ld de,filedata
043350 01 00 00 01 4526*  	ld bc,65536
043354 3E 01       4527*  	ld a,mos_load
043356 5B CF       4528*  	RST.LIL 08h
043358 21 07 02 00 4529*  	ld hl,BUF_59_027
04335C 01 0A 00 00 4530*  	ld bc,10
043360 11 3E 00 00 4531*  	ld de,62
043364 DD 21 6C 02 4532*  	ld ix,620
       00          
043369 CD D8 BF 04 4533*  	call vdu_load_img
04336D C9          4534*  	ret
04336E             4535*  
04336E             4536*  ld_59_028:
04336E 21 DC 49 04 4537*  	ld hl,F59_028
043372 22 5D BE 04 4538*  	ld (cur_filename),hl
043376 11 8D CA 04 4539*  	ld de,filedata
04337A 01 00 00 01 4540*  	ld bc,65536
04337E 3E 01       4541*  	ld a,mos_load
043380 5B CF       4542*  	RST.LIL 08h
043382 21 08 02 00 4543*  	ld hl,BUF_59_028
043386 01 1C 00 00 4544*  	ld bc,28
04338A 11 40 00 00 4545*  	ld de,64
04338E DD 21 00 07 4546*  	ld ix,1792
       00          
043393 CD D8 BF 04 4547*  	call vdu_load_img
043397 C9          4548*  	ret
043398             4549*  
043398             4550*  ld_59_029:
043398 21 F0 49 04 4551*  	ld hl,F59_029
04339C 22 5D BE 04 4552*  	ld (cur_filename),hl
0433A0 11 8D CA 04 4553*  	ld de,filedata
0433A4 01 00 00 01 4554*  	ld bc,65536
0433A8 3E 01       4555*  	ld a,mos_load
0433AA 5B CF       4556*  	RST.LIL 08h
0433AC 21 09 02 00 4557*  	ld hl,BUF_59_029
0433B0 01 2F 00 00 4558*  	ld bc,47
0433B4 11 40 00 00 4559*  	ld de,64
0433B8 DD 21 C0 0B 4560*  	ld ix,3008
       00          
0433BD CD D8 BF 04 4561*  	call vdu_load_img
0433C1 C9          4562*  	ret
0433C2             4563*  
0433C2             4564*  ld_59_032:
0433C2 21 04 4A 04 4565*  	ld hl,F59_032
0433C6 22 5D BE 04 4566*  	ld (cur_filename),hl
0433CA 11 8D CA 04 4567*  	ld de,filedata
0433CE 01 00 00 01 4568*  	ld bc,65536
0433D2 3E 01       4569*  	ld a,mos_load
0433D4 5B CF       4570*  	RST.LIL 08h
0433D6 21 0A 02 00 4571*  	ld hl,BUF_59_032
0433DA 01 41 00 00 4572*  	ld bc,65
0433DE 11 40 00 00 4573*  	ld de,64
0433E2 DD 21 40 10 4574*  	ld ix,4160
       00          
0433E7 CD D8 BF 04 4575*  	call vdu_load_img
0433EB C9          4576*  	ret
0433EC             4577*  
0433EC             4578*  ld_59_035:
0433EC 21 18 4A 04 4579*  	ld hl,F59_035
0433F0 22 5D BE 04 4580*  	ld (cur_filename),hl
0433F4 11 8D CA 04 4581*  	ld de,filedata
0433F8 01 00 00 01 4582*  	ld bc,65536
0433FC 3E 01       4583*  	ld a,mos_load
0433FE 5B CF       4584*  	RST.LIL 08h
043400 21 0B 02 00 4585*  	ld hl,BUF_59_035
043404 01 3F 00 00 4586*  	ld bc,63
043408 11 6B 00 00 4587*  	ld de,107
04340C DD 21 55 1A 4588*  	ld ix,6741
       00          
043411 CD D8 BF 04 4589*  	call vdu_load_img
043415 C9          4590*  	ret
043416             4591*  
043416             4592*  ld_59_036:
043416 21 2C 4A 04 4593*  	ld hl,F59_036
04341A 22 5D BE 04 4594*  	ld (cur_filename),hl
04341E 11 8D CA 04 4595*  	ld de,filedata
043422 01 00 00 01 4596*  	ld bc,65536
043426 3E 01       4597*  	ld a,mos_load
043428 5B CF       4598*  	RST.LIL 08h
04342A 21 0C 02 00 4599*  	ld hl,BUF_59_036
04342E 01 16 00 00 4600*  	ld bc,22
043432 11 6B 00 00 4601*  	ld de,107
043436 DD 21 32 09 4602*  	ld ix,2354
       00          
04343B CD D8 BF 04 4603*  	call vdu_load_img
04343F C9          4604*  	ret
043440             4605*  
043440             4606*  ld_59_037:
043440 21 40 4A 04 4607*  	ld hl,F59_037
043444 22 5D BE 04 4608*  	ld (cur_filename),hl
043448 11 8D CA 04 4609*  	ld de,filedata
04344C 01 00 00 01 4610*  	ld bc,65536
043450 3E 01       4611*  	ld a,mos_load
043452 5B CF       4612*  	RST.LIL 08h
043454 21 0D 02 00 4613*  	ld hl,BUF_59_037
043458 01 15 00 00 4614*  	ld bc,21
04345C 11 69 00 00 4615*  	ld de,105
043460 DD 21 9D 08 4616*  	ld ix,2205
       00          
043465 CD D8 BF 04 4617*  	call vdu_load_img
043469 C9          4618*  	ret
04346A             4619*  
04346A             4620*  ld_59_038:
04346A 21 54 4A 04 4621*  	ld hl,F59_038
04346E 22 5D BE 04 4622*  	ld (cur_filename),hl
043472 11 8D CA 04 4623*  	ld de,filedata
043476 01 00 00 01 4624*  	ld bc,65536
04347A 3E 01       4625*  	ld a,mos_load
04347C 5B CF       4626*  	RST.LIL 08h
04347E 21 0E 02 00 4627*  	ld hl,BUF_59_038
043482 01 3F 00 00 4628*  	ld bc,63
043486 11 6B 00 00 4629*  	ld de,107
04348A DD 21 55 1A 4630*  	ld ix,6741
       00          
04348F CD D8 BF 04 4631*  	call vdu_load_img
043493 C9          4632*  	ret
043494             4633*  
043494             4634*  ld_59_040:
043494 21 68 4A 04 4635*  	ld hl,F59_040
043498 22 5D BE 04 4636*  	ld (cur_filename),hl
04349C 11 8D CA 04 4637*  	ld de,filedata
0434A0 01 00 00 01 4638*  	ld bc,65536
0434A4 3E 01       4639*  	ld a,mos_load
0434A6 5B CF       4640*  	RST.LIL 08h
0434A8 21 0F 02 00 4641*  	ld hl,BUF_59_040
0434AC 01 6C 00 00 4642*  	ld bc,108
0434B0 11 6B 00 00 4643*  	ld de,107
0434B4 DD 21 24 2D 4644*  	ld ix,11556
       00          
0434B9 CD D8 BF 04 4645*  	call vdu_load_img
0434BD C9          4646*  	ret
0434BE             4647*  
0434BE             4648*  ld_59_042:
0434BE 21 7C 4A 04 4649*  	ld hl,F59_042
0434C2 22 5D BE 04 4650*  	ld (cur_filename),hl
0434C6 11 8D CA 04 4651*  	ld de,filedata
0434CA 01 00 00 01 4652*  	ld bc,65536
0434CE 3E 01       4653*  	ld a,mos_load
0434D0 5B CF       4654*  	RST.LIL 08h
0434D2 21 10 02 00 4655*  	ld hl,BUF_59_042
0434D6 01 6A 00 00 4656*  	ld bc,106
0434DA 11 A0 00 00 4657*  	ld de,160
0434DE DD 21 40 42 4658*  	ld ix,16960
       00          
0434E3 CD D8 BF 04 4659*  	call vdu_load_img
0434E7 C9          4660*  	ret
0434E8             4661*  
0434E8             4662*  ld_59_043:
0434E8 21 90 4A 04 4663*  	ld hl,F59_043
0434EC 22 5D BE 04 4664*  	ld (cur_filename),hl
0434F0 11 8D CA 04 4665*  	ld de,filedata
0434F4 01 00 00 01 4666*  	ld bc,65536
0434F8 3E 01       4667*  	ld a,mos_load
0434FA 5B CF       4668*  	RST.LIL 08h
0434FC 21 11 02 00 4669*  	ld hl,BUF_59_043
043500 01 6B 00 00 4670*  	ld bc,107
043504 11 A0 00 00 4671*  	ld de,160
043508 DD 21 E0 42 4672*  	ld ix,17120
       00          
04350D CD D8 BF 04 4673*  	call vdu_load_img
043511 C9          4674*  	ret
043512             4675*  
043512             4676*  ld_59_044:
043512 21 A4 4A 04 4677*  	ld hl,F59_044
043516 22 5D BE 04 4678*  	ld (cur_filename),hl
04351A 11 8D CA 04 4679*  	ld de,filedata
04351E 01 00 00 01 4680*  	ld bc,65536
043522 3E 01       4681*  	ld a,mos_load
043524 5B CF       4682*  	RST.LIL 08h
043526 21 12 02 00 4683*  	ld hl,BUF_59_044
04352A 01 40 01 00 4684*  	ld bc,320
04352E 11 A0 00 00 4685*  	ld de,160
043532 DD 21 00 C8 4686*  	ld ix,51200
       00          
043537 CD D8 BF 04 4687*  	call vdu_load_img
04353B C9          4688*  	ret
04353C             4689*  
04353C             4690*  ; File name lookups:
04353C 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043550 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043564 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043578 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
04358C 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0435A0 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0435B4 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0435C8 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0435DC 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0435F0 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043604 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043618 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04362C 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043640 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043654 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043668 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04367C 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043690 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0436A4 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0436B8 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0436CC 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0436E0 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0436F4 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043708 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04371C 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043730 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043744 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043758 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04376C 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043780 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043794 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0437A8 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0437BC 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0437D0 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0437E4 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0437F8 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04380C 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043820 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043834 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043848 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04385C 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043870 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043884 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043898 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0438AC 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0438C0 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0438D4 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0438E8 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
0438FC 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043910 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043924 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043938 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04394C 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043960 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043974 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043988 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04399C 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0439B0 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0439C4 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0439D8 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0439EC 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A00 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A14 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A28 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043A3C 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043A50 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043A64 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043A78 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043A8C 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043AA0 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043AB4 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043AC8 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043ADC 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043AF0 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B04 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B18 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043B2C 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043B40 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043B54 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043B68 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043B7C 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043B90 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043BA4 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043BB8 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043BCC 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043BE0 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043BF4 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C08 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C1C 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043C30 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043C44 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043C58 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043C6C 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043C80 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043C94 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043CA8 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043CBC 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043CD0 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043CE4 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043CF8 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D0C 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D20 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043D34 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043D48 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043D5C 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043D70 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043D84 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043D98 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043DAC 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043DC0 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043DD4 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043DE8 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043DFC 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E10 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E24 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043E38 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043E4C 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043E60 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043E74 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043E88 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043E9C 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043EB0 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043EC4 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043ED8 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043EEC 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F00 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F14 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F28 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043F3C 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043F50 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043F64 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043F78 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043F8C 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043FA0 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043FB4 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043FC8 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043FDC 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043FF0 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044004 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044018 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04402C 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044040 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044054 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044068 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04407C 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044090 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0440A4 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0440B8 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
0440CC 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0440E0 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0440F4 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044108 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04411C 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044130 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044144 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044158 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04416C 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044180 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044194 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0441A8 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0441BC 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0441D0 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0441E4 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0441F8 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04420C 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044220 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044234 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044248 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04425C 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044270 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044284 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044298 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0442AC 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
0442C0 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0442D4 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0442E8 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0442FC 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044310 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044324 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044338 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04434C 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
044360 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044374 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044388 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04439C 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0443B0 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0443C4 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0443D8 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0443EC 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044400 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044414 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044428 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04443C 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044450 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044464 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044478 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04448C 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0444A0 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
0444B4 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0444C8 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0444DC 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0444F0 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044504 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044518 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
04452C 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044540 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
044554 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044568 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
04457C 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044590 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0445A4 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0445B8 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0445CC 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0445E0 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0445F4 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044608 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04461C 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044630 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044644 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044658 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04466C 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044680 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044694 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
0446A8 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0446BC 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0446D0 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0446E4 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0446F8 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04470C 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044720 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044734 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
044748 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04475C 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044770 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044784 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044798 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0447AC 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0447C0 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0447D4 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0447E8 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0447FC 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044810 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044824 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044838 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04484C 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044860 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044874 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044888 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04489C 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0448B0 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0448C4 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0448D8 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0448EC 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044900 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044914 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044928 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04493C 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044950 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044964 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044978 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04498C 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0449A0 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0449B4 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0449C8 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0449DC 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0449F0 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A04 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A18 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044A2C 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044A40 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044A54 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044A68 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044A7C 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044A90 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044AA4 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044AB8             4966*  
044AB8             4967*  ; sprite buffer ids:
044AB8             4968*  BUF_20_004: equ 0x0213
044AB8             4969*  BUF_20_020: equ 0x0214
044AB8             4970*  BUF_20_032: equ 0x0215
044AB8             4971*  BUF_20_040: equ 0x0216
044AB8             4972*  BUF_20_044: equ 0x0217
044AB8             4973*  BUF_21_004: equ 0x0218
044AB8             4974*  BUF_21_020: equ 0x0219
044AB8             4975*  BUF_21_032: equ 0x021A
044AB8             4976*  BUF_21_040: equ 0x021B
044AB8             4977*  BUF_21_044: equ 0x021C
044AB8             4978*  BUF_22_004: equ 0x021D
044AB8             4979*  BUF_22_020: equ 0x021E
044AB8             4980*  BUF_22_032: equ 0x021F
044AB8             4981*  BUF_22_040: equ 0x0220
044AB8             4982*  BUF_22_044: equ 0x0221
044AB8             4983*  BUF_23_004: equ 0x0222
044AB8             4984*  BUF_23_020: equ 0x0223
044AB8             4985*  BUF_23_032: equ 0x0224
044AB8             4986*  BUF_23_040: equ 0x0225
044AB8             4987*  BUF_23_044: equ 0x0226
044AB8             4988*  BUF_24_004: equ 0x0227
044AB8             4989*  BUF_24_020: equ 0x0228
044AB8             4990*  BUF_24_032: equ 0x0229
044AB8             4991*  BUF_24_040: equ 0x022A
044AB8             4992*  BUF_24_044: equ 0x022B
044AB8             4993*  BUF_40_004: equ 0x022C
044AB8             4994*  BUF_40_020: equ 0x022D
044AB8             4995*  BUF_40_032: equ 0x022E
044AB8             4996*  BUF_40_040: equ 0x022F
044AB8             4997*  BUF_40_044: equ 0x0230
044AB8             4998*  BUF_41_004: equ 0x0231
044AB8             4999*  BUF_41_020: equ 0x0232
044AB8             5000*  BUF_41_032: equ 0x0233
044AB8             5001*  BUF_41_040: equ 0x0234
044AB8             5002*  BUF_41_044: equ 0x0235
044AB8             5003*  BUF_42_004: equ 0x0236
044AB8             5004*  BUF_42_020: equ 0x0237
044AB8             5005*  BUF_42_032: equ 0x0238
044AB8             5006*  BUF_42_040: equ 0x0239
044AB8             5007*  BUF_42_044: equ 0x023A
044AB8             5008*  BUF_43_004: equ 0x023B
044AB8             5009*  BUF_43_020: equ 0x023C
044AB8             5010*  BUF_43_032: equ 0x023D
044AB8             5011*  BUF_43_040: equ 0x023E
044AB8             5012*  BUF_43_044: equ 0x023F
044AB8             5013*  BUF_44_004: equ 0x0240
044AB8             5014*  BUF_44_020: equ 0x0241
044AB8             5015*  BUF_44_032: equ 0x0242
044AB8             5016*  BUF_44_040: equ 0x0243
044AB8             5017*  BUF_44_044: equ 0x0244
044AB8             5018*  BUF_45_004: equ 0x0245
044AB8             5019*  BUF_45_020: equ 0x0246
044AB8             5020*  BUF_45_032: equ 0x0247
044AB8             5021*  BUF_45_040: equ 0x0248
044AB8             5022*  BUF_45_044: equ 0x0249
044AB8             5023*  BUF_46_004: equ 0x024A
044AB8             5024*  BUF_46_020: equ 0x024B
044AB8             5025*  BUF_46_032: equ 0x024C
044AB8             5026*  BUF_46_040: equ 0x024D
044AB8             5027*  BUF_46_044: equ 0x024E
044AB8             5028*  BUF_47_004: equ 0x024F
044AB8             5029*  BUF_47_020: equ 0x0250
044AB8             5030*  BUF_47_032: equ 0x0251
044AB8             5031*  BUF_47_040: equ 0x0252
044AB8             5032*  BUF_47_044: equ 0x0253
044AB8             5033*  BUF_48_004: equ 0x0254
044AB8             5034*  BUF_48_020: equ 0x0255
044AB8             5035*  BUF_48_032: equ 0x0256
044AB8             5036*  BUF_48_040: equ 0x0257
044AB8             5037*  BUF_48_044: equ 0x0258
044AB8             5038*  BUF_49_004: equ 0x0259
044AB8             5039*  BUF_49_020: equ 0x025A
044AB8             5040*  BUF_49_032: equ 0x025B
044AB8             5041*  BUF_49_040: equ 0x025C
044AB8             5042*  BUF_49_044: equ 0x025D
044AB8             5043*  BUF_50_004: equ 0x025E
044AB8             5044*  BUF_50_020: equ 0x025F
044AB8             5045*  BUF_50_032: equ 0x0260
044AB8             5046*  BUF_50_040: equ 0x0261
044AB8             5047*  BUF_50_044: equ 0x0262
044AB8             5048*  BUF_51_004: equ 0x0263
044AB8             5049*  BUF_51_020: equ 0x0264
044AB8             5050*  BUF_51_032: equ 0x0265
044AB8             5051*  BUF_51_040: equ 0x0266
044AB8             5052*  BUF_51_044: equ 0x0267
044AB8             5053*  BUF_52_004: equ 0x0268
044AB8             5054*  BUF_52_020: equ 0x0269
044AB8             5055*  BUF_52_032: equ 0x026A
044AB8             5056*  BUF_52_040: equ 0x026B
044AB8             5057*  BUF_52_044: equ 0x026C
044AB8             5058*  BUF_56_004: equ 0x026D
044AB8             5059*  BUF_56_020: equ 0x026E
044AB8             5060*  BUF_56_032: equ 0x026F
044AB8             5061*  BUF_56_040: equ 0x0270
044AB8             5062*  BUF_56_044: equ 0x0271
044AB8             5063*  BUF_60_004: equ 0x0272
044AB8             5064*  BUF_60_020: equ 0x0273
044AB8             5065*  BUF_60_032: equ 0x0274
044AB8             5066*  BUF_60_040: equ 0x0275
044AB8             5067*  BUF_60_044: equ 0x0276
044AB8             5068*  
044AB8             5069*  sprite_num_panels: equ 100
044AB8             5070*  
044AB8             5071*  ; sprite buffer id reverse lookup:
044AB8             5072*  sprite_buffer_id_lut:
044AB8 13 02 00    5073*  	dl BUF_20_004
044ABB 14 02 00    5074*  	dl BUF_20_020
044ABE 15 02 00    5075*  	dl BUF_20_032
044AC1 16 02 00    5076*  	dl BUF_20_040
044AC4 17 02 00    5077*  	dl BUF_20_044
044AC7 18 02 00    5078*  	dl BUF_21_004
044ACA 19 02 00    5079*  	dl BUF_21_020
044ACD 1A 02 00    5080*  	dl BUF_21_032
044AD0 1B 02 00    5081*  	dl BUF_21_040
044AD3 1C 02 00    5082*  	dl BUF_21_044
044AD6 1D 02 00    5083*  	dl BUF_22_004
044AD9 1E 02 00    5084*  	dl BUF_22_020
044ADC 1F 02 00    5085*  	dl BUF_22_032
044ADF 20 02 00    5086*  	dl BUF_22_040
044AE2 21 02 00    5087*  	dl BUF_22_044
044AE5 22 02 00    5088*  	dl BUF_23_004
044AE8 23 02 00    5089*  	dl BUF_23_020
044AEB 24 02 00    5090*  	dl BUF_23_032
044AEE 25 02 00    5091*  	dl BUF_23_040
044AF1 26 02 00    5092*  	dl BUF_23_044
044AF4 27 02 00    5093*  	dl BUF_24_004
044AF7 28 02 00    5094*  	dl BUF_24_020
044AFA 29 02 00    5095*  	dl BUF_24_032
044AFD 2A 02 00    5096*  	dl BUF_24_040
044B00 2B 02 00    5097*  	dl BUF_24_044
044B03 2C 02 00    5098*  	dl BUF_40_004
044B06 2D 02 00    5099*  	dl BUF_40_020
044B09 2E 02 00    5100*  	dl BUF_40_032
044B0C 2F 02 00    5101*  	dl BUF_40_040
044B0F 30 02 00    5102*  	dl BUF_40_044
044B12 31 02 00    5103*  	dl BUF_41_004
044B15 32 02 00    5104*  	dl BUF_41_020
044B18 33 02 00    5105*  	dl BUF_41_032
044B1B 34 02 00    5106*  	dl BUF_41_040
044B1E 35 02 00    5107*  	dl BUF_41_044
044B21 36 02 00    5108*  	dl BUF_42_004
044B24 37 02 00    5109*  	dl BUF_42_020
044B27 38 02 00    5110*  	dl BUF_42_032
044B2A 39 02 00    5111*  	dl BUF_42_040
044B2D 3A 02 00    5112*  	dl BUF_42_044
044B30 3B 02 00    5113*  	dl BUF_43_004
044B33 3C 02 00    5114*  	dl BUF_43_020
044B36 3D 02 00    5115*  	dl BUF_43_032
044B39 3E 02 00    5116*  	dl BUF_43_040
044B3C 3F 02 00    5117*  	dl BUF_43_044
044B3F 40 02 00    5118*  	dl BUF_44_004
044B42 41 02 00    5119*  	dl BUF_44_020
044B45 42 02 00    5120*  	dl BUF_44_032
044B48 43 02 00    5121*  	dl BUF_44_040
044B4B 44 02 00    5122*  	dl BUF_44_044
044B4E 45 02 00    5123*  	dl BUF_45_004
044B51 46 02 00    5124*  	dl BUF_45_020
044B54 47 02 00    5125*  	dl BUF_45_032
044B57 48 02 00    5126*  	dl BUF_45_040
044B5A 49 02 00    5127*  	dl BUF_45_044
044B5D 4A 02 00    5128*  	dl BUF_46_004
044B60 4B 02 00    5129*  	dl BUF_46_020
044B63 4C 02 00    5130*  	dl BUF_46_032
044B66 4D 02 00    5131*  	dl BUF_46_040
044B69 4E 02 00    5132*  	dl BUF_46_044
044B6C 4F 02 00    5133*  	dl BUF_47_004
044B6F 50 02 00    5134*  	dl BUF_47_020
044B72 51 02 00    5135*  	dl BUF_47_032
044B75 52 02 00    5136*  	dl BUF_47_040
044B78 53 02 00    5137*  	dl BUF_47_044
044B7B 54 02 00    5138*  	dl BUF_48_004
044B7E 55 02 00    5139*  	dl BUF_48_020
044B81 56 02 00    5140*  	dl BUF_48_032
044B84 57 02 00    5141*  	dl BUF_48_040
044B87 58 02 00    5142*  	dl BUF_48_044
044B8A 59 02 00    5143*  	dl BUF_49_004
044B8D 5A 02 00    5144*  	dl BUF_49_020
044B90 5B 02 00    5145*  	dl BUF_49_032
044B93 5C 02 00    5146*  	dl BUF_49_040
044B96 5D 02 00    5147*  	dl BUF_49_044
044B99 5E 02 00    5148*  	dl BUF_50_004
044B9C 5F 02 00    5149*  	dl BUF_50_020
044B9F 60 02 00    5150*  	dl BUF_50_032
044BA2 61 02 00    5151*  	dl BUF_50_040
044BA5 62 02 00    5152*  	dl BUF_50_044
044BA8 63 02 00    5153*  	dl BUF_51_004
044BAB 64 02 00    5154*  	dl BUF_51_020
044BAE 65 02 00    5155*  	dl BUF_51_032
044BB1 66 02 00    5156*  	dl BUF_51_040
044BB4 67 02 00    5157*  	dl BUF_51_044
044BB7 68 02 00    5158*  	dl BUF_52_004
044BBA 69 02 00    5159*  	dl BUF_52_020
044BBD 6A 02 00    5160*  	dl BUF_52_032
044BC0 6B 02 00    5161*  	dl BUF_52_040
044BC3 6C 02 00    5162*  	dl BUF_52_044
044BC6 6D 02 00    5163*  	dl BUF_56_004
044BC9 6E 02 00    5164*  	dl BUF_56_020
044BCC 6F 02 00    5165*  	dl BUF_56_032
044BCF 70 02 00    5166*  	dl BUF_56_040
044BD2 71 02 00    5167*  	dl BUF_56_044
044BD5 72 02 00    5168*  	dl BUF_60_004
044BD8 73 02 00    5169*  	dl BUF_60_020
044BDB 74 02 00    5170*  	dl BUF_60_032
044BDE 75 02 00    5171*  	dl BUF_60_040
044BE1 76 02 00    5172*  	dl BUF_60_044
044BE4             5173*  
044BE4             5174*  ; sprite load routines jump table:
044BE4             5175*  sprite_load_panels_table:
044BE4 10 4D 04    5176*  	dl ld_20_004
044BE7 3A 4D 04    5177*  	dl ld_20_020
044BEA 64 4D 04    5178*  	dl ld_20_032
044BED 8E 4D 04    5179*  	dl ld_20_040
044BF0 B8 4D 04    5180*  	dl ld_20_044
044BF3 E2 4D 04    5181*  	dl ld_21_004
044BF6 0C 4E 04    5182*  	dl ld_21_020
044BF9 36 4E 04    5183*  	dl ld_21_032
044BFC 60 4E 04    5184*  	dl ld_21_040
044BFF 8A 4E 04    5185*  	dl ld_21_044
044C02 B4 4E 04    5186*  	dl ld_22_004
044C05 DE 4E 04    5187*  	dl ld_22_020
044C08 08 4F 04    5188*  	dl ld_22_032
044C0B 32 4F 04    5189*  	dl ld_22_040
044C0E 5C 4F 04    5190*  	dl ld_22_044
044C11 86 4F 04    5191*  	dl ld_23_004
044C14 B0 4F 04    5192*  	dl ld_23_020
044C17 DA 4F 04    5193*  	dl ld_23_032
044C1A 04 50 04    5194*  	dl ld_23_040
044C1D 2E 50 04    5195*  	dl ld_23_044
044C20 58 50 04    5196*  	dl ld_24_004
044C23 82 50 04    5197*  	dl ld_24_020
044C26 AC 50 04    5198*  	dl ld_24_032
044C29 D6 50 04    5199*  	dl ld_24_040
044C2C 00 51 04    5200*  	dl ld_24_044
044C2F 2A 51 04    5201*  	dl ld_40_004
044C32 54 51 04    5202*  	dl ld_40_020
044C35 7E 51 04    5203*  	dl ld_40_032
044C38 A8 51 04    5204*  	dl ld_40_040
044C3B D2 51 04    5205*  	dl ld_40_044
044C3E FC 51 04    5206*  	dl ld_41_004
044C41 26 52 04    5207*  	dl ld_41_020
044C44 50 52 04    5208*  	dl ld_41_032
044C47 7A 52 04    5209*  	dl ld_41_040
044C4A A4 52 04    5210*  	dl ld_41_044
044C4D CE 52 04    5211*  	dl ld_42_004
044C50 F8 52 04    5212*  	dl ld_42_020
044C53 22 53 04    5213*  	dl ld_42_032
044C56 4C 53 04    5214*  	dl ld_42_040
044C59 76 53 04    5215*  	dl ld_42_044
044C5C A0 53 04    5216*  	dl ld_43_004
044C5F CA 53 04    5217*  	dl ld_43_020
044C62 F4 53 04    5218*  	dl ld_43_032
044C65 1E 54 04    5219*  	dl ld_43_040
044C68 48 54 04    5220*  	dl ld_43_044
044C6B 72 54 04    5221*  	dl ld_44_004
044C6E 9C 54 04    5222*  	dl ld_44_020
044C71 C6 54 04    5223*  	dl ld_44_032
044C74 F0 54 04    5224*  	dl ld_44_040
044C77 1A 55 04    5225*  	dl ld_44_044
044C7A 44 55 04    5226*  	dl ld_45_004
044C7D 6E 55 04    5227*  	dl ld_45_020
044C80 98 55 04    5228*  	dl ld_45_032
044C83 C2 55 04    5229*  	dl ld_45_040
044C86 EC 55 04    5230*  	dl ld_45_044
044C89 16 56 04    5231*  	dl ld_46_004
044C8C 40 56 04    5232*  	dl ld_46_020
044C8F 6A 56 04    5233*  	dl ld_46_032
044C92 94 56 04    5234*  	dl ld_46_040
044C95 BE 56 04    5235*  	dl ld_46_044
044C98 E8 56 04    5236*  	dl ld_47_004
044C9B 12 57 04    5237*  	dl ld_47_020
044C9E 3C 57 04    5238*  	dl ld_47_032
044CA1 66 57 04    5239*  	dl ld_47_040
044CA4 90 57 04    5240*  	dl ld_47_044
044CA7 BA 57 04    5241*  	dl ld_48_004
044CAA E4 57 04    5242*  	dl ld_48_020
044CAD 0E 58 04    5243*  	dl ld_48_032
044CB0 38 58 04    5244*  	dl ld_48_040
044CB3 62 58 04    5245*  	dl ld_48_044
044CB6 8C 58 04    5246*  	dl ld_49_004
044CB9 B6 58 04    5247*  	dl ld_49_020
044CBC E0 58 04    5248*  	dl ld_49_032
044CBF 0A 59 04    5249*  	dl ld_49_040
044CC2 34 59 04    5250*  	dl ld_49_044
044CC5 5E 59 04    5251*  	dl ld_50_004
044CC8 88 59 04    5252*  	dl ld_50_020
044CCB B2 59 04    5253*  	dl ld_50_032
044CCE DC 59 04    5254*  	dl ld_50_040
044CD1 06 5A 04    5255*  	dl ld_50_044
044CD4 30 5A 04    5256*  	dl ld_51_004
044CD7 5A 5A 04    5257*  	dl ld_51_020
044CDA 84 5A 04    5258*  	dl ld_51_032
044CDD AE 5A 04    5259*  	dl ld_51_040
044CE0 D8 5A 04    5260*  	dl ld_51_044
044CE3 02 5B 04    5261*  	dl ld_52_004
044CE6 2C 5B 04    5262*  	dl ld_52_020
044CE9 56 5B 04    5263*  	dl ld_52_032
044CEC 80 5B 04    5264*  	dl ld_52_040
044CEF AA 5B 04    5265*  	dl ld_52_044
044CF2 D4 5B 04    5266*  	dl ld_56_004
044CF5 FE 5B 04    5267*  	dl ld_56_020
044CF8 28 5C 04    5268*  	dl ld_56_032
044CFB 52 5C 04    5269*  	dl ld_56_040
044CFE 7C 5C 04    5270*  	dl ld_56_044
044D01 A6 5C 04    5271*  	dl ld_60_004
044D04 D0 5C 04    5272*  	dl ld_60_020
044D07 FA 5C 04    5273*  	dl ld_60_032
044D0A 24 5D 04    5274*  	dl ld_60_040
044D0D 4E 5D 04    5275*  	dl ld_60_044
044D10             5276*  
044D10             5277*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D10             5278*  
044D10             5279*  ld_20_004:
044D10 21 78 5D 04 5280*  	ld hl,F20_004
044D14 22 5D BE 04 5281*  	ld (cur_filename),hl
044D18 11 8D CA 04 5282*  	ld de,filedata
044D1C 01 00 00 01 5283*  	ld bc,65536
044D20 3E 01       5284*  	ld a,mos_load
044D22 5B CF       5285*  	RST.LIL 08h
044D24 21 13 02 00 5286*  	ld hl,BUF_20_004
044D28 01 13 00 00 5287*  	ld bc,19
044D2C 11 12 00 00 5288*  	ld de,18
044D30 DD 21 56 01 5289*  	ld ix,342
       00          
044D35 CD D8 BF 04 5290*  	call vdu_load_img
044D39 C9          5291*  	ret
044D3A             5292*  
044D3A             5293*  ld_20_020:
044D3A 21 8C 5D 04 5294*  	ld hl,F20_020
044D3E 22 5D BE 04 5295*  	ld (cur_filename),hl
044D42 11 8D CA 04 5296*  	ld de,filedata
044D46 01 00 00 01 5297*  	ld bc,65536
044D4A 3E 01       5298*  	ld a,mos_load
044D4C 5B CF       5299*  	RST.LIL 08h
044D4E 21 14 02 00 5300*  	ld hl,BUF_20_020
044D52 01 17 00 00 5301*  	ld bc,23
044D56 11 17 00 00 5302*  	ld de,23
044D5A DD 21 11 02 5303*  	ld ix,529
       00          
044D5F CD D8 BF 04 5304*  	call vdu_load_img
044D63 C9          5305*  	ret
044D64             5306*  
044D64             5307*  ld_20_032:
044D64 21 A0 5D 04 5308*  	ld hl,F20_032
044D68 22 5D BE 04 5309*  	ld (cur_filename),hl
044D6C 11 8D CA 04 5310*  	ld de,filedata
044D70 01 00 00 01 5311*  	ld bc,65536
044D74 3E 01       5312*  	ld a,mos_load
044D76 5B CF       5313*  	RST.LIL 08h
044D78 21 15 02 00 5314*  	ld hl,BUF_20_032
044D7C 01 20 00 00 5315*  	ld bc,32
044D80 11 22 00 00 5316*  	ld de,34
044D84 DD 21 40 04 5317*  	ld ix,1088
       00          
044D89 CD D8 BF 04 5318*  	call vdu_load_img
044D8D C9          5319*  	ret
044D8E             5320*  
044D8E             5321*  ld_20_040:
044D8E 21 B4 5D 04 5322*  	ld hl,F20_040
044D92 22 5D BE 04 5323*  	ld (cur_filename),hl
044D96 11 8D CA 04 5324*  	ld de,filedata
044D9A 01 00 00 01 5325*  	ld bc,65536
044D9E 3E 01       5326*  	ld a,mos_load
044DA0 5B CF       5327*  	RST.LIL 08h
044DA2 21 16 02 00 5328*  	ld hl,BUF_20_040
044DA6 01 36 00 00 5329*  	ld bc,54
044DAA 11 38 00 00 5330*  	ld de,56
044DAE DD 21 D0 0B 5331*  	ld ix,3024
       00          
044DB3 CD D8 BF 04 5332*  	call vdu_load_img
044DB7 C9          5333*  	ret
044DB8             5334*  
044DB8             5335*  ld_20_044:
044DB8 21 C8 5D 04 5336*  	ld hl,F20_044
044DBC 22 5D BE 04 5337*  	ld (cur_filename),hl
044DC0 11 8D CA 04 5338*  	ld de,filedata
044DC4 01 00 00 01 5339*  	ld bc,65536
044DC8 3E 01       5340*  	ld a,mos_load
044DCA 5B CF       5341*  	RST.LIL 08h
044DCC 21 17 02 00 5342*  	ld hl,BUF_20_044
044DD0 01 6B 00 00 5343*  	ld bc,107
044DD4 11 5B 00 00 5344*  	ld de,91
044DD8 DD 21 09 26 5345*  	ld ix,9737
       00          
044DDD CD D8 BF 04 5346*  	call vdu_load_img
044DE1 C9          5347*  	ret
044DE2             5348*  
044DE2             5349*  ld_21_004:
044DE2 21 DC 5D 04 5350*  	ld hl,F21_004
044DE6 22 5D BE 04 5351*  	ld (cur_filename),hl
044DEA 11 8D CA 04 5352*  	ld de,filedata
044DEE 01 00 00 01 5353*  	ld bc,65536
044DF2 3E 01       5354*  	ld a,mos_load
044DF4 5B CF       5355*  	RST.LIL 08h
044DF6 21 18 02 00 5356*  	ld hl,BUF_21_004
044DFA 01 0B 00 00 5357*  	ld bc,11
044DFE 11 0B 00 00 5358*  	ld de,11
044E02 DD 21 79 00 5359*  	ld ix,121
       00          
044E07 CD D8 BF 04 5360*  	call vdu_load_img
044E0B C9          5361*  	ret
044E0C             5362*  
044E0C             5363*  ld_21_020:
044E0C 21 F0 5D 04 5364*  	ld hl,F21_020
044E10 22 5D BE 04 5365*  	ld (cur_filename),hl
044E14 11 8D CA 04 5366*  	ld de,filedata
044E18 01 00 00 01 5367*  	ld bc,65536
044E1C 3E 01       5368*  	ld a,mos_load
044E1E 5B CF       5369*  	RST.LIL 08h
044E20 21 19 02 00 5370*  	ld hl,BUF_21_020
044E24 01 0E 00 00 5371*  	ld bc,14
044E28 11 0E 00 00 5372*  	ld de,14
044E2C DD 21 C4 00 5373*  	ld ix,196
       00          
044E31 CD D8 BF 04 5374*  	call vdu_load_img
044E35 C9          5375*  	ret
044E36             5376*  
044E36             5377*  ld_21_032:
044E36 21 04 5E 04 5378*  	ld hl,F21_032
044E3A 22 5D BE 04 5379*  	ld (cur_filename),hl
044E3E 11 8D CA 04 5380*  	ld de,filedata
044E42 01 00 00 01 5381*  	ld bc,65536
044E46 3E 01       5382*  	ld a,mos_load
044E48 5B CF       5383*  	RST.LIL 08h
044E4A 21 1A 02 00 5384*  	ld hl,BUF_21_032
044E4E 01 14 00 00 5385*  	ld bc,20
044E52 11 16 00 00 5386*  	ld de,22
044E56 DD 21 B8 01 5387*  	ld ix,440
       00          
044E5B CD D8 BF 04 5388*  	call vdu_load_img
044E5F C9          5389*  	ret
044E60             5390*  
044E60             5391*  ld_21_040:
044E60 21 18 5E 04 5392*  	ld hl,F21_040
044E64 22 5D BE 04 5393*  	ld (cur_filename),hl
044E68 11 8D CA 04 5394*  	ld de,filedata
044E6C 01 00 00 01 5395*  	ld bc,65536
044E70 3E 01       5396*  	ld a,mos_load
044E72 5B CF       5397*  	RST.LIL 08h
044E74 21 1B 02 00 5398*  	ld hl,BUF_21_040
044E78 01 21 00 00 5399*  	ld bc,33
044E7C 11 24 00 00 5400*  	ld de,36
044E80 DD 21 A4 04 5401*  	ld ix,1188
       00          
044E85 CD D8 BF 04 5402*  	call vdu_load_img
044E89 C9          5403*  	ret
044E8A             5404*  
044E8A             5405*  ld_21_044:
044E8A 21 2C 5E 04 5406*  	ld hl,F21_044
044E8E 22 5D BE 04 5407*  	ld (cur_filename),hl
044E92 11 8D CA 04 5408*  	ld de,filedata
044E96 01 00 00 01 5409*  	ld bc,65536
044E9A 3E 01       5410*  	ld a,mos_load
044E9C 5B CF       5411*  	RST.LIL 08h
044E9E 21 1C 02 00 5412*  	ld hl,BUF_21_044
044EA2 01 64 00 00 5413*  	ld bc,100
044EA6 11 1E 00 00 5414*  	ld de,30
044EAA DD 21 B8 0B 5415*  	ld ix,3000
       00          
044EAF CD D8 BF 04 5416*  	call vdu_load_img
044EB3 C9          5417*  	ret
044EB4             5418*  
044EB4             5419*  ld_22_004:
044EB4 21 40 5E 04 5420*  	ld hl,F22_004
044EB8 22 5D BE 04 5421*  	ld (cur_filename),hl
044EBC 11 8D CA 04 5422*  	ld de,filedata
044EC0 01 00 00 01 5423*  	ld bc,65536
044EC4 3E 01       5424*  	ld a,mos_load
044EC6 5B CF       5425*  	RST.LIL 08h
044EC8 21 1D 02 00 5426*  	ld hl,BUF_22_004
044ECC 01 11 00 00 5427*  	ld bc,17
044ED0 11 0B 00 00 5428*  	ld de,11
044ED4 DD 21 BB 00 5429*  	ld ix,187
       00          
044ED9 CD D8 BF 04 5430*  	call vdu_load_img
044EDD C9          5431*  	ret
044EDE             5432*  
044EDE             5433*  ld_22_020:
044EDE 21 54 5E 04 5434*  	ld hl,F22_020
044EE2 22 5D BE 04 5435*  	ld (cur_filename),hl
044EE6 11 8D CA 04 5436*  	ld de,filedata
044EEA 01 00 00 01 5437*  	ld bc,65536
044EEE 3E 01       5438*  	ld a,mos_load
044EF0 5B CF       5439*  	RST.LIL 08h
044EF2 21 1E 02 00 5440*  	ld hl,BUF_22_020
044EF6 01 16 00 00 5441*  	ld bc,22
044EFA 11 0E 00 00 5442*  	ld de,14
044EFE DD 21 34 01 5443*  	ld ix,308
       00          
044F03 CD D8 BF 04 5444*  	call vdu_load_img
044F07 C9          5445*  	ret
044F08             5446*  
044F08             5447*  ld_22_032:
044F08 21 68 5E 04 5448*  	ld hl,F22_032
044F0C 22 5D BE 04 5449*  	ld (cur_filename),hl
044F10 11 8D CA 04 5450*  	ld de,filedata
044F14 01 00 00 01 5451*  	ld bc,65536
044F18 3E 01       5452*  	ld a,mos_load
044F1A 5B CF       5453*  	RST.LIL 08h
044F1C 21 1F 02 00 5454*  	ld hl,BUF_22_032
044F20 01 1E 00 00 5455*  	ld bc,30
044F24 11 16 00 00 5456*  	ld de,22
044F28 DD 21 94 02 5457*  	ld ix,660
       00          
044F2D CD D8 BF 04 5458*  	call vdu_load_img
044F31 C9          5459*  	ret
044F32             5460*  
044F32             5461*  ld_22_040:
044F32 21 7C 5E 04 5462*  	ld hl,F22_040
044F36 22 5D BE 04 5463*  	ld (cur_filename),hl
044F3A 11 8D CA 04 5464*  	ld de,filedata
044F3E 01 00 00 01 5465*  	ld bc,65536
044F42 3E 01       5466*  	ld a,mos_load
044F44 5B CF       5467*  	RST.LIL 08h
044F46 21 20 02 00 5468*  	ld hl,BUF_22_040
044F4A 01 33 00 00 5469*  	ld bc,51
044F4E 11 24 00 00 5470*  	ld de,36
044F52 DD 21 2C 07 5471*  	ld ix,1836
       00          
044F57 CD D8 BF 04 5472*  	call vdu_load_img
044F5B C9          5473*  	ret
044F5C             5474*  
044F5C             5475*  ld_22_044:
044F5C 21 90 5E 04 5476*  	ld hl,F22_044
044F60 22 5D BE 04 5477*  	ld (cur_filename),hl
044F64 11 8D CA 04 5478*  	ld de,filedata
044F68 01 00 00 01 5479*  	ld bc,65536
044F6C 3E 01       5480*  	ld a,mos_load
044F6E 5B CF       5481*  	RST.LIL 08h
044F70 21 21 02 00 5482*  	ld hl,BUF_22_044
044F74 01 96 00 00 5483*  	ld bc,150
044F78 11 1E 00 00 5484*  	ld de,30
044F7C DD 21 94 11 5485*  	ld ix,4500
       00          
044F81 CD D8 BF 04 5486*  	call vdu_load_img
044F85 C9          5487*  	ret
044F86             5488*  
044F86             5489*  ld_23_004:
044F86 21 A4 5E 04 5490*  	ld hl,F23_004
044F8A 22 5D BE 04 5491*  	ld (cur_filename),hl
044F8E 11 8D CA 04 5492*  	ld de,filedata
044F92 01 00 00 01 5493*  	ld bc,65536
044F96 3E 01       5494*  	ld a,mos_load
044F98 5B CF       5495*  	RST.LIL 08h
044F9A 21 22 02 00 5496*  	ld hl,BUF_23_004
044F9E 01 0E 00 00 5497*  	ld bc,14
044FA2 11 06 00 00 5498*  	ld de,6
044FA6 DD 21 54 00 5499*  	ld ix,84
       00          
044FAB CD D8 BF 04 5500*  	call vdu_load_img
044FAF C9          5501*  	ret
044FB0             5502*  
044FB0             5503*  ld_23_020:
044FB0 21 B8 5E 04 5504*  	ld hl,F23_020
044FB4 22 5D BE 04 5505*  	ld (cur_filename),hl
044FB8 11 8D CA 04 5506*  	ld de,filedata
044FBC 01 00 00 01 5507*  	ld bc,65536
044FC0 3E 01       5508*  	ld a,mos_load
044FC2 5B CF       5509*  	RST.LIL 08h
044FC4 21 23 02 00 5510*  	ld hl,BUF_23_020
044FC8 01 11 00 00 5511*  	ld bc,17
044FCC 11 08 00 00 5512*  	ld de,8
044FD0 DD 21 88 00 5513*  	ld ix,136
       00          
044FD5 CD D8 BF 04 5514*  	call vdu_load_img
044FD9 C9          5515*  	ret
044FDA             5516*  
044FDA             5517*  ld_23_032:
044FDA 21 CC 5E 04 5518*  	ld hl,F23_032
044FDE 22 5D BE 04 5519*  	ld (cur_filename),hl
044FE2 11 8D CA 04 5520*  	ld de,filedata
044FE6 01 00 00 01 5521*  	ld bc,65536
044FEA 3E 01       5522*  	ld a,mos_load
044FEC 5B CF       5523*  	RST.LIL 08h
044FEE 21 24 02 00 5524*  	ld hl,BUF_23_032
044FF2 01 19 00 00 5525*  	ld bc,25
044FF6 11 0B 00 00 5526*  	ld de,11
044FFA DD 21 13 01 5527*  	ld ix,275
       00          
044FFF CD D8 BF 04 5528*  	call vdu_load_img
045003 C9          5529*  	ret
045004             5530*  
045004             5531*  ld_23_040:
045004 21 E0 5E 04 5532*  	ld hl,F23_040
045008 22 5D BE 04 5533*  	ld (cur_filename),hl
04500C 11 8D CA 04 5534*  	ld de,filedata
045010 01 00 00 01 5535*  	ld bc,65536
045014 3E 01       5536*  	ld a,mos_load
045016 5B CF       5537*  	RST.LIL 08h
045018 21 25 02 00 5538*  	ld hl,BUF_23_040
04501C 01 28 00 00 5539*  	ld bc,40
045020 11 12 00 00 5540*  	ld de,18
045024 DD 21 D0 02 5541*  	ld ix,720
       00          
045029 CD D8 BF 04 5542*  	call vdu_load_img
04502D C9          5543*  	ret
04502E             5544*  
04502E             5545*  ld_23_044:
04502E 21 F4 5E 04 5546*  	ld hl,F23_044
045032 22 5D BE 04 5547*  	ld (cur_filename),hl
045036 11 8D CA 04 5548*  	ld de,filedata
04503A 01 00 00 01 5549*  	ld bc,65536
04503E 3E 01       5550*  	ld a,mos_load
045040 5B CF       5551*  	RST.LIL 08h
045042 21 26 02 00 5552*  	ld hl,BUF_23_044
045046 01 01 00 00 5553*  	ld bc,1
04504A 11 01 00 00 5554*  	ld de,1
04504E DD 21 01 00 5555*  	ld ix,1
       00          
045053 CD D8 BF 04 5556*  	call vdu_load_img
045057 C9          5557*  	ret
045058             5558*  
045058             5559*  ld_24_004:
045058 21 08 5F 04 5560*  	ld hl,F24_004
04505C 22 5D BE 04 5561*  	ld (cur_filename),hl
045060 11 8D CA 04 5562*  	ld de,filedata
045064 01 00 00 01 5563*  	ld bc,65536
045068 3E 01       5564*  	ld a,mos_load
04506A 5B CF       5565*  	RST.LIL 08h
04506C 21 27 02 00 5566*  	ld hl,BUF_24_004
045070 01 0B 00 00 5567*  	ld bc,11
045074 11 0B 00 00 5568*  	ld de,11
045078 DD 21 79 00 5569*  	ld ix,121
       00          
04507D CD D8 BF 04 5570*  	call vdu_load_img
045081 C9          5571*  	ret
045082             5572*  
045082             5573*  ld_24_020:
045082 21 1C 5F 04 5574*  	ld hl,F24_020
045086 22 5D BE 04 5575*  	ld (cur_filename),hl
04508A 11 8D CA 04 5576*  	ld de,filedata
04508E 01 00 00 01 5577*  	ld bc,65536
045092 3E 01       5578*  	ld a,mos_load
045094 5B CF       5579*  	RST.LIL 08h
045096 21 28 02 00 5580*  	ld hl,BUF_24_020
04509A 01 0E 00 00 5581*  	ld bc,14
04509E 11 0E 00 00 5582*  	ld de,14
0450A2 DD 21 C4 00 5583*  	ld ix,196
       00          
0450A7 CD D8 BF 04 5584*  	call vdu_load_img
0450AB C9          5585*  	ret
0450AC             5586*  
0450AC             5587*  ld_24_032:
0450AC 21 30 5F 04 5588*  	ld hl,F24_032
0450B0 22 5D BE 04 5589*  	ld (cur_filename),hl
0450B4 11 8D CA 04 5590*  	ld de,filedata
0450B8 01 00 00 01 5591*  	ld bc,65536
0450BC 3E 01       5592*  	ld a,mos_load
0450BE 5B CF       5593*  	RST.LIL 08h
0450C0 21 29 02 00 5594*  	ld hl,BUF_24_032
0450C4 01 14 00 00 5595*  	ld bc,20
0450C8 11 16 00 00 5596*  	ld de,22
0450CC DD 21 B8 01 5597*  	ld ix,440
       00          
0450D1 CD D8 BF 04 5598*  	call vdu_load_img
0450D5 C9          5599*  	ret
0450D6             5600*  
0450D6             5601*  ld_24_040:
0450D6 21 44 5F 04 5602*  	ld hl,F24_040
0450DA 22 5D BE 04 5603*  	ld (cur_filename),hl
0450DE 11 8D CA 04 5604*  	ld de,filedata
0450E2 01 00 00 01 5605*  	ld bc,65536
0450E6 3E 01       5606*  	ld a,mos_load
0450E8 5B CF       5607*  	RST.LIL 08h
0450EA 21 2A 02 00 5608*  	ld hl,BUF_24_040
0450EE 01 21 00 00 5609*  	ld bc,33
0450F2 11 24 00 00 5610*  	ld de,36
0450F6 DD 21 A4 04 5611*  	ld ix,1188
       00          
0450FB CD D8 BF 04 5612*  	call vdu_load_img
0450FF C9          5613*  	ret
045100             5614*  
045100             5615*  ld_24_044:
045100 21 58 5F 04 5616*  	ld hl,F24_044
045104 22 5D BE 04 5617*  	ld (cur_filename),hl
045108 11 8D CA 04 5618*  	ld de,filedata
04510C 01 00 00 01 5619*  	ld bc,65536
045110 3E 01       5620*  	ld a,mos_load
045112 5B CF       5621*  	RST.LIL 08h
045114 21 2B 02 00 5622*  	ld hl,BUF_24_044
045118 01 64 00 00 5623*  	ld bc,100
04511C 11 1E 00 00 5624*  	ld de,30
045120 DD 21 B8 0B 5625*  	ld ix,3000
       00          
045125 CD D8 BF 04 5626*  	call vdu_load_img
045129 C9          5627*  	ret
04512A             5628*  
04512A             5629*  ld_40_004:
04512A 21 6C 5F 04 5630*  	ld hl,F40_004
04512E 22 5D BE 04 5631*  	ld (cur_filename),hl
045132 11 8D CA 04 5632*  	ld de,filedata
045136 01 00 00 01 5633*  	ld bc,65536
04513A 3E 01       5634*  	ld a,mos_load
04513C 5B CF       5635*  	RST.LIL 08h
04513E 21 2C 02 00 5636*  	ld hl,BUF_40_004
045142 01 0E 00 00 5637*  	ld bc,14
045146 11 07 00 00 5638*  	ld de,7
04514A DD 21 62 00 5639*  	ld ix,98
       00          
04514F CD D8 BF 04 5640*  	call vdu_load_img
045153 C9          5641*  	ret
045154             5642*  
045154             5643*  ld_40_020:
045154 21 80 5F 04 5644*  	ld hl,F40_020
045158 22 5D BE 04 5645*  	ld (cur_filename),hl
04515C 11 8D CA 04 5646*  	ld de,filedata
045160 01 00 00 01 5647*  	ld bc,65536
045164 3E 01       5648*  	ld a,mos_load
045166 5B CF       5649*  	RST.LIL 08h
045168 21 2D 02 00 5650*  	ld hl,BUF_40_020
04516C 01 12 00 00 5651*  	ld bc,18
045170 11 0A 00 00 5652*  	ld de,10
045174 DD 21 B4 00 5653*  	ld ix,180
       00          
045179 CD D8 BF 04 5654*  	call vdu_load_img
04517D C9          5655*  	ret
04517E             5656*  
04517E             5657*  ld_40_032:
04517E 21 94 5F 04 5658*  	ld hl,F40_032
045182 22 5D BE 04 5659*  	ld (cur_filename),hl
045186 11 8D CA 04 5660*  	ld de,filedata
04518A 01 00 00 01 5661*  	ld bc,65536
04518E 3E 01       5662*  	ld a,mos_load
045190 5B CF       5663*  	RST.LIL 08h
045192 21 2E 02 00 5664*  	ld hl,BUF_40_032
045196 01 1A 00 00 5665*  	ld bc,26
04519A 11 0D 00 00 5666*  	ld de,13
04519E DD 21 52 01 5667*  	ld ix,338
       00          
0451A3 CD D8 BF 04 5668*  	call vdu_load_img
0451A7 C9          5669*  	ret
0451A8             5670*  
0451A8             5671*  ld_40_040:
0451A8 21 A8 5F 04 5672*  	ld hl,F40_040
0451AC 22 5D BE 04 5673*  	ld (cur_filename),hl
0451B0 11 8D CA 04 5674*  	ld de,filedata
0451B4 01 00 00 01 5675*  	ld bc,65536
0451B8 3E 01       5676*  	ld a,mos_load
0451BA 5B CF       5677*  	RST.LIL 08h
0451BC 21 2F 02 00 5678*  	ld hl,BUF_40_040
0451C0 01 2B 00 00 5679*  	ld bc,43
0451C4 11 17 00 00 5680*  	ld de,23
0451C8 DD 21 DD 03 5681*  	ld ix,989
       00          
0451CD CD D8 BF 04 5682*  	call vdu_load_img
0451D1 C9          5683*  	ret
0451D2             5684*  
0451D2             5685*  ld_40_044:
0451D2 21 BC 5F 04 5686*  	ld hl,F40_044
0451D6 22 5D BE 04 5687*  	ld (cur_filename),hl
0451DA 11 8D CA 04 5688*  	ld de,filedata
0451DE 01 00 00 01 5689*  	ld bc,65536
0451E2 3E 01       5690*  	ld a,mos_load
0451E4 5B CF       5691*  	RST.LIL 08h
0451E6 21 30 02 00 5692*  	ld hl,BUF_40_044
0451EA 01 01 00 00 5693*  	ld bc,1
0451EE 11 01 00 00 5694*  	ld de,1
0451F2 DD 21 01 00 5695*  	ld ix,1
       00          
0451F7 CD D8 BF 04 5696*  	call vdu_load_img
0451FB C9          5697*  	ret
0451FC             5698*  
0451FC             5699*  ld_41_004:
0451FC 21 D0 5F 04 5700*  	ld hl,F41_004
045200 22 5D BE 04 5701*  	ld (cur_filename),hl
045204 11 8D CA 04 5702*  	ld de,filedata
045208 01 00 00 01 5703*  	ld bc,65536
04520C 3E 01       5704*  	ld a,mos_load
04520E 5B CF       5705*  	RST.LIL 08h
045210 21 31 02 00 5706*  	ld hl,BUF_41_004
045214 01 0B 00 00 5707*  	ld bc,11
045218 11 0B 00 00 5708*  	ld de,11
04521C DD 21 79 00 5709*  	ld ix,121
       00          
045221 CD D8 BF 04 5710*  	call vdu_load_img
045225 C9          5711*  	ret
045226             5712*  
045226             5713*  ld_41_020:
045226 21 E4 5F 04 5714*  	ld hl,F41_020
04522A 22 5D BE 04 5715*  	ld (cur_filename),hl
04522E 11 8D CA 04 5716*  	ld de,filedata
045232 01 00 00 01 5717*  	ld bc,65536
045236 3E 01       5718*  	ld a,mos_load
045238 5B CF       5719*  	RST.LIL 08h
04523A 21 32 02 00 5720*  	ld hl,BUF_41_020
04523E 01 10 00 00 5721*  	ld bc,16
045242 11 0E 00 00 5722*  	ld de,14
045246 DD 21 E0 00 5723*  	ld ix,224
       00          
04524B CD D8 BF 04 5724*  	call vdu_load_img
04524F C9          5725*  	ret
045250             5726*  
045250             5727*  ld_41_032:
045250 21 F8 5F 04 5728*  	ld hl,F41_032
045254 22 5D BE 04 5729*  	ld (cur_filename),hl
045258 11 8D CA 04 5730*  	ld de,filedata
04525C 01 00 00 01 5731*  	ld bc,65536
045260 3E 01       5732*  	ld a,mos_load
045262 5B CF       5733*  	RST.LIL 08h
045264 21 33 02 00 5734*  	ld hl,BUF_41_032
045268 01 16 00 00 5735*  	ld bc,22
04526C 11 14 00 00 5736*  	ld de,20
045270 DD 21 B8 01 5737*  	ld ix,440
       00          
045275 CD D8 BF 04 5738*  	call vdu_load_img
045279 C9          5739*  	ret
04527A             5740*  
04527A             5741*  ld_41_040:
04527A 21 0C 60 04 5742*  	ld hl,F41_040
04527E 22 5D BE 04 5743*  	ld (cur_filename),hl
045282 11 8D CA 04 5744*  	ld de,filedata
045286 01 00 00 01 5745*  	ld bc,65536
04528A 3E 01       5746*  	ld a,mos_load
04528C 5B CF       5747*  	RST.LIL 08h
04528E 21 34 02 00 5748*  	ld hl,BUF_41_040
045292 01 25 00 00 5749*  	ld bc,37
045296 11 22 00 00 5750*  	ld de,34
04529A DD 21 EA 04 5751*  	ld ix,1258
       00          
04529F CD D8 BF 04 5752*  	call vdu_load_img
0452A3 C9          5753*  	ret
0452A4             5754*  
0452A4             5755*  ld_41_044:
0452A4 21 20 60 04 5756*  	ld hl,F41_044
0452A8 22 5D BE 04 5757*  	ld (cur_filename),hl
0452AC 11 8D CA 04 5758*  	ld de,filedata
0452B0 01 00 00 01 5759*  	ld bc,65536
0452B4 3E 01       5760*  	ld a,mos_load
0452B6 5B CF       5761*  	RST.LIL 08h
0452B8 21 35 02 00 5762*  	ld hl,BUF_41_044
0452BC 01 23 00 00 5763*  	ld bc,35
0452C0 11 19 00 00 5764*  	ld de,25
0452C4 DD 21 6B 03 5765*  	ld ix,875
       00          
0452C9 CD D8 BF 04 5766*  	call vdu_load_img
0452CD C9          5767*  	ret
0452CE             5768*  
0452CE             5769*  ld_42_004:
0452CE 21 34 60 04 5770*  	ld hl,F42_004
0452D2 22 5D BE 04 5771*  	ld (cur_filename),hl
0452D6 11 8D CA 04 5772*  	ld de,filedata
0452DA 01 00 00 01 5773*  	ld bc,65536
0452DE 3E 01       5774*  	ld a,mos_load
0452E0 5B CF       5775*  	RST.LIL 08h
0452E2 21 36 02 00 5776*  	ld hl,BUF_42_004
0452E6 01 0A 00 00 5777*  	ld bc,10
0452EA 11 09 00 00 5778*  	ld de,9
0452EE DD 21 5A 00 5779*  	ld ix,90
       00          
0452F3 CD D8 BF 04 5780*  	call vdu_load_img
0452F7 C9          5781*  	ret
0452F8             5782*  
0452F8             5783*  ld_42_020:
0452F8 21 48 60 04 5784*  	ld hl,F42_020
0452FC 22 5D BE 04 5785*  	ld (cur_filename),hl
045300 11 8D CA 04 5786*  	ld de,filedata
045304 01 00 00 01 5787*  	ld bc,65536
045308 3E 01       5788*  	ld a,mos_load
04530A 5B CF       5789*  	RST.LIL 08h
04530C 21 37 02 00 5790*  	ld hl,BUF_42_020
045310 01 0E 00 00 5791*  	ld bc,14
045314 11 0B 00 00 5792*  	ld de,11
045318 DD 21 9A 00 5793*  	ld ix,154
       00          
04531D CD D8 BF 04 5794*  	call vdu_load_img
045321 C9          5795*  	ret
045322             5796*  
045322             5797*  ld_42_032:
045322 21 5C 60 04 5798*  	ld hl,F42_032
045326 22 5D BE 04 5799*  	ld (cur_filename),hl
04532A 11 8D CA 04 5800*  	ld de,filedata
04532E 01 00 00 01 5801*  	ld bc,65536
045332 3E 01       5802*  	ld a,mos_load
045334 5B CF       5803*  	RST.LIL 08h
045336 21 38 02 00 5804*  	ld hl,BUF_42_032
04533A 01 13 00 00 5805*  	ld bc,19
04533E 11 10 00 00 5806*  	ld de,16
045342 DD 21 30 01 5807*  	ld ix,304
       00          
045347 CD D8 BF 04 5808*  	call vdu_load_img
04534B C9          5809*  	ret
04534C             5810*  
04534C             5811*  ld_42_040:
04534C 21 70 60 04 5812*  	ld hl,F42_040
045350 22 5D BE 04 5813*  	ld (cur_filename),hl
045354 11 8D CA 04 5814*  	ld de,filedata
045358 01 00 00 01 5815*  	ld bc,65536
04535C 3E 01       5816*  	ld a,mos_load
04535E 5B CF       5817*  	RST.LIL 08h
045360 21 39 02 00 5818*  	ld hl,BUF_42_040
045364 01 20 00 00 5819*  	ld bc,32
045368 11 1B 00 00 5820*  	ld de,27
04536C DD 21 60 03 5821*  	ld ix,864
       00          
045371 CD D8 BF 04 5822*  	call vdu_load_img
045375 C9          5823*  	ret
045376             5824*  
045376             5825*  ld_42_044:
045376 21 84 60 04 5826*  	ld hl,F42_044
04537A 22 5D BE 04 5827*  	ld (cur_filename),hl
04537E 11 8D CA 04 5828*  	ld de,filedata
045382 01 00 00 01 5829*  	ld bc,65536
045386 3E 01       5830*  	ld a,mos_load
045388 5B CF       5831*  	RST.LIL 08h
04538A 21 3A 02 00 5832*  	ld hl,BUF_42_044
04538E 01 3F 00 00 5833*  	ld bc,63
045392 11 04 00 00 5834*  	ld de,4
045396 DD 21 FC 00 5835*  	ld ix,252
       00          
04539B CD D8 BF 04 5836*  	call vdu_load_img
04539F C9          5837*  	ret
0453A0             5838*  
0453A0             5839*  ld_43_004:
0453A0 21 98 60 04 5840*  	ld hl,F43_004
0453A4 22 5D BE 04 5841*  	ld (cur_filename),hl
0453A8 11 8D CA 04 5842*  	ld de,filedata
0453AC 01 00 00 01 5843*  	ld bc,65536
0453B0 3E 01       5844*  	ld a,mos_load
0453B2 5B CF       5845*  	RST.LIL 08h
0453B4 21 3B 02 00 5846*  	ld hl,BUF_43_004
0453B8 01 0B 00 00 5847*  	ld bc,11
0453BC 11 04 00 00 5848*  	ld de,4
0453C0 DD 21 2C 00 5849*  	ld ix,44
       00          
0453C5 CD D8 BF 04 5850*  	call vdu_load_img
0453C9 C9          5851*  	ret
0453CA             5852*  
0453CA             5853*  ld_43_020:
0453CA 21 AC 60 04 5854*  	ld hl,F43_020
0453CE 22 5D BE 04 5855*  	ld (cur_filename),hl
0453D2 11 8D CA 04 5856*  	ld de,filedata
0453D6 01 00 00 01 5857*  	ld bc,65536
0453DA 3E 01       5858*  	ld a,mos_load
0453DC 5B CF       5859*  	RST.LIL 08h
0453DE 21 3C 02 00 5860*  	ld hl,BUF_43_020
0453E2 01 0F 00 00 5861*  	ld bc,15
0453E6 11 04 00 00 5862*  	ld de,4
0453EA DD 21 3C 00 5863*  	ld ix,60
       00          
0453EF CD D8 BF 04 5864*  	call vdu_load_img
0453F3 C9          5865*  	ret
0453F4             5866*  
0453F4             5867*  ld_43_032:
0453F4 21 C0 60 04 5868*  	ld hl,F43_032
0453F8 22 5D BE 04 5869*  	ld (cur_filename),hl
0453FC 11 8D CA 04 5870*  	ld de,filedata
045400 01 00 00 01 5871*  	ld bc,65536
045404 3E 01       5872*  	ld a,mos_load
045406 5B CF       5873*  	RST.LIL 08h
045408 21 3D 02 00 5874*  	ld hl,BUF_43_032
04540C 01 15 00 00 5875*  	ld bc,21
045410 11 07 00 00 5876*  	ld de,7
045414 DD 21 93 00 5877*  	ld ix,147
       00          
045419 CD D8 BF 04 5878*  	call vdu_load_img
04541D C9          5879*  	ret
04541E             5880*  
04541E             5881*  ld_43_040:
04541E 21 D4 60 04 5882*  	ld hl,F43_040
045422 22 5D BE 04 5883*  	ld (cur_filename),hl
045426 11 8D CA 04 5884*  	ld de,filedata
04542A 01 00 00 01 5885*  	ld bc,65536
04542E 3E 01       5886*  	ld a,mos_load
045430 5B CF       5887*  	RST.LIL 08h
045432 21 3E 02 00 5888*  	ld hl,BUF_43_040
045436 01 23 00 00 5889*  	ld bc,35
04543A 11 0D 00 00 5890*  	ld de,13
04543E DD 21 C7 01 5891*  	ld ix,455
       00          
045443 CD D8 BF 04 5892*  	call vdu_load_img
045447 C9          5893*  	ret
045448             5894*  
045448             5895*  ld_43_044:
045448 21 E8 60 04 5896*  	ld hl,F43_044
04544C 22 5D BE 04 5897*  	ld (cur_filename),hl
045450 11 8D CA 04 5898*  	ld de,filedata
045454 01 00 00 01 5899*  	ld bc,65536
045458 3E 01       5900*  	ld a,mos_load
04545A 5B CF       5901*  	RST.LIL 08h
04545C 21 3F 02 00 5902*  	ld hl,BUF_43_044
045460 01 01 00 00 5903*  	ld bc,1
045464 11 01 00 00 5904*  	ld de,1
045468 DD 21 01 00 5905*  	ld ix,1
       00          
04546D CD D8 BF 04 5906*  	call vdu_load_img
045471 C9          5907*  	ret
045472             5908*  
045472             5909*  ld_44_004:
045472 21 FC 60 04 5910*  	ld hl,F44_004
045476 22 5D BE 04 5911*  	ld (cur_filename),hl
04547A 11 8D CA 04 5912*  	ld de,filedata
04547E 01 00 00 01 5913*  	ld bc,65536
045482 3E 01       5914*  	ld a,mos_load
045484 5B CF       5915*  	RST.LIL 08h
045486 21 40 02 00 5916*  	ld hl,BUF_44_004
04548A 01 05 00 00 5917*  	ld bc,5
04548E 11 04 00 00 5918*  	ld de,4
045492 DD 21 14 00 5919*  	ld ix,20
       00          
045497 CD D8 BF 04 5920*  	call vdu_load_img
04549B C9          5921*  	ret
04549C             5922*  
04549C             5923*  ld_44_020:
04549C 21 10 61 04 5924*  	ld hl,F44_020
0454A0 22 5D BE 04 5925*  	ld (cur_filename),hl
0454A4 11 8D CA 04 5926*  	ld de,filedata
0454A8 01 00 00 01 5927*  	ld bc,65536
0454AC 3E 01       5928*  	ld a,mos_load
0454AE 5B CF       5929*  	RST.LIL 08h
0454B0 21 41 02 00 5930*  	ld hl,BUF_44_020
0454B4 01 08 00 00 5931*  	ld bc,8
0454B8 11 06 00 00 5932*  	ld de,6
0454BC DD 21 30 00 5933*  	ld ix,48
       00          
0454C1 CD D8 BF 04 5934*  	call vdu_load_img
0454C5 C9          5935*  	ret
0454C6             5936*  
0454C6             5937*  ld_44_032:
0454C6 21 24 61 04 5938*  	ld hl,F44_032
0454CA 22 5D BE 04 5939*  	ld (cur_filename),hl
0454CE 11 8D CA 04 5940*  	ld de,filedata
0454D2 01 00 00 01 5941*  	ld bc,65536
0454D6 3E 01       5942*  	ld a,mos_load
0454D8 5B CF       5943*  	RST.LIL 08h
0454DA 21 42 02 00 5944*  	ld hl,BUF_44_032
0454DE 01 0D 00 00 5945*  	ld bc,13
0454E2 11 0A 00 00 5946*  	ld de,10
0454E6 DD 21 82 00 5947*  	ld ix,130
       00          
0454EB CD D8 BF 04 5948*  	call vdu_load_img
0454EF C9          5949*  	ret
0454F0             5950*  
0454F0             5951*  ld_44_040:
0454F0 21 38 61 04 5952*  	ld hl,F44_040
0454F4 22 5D BE 04 5953*  	ld (cur_filename),hl
0454F8 11 8D CA 04 5954*  	ld de,filedata
0454FC 01 00 00 01 5955*  	ld bc,65536
045500 3E 01       5956*  	ld a,mos_load
045502 5B CF       5957*  	RST.LIL 08h
045504 21 43 02 00 5958*  	ld hl,BUF_44_040
045508 01 14 00 00 5959*  	ld bc,20
04550C 11 0F 00 00 5960*  	ld de,15
045510 DD 21 2C 01 5961*  	ld ix,300
       00          
045515 CD D8 BF 04 5962*  	call vdu_load_img
045519 C9          5963*  	ret
04551A             5964*  
04551A             5965*  ld_44_044:
04551A 21 4C 61 04 5966*  	ld hl,F44_044
04551E 22 5D BE 04 5967*  	ld (cur_filename),hl
045522 11 8D CA 04 5968*  	ld de,filedata
045526 01 00 00 01 5969*  	ld bc,65536
04552A 3E 01       5970*  	ld a,mos_load
04552C 5B CF       5971*  	RST.LIL 08h
04552E 21 44 02 00 5972*  	ld hl,BUF_44_044
045532 01 01 00 00 5973*  	ld bc,1
045536 11 01 00 00 5974*  	ld de,1
04553A DD 21 01 00 5975*  	ld ix,1
       00          
04553F CD D8 BF 04 5976*  	call vdu_load_img
045543 C9          5977*  	ret
045544             5978*  
045544             5979*  ld_45_004:
045544 21 60 61 04 5980*  	ld hl,F45_004
045548 22 5D BE 04 5981*  	ld (cur_filename),hl
04554C 11 8D CA 04 5982*  	ld de,filedata
045550 01 00 00 01 5983*  	ld bc,65536
045554 3E 01       5984*  	ld a,mos_load
045556 5B CF       5985*  	RST.LIL 08h
045558 21 45 02 00 5986*  	ld hl,BUF_45_004
04555C 01 10 00 00 5987*  	ld bc,16
045560 11 0A 00 00 5988*  	ld de,10
045564 DD 21 A0 00 5989*  	ld ix,160
       00          
045569 CD D8 BF 04 5990*  	call vdu_load_img
04556D C9          5991*  	ret
04556E             5992*  
04556E             5993*  ld_45_020:
04556E 21 74 61 04 5994*  	ld hl,F45_020
045572 22 5D BE 04 5995*  	ld (cur_filename),hl
045576 11 8D CA 04 5996*  	ld de,filedata
04557A 01 00 00 01 5997*  	ld bc,65536
04557E 3E 01       5998*  	ld a,mos_load
045580 5B CF       5999*  	RST.LIL 08h
045582 21 46 02 00 6000*  	ld hl,BUF_45_020
045586 01 14 00 00 6001*  	ld bc,20
04558A 11 0D 00 00 6002*  	ld de,13
04558E DD 21 04 01 6003*  	ld ix,260
       00          
045593 CD D8 BF 04 6004*  	call vdu_load_img
045597 C9          6005*  	ret
045598             6006*  
045598             6007*  ld_45_032:
045598 21 88 61 04 6008*  	ld hl,F45_032
04559C 22 5D BE 04 6009*  	ld (cur_filename),hl
0455A0 11 8D CA 04 6010*  	ld de,filedata
0455A4 01 00 00 01 6011*  	ld bc,65536
0455A8 3E 01       6012*  	ld a,mos_load
0455AA 5B CF       6013*  	RST.LIL 08h
0455AC 21 47 02 00 6014*  	ld hl,BUF_45_032
0455B0 01 1D 00 00 6015*  	ld bc,29
0455B4 11 12 00 00 6016*  	ld de,18
0455B8 DD 21 0A 02 6017*  	ld ix,522
       00          
0455BD CD D8 BF 04 6018*  	call vdu_load_img
0455C1 C9          6019*  	ret
0455C2             6020*  
0455C2             6021*  ld_45_040:
0455C2 21 9C 61 04 6022*  	ld hl,F45_040
0455C6 22 5D BE 04 6023*  	ld (cur_filename),hl
0455CA 11 8D CA 04 6024*  	ld de,filedata
0455CE 01 00 00 01 6025*  	ld bc,65536
0455D2 3E 01       6026*  	ld a,mos_load
0455D4 5B CF       6027*  	RST.LIL 08h
0455D6 21 48 02 00 6028*  	ld hl,BUF_45_040
0455DA 01 30 00 00 6029*  	ld bc,48
0455DE 11 21 00 00 6030*  	ld de,33
0455E2 DD 21 30 06 6031*  	ld ix,1584
       00          
0455E7 CD D8 BF 04 6032*  	call vdu_load_img
0455EB C9          6033*  	ret
0455EC             6034*  
0455EC             6035*  ld_45_044:
0455EC 21 B0 61 04 6036*  	ld hl,F45_044
0455F0 22 5D BE 04 6037*  	ld (cur_filename),hl
0455F4 11 8D CA 04 6038*  	ld de,filedata
0455F8 01 00 00 01 6039*  	ld bc,65536
0455FC 3E 01       6040*  	ld a,mos_load
0455FE 5B CF       6041*  	RST.LIL 08h
045600 21 49 02 00 6042*  	ld hl,BUF_45_044
045604 01 75 00 00 6043*  	ld bc,117
045608 11 13 00 00 6044*  	ld de,19
04560C DD 21 AF 08 6045*  	ld ix,2223
       00          
045611 CD D8 BF 04 6046*  	call vdu_load_img
045615 C9          6047*  	ret
045616             6048*  
045616             6049*  ld_46_004:
045616 21 C4 61 04 6050*  	ld hl,F46_004
04561A 22 5D BE 04 6051*  	ld (cur_filename),hl
04561E 11 8D CA 04 6052*  	ld de,filedata
045622 01 00 00 01 6053*  	ld bc,65536
045626 3E 01       6054*  	ld a,mos_load
045628 5B CF       6055*  	RST.LIL 08h
04562A 21 4A 02 00 6056*  	ld hl,BUF_46_004
04562E 01 10 00 00 6057*  	ld bc,16
045632 11 08 00 00 6058*  	ld de,8
045636 DD 21 80 00 6059*  	ld ix,128
       00          
04563B CD D8 BF 04 6060*  	call vdu_load_img
04563F C9          6061*  	ret
045640             6062*  
045640             6063*  ld_46_020:
045640 21 D8 61 04 6064*  	ld hl,F46_020
045644 22 5D BE 04 6065*  	ld (cur_filename),hl
045648 11 8D CA 04 6066*  	ld de,filedata
04564C 01 00 00 01 6067*  	ld bc,65536
045650 3E 01       6068*  	ld a,mos_load
045652 5B CF       6069*  	RST.LIL 08h
045654 21 4B 02 00 6070*  	ld hl,BUF_46_020
045658 01 14 00 00 6071*  	ld bc,20
04565C 11 0B 00 00 6072*  	ld de,11
045660 DD 21 DC 00 6073*  	ld ix,220
       00          
045665 CD D8 BF 04 6074*  	call vdu_load_img
045669 C9          6075*  	ret
04566A             6076*  
04566A             6077*  ld_46_032:
04566A 21 EC 61 04 6078*  	ld hl,F46_032
04566E 22 5D BE 04 6079*  	ld (cur_filename),hl
045672 11 8D CA 04 6080*  	ld de,filedata
045676 01 00 00 01 6081*  	ld bc,65536
04567A 3E 01       6082*  	ld a,mos_load
04567C 5B CF       6083*  	RST.LIL 08h
04567E 21 4C 02 00 6084*  	ld hl,BUF_46_032
045682 01 1D 00 00 6085*  	ld bc,29
045686 11 0F 00 00 6086*  	ld de,15
04568A DD 21 B3 01 6087*  	ld ix,435
       00          
04568F CD D8 BF 04 6088*  	call vdu_load_img
045693 C9          6089*  	ret
045694             6090*  
045694             6091*  ld_46_040:
045694 21 00 62 04 6092*  	ld hl,F46_040
045698 22 5D BE 04 6093*  	ld (cur_filename),hl
04569C 11 8D CA 04 6094*  	ld de,filedata
0456A0 01 00 00 01 6095*  	ld bc,65536
0456A4 3E 01       6096*  	ld a,mos_load
0456A6 5B CF       6097*  	RST.LIL 08h
0456A8 21 4D 02 00 6098*  	ld hl,BUF_46_040
0456AC 01 30 00 00 6099*  	ld bc,48
0456B0 11 1B 00 00 6100*  	ld de,27
0456B4 DD 21 10 05 6101*  	ld ix,1296
       00          
0456B9 CD D8 BF 04 6102*  	call vdu_load_img
0456BD C9          6103*  	ret
0456BE             6104*  
0456BE             6105*  ld_46_044:
0456BE 21 14 62 04 6106*  	ld hl,F46_044
0456C2 22 5D BE 04 6107*  	ld (cur_filename),hl
0456C6 11 8D CA 04 6108*  	ld de,filedata
0456CA 01 00 00 01 6109*  	ld bc,65536
0456CE 3E 01       6110*  	ld a,mos_load
0456D0 5B CF       6111*  	RST.LIL 08h
0456D2 21 4E 02 00 6112*  	ld hl,BUF_46_044
0456D6 01 51 00 00 6113*  	ld bc,81
0456DA 11 01 00 00 6114*  	ld de,1
0456DE DD 21 51 00 6115*  	ld ix,81
       00          
0456E3 CD D8 BF 04 6116*  	call vdu_load_img
0456E7 C9          6117*  	ret
0456E8             6118*  
0456E8             6119*  ld_47_004:
0456E8 21 28 62 04 6120*  	ld hl,F47_004
0456EC 22 5D BE 04 6121*  	ld (cur_filename),hl
0456F0 11 8D CA 04 6122*  	ld de,filedata
0456F4 01 00 00 01 6123*  	ld bc,65536
0456F8 3E 01       6124*  	ld a,mos_load
0456FA 5B CF       6125*  	RST.LIL 08h
0456FC 21 4F 02 00 6126*  	ld hl,BUF_47_004
045700 01 10 00 00 6127*  	ld bc,16
045704 11 09 00 00 6128*  	ld de,9
045708 DD 21 90 00 6129*  	ld ix,144
       00          
04570D CD D8 BF 04 6130*  	call vdu_load_img
045711 C9          6131*  	ret
045712             6132*  
045712             6133*  ld_47_020:
045712 21 3C 62 04 6134*  	ld hl,F47_020
045716 22 5D BE 04 6135*  	ld (cur_filename),hl
04571A 11 8D CA 04 6136*  	ld de,filedata
04571E 01 00 00 01 6137*  	ld bc,65536
045722 3E 01       6138*  	ld a,mos_load
045724 5B CF       6139*  	RST.LIL 08h
045726 21 50 02 00 6140*  	ld hl,BUF_47_020
04572A 01 14 00 00 6141*  	ld bc,20
04572E 11 0B 00 00 6142*  	ld de,11
045732 DD 21 DC 00 6143*  	ld ix,220
       00          
045737 CD D8 BF 04 6144*  	call vdu_load_img
04573B C9          6145*  	ret
04573C             6146*  
04573C             6147*  ld_47_032:
04573C 21 50 62 04 6148*  	ld hl,F47_032
045740 22 5D BE 04 6149*  	ld (cur_filename),hl
045744 11 8D CA 04 6150*  	ld de,filedata
045748 01 00 00 01 6151*  	ld bc,65536
04574C 3E 01       6152*  	ld a,mos_load
04574E 5B CF       6153*  	RST.LIL 08h
045750 21 51 02 00 6154*  	ld hl,BUF_47_032
045754 01 1D 00 00 6155*  	ld bc,29
045758 11 11 00 00 6156*  	ld de,17
04575C DD 21 ED 01 6157*  	ld ix,493
       00          
045761 CD D8 BF 04 6158*  	call vdu_load_img
045765 C9          6159*  	ret
045766             6160*  
045766             6161*  ld_47_040:
045766 21 64 62 04 6162*  	ld hl,F47_040
04576A 22 5D BE 04 6163*  	ld (cur_filename),hl
04576E 11 8D CA 04 6164*  	ld de,filedata
045772 01 00 00 01 6165*  	ld bc,65536
045776 3E 01       6166*  	ld a,mos_load
045778 5B CF       6167*  	RST.LIL 08h
04577A 21 52 02 00 6168*  	ld hl,BUF_47_040
04577E 01 30 00 00 6169*  	ld bc,48
045782 11 1B 00 00 6170*  	ld de,27
045786 DD 21 10 05 6171*  	ld ix,1296
       00          
04578B CD D8 BF 04 6172*  	call vdu_load_img
04578F C9          6173*  	ret
045790             6174*  
045790             6175*  ld_47_044:
045790 21 78 62 04 6176*  	ld hl,F47_044
045794 22 5D BE 04 6177*  	ld (cur_filename),hl
045798 11 8D CA 04 6178*  	ld de,filedata
04579C 01 00 00 01 6179*  	ld bc,65536
0457A0 3E 01       6180*  	ld a,mos_load
0457A2 5B CF       6181*  	RST.LIL 08h
0457A4 21 53 02 00 6182*  	ld hl,BUF_47_044
0457A8 01 1B 00 00 6183*  	ld bc,27
0457AC 11 0A 00 00 6184*  	ld de,10
0457B0 DD 21 0E 01 6185*  	ld ix,270
       00          
0457B5 CD D8 BF 04 6186*  	call vdu_load_img
0457B9 C9          6187*  	ret
0457BA             6188*  
0457BA             6189*  ld_48_004:
0457BA 21 8C 62 04 6190*  	ld hl,F48_004
0457BE 22 5D BE 04 6191*  	ld (cur_filename),hl
0457C2 11 8D CA 04 6192*  	ld de,filedata
0457C6 01 00 00 01 6193*  	ld bc,65536
0457CA 3E 01       6194*  	ld a,mos_load
0457CC 5B CF       6195*  	RST.LIL 08h
0457CE 21 54 02 00 6196*  	ld hl,BUF_48_004
0457D2 01 12 00 00 6197*  	ld bc,18
0457D6 11 07 00 00 6198*  	ld de,7
0457DA DD 21 7E 00 6199*  	ld ix,126
       00          
0457DF CD D8 BF 04 6200*  	call vdu_load_img
0457E3 C9          6201*  	ret
0457E4             6202*  
0457E4             6203*  ld_48_020:
0457E4 21 A0 62 04 6204*  	ld hl,F48_020
0457E8 22 5D BE 04 6205*  	ld (cur_filename),hl
0457EC 11 8D CA 04 6206*  	ld de,filedata
0457F0 01 00 00 01 6207*  	ld bc,65536
0457F4 3E 01       6208*  	ld a,mos_load
0457F6 5B CF       6209*  	RST.LIL 08h
0457F8 21 55 02 00 6210*  	ld hl,BUF_48_020
0457FC 01 17 00 00 6211*  	ld bc,23
045800 11 0A 00 00 6212*  	ld de,10
045804 DD 21 E6 00 6213*  	ld ix,230
       00          
045809 CD D8 BF 04 6214*  	call vdu_load_img
04580D C9          6215*  	ret
04580E             6216*  
04580E             6217*  ld_48_032:
04580E 21 B4 62 04 6218*  	ld hl,F48_032
045812 22 5D BE 04 6219*  	ld (cur_filename),hl
045816 11 8D CA 04 6220*  	ld de,filedata
04581A 01 00 00 01 6221*  	ld bc,65536
04581E 3E 01       6222*  	ld a,mos_load
045820 5B CF       6223*  	RST.LIL 08h
045822 21 56 02 00 6224*  	ld hl,BUF_48_032
045826 01 20 00 00 6225*  	ld bc,32
04582A 11 0D 00 00 6226*  	ld de,13
04582E DD 21 A0 01 6227*  	ld ix,416
       00          
045833 CD D8 BF 04 6228*  	call vdu_load_img
045837 C9          6229*  	ret
045838             6230*  
045838             6231*  ld_48_040:
045838 21 C8 62 04 6232*  	ld hl,F48_040
04583C 22 5D BE 04 6233*  	ld (cur_filename),hl
045840 11 8D CA 04 6234*  	ld de,filedata
045844 01 00 00 01 6235*  	ld bc,65536
045848 3E 01       6236*  	ld a,mos_load
04584A 5B CF       6237*  	RST.LIL 08h
04584C 21 57 02 00 6238*  	ld hl,BUF_48_040
045850 01 35 00 00 6239*  	ld bc,53
045854 11 18 00 00 6240*  	ld de,24
045858 DD 21 F8 04 6241*  	ld ix,1272
       00          
04585D CD D8 BF 04 6242*  	call vdu_load_img
045861 C9          6243*  	ret
045862             6244*  
045862             6245*  ld_48_044:
045862 21 DC 62 04 6246*  	ld hl,F48_044
045866 22 5D BE 04 6247*  	ld (cur_filename),hl
04586A 11 8D CA 04 6248*  	ld de,filedata
04586E 01 00 00 01 6249*  	ld bc,65536
045872 3E 01       6250*  	ld a,mos_load
045874 5B CF       6251*  	RST.LIL 08h
045876 21 58 02 00 6252*  	ld hl,BUF_48_044
04587A 01 01 00 00 6253*  	ld bc,1
04587E 11 01 00 00 6254*  	ld de,1
045882 DD 21 01 00 6255*  	ld ix,1
       00          
045887 CD D8 BF 04 6256*  	call vdu_load_img
04588B C9          6257*  	ret
04588C             6258*  
04588C             6259*  ld_49_004:
04588C 21 F0 62 04 6260*  	ld hl,F49_004
045890 22 5D BE 04 6261*  	ld (cur_filename),hl
045894 11 8D CA 04 6262*  	ld de,filedata
045898 01 00 00 01 6263*  	ld bc,65536
04589C 3E 01       6264*  	ld a,mos_load
04589E 5B CF       6265*  	RST.LIL 08h
0458A0 21 59 02 00 6266*  	ld hl,BUF_49_004
0458A4 01 0E 00 00 6267*  	ld bc,14
0458A8 11 06 00 00 6268*  	ld de,6
0458AC DD 21 54 00 6269*  	ld ix,84
       00          
0458B1 CD D8 BF 04 6270*  	call vdu_load_img
0458B5 C9          6271*  	ret
0458B6             6272*  
0458B6             6273*  ld_49_020:
0458B6 21 04 63 04 6274*  	ld hl,F49_020
0458BA 22 5D BE 04 6275*  	ld (cur_filename),hl
0458BE 11 8D CA 04 6276*  	ld de,filedata
0458C2 01 00 00 01 6277*  	ld bc,65536
0458C6 3E 01       6278*  	ld a,mos_load
0458C8 5B CF       6279*  	RST.LIL 08h
0458CA 21 5A 02 00 6280*  	ld hl,BUF_49_020
0458CE 01 12 00 00 6281*  	ld bc,18
0458D2 11 08 00 00 6282*  	ld de,8
0458D6 DD 21 90 00 6283*  	ld ix,144
       00          
0458DB CD D8 BF 04 6284*  	call vdu_load_img
0458DF C9          6285*  	ret
0458E0             6286*  
0458E0             6287*  ld_49_032:
0458E0 21 18 63 04 6288*  	ld hl,F49_032
0458E4 22 5D BE 04 6289*  	ld (cur_filename),hl
0458E8 11 8D CA 04 6290*  	ld de,filedata
0458EC 01 00 00 01 6291*  	ld bc,65536
0458F0 3E 01       6292*  	ld a,mos_load
0458F2 5B CF       6293*  	RST.LIL 08h
0458F4 21 5B 02 00 6294*  	ld hl,BUF_49_032
0458F8 01 1A 00 00 6295*  	ld bc,26
0458FC 11 0B 00 00 6296*  	ld de,11
045900 DD 21 1E 01 6297*  	ld ix,286
       00          
045905 CD D8 BF 04 6298*  	call vdu_load_img
045909 C9          6299*  	ret
04590A             6300*  
04590A             6301*  ld_49_040:
04590A 21 2C 63 04 6302*  	ld hl,F49_040
04590E 22 5D BE 04 6303*  	ld (cur_filename),hl
045912 11 8D CA 04 6304*  	ld de,filedata
045916 01 00 00 01 6305*  	ld bc,65536
04591A 3E 01       6306*  	ld a,mos_load
04591C 5B CF       6307*  	RST.LIL 08h
04591E 21 5C 02 00 6308*  	ld hl,BUF_49_040
045922 01 2B 00 00 6309*  	ld bc,43
045926 11 12 00 00 6310*  	ld de,18
04592A DD 21 06 03 6311*  	ld ix,774
       00          
04592F CD D8 BF 04 6312*  	call vdu_load_img
045933 C9          6313*  	ret
045934             6314*  
045934             6315*  ld_49_044:
045934 21 40 63 04 6316*  	ld hl,F49_044
045938 22 5D BE 04 6317*  	ld (cur_filename),hl
04593C 11 8D CA 04 6318*  	ld de,filedata
045940 01 00 00 01 6319*  	ld bc,65536
045944 3E 01       6320*  	ld a,mos_load
045946 5B CF       6321*  	RST.LIL 08h
045948 21 5D 02 00 6322*  	ld hl,BUF_49_044
04594C 01 01 00 00 6323*  	ld bc,1
045950 11 01 00 00 6324*  	ld de,1
045954 DD 21 01 00 6325*  	ld ix,1
       00          
045959 CD D8 BF 04 6326*  	call vdu_load_img
04595D C9          6327*  	ret
04595E             6328*  
04595E             6329*  ld_50_004:
04595E 21 54 63 04 6330*  	ld hl,F50_004
045962 22 5D BE 04 6331*  	ld (cur_filename),hl
045966 11 8D CA 04 6332*  	ld de,filedata
04596A 01 00 00 01 6333*  	ld bc,65536
04596E 3E 01       6334*  	ld a,mos_load
045970 5B CF       6335*  	RST.LIL 08h
045972 21 5E 02 00 6336*  	ld hl,BUF_50_004
045976 01 0A 00 00 6337*  	ld bc,10
04597A 11 0D 00 00 6338*  	ld de,13
04597E DD 21 82 00 6339*  	ld ix,130
       00          
045983 CD D8 BF 04 6340*  	call vdu_load_img
045987 C9          6341*  	ret
045988             6342*  
045988             6343*  ld_50_020:
045988 21 68 63 04 6344*  	ld hl,F50_020
04598C 22 5D BE 04 6345*  	ld (cur_filename),hl
045990 11 8D CA 04 6346*  	ld de,filedata
045994 01 00 00 01 6347*  	ld bc,65536
045998 3E 01       6348*  	ld a,mos_load
04599A 5B CF       6349*  	RST.LIL 08h
04599C 21 5F 02 00 6350*  	ld hl,BUF_50_020
0459A0 01 0D 00 00 6351*  	ld bc,13
0459A4 11 11 00 00 6352*  	ld de,17
0459A8 DD 21 DD 00 6353*  	ld ix,221
       00          
0459AD CD D8 BF 04 6354*  	call vdu_load_img
0459B1 C9          6355*  	ret
0459B2             6356*  
0459B2             6357*  ld_50_032:
0459B2 21 7C 63 04 6358*  	ld hl,F50_032
0459B6 22 5D BE 04 6359*  	ld (cur_filename),hl
0459BA 11 8D CA 04 6360*  	ld de,filedata
0459BE 01 00 00 01 6361*  	ld bc,65536
0459C2 3E 01       6362*  	ld a,mos_load
0459C4 5B CF       6363*  	RST.LIL 08h
0459C6 21 60 02 00 6364*  	ld hl,BUF_50_032
0459CA 01 12 00 00 6365*  	ld bc,18
0459CE 11 1A 00 00 6366*  	ld de,26
0459D2 DD 21 D4 01 6367*  	ld ix,468
       00          
0459D7 CD D8 BF 04 6368*  	call vdu_load_img
0459DB C9          6369*  	ret
0459DC             6370*  
0459DC             6371*  ld_50_040:
0459DC 21 90 63 04 6372*  	ld hl,F50_040
0459E0 22 5D BE 04 6373*  	ld (cur_filename),hl
0459E4 11 8D CA 04 6374*  	ld de,filedata
0459E8 01 00 00 01 6375*  	ld bc,65536
0459EC 3E 01       6376*  	ld a,mos_load
0459EE 5B CF       6377*  	RST.LIL 08h
0459F0 21 61 02 00 6378*  	ld hl,BUF_50_040
0459F4 01 1E 00 00 6379*  	ld bc,30
0459F8 11 2A 00 00 6380*  	ld de,42
0459FC DD 21 EC 04 6381*  	ld ix,1260
       00          
045A01 CD D8 BF 04 6382*  	call vdu_load_img
045A05 C9          6383*  	ret
045A06             6384*  
045A06             6385*  ld_50_044:
045A06 21 A4 63 04 6386*  	ld hl,F50_044
045A0A 22 5D BE 04 6387*  	ld (cur_filename),hl
045A0E 11 8D CA 04 6388*  	ld de,filedata
045A12 01 00 00 01 6389*  	ld bc,65536
045A16 3E 01       6390*  	ld a,mos_load
045A18 5B CF       6391*  	RST.LIL 08h
045A1A 21 62 02 00 6392*  	ld hl,BUF_50_044
045A1E 01 46 00 00 6393*  	ld bc,70
045A22 11 32 00 00 6394*  	ld de,50
045A26 DD 21 AC 0D 6395*  	ld ix,3500
       00          
045A2B CD D8 BF 04 6396*  	call vdu_load_img
045A2F C9          6397*  	ret
045A30             6398*  
045A30             6399*  ld_51_004:
045A30 21 B8 63 04 6400*  	ld hl,F51_004
045A34 22 5D BE 04 6401*  	ld (cur_filename),hl
045A38 11 8D CA 04 6402*  	ld de,filedata
045A3C 01 00 00 01 6403*  	ld bc,65536
045A40 3E 01       6404*  	ld a,mos_load
045A42 5B CF       6405*  	RST.LIL 08h
045A44 21 63 02 00 6406*  	ld hl,BUF_51_004
045A48 01 11 00 00 6407*  	ld bc,17
045A4C 11 17 00 00 6408*  	ld de,23
045A50 DD 21 87 01 6409*  	ld ix,391
       00          
045A55 CD D8 BF 04 6410*  	call vdu_load_img
045A59 C9          6411*  	ret
045A5A             6412*  
045A5A             6413*  ld_51_020:
045A5A 21 CC 63 04 6414*  	ld hl,F51_020
045A5E 22 5D BE 04 6415*  	ld (cur_filename),hl
045A62 11 8D CA 04 6416*  	ld de,filedata
045A66 01 00 00 01 6417*  	ld bc,65536
045A6A 3E 01       6418*  	ld a,mos_load
045A6C 5B CF       6419*  	RST.LIL 08h
045A6E 21 64 02 00 6420*  	ld hl,BUF_51_020
045A72 01 15 00 00 6421*  	ld bc,21
045A76 11 1D 00 00 6422*  	ld de,29
045A7A DD 21 61 02 6423*  	ld ix,609
       00          
045A7F CD D8 BF 04 6424*  	call vdu_load_img
045A83 C9          6425*  	ret
045A84             6426*  
045A84             6427*  ld_51_032:
045A84 21 E0 63 04 6428*  	ld hl,F51_032
045A88 22 5D BE 04 6429*  	ld (cur_filename),hl
045A8C 11 8D CA 04 6430*  	ld de,filedata
045A90 01 00 00 01 6431*  	ld bc,65536
045A94 3E 01       6432*  	ld a,mos_load
045A96 5B CF       6433*  	RST.LIL 08h
045A98 21 65 02 00 6434*  	ld hl,BUF_51_032
045A9C 01 1E 00 00 6435*  	ld bc,30
045AA0 11 2A 00 00 6436*  	ld de,42
045AA4 DD 21 EC 04 6437*  	ld ix,1260
       00          
045AA9 CD D8 BF 04 6438*  	call vdu_load_img
045AAD C9          6439*  	ret
045AAE             6440*  
045AAE             6441*  ld_51_040:
045AAE 21 F4 63 04 6442*  	ld hl,F51_040
045AB2 22 5D BE 04 6443*  	ld (cur_filename),hl
045AB6 11 8D CA 04 6444*  	ld de,filedata
045ABA 01 00 00 01 6445*  	ld bc,65536
045ABE 3E 01       6446*  	ld a,mos_load
045AC0 5B CF       6447*  	RST.LIL 08h
045AC2 21 66 02 00 6448*  	ld hl,BUF_51_040
045AC6 01 31 00 00 6449*  	ld bc,49
045ACA 11 46 00 00 6450*  	ld de,70
045ACE DD 21 66 0D 6451*  	ld ix,3430
       00          
045AD3 CD D8 BF 04 6452*  	call vdu_load_img
045AD7 C9          6453*  	ret
045AD8             6454*  
045AD8             6455*  ld_51_044:
045AD8 21 08 64 04 6456*  	ld hl,F51_044
045ADC 22 5D BE 04 6457*  	ld (cur_filename),hl
045AE0 11 8D CA 04 6458*  	ld de,filedata
045AE4 01 00 00 01 6459*  	ld bc,65536
045AE8 3E 01       6460*  	ld a,mos_load
045AEA 5B CF       6461*  	RST.LIL 08h
045AEC 21 67 02 00 6462*  	ld hl,BUF_51_044
045AF0 01 92 00 00 6463*  	ld bc,146
045AF4 11 83 00 00 6464*  	ld de,131
045AF8 DD 21 B6 4A 6465*  	ld ix,19126
       00          
045AFD CD D8 BF 04 6466*  	call vdu_load_img
045B01 C9          6467*  	ret
045B02             6468*  
045B02             6469*  ld_52_004:
045B02 21 1C 64 04 6470*  	ld hl,F52_004
045B06 22 5D BE 04 6471*  	ld (cur_filename),hl
045B0A 11 8D CA 04 6472*  	ld de,filedata
045B0E 01 00 00 01 6473*  	ld bc,65536
045B12 3E 01       6474*  	ld a,mos_load
045B14 5B CF       6475*  	RST.LIL 08h
045B16 21 68 02 00 6476*  	ld hl,BUF_52_004
045B1A 01 0E 00 00 6477*  	ld bc,14
045B1E 11 17 00 00 6478*  	ld de,23
045B22 DD 21 42 01 6479*  	ld ix,322
       00          
045B27 CD D8 BF 04 6480*  	call vdu_load_img
045B2B C9          6481*  	ret
045B2C             6482*  
045B2C             6483*  ld_52_020:
045B2C 21 30 64 04 6484*  	ld hl,F52_020
045B30 22 5D BE 04 6485*  	ld (cur_filename),hl
045B34 11 8D CA 04 6486*  	ld de,filedata
045B38 01 00 00 01 6487*  	ld bc,65536
045B3C 3E 01       6488*  	ld a,mos_load
045B3E 5B CF       6489*  	RST.LIL 08h
045B40 21 69 02 00 6490*  	ld hl,BUF_52_020
045B44 01 11 00 00 6491*  	ld bc,17
045B48 11 1D 00 00 6492*  	ld de,29
045B4C DD 21 ED 01 6493*  	ld ix,493
       00          
045B51 CD D8 BF 04 6494*  	call vdu_load_img
045B55 C9          6495*  	ret
045B56             6496*  
045B56             6497*  ld_52_032:
045B56 21 44 64 04 6498*  	ld hl,F52_032
045B5A 22 5D BE 04 6499*  	ld (cur_filename),hl
045B5E 11 8D CA 04 6500*  	ld de,filedata
045B62 01 00 00 01 6501*  	ld bc,65536
045B66 3E 01       6502*  	ld a,mos_load
045B68 5B CF       6503*  	RST.LIL 08h
045B6A 21 6A 02 00 6504*  	ld hl,BUF_52_032
045B6E 01 19 00 00 6505*  	ld bc,25
045B72 11 2A 00 00 6506*  	ld de,42
045B76 DD 21 1A 04 6507*  	ld ix,1050
       00          
045B7B CD D8 BF 04 6508*  	call vdu_load_img
045B7F C9          6509*  	ret
045B80             6510*  
045B80             6511*  ld_52_040:
045B80 21 58 64 04 6512*  	ld hl,F52_040
045B84 22 5D BE 04 6513*  	ld (cur_filename),hl
045B88 11 8D CA 04 6514*  	ld de,filedata
045B8C 01 00 00 01 6515*  	ld bc,65536
045B90 3E 01       6516*  	ld a,mos_load
045B92 5B CF       6517*  	RST.LIL 08h
045B94 21 6B 02 00 6518*  	ld hl,BUF_52_040
045B98 01 28 00 00 6519*  	ld bc,40
045B9C 11 46 00 00 6520*  	ld de,70
045BA0 DD 21 F0 0A 6521*  	ld ix,2800
       00          
045BA5 CD D8 BF 04 6522*  	call vdu_load_img
045BA9 C9          6523*  	ret
045BAA             6524*  
045BAA             6525*  ld_52_044:
045BAA 21 6C 64 04 6526*  	ld hl,F52_044
045BAE 22 5D BE 04 6527*  	ld (cur_filename),hl
045BB2 11 8D CA 04 6528*  	ld de,filedata
045BB6 01 00 00 01 6529*  	ld bc,65536
045BBA 3E 01       6530*  	ld a,mos_load
045BBC 5B CF       6531*  	RST.LIL 08h
045BBE 21 6C 02 00 6532*  	ld hl,BUF_52_044
045BC2 01 78 00 00 6533*  	ld bc,120
045BC6 11 83 00 00 6534*  	ld de,131
045BCA DD 21 68 3D 6535*  	ld ix,15720
       00          
045BCF CD D8 BF 04 6536*  	call vdu_load_img
045BD3 C9          6537*  	ret
045BD4             6538*  
045BD4             6539*  ld_56_004:
045BD4 21 80 64 04 6540*  	ld hl,F56_004
045BD8 22 5D BE 04 6541*  	ld (cur_filename),hl
045BDC 11 8D CA 04 6542*  	ld de,filedata
045BE0 01 00 00 01 6543*  	ld bc,65536
045BE4 3E 01       6544*  	ld a,mos_load
045BE6 5B CF       6545*  	RST.LIL 08h
045BE8 21 6D 02 00 6546*  	ld hl,BUF_56_004
045BEC 01 15 00 00 6547*  	ld bc,21
045BF0 11 0A 00 00 6548*  	ld de,10
045BF4 DD 21 D2 00 6549*  	ld ix,210
       00          
045BF9 CD D8 BF 04 6550*  	call vdu_load_img
045BFD C9          6551*  	ret
045BFE             6552*  
045BFE             6553*  ld_56_020:
045BFE 21 94 64 04 6554*  	ld hl,F56_020
045C02 22 5D BE 04 6555*  	ld (cur_filename),hl
045C06 11 8D CA 04 6556*  	ld de,filedata
045C0A 01 00 00 01 6557*  	ld bc,65536
045C0E 3E 01       6558*  	ld a,mos_load
045C10 5B CF       6559*  	RST.LIL 08h
045C12 21 6E 02 00 6560*  	ld hl,BUF_56_020
045C16 01 1A 00 00 6561*  	ld bc,26
045C1A 11 0C 00 00 6562*  	ld de,12
045C1E DD 21 38 01 6563*  	ld ix,312
       00          
045C23 CD D8 BF 04 6564*  	call vdu_load_img
045C27 C9          6565*  	ret
045C28             6566*  
045C28             6567*  ld_56_032:
045C28 21 A8 64 04 6568*  	ld hl,F56_032
045C2C 22 5D BE 04 6569*  	ld (cur_filename),hl
045C30 11 8D CA 04 6570*  	ld de,filedata
045C34 01 00 00 01 6571*  	ld bc,65536
045C38 3E 01       6572*  	ld a,mos_load
045C3A 5B CF       6573*  	RST.LIL 08h
045C3C 21 6F 02 00 6574*  	ld hl,BUF_56_032
045C40 01 27 00 00 6575*  	ld bc,39
045C44 11 12 00 00 6576*  	ld de,18
045C48 DD 21 BE 02 6577*  	ld ix,702
       00          
045C4D CD D8 BF 04 6578*  	call vdu_load_img
045C51 C9          6579*  	ret
045C52             6580*  
045C52             6581*  ld_56_040:
045C52 21 BC 64 04 6582*  	ld hl,F56_040
045C56 22 5D BE 04 6583*  	ld (cur_filename),hl
045C5A 11 8D CA 04 6584*  	ld de,filedata
045C5E 01 00 00 01 6585*  	ld bc,65536
045C62 3E 01       6586*  	ld a,mos_load
045C64 5B CF       6587*  	RST.LIL 08h
045C66 21 70 02 00 6588*  	ld hl,BUF_56_040
045C6A 01 42 00 00 6589*  	ld bc,66
045C6E 11 1E 00 00 6590*  	ld de,30
045C72 DD 21 BC 07 6591*  	ld ix,1980
       00          
045C77 CD D8 BF 04 6592*  	call vdu_load_img
045C7B C9          6593*  	ret
045C7C             6594*  
045C7C             6595*  ld_56_044:
045C7C 21 D0 64 04 6596*  	ld hl,F56_044
045C80 22 5D BE 04 6597*  	ld (cur_filename),hl
045C84 11 8D CA 04 6598*  	ld de,filedata
045C88 01 00 00 01 6599*  	ld bc,65536
045C8C 3E 01       6600*  	ld a,mos_load
045C8E 5B CF       6601*  	RST.LIL 08h
045C90 21 71 02 00 6602*  	ld hl,BUF_56_044
045C94 01 36 00 00 6603*  	ld bc,54
045C98 11 0C 00 00 6604*  	ld de,12
045C9C DD 21 88 02 6605*  	ld ix,648
       00          
045CA1 CD D8 BF 04 6606*  	call vdu_load_img
045CA5 C9          6607*  	ret
045CA6             6608*  
045CA6             6609*  ld_60_004:
045CA6 21 E4 64 04 6610*  	ld hl,F60_004
045CAA 22 5D BE 04 6611*  	ld (cur_filename),hl
045CAE 11 8D CA 04 6612*  	ld de,filedata
045CB2 01 00 00 01 6613*  	ld bc,65536
045CB6 3E 01       6614*  	ld a,mos_load
045CB8 5B CF       6615*  	RST.LIL 08h
045CBA 21 72 02 00 6616*  	ld hl,BUF_60_004
045CBE 01 1F 00 00 6617*  	ld bc,31
045CC2 11 20 00 00 6618*  	ld de,32
045CC6 DD 21 E0 03 6619*  	ld ix,992
       00          
045CCB CD D8 BF 04 6620*  	call vdu_load_img
045CCF C9          6621*  	ret
045CD0             6622*  
045CD0             6623*  ld_60_020:
045CD0 21 F8 64 04 6624*  	ld hl,F60_020
045CD4 22 5D BE 04 6625*  	ld (cur_filename),hl
045CD8 11 8D CA 04 6626*  	ld de,filedata
045CDC 01 00 00 01 6627*  	ld bc,65536
045CE0 3E 01       6628*  	ld a,mos_load
045CE2 5B CF       6629*  	RST.LIL 08h
045CE4 21 73 02 00 6630*  	ld hl,BUF_60_020
045CE8 01 29 00 00 6631*  	ld bc,41
045CEC 11 2A 00 00 6632*  	ld de,42
045CF0 DD 21 BA 06 6633*  	ld ix,1722
       00          
045CF5 CD D8 BF 04 6634*  	call vdu_load_img
045CF9 C9          6635*  	ret
045CFA             6636*  
045CFA             6637*  ld_60_032:
045CFA 21 0C 65 04 6638*  	ld hl,F60_032
045CFE 22 5D BE 04 6639*  	ld (cur_filename),hl
045D02 11 8D CA 04 6640*  	ld de,filedata
045D06 01 00 00 01 6641*  	ld bc,65536
045D0A 3E 01       6642*  	ld a,mos_load
045D0C 5B CF       6643*  	RST.LIL 08h
045D0E 21 74 02 00 6644*  	ld hl,BUF_60_032
045D12 01 38 00 00 6645*  	ld bc,56
045D16 11 3B 00 00 6646*  	ld de,59
045D1A DD 21 E8 0C 6647*  	ld ix,3304
       00          
045D1F CD D8 BF 04 6648*  	call vdu_load_img
045D23 C9          6649*  	ret
045D24             6650*  
045D24             6651*  ld_60_040:
045D24 21 20 65 04 6652*  	ld hl,F60_040
045D28 22 5D BE 04 6653*  	ld (cur_filename),hl
045D2C 11 8D CA 04 6654*  	ld de,filedata
045D30 01 00 00 01 6655*  	ld bc,65536
045D34 3E 01       6656*  	ld a,mos_load
045D36 5B CF       6657*  	RST.LIL 08h
045D38 21 75 02 00 6658*  	ld hl,BUF_60_040
045D3C 01 5F 00 00 6659*  	ld bc,95
045D40 11 64 00 00 6660*  	ld de,100
045D44 DD 21 1C 25 6661*  	ld ix,9500
       00          
045D49 CD D8 BF 04 6662*  	call vdu_load_img
045D4D C9          6663*  	ret
045D4E             6664*  
045D4E             6665*  ld_60_044:
045D4E 21 34 65 04 6666*  	ld hl,F60_044
045D52 22 5D BE 04 6667*  	ld (cur_filename),hl
045D56 11 8D CA 04 6668*  	ld de,filedata
045D5A 01 00 00 01 6669*  	ld bc,65536
045D5E 3E 01       6670*  	ld a,mos_load
045D60 5B CF       6671*  	RST.LIL 08h
045D62 21 76 02 00 6672*  	ld hl,BUF_60_044
045D66 01 18 01 00 6673*  	ld bc,280
045D6A 11 A0 00 00 6674*  	ld de,160
045D6E DD 21 00 AF 6675*  	ld ix,44800
       00          
045D73 CD D8 BF 04 6676*  	call vdu_load_img
045D77 C9          6677*  	ret
045D78             6678*  
045D78             6679*  ; File name lookups:
045D78 70 61 6E 65 6680*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D8C 70 61 6E 65 6681*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DA0 70 61 6E 65 6682*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045DB4 70 61 6E 65 6683*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DC8 70 61 6E 65 6684*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045DDC 70 61 6E 65 6685*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DF0 70 61 6E 65 6686*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E04 70 61 6E 65 6687*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E18 70 61 6E 65 6688*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E2C 70 61 6E 65 6689*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E40 70 61 6E 65 6690*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E54 70 61 6E 65 6691*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E68 70 61 6E 65 6692*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E7C 70 61 6E 65 6693*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E90 70 61 6E 65 6694*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EA4 70 61 6E 65 6695*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EB8 70 61 6E 65 6696*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045ECC 70 61 6E 65 6697*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EE0 70 61 6E 65 6698*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EF4 70 61 6E 65 6699*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F08 70 61 6E 65 6700*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F1C 70 61 6E 65 6701*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F30 70 61 6E 65 6702*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F44 70 61 6E 65 6703*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F58 70 61 6E 65 6704*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F6C 70 61 6E 65 6705*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F80 70 61 6E 65 6706*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F94 70 61 6E 65 6707*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FA8 70 61 6E 65 6708*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FBC 70 61 6E 65 6709*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FD0 70 61 6E 65 6710*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FE4 70 61 6E 65 6711*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FF8 70 61 6E 65 6712*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04600C 70 61 6E 65 6713*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046020 70 61 6E 65 6714*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046034 70 61 6E 65 6715*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046048 70 61 6E 65 6716*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04605C 70 61 6E 65 6717*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046070 70 61 6E 65 6718*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046084 70 61 6E 65 6719*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046098 70 61 6E 65 6720*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460AC 70 61 6E 65 6721*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460C0 70 61 6E 65 6722*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460D4 70 61 6E 65 6723*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460E8 70 61 6E 65 6724*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460FC 70 61 6E 65 6725*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046110 70 61 6E 65 6726*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046124 70 61 6E 65 6727*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046138 70 61 6E 65 6728*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04614C 70 61 6E 65 6729*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046160 70 61 6E 65 6730*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046174 70 61 6E 65 6731*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046188 70 61 6E 65 6732*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04619C 70 61 6E 65 6733*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461B0 70 61 6E 65 6734*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461C4 70 61 6E 65 6735*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461D8 70 61 6E 65 6736*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461EC 70 61 6E 65 6737*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046200 70 61 6E 65 6738*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046214 70 61 6E 65 6739*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046228 70 61 6E 65 6740*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04623C 70 61 6E 65 6741*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046250 70 61 6E 65 6742*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046264 70 61 6E 65 6743*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046278 70 61 6E 65 6744*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04628C 70 61 6E 65 6745*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462A0 70 61 6E 65 6746*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462B4 70 61 6E 65 6747*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462C8 70 61 6E 65 6748*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0462DC 70 61 6E 65 6749*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462F0 70 61 6E 65 6750*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046304 70 61 6E 65 6751*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046318 70 61 6E 65 6752*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04632C 70 61 6E 65 6753*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046340 70 61 6E 65 6754*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046354 70 61 6E 65 6755*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046368 70 61 6E 65 6756*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04637C 70 61 6E 65 6757*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046390 70 61 6E 65 6758*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0463A4 70 61 6E 65 6759*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0463B8 70 61 6E 65 6760*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0463CC 70 61 6E 65 6761*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0463E0 70 61 6E 65 6762*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0463F4 70 61 6E 65 6763*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046408 70 61 6E 65 6764*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04641C 70 61 6E 65 6765*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046430 70 61 6E 65 6766*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046444 70 61 6E 65 6767*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046458 70 61 6E 65 6768*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04646C 70 61 6E 65 6769*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046480 70 61 6E 65 6770*  F56_004: db "panels/56_004.rgba2",0
       6C 73 2F 35 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046494 70 61 6E 65 6771*  F56_020: db "panels/56_020.rgba2",0
       6C 73 2F 35 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0464A8 70 61 6E 65 6772*  F56_032: db "panels/56_032.rgba2",0
       6C 73 2F 35 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0464BC 70 61 6E 65 6773*  F56_040: db "panels/56_040.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0464D0 70 61 6E 65 6774*  F56_044: db "panels/56_044.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0464E4 70 61 6E 65 6775*  F60_004: db "panels/60_004.rgba2",0
       6C 73 2F 36 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0464F8 70 61 6E 65 6776*  F60_020: db "panels/60_020.rgba2",0
       6C 73 2F 36 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04650C 70 61 6E 65 6777*  F60_032: db "panels/60_032.rgba2",0
       6C 73 2F 36 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046520 70 61 6E 65 6778*  F60_040: db "panels/60_040.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046534 70 61 6E 65 6779*  F60_044: db "panels/60_044.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046548             6780*  
046548             6781*  ; dws buffer ids:
046548             6782*  BUF_DW_6: equ 0x0277
046548             6783*  BUF_DW_7: equ 0x0278
046548             6784*  BUF_DW_8: equ 0x0279
046548             6785*  BUF_DW_9: equ 0x027A
046548             6786*  BUF_DW_10: equ 0x027B
046548             6787*  BUF_DW_11: equ 0x027C
046548             6788*  BUF_DW_12: equ 0x027D
046548             6789*  BUF_DW_13: equ 0x027E
046548             6790*  BUF_DW_14: equ 0x027F
046548             6791*  
046548             6792*  dws_num_panels: equ 9
046548             6793*  
046548             6794*  ; dws buffer id reverse lookup:
046548             6795*  dws_buffer_id_lut:
046548 77 02 00    6796*  	dl BUF_DW_6
04654B 78 02 00    6797*  	dl BUF_DW_7
04654E 79 02 00    6798*  	dl BUF_DW_8
046551 7A 02 00    6799*  	dl BUF_DW_9
046554 7B 02 00    6800*  	dl BUF_DW_10
046557 7C 02 00    6801*  	dl BUF_DW_11
04655A 7D 02 00    6802*  	dl BUF_DW_12
04655D 7E 02 00    6803*  	dl BUF_DW_13
046560 7F 02 00    6804*  	dl BUF_DW_14
046563             6805*  
046563             6806*  ; dws load routines jump table:
046563             6807*  dws_load_panels_table:
046563 7E 65 04    6808*  	dl ld_dw_6
046566 A8 65 04    6809*  	dl ld_dw_7
046569 D2 65 04    6810*  	dl ld_dw_8
04656C FC 65 04    6811*  	dl ld_dw_9
04656F 26 66 04    6812*  	dl ld_dw_10
046572 50 66 04    6813*  	dl ld_dw_11
046575 7A 66 04    6814*  	dl ld_dw_12
046578 A4 66 04    6815*  	dl ld_dw_13
04657B CE 66 04    6816*  	dl ld_dw_14
04657E             6817*  
04657E             6818*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
04657E             6819*  
04657E             6820*  ld_dw_6:
04657E 21 F8 66 04 6821*  	ld hl,Fdw_6
046582 22 5D BE 04 6822*  	ld (cur_filename),hl
046586 11 8D CA 04 6823*  	ld de,filedata
04658A 01 00 00 01 6824*  	ld bc,65536
04658E 3E 01       6825*  	ld a,mos_load
046590 5B CF       6826*  	RST.LIL 08h
046592 21 77 02 00 6827*  	ld hl,BUF_DW_6
046596 01 40 01 00 6828*  	ld bc,320
04659A 11 1E 00 00 6829*  	ld de,30
04659E DD 21 80 25 6830*  	ld ix,9600
       00          
0465A3 CD D8 BF 04 6831*  	call vdu_load_img
0465A7 C9          6832*  	ret
0465A8             6833*  
0465A8             6834*  ld_dw_7:
0465A8 21 07 67 04 6835*  	ld hl,Fdw_7
0465AC 22 5D BE 04 6836*  	ld (cur_filename),hl
0465B0 11 8D CA 04 6837*  	ld de,filedata
0465B4 01 00 00 01 6838*  	ld bc,65536
0465B8 3E 01       6839*  	ld a,mos_load
0465BA 5B CF       6840*  	RST.LIL 08h
0465BC 21 78 02 00 6841*  	ld hl,BUF_DW_7
0465C0 01 40 01 00 6842*  	ld bc,320
0465C4 11 18 00 00 6843*  	ld de,24
0465C8 DD 21 00 1E 6844*  	ld ix,7680
       00          
0465CD CD D8 BF 04 6845*  	call vdu_load_img
0465D1 C9          6846*  	ret
0465D2             6847*  
0465D2             6848*  ld_dw_8:
0465D2 21 16 67 04 6849*  	ld hl,Fdw_8
0465D6 22 5D BE 04 6850*  	ld (cur_filename),hl
0465DA 11 8D CA 04 6851*  	ld de,filedata
0465DE 01 00 00 01 6852*  	ld bc,65536
0465E2 3E 01       6853*  	ld a,mos_load
0465E4 5B CF       6854*  	RST.LIL 08h
0465E6 21 79 02 00 6855*  	ld hl,BUF_DW_8
0465EA 01 40 01 00 6856*  	ld bc,320
0465EE 11 12 00 00 6857*  	ld de,18
0465F2 DD 21 80 16 6858*  	ld ix,5760
       00          
0465F7 CD D8 BF 04 6859*  	call vdu_load_img
0465FB C9          6860*  	ret
0465FC             6861*  
0465FC             6862*  ld_dw_9:
0465FC 21 25 67 04 6863*  	ld hl,Fdw_9
046600 22 5D BE 04 6864*  	ld (cur_filename),hl
046604 11 8D CA 04 6865*  	ld de,filedata
046608 01 00 00 01 6866*  	ld bc,65536
04660C 3E 01       6867*  	ld a,mos_load
04660E 5B CF       6868*  	RST.LIL 08h
046610 21 7A 02 00 6869*  	ld hl,BUF_DW_9
046614 01 40 01 00 6870*  	ld bc,320
046618 11 10 00 00 6871*  	ld de,16
04661C DD 21 00 14 6872*  	ld ix,5120
       00          
046621 CD D8 BF 04 6873*  	call vdu_load_img
046625 C9          6874*  	ret
046626             6875*  
046626             6876*  ld_dw_10:
046626 21 34 67 04 6877*  	ld hl,Fdw_10
04662A 22 5D BE 04 6878*  	ld (cur_filename),hl
04662E 11 8D CA 04 6879*  	ld de,filedata
046632 01 00 00 01 6880*  	ld bc,65536
046636 3E 01       6881*  	ld a,mos_load
046638 5B CF       6882*  	RST.LIL 08h
04663A 21 7B 02 00 6883*  	ld hl,BUF_DW_10
04663E 01 40 01 00 6884*  	ld bc,320
046642 11 10 00 00 6885*  	ld de,16
046646 DD 21 00 14 6886*  	ld ix,5120
       00          
04664B CD D8 BF 04 6887*  	call vdu_load_img
04664F C9          6888*  	ret
046650             6889*  
046650             6890*  ld_dw_11:
046650 21 44 67 04 6891*  	ld hl,Fdw_11
046654 22 5D BE 04 6892*  	ld (cur_filename),hl
046658 11 8D CA 04 6893*  	ld de,filedata
04665C 01 00 00 01 6894*  	ld bc,65536
046660 3E 01       6895*  	ld a,mos_load
046662 5B CF       6896*  	RST.LIL 08h
046664 21 7C 02 00 6897*  	ld hl,BUF_DW_11
046668 01 40 01 00 6898*  	ld bc,320
04666C 11 0E 00 00 6899*  	ld de,14
046670 DD 21 80 11 6900*  	ld ix,4480
       00          
046675 CD D8 BF 04 6901*  	call vdu_load_img
046679 C9          6902*  	ret
04667A             6903*  
04667A             6904*  ld_dw_12:
04667A 21 54 67 04 6905*  	ld hl,Fdw_12
04667E 22 5D BE 04 6906*  	ld (cur_filename),hl
046682 11 8D CA 04 6907*  	ld de,filedata
046686 01 00 00 01 6908*  	ld bc,65536
04668A 3E 01       6909*  	ld a,mos_load
04668C 5B CF       6910*  	RST.LIL 08h
04668E 21 7D 02 00 6911*  	ld hl,BUF_DW_12
046692 01 40 01 00 6912*  	ld bc,320
046696 11 0C 00 00 6913*  	ld de,12
04669A DD 21 00 0F 6914*  	ld ix,3840
       00          
04669F CD D8 BF 04 6915*  	call vdu_load_img
0466A3 C9          6916*  	ret
0466A4             6917*  
0466A4             6918*  ld_dw_13:
0466A4 21 64 67 04 6919*  	ld hl,Fdw_13
0466A8 22 5D BE 04 6920*  	ld (cur_filename),hl
0466AC 11 8D CA 04 6921*  	ld de,filedata
0466B0 01 00 00 01 6922*  	ld bc,65536
0466B4 3E 01       6923*  	ld a,mos_load
0466B6 5B CF       6924*  	RST.LIL 08h
0466B8 21 7E 02 00 6925*  	ld hl,BUF_DW_13
0466BC 01 40 01 00 6926*  	ld bc,320
0466C0 11 0C 00 00 6927*  	ld de,12
0466C4 DD 21 00 0F 6928*  	ld ix,3840
       00          
0466C9 CD D8 BF 04 6929*  	call vdu_load_img
0466CD C9          6930*  	ret
0466CE             6931*  
0466CE             6932*  ld_dw_14:
0466CE 21 74 67 04 6933*  	ld hl,Fdw_14
0466D2 22 5D BE 04 6934*  	ld (cur_filename),hl
0466D6 11 8D CA 04 6935*  	ld de,filedata
0466DA 01 00 00 01 6936*  	ld bc,65536
0466DE 3E 01       6937*  	ld a,mos_load
0466E0 5B CF       6938*  	RST.LIL 08h
0466E2 21 7F 02 00 6939*  	ld hl,BUF_DW_14
0466E6 01 40 01 00 6940*  	ld bc,320
0466EA 11 0C 00 00 6941*  	ld de,12
0466EE DD 21 00 0F 6942*  	ld ix,3840
       00          
0466F3 CD D8 BF 04 6943*  	call vdu_load_img
0466F7 C9          6944*  	ret
0466F8             6945*  
0466F8             6946*  ; File name lookups:
0466F8 64 77 73 2F 6947*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
046707 64 77 73 2F 6948*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
046716 64 77 73 2F 6949*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
046725 64 77 73 2F 6950*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
046734 64 77 73 2F 6951*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
046744 64 77 73 2F 6952*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
046754 64 77 73 2F 6953*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
046764 64 77 73 2F 6954*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
046774 64 77 73 2F 6955*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
046784             0014   	include "src/asm/fonts_bmp.asm"
046784             0001*  ; plots a bitmap character to the screen
046784             0002*  ; inputs: a; ascii character to plot
046784             0003*  ;      bc,de = x,y screen coordinates in pixels
046784             0004*  ;      ix pointed at the font definition lut
046784             0005*  ; returns: bc as the next x coordinate to plot
046784             0006*  ;          pretty pixels which hopefully resemble readable text
046784             0007*  ; destroys: lotsa stuff
046784             0008*  font_bmp_plot:
046784             0009*  ; back up bc,de
046784 C5          0010*      push bc
046785 D5          0011*      push de
046786             0012*  ; get the buffer id of the character
046786 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
046788 06 06       0014*      ld b,6 ; six bytes per lookup record
04678A 4F          0015*      ld c,a
04678B ED 4C       0016*      mlt bc
04678D DD 09       0017*      add ix,bc ; now ix points to the character definition
04678F DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
046792 CD 2C B0 04 0019*      call vdu_buff_select
046796             0020*  ; plot the character
046796 D1          0021*      pop de
046797 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
04679A 83          0023*      add a,e ; add the y-coordinate
04679B 5F          0024*      ld e,a
04679C 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04679E 8A          0026*      adc a,d
04679F 57          0027*      ld d,a ; plot_y now correct for the character
0467A0 C1          0028*      pop bc ; plot_x
0467A1 C5          0029*      push bc ; we want it back after the plot
0467A2 CD FD B1 04 0030*      call vdu_plot_bmp
0467A6             0031*  ; now set bc to the next x coordinate
0467A6 C1          0032*      pop bc
0467A7 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0467AA C6 02       0034*      add a,2 ; add a little padding between characters
0467AC 81          0035*      add a,c ; bump the original x-coordinate
0467AD 4F          0036*      ld c,a
0467AE 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0467B0 88          0038*      adc a,b
0467B1 47          0039*      ld b,a ; plot_x now correct for the next character
0467B2 C9          0040*      ret
0467B3             0041*  
0467B3             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0467B3             0043*  ; inputs: hl; pointer to the string
0467B3             0044*  ;       bc,de = x,y screen coordinates in pixels
0467B3             0045*  ;       ix pointed at the font definition lut
0467B3             0046*  ; returns: bc as the next x coordinate to plot
0467B3             0047*  ;          de as the next y coordinate to plot
0467B3             0048*  ;          pretty pixels which hopefully resemble readable text
0467B3             0049*  font_bmp_print:
0467B3             0050*  @next_char:
0467B3             0051*  ; fetch the next character in the string
0467B3 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0467B4 FE 00       0053*      cp 0 ; is it zero?
0467B6 C8          0054*      ret z ; if so, we're done
0467B7 23          0055*      inc hl ; point to the next character
0467B8 E5          0056*      push hl ; save the pointer
0467B9 D5          0057*      push de ; save our y-coordinate
0467BA DD E5       0058*      push ix ; save the font lut pointer
0467BC CD 84 67 04 0059*      call font_bmp_plot ; plot the character
0467C0 DD E1       0060*      pop ix ; restore the font lut pointer
0467C2 D1          0061*      pop de ; restore our y-coordinate
0467C3 E1          0062*      pop hl ; restore the pointer
0467C4 C3 B3 67 04 0063*      jp @next_char ; loop
0467C8             0015   	include "src/asm/maps.asm"
0467C8             0001*  ; ############# MAP CONSTANTS #############
0467C8             0002*  ; map tables addresses
0467C8             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
0467C8             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
0467C8             0005*  
0467C8             0006*  ; map status/type flags
0467C8             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
0467C8             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
0467C8             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
0467C8             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
0467C8             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
0467C8             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
0467C8             0013*  ; bits 1 and 0 are the render_type mask
0467C8             0014*  render_type_cube:   equ %00000000  ; 0
0467C8             0015*  render_type_floor:  equ %00000001  ; 1
0467C8             0016*  render_type_null:   equ %00000010  ; 2
0467C8             0017*  render_type_sprite: equ %00000011  ; 3
0467C8             0018*  
0467C8             0019*  ; HOW THE MAP TABLE IS LAID OUT
0467C8             0020*  ; map table field offset constants
0467C8             0021*  ; (mind the little-endianess)
0467C8             0022*  map_type_status: 	equ 0
0467C8             0023*  map_img_idx: 		equ 1
0467C8             0024*  map_obj_id: 		equ 2
0467C8             0025*  map_sprite_id: 		equ 3
0467C8             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
0467C8             0027*  
0467C8             0028*  ; gets cell info from a directional displacement from a given map location
0467C8             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
0467C8             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
0467C8             0031*  ; calls: get_dx_dy, get_cell_from_coords
0467C8             0032*  get_neighbor:
0467C8             0033*  ; modulo 4 on orientation
0467C8 7B          0034*      ld a,e
0467C9 E6 03       0035*      and 0x03
0467CB 5F          0036*      ld e,a
0467CC CD FB 67 04 0037*  	call get_dx_dy ; d,e = dy,dx
0467D0             0038*  ; add add b,c to the deltas in d,e
0467D0 79          0039*  	ld a,c
0467D1 83          0040*  	add a,e
0467D2 5F          0041*  	ld e,a
0467D3 78          0042*  	ld a,b
0467D4 82          0043*  	add a,d
0467D5 57          0044*  	ld d,a
0467D6             0045*  ; fall through to get_cell_from_coords
0467D6             0046*  
0467D6             0047*  ; gets cell info from a given x,y map coordinate
0467D6             0048*  ; inputs: ; d,e = map_y,map_x
0467D6             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0467D6             0050*  get_cell_from_coords:
0467D6             0051*  ; modulo 16 on input coords
0467D6 7B          0052*  	ld a,e
0467D7 E6 0F       0053*  	and 0x0F
0467D9 5F          0054*  	ld e,a
0467DA 7A          0055*  	ld a,d
0467DB E6 0F       0056*  	and 0x0F
0467DD 57          0057*  	ld d,a
0467DE             0058*  ; get cell_id from x,y
0467DE 42          0059*  	ld b,d ; y
0467DF 0E 10       0060*  	ld c,16 ; number of cells in a column
0467E1 ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0467E3 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0467E7 6B          0063*  	ld l,e ; x
0467E8 09          0064*  	add hl,bc ; hl = cell_id of x,y
0467E9 E5          0065*  	push hl ; so we can return cell_id
0467EA 4D          0066*  	ld c,l ; c = cell_id
0467EB             0067*  ; get address of cell record in cell_status table
0467EB 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0467ED ED 4C       0069*  	mlt bc ; bc = offset to cell record
0467EF DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0467F4 DD 09       0071*  	add ix,bc ; ix = address of cell record
0467F6 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0467F9 C1          0073*  	pop bc ; bc = cell_id
0467FA C9          0074*  	ret
0467FB             0075*  
0467FB             0076*  ; gets dx,dy from orientation and distance
0467FB             0077*  ; d = distance ; e = orientation
0467FB             0078*  ; returns: d,e = dy,dx
0467FB             0079*  get_dx_dy:
0467FB             0080*  ; make sure deu is zero
0467FB E5          0081*  	push hl
0467FC 21 00 00 00 0082*  	ld hl,0
046800 62          0083*  	ld h,d
046801 6B          0084*  	ld l,e
046802 EB          0085*  	ex de,hl
046803 E1          0086*  	pop hl
046804             0087*  ; modulo 4 on orientation
046804 7B          0088*  	ld a,e
046805 E6 03       0089*  	and 0x03
046807 FE 00       0090*  	cp 0
046809 28 11       0091*  	jr z,@north
04680B FE 01       0092*  	cp 1
04680D 28 14       0093*  	jr z,@east
04680F FE 02       0094*  	cp 2
046811 28 14       0095*  	jr z,@south
046813 FE 03       0096*  	cp 3
046815 28 13       0097*  	jr z,@west
046817             0098*  ; if none of those, return zeroes
046817 11 00 00 00 0099*  	ld de,0
04681B C9          0100*  	ret
04681C             0101*  @north:
04681C             0102*  ; x = 0, y = -d
04681C 1E 00       0103*  	ld e,0
04681E 7A          0104*  	ld a,d
04681F ED 44       0105*  	neg
046821 57          0106*  	ld d,a
046822 C9          0107*  	ret
046823             0108*  @east:
046823             0109*  ; x = d, y = 0
046823 5A          0110*  	ld e,d
046824 16 00       0111*  	ld d,0
046826 C9          0112*  	ret
046827             0113*  @south:
046827             0114*  ; x = 0, y = d
046827 1E 00       0115*  	ld e,0
046829 C9          0116*  	ret
04682A             0117*  @west:
04682A             0118*  ; x = -d, y = 0
04682A 7A          0119*  	ld a,d
04682B ED 44       0120*  	neg
04682D 5F          0121*  	ld e,a
04682E 16 00       0122*  	ld d,0
046830 C9          0123*  	ret
046831             0124*  
046831             0125*  ; gets the direction from a dy,dx pair
046831             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
046831             0127*  ; inputs: ; d = dy ; e = dx
046831             0128*  ; returns: a = orientation
046831             0129*  get_dir_from_dy_dx:
046831 AF          0130*  	xor a
046832 93          0131*  	sub e
046833 28 06       0132*  	jr z,@not_x
046835 3E 01       0133*  	ld a,1
046837 F8          0134*  	ret m
046838 3E 03       0135*  	ld a,3
04683A C9          0136*  	ret
04683B             0137*  @not_x:
04683B AF          0138*  	xor a
04683C 92          0139*  	sub d
04683D C8          0140*  	ret z
04683E 3E 02       0141*  	ld a,2
046840 F8          0142*  	ret m
046841 AF          0143*  	xor a
046842 C9          0144*  	ret
046843             0145*  
046843             0146*  
046843             0147*  ; translate camera relative x,y deltas to map x,y deltas
046843             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
046843             0149*  ; returns:	d = map_dy ; e = map_dx
046843             0150*  trans_dx_dy:
046843             0151*  ; modulo 4 on orientation
046843 E6 03       0152*  	and 0x03
046845 28 11       0153*  	jr z,@north
046847 FE 01       0154*  	cp 1 ; east
046849 28 12       0155*  	jr z,@east
04684B FE 02       0156*  	cp 2 ; south
04684D 28 12       0157*  	jr z,@south
04684F FE 03       0158*  	cp 3 ; west
046851 28 13       0159*  	jr z,@west
046853             0160*  ; if none of those, return zeroes
046853 11 00 00 00 0161*  	ld de,0
046857 C9          0162*  	ret
046858             0163*  @north: ; invert y axis, x unnchanged
046858 7A          0164*  	ld a,d
046859 ED 44       0165*  	neg
04685B 57          0166*  	ld d,a
04685C C9          0167*  	ret
04685D             0168*  @east: ; +x = +y, +y = +x
04685D 7A          0169*  	ld a,d
04685E 53          0170*  	ld d,e
04685F 5F          0171*  	ld e,a
046860 C9          0172*  	ret
046861             0173*  @south: ; invert x axis, y unchanged
046861 7B          0174*  	ld a,e
046862 ED 44       0175*  	neg
046864 5F          0176*  	ld e,a
046865 C9          0177*  	ret
046866             0178*  @west: ; +x = -y, +y = -x
046866 7A          0179*  	ld a,d ; y
046867 ED 44       0180*  	neg ; -y
046869 53          0181*  	ld d,e ; x
04686A 5F          0182*  	ld e,a ; -y
04686B 7A          0183*  	ld a,d ; x
04686C ED 44       0184*  	neg ; -x
04686E 57          0185*  	ld d,a ; -x
04686F C9          0186*  	ret
046870             0187*  
046870             0188*  ; initialize map variables and load map file
046870             0189*  ; inputs: none
046870             0190*  map_init:
046870 AF          0191*  	xor a
046871 32 CB B8 04 0192*  	ld (cur_floor),a
046875 32 CC B8 04 0193*  	ld (cur_room),a
046879             0194*  ; load room file
046879 CD 7E 68 04 0195*  	call map_load
04687D             0196*  ; set player initial position
04687D C9          0197*  	ret
04687E             0198*  
04687E             0199*  ; load map file
04687E             0200*  ; inputs: cur_floor, cur_room set
04687E             0201*  map_load:
04687E 21 10 6A 04 0202*  	ld hl,floors ; address of floors lut
046882 3A CB B8 04 0203*  	ld a,(cur_floor)
046886 5F          0204*  	ld e,a
046887 16 03       0205*  	ld d,3 ; three bytes per lookup record
046889 ED 5C       0206*  	mlt de ; de = offset to floor lut entry
04688B 19          0207*  	add hl,de ; hl = address of floor lut entry
04688C ED 27       0208*  	ld hl,(hl) ; hl = base address of rooms for given floor
04688E 3A CC B8 04 0209*  	ld a,(cur_room)
046892 5F          0210*  	ld e,a
046893 16 03       0211*  	ld d,3 ; three bytes per lookup record
046895 ED 5C       0212*  	mlt de ; de = offset to room lut entry
046897 19          0213*  	add hl,de ; hl = address of room lut entry
046898 ED 27       0214*  	ld hl,(hl) ; hl = address of room file name
04689A 22 5D BE 04 0215*  	ld (cur_filename),hl ; DEBUG
04689E 11 00 E0 B7 0216*  	ld de,cell_status ; address to load map data
0468A2 01 00 20 00 0217*  	ld bc,8*1024 ; size of map data in bytes
0468A6 3E 01       0218*  	ld a,mos_load
0468A8 5B CF       0219*  	RST.LIL 08h
0468AA             0220*  ; load sprite data
0468AA CD AF 68 04 0221*  	call map_init_sprites
0468AE C9          0222*  	ret
0468AF             0223*  
0468AF             0224*  ; initialize sprite data for the current room into sprite table
0468AF             0225*  ; inputs: map data loaded
0468AF             0226*  map_init_sprites:
0468AF             0227*  ; initialize pointers
0468AF DD 21 00 E0 0228*  	ld ix,cell_status
       B7          
0468B4 FD 21 00 FC 0229*  	ld iy,sprite_table_base
       B7          
0468B9 AF          0230*  	xor a
0468BA 32 FE 68 04 0231*  	ld (@cell_id),a
0468BE             0232*  @loop:
0468BE FD 22 D8 A5 0233*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
0468C3 DD 7E 03    0234*  	ld a,(ix+map_sprite_id)
0468C6 FE FF       0235*  	cp 255 ; check for no sprite
0468C8 28 1B       0236*  	jr z,@next_cell
0468CA FD 77 00    0237*  	ld (iy+sprite_id),a
0468CD DD 7E 01    0238*  	ld a,(ix+map_img_idx)
0468D0 FD 77 01    0239*  	ld (iy+sprite_obj),a
0468D3 CD 78 A7 04 0240*  	call sprite_init_data
0468D7 3A FE 68 04 0241*  	ld a,(@cell_id)
0468DB CD FF 68 04 0242*  	call cell_id_to_coords ; d = map_y, e = map_x
0468DF FD 1F 04    0243*  	ld (iy+sprite_x),de ; set sprite x,y
0468E2 ED 33 10    0244*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0468E5             0245*  @next_cell:
0468E5 ED 32 04    0246*  	lea ix,ix+map_record_size ; advance pointer to next cell
0468E8             0247*  ; check if we've reached the end of the map data
0468E8 3A FE 68 04 0248*  	ld a,(@cell_id)
0468EC 3C          0249*  	inc a
0468ED 32 FE 68 04 0250*  	ld (@cell_id),a
0468F1 20 CB       0251*  	jr nz,@loop ; still more to do
0468F3             0252*  ; cleanup and return
0468F3 FD 21 00 FC 0253*  	ld iy,sprite_table_base ; reset pointer
       B7          
0468F8 FD 22 D8 A5 0254*  	ld (sprite_table_pointer),iy
       04          
0468FD C9          0255*  	ret
0468FE 00          0256*  @cell_id: db 0
0468FF             0257*  
0468FF             0258*  ; get the x,y map coordinates from a cell_id
0468FF             0259*  ; inputs: a = cell_id
0468FF             0260*  ; returns: a = cell_id, d = map_y, e = map_x
0468FF             0261*  cell_id_to_coords:
0468FF 11 00 00 00 0262*  	ld de,0 ; make sure deu is zero
046903 F5          0263*  	push af	; Save the cell id
046904             0264*  ; Calculate the y coordinate by dividing the index by 16
046904 57          0265*  	ld d,a      ; Move index into d
046905 CB 3A       0266*  	srl d        ; Shift right once (d = d / 2)
046907 CB 3A       0267*  	srl d        ; Shift right again (d = d / 4)
046909 CB 3A       0268*  	srl d        ; Shift right again (d = d / 8)
04690B CB 3A       0269*  	srl d        ; Shift right again (d = d / 16)
04690D             0270*  ; Calculate the x coordinate by taking the index modulo 16
04690D E6 0F       0271*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
04690F 5F          0272*  	ld e,a      ; e is now the x coordinate
046910 F1          0273*  	pop af	; a is cell id
046911 C9          0274*  	ret
046912             0275*  
046912             0276*  ; get starting position in room 0 of a floor based on is_start flag being set
046912             0277*  ; inputs: none
046912             0278*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
046912             0279*  ; destroys: c,iy
046912             0280*  get_floor_start:
046912             0281*  ; loop through map data to find the obj_id in a
046912 DD 21 00 E0 0282*  	ld ix,cell_status
       B7          
046917 0E 00       0283*  	ld c,0 ; c will be a loop counter giving us cell_id
046919             0284*  @start_cell_loop:
046919 DD 7E 00    0285*  	ld a,(ix+map_type_status)
04691C E6 08       0286*  	and cell_is_start
04691E 20 06       0287*  	jr nz,@start_cell_found
046920 ED 32 04    0288*  	lea ix,ix+map_record_size
046923 0C          0289*  	inc c
046924 18 F3       0290*  	jr @start_cell_loop
046926             0291*  @start_cell_found:
046926 79          0292*  	ld a,c
046927 CD FF 68 04 0293*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
04692B ED 53 D1 B8 0294*  	ld (cur_x),de
       04          
046930 C9          0295*  	ret
046931             0296*  
046931             0297*  ; get starting position based an obj_id
046931             0298*  ; inputs: a is the obj_id to search for
046931             0299*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
046931             0300*  ; destroys: c,iy
046931             0301*  get_room_start:
046931             0302*  ; loop through map data to find the obj_id in a
046931 DD 21 00 E0 0303*  	ld ix,cell_status
       B7          
046936 0E 00       0304*  	ld c,0 ; c will be a loop counter giving us cell_id
046938             0305*  @start_cell_loop:
046938 DD BE 02    0306*  	cp (ix+map_obj_id)
04693B 28 06       0307*  	jr z,@start_cell_found
04693D ED 32 04    0308*  	lea ix,ix+map_record_size
046940 0C          0309*  	inc c
046941 18 F5       0310*  	jr @start_cell_loop
046943             0311*  @start_cell_found:
046943 79          0312*  	ld a,c
046944 CD FF 68 04 0313*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
046948 ED 53 D1 B8 0314*  	ld (cur_x),de
       04          
04694D C9          0315*  	ret
04694E             0316*  
04694E             0317*  
04694E             0318*  ; moves player to the room indicated by the too room cell they've just entered
04694E             0319*  ; inputs: ix = pointer to the cell containing the too room door
04694E             0320*  change_room:
04694E             0321*  ; set visited flag for old room
04694E 3A CC B8 04 0322*  	ld a,(cur_room)
046952 21 E8 69 04 0323*  	ld hl,room_flags
046956 11 00 00 00 0324*  	ld de,0 ; make sure deu and d are zero
04695A 5F          0325*  	ld e,a
04695B 19          0326*  	add hl,de ; hl = address of room flags entry
04695C 3E 01       0327*  	ld a,room_flag_visited
04695E B6          0328*  	or (hl)
04695F 77          0329*  	ld (hl),a
046960             0330*  ; update from_room
046960 3A CC B8 04 0331*  	ld a,(cur_room)
046964 32 CF B8 04 0332*  	ld (from_room),a
046968             0333*  ; get the new room id from the cell and update cur_room
046968 21 DE 69 04 0334*  	ld hl,to_room_obj_lut
04696C DD 7E 02    0335*  	ld a,(ix+map_obj_id)
04696F 96          0336*  	sub (hl)
046970 32 CC B8 04 0337*  	ld (cur_room),a
046974             0338*  ; save old room state to room dat memory location
046974 21 F2 69 04 0339*  	ld hl,room_dat_lut
046978 3A CF B8 04 0340*  	ld a,(from_room)
04697C 57          0341*  	ld d,a
04697D 1E 03       0342*  	ld e,3 ; three bytes per lookup record
04697F ED 5C       0343*  	mlt de ; de = offset to room dat entry
046981 19          0344*  	add hl,de ; hl = address of room dat entry
046982 ED 17       0345*  	ld de,(hl) ; destination address for room data
046984 21 00 E0 B7 0346*  	ld hl,cell_status ; source address for room data
046988 01 00 20 00 0347*  	ld bc,8*1024 ; size of room data
04698C ED B0       0348*  	ldir
04698E             0349*  ; check room visited flag for target room
04698E 21 E8 69 04 0350*  	ld hl,room_flags
046992 3A CC B8 04 0351*  	ld a,(cur_room)
046996 11 00 00 00 0352*  	ld de,0 ; make sure deu and d are zero
04699A 5F          0353*  	ld e,a
04699B 19          0354*  	add hl,de ; hl = address of room flags entry
04699C 3E 01       0355*  	ld a,room_flag_visited
04699E A6          0356*  	and (hl)
04699F 20 0A       0357*  	jr nz,@room_visited
0469A1             0358*  ; room not visited so load room data from file
0469A1 CD 7E 68 04 0359*  	call map_load
0469A5 CD AF 68 04 0360*  	call map_init_sprites
0469A9 18 1A       0361*  	jr @get_room_start
0469AB             0362*  @room_visited:
0469AB             0363*  ; fetch new room state from room dat memory location
0469AB 21 F2 69 04 0364*  	ld hl,room_dat_lut
0469AF 3A CC B8 04 0365*  	ld a,(cur_room)
0469B3 57          0366*  	ld d,a
0469B4 1E 03       0367*  	ld e,3 ; three bytes per lookup record
0469B6 ED 5C       0368*  	mlt de ; de = offset to room dat entry
0469B8 19          0369*  	add hl,de ; hl = address of room dat entry
0469B9 ED 27       0370*  	ld hl,(hl) ; source address for room data
0469BB 11 00 E0 B7 0371*  	ld de,cell_status ; destination address for room data
0469BF 01 00 20 00 0372*  	ld bc,8*1024 ; size of room data
0469C3 ED B0       0373*  	ldir
0469C5             0374*  @get_room_start:
0469C5             0375*  ; get player starting position from to_room_obj_lut
0469C5 3A CF B8 04 0376*  	ld a,(from_room)
0469C9 21 DE 69 04 0377*  	ld hl,to_room_obj_lut
0469CD 11 00 00 00 0378*  	ld de,0 ; make sure deu and d are zero
0469D1 5F          0379*  	ld e,a
0469D2 19          0380*  	add hl,de ; hl = address of to_room_obj_lut entry
0469D3 7E          0381*  	ld a,(hl)
0469D4 CD 31 69 04 0382*  	call get_room_start
0469D8 ED 53 D1 B8 0383*  	ld (cur_x),de
       04          
0469DD C9          0384*  	ret
0469DE             0385*  
0469DE 1E 1F 20 21 0386*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
0469E8             0387*  
0469E8 00 00 00 00 0388*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
0469F2             0389*  room_flag_visited: equ %00000001
0469F2             0390*  
0469F2             0391*  room_dat_lut:
0469F2 00 00 0A    0392*  room_00_dat: dl 0x0A0000
0469F5 00 20 0A    0393*  room_01_dat: dl 0x0A2000
0469F8 00 40 0A    0394*  room_02_dat: dl 0x0A4000
0469FB 00 60 0A    0395*  room_03_dat: dl 0x0A6000
0469FE 00 80 0A    0396*  room_04_dat: dl 0x0A8000
046A01 00 A0 0A    0397*  room_05_dat: dl 0x0AA000
046A04 00 C0 0A    0398*  room_06_dat: dl 0x0AC000
046A07 00 E0 0A    0399*  room_07_dat: dl 0x0AE000
046A0A 00 00 0B    0400*  room_08_dat: dl 0x0B0000
046A0D 00 20 0B    0401*  room_09_dat: dl 0x0B2000
046A10             0402*  
046A10             0403*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
046A10             0404*  
046A10             0405*  start_obj_id: equ 28
046A10             0406*  
046A10             0407*  floors:
046A10 13 6A 04    0408*  	dl floor_00
046A13             0409*  
046A13             0410*  room_files:
046A13             0411*  floor_00:
046A13 1C 6A 04    0412*  	dl room_00_0
046A16 2E 6A 04    0413*  	dl room_00_1
046A19 40 6A 04    0414*  	dl room_00_2
046A1C             0415*  
046A1C 6D 61 70 73 0416*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
046A2E 6D 61 70 73 0417*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046A40 6D 61 70 73 0418*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
046A52             0016   	include "src/asm/render.asm"
046A52             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046A52             0002*  ; first three bytes of cell_status record in little-endian order
046A52             0003*  to_cell_status:
046A52             0004*  to_map_type_status: ds 1
046A53             0005*  to_img_idx: ds 1
046A54             0006*  to_obj_id: ds 1
046A55             0007*  ; fourth byte of cell_status record
046A55             0008*  to_sprite_id: ds 1
046A56             0009*  
046A56             0010*  to_poly_id: ds 1
046A57             0011*  to_buffer_id: ds 3
046A5A             0012*  
046A5A             0013*  cur_cell_views: ds 3
046A5D             0014*  
046A5D             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
046A5D             0016*  
046A5D 03 20 00    0017*  bj_health_image: dl BUF_UI_BJ_100 ; 100% health default
046A60             0018*  
046A60             0019*  ; render background as a prelude to rendering panels and sprites
046A60             0020*  ; hl is the buffer id, bc and de are plot_x and plot_y
046A60             0021*  render_background:
046A60             0022*  ; back up everything
046A60 C5          0023*      push bc
046A61 D5          0024*      push de
046A62 E5          0025*      push hl
046A63             0026*  ; plot background
046A63 AF          0027*      xor a ; color mode
046A64 0E 08       0028*      ld c,c_grey_dk ; color
046A66 CD ED AE 04 0029*      call vdu_gcol_fg
046A6A 01 00 00 00 0030*      ld bc,0 ; x0
046A6E 11 00 00 00 0031*      ld de,0 ; y0
046A72 DD 21 3F 01 0032*      ld ix,319
       00          
046A77 FD 21 50 00 0033*      ld iy,80
       00          
046A7C CD 3A B2 04 0034*      call vdu_plot_rf
046A80 AF          0035*      xor a ; color mode
046A81 0E 07       0036*      ld c,c_grey ; color
046A83 CD ED AE 04 0037*      call vdu_gcol_fg
046A87 01 00 00 00 0038*      ld bc,0 ; x0
046A8B 11 50 00 00 0039*      ld de,80 ; y0
046A8F DD 21 3F 01 0040*      ld ix,319
       00          
046A94 FD 21 9F 00 0041*      ld iy,159
       00          
046A99 CD 3A B2 04 0042*      call vdu_plot_rf
046A9D             0043*  ; plot the background
046A9D E1          0044*      pop hl ; get back the buffer id
046A9E CD 2C B0 04 0045*      call vdu_buff_select
046AA2 D1          0046*      pop de ; get back plot_y
046AA3 C1          0047*      pop bc ; get back plot_x
046AA4 CD FD B1 04 0048*      call vdu_plot_bmp
046AA8 C9          0049*      ret
046AA9             0050*  
046AA9             0051*  ; render a 3D panel
046AA9             0052*  ; inputs: to_poly_id set, to_buffer_id set
046AA9             0053*  render_panel:
046AA9             0054*  ; make the bitmap buffer active
046AA9 2A 57 6A 04 0055*      ld hl,(to_buffer_id)
046AAD CD 2C B0 04 0056*      call vdu_buff_select
046AB1             0057*  ; get the coordinates of the panel
046AB1 DD 21 E1 6C 0058*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046AB6             0059*  ; get the panel's poly_id
046AB6 3A 56 6A 04 0060*      ld a,(to_poly_id)
046ABA             0061*  ; multiply a by 6 to get the offset
046ABA 47          0062*      ld b,a
046ABB 0E 06       0063*      ld c,6
046ABD ED 4C       0064*      mlt bc
046ABF             0065*  ; add the offset to the lookup table
046ABF DD 09       0066*      add ix,bc
046AC1             0067*  ; get the panel coordinates
046AC1 DD 07 00    0068*      ld bc,(ix) ; plot_x
046AC4 DD 17 03    0069*      ld de,(ix+3) ; plot_y
046AC7             0070*  ; plot that mofo and go home
046AC7 CD FD B1 04 0071*      call vdu_plot_bmp
046ACB C9          0072*      ret
046ACC             0073*  
046ACC             0074*  ; render a 3D sprite
046ACC             0075*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
046ACC             0076*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
046ACC             0077*  render_sprite:
046ACC             0078*  ; look up sprite_obj in sprite table
046ACC FD 21 00 FC 0079*      ld iy,sprite_table_base
       B7          
046AD1 47          0080*      ld b,a ; sprite id
046AD2 0E 10       0081*      ld c,sprite_record_size
046AD4 ED 4C       0082*      mlt bc
046AD6 FD 09       0083*      add iy,bc ; iy points to sprite record
046AD8 FD 22 D8 A5 0084*      ld (sprite_table_pointer),iy
       04          
046ADD             0085*  ; get sprite imgs lookup
046ADD FD 7E 01    0086*      ld a,(iy+sprite_obj) ; a is sprite_obj
046AE0 FD 21 D2 6F 0087*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
046AE5 47          0088*      ld b,a
046AE6 0E 03       0089*      ld c,3 ; 3 bytes per record
046AE8 ED 4C       0090*      mlt bc
046AEA FD 09       0091*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
046AEC FD 37 00    0092*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
046AEF             0093*  ; convert to_poly_id to sprite_poly
046AEF 21 A5 6F 04 0094*      ld hl,sprite_polys_lookup
046AF3 3A 56 6A 04 0095*      ld a,(to_poly_id)
046AF7 01 00 00 00 0096*      ld bc,0  ; make sure bcu and b are zero
046AFB 4F          0097*      ld c,a
046AFC 09          0098*      add hl,bc ; hl points to the sprite's poly id
046AFD             0099*  ; get the sprites image defs for the particular poly id
046AFD 7E          0100*      ld a,(hl)
046AFE 47          0101*      ld b,a
046AFF 0E 09       0102*      ld c,9  ; 9 bytes per record
046B01 ED 4C       0103*      mlt bc
046B03 FD 09       0104*      add iy,bc ; iy is the offset to the sprite's image def
046B05             0105*  ; select buffer
046B05 FD 27 06    0106*      ld hl,(iy+6)
046B08 CD 2C B0 04 0107*      call vdu_buff_select
046B0C             0108*  ; plot sprite
046B0C FD 07 00    0109*      ld bc,(iy+0) ; plot_x
046B0F FD 17 03    0110*      ld de,(iy+3) ; plot_y
046B12 CD FD B1 04 0111*      call vdu_plot_bmp
046B16 C9          0112*      ret
046B17             0113*  
046B17             0114*  ; render the object in a given cell and poly_id
046B17             0115*  ; inputs: to_poly_id set, d,e are the cell coords
046B17             0116*  render_cell:
046B17             0117*  ; get the cell to render's cell_status data and store it in scratch
046B17 CD D6 67 04 0118*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046B1B DD 27 00    0119*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
046B1E 22 52 6A 04 0120*      ld (to_cell_status),hl
046B22             0121*  ; get sprite_id from cell_status lut
046B22 DD 7E 03    0122*      ld a,(ix+map_sprite_id)
046B25 FE FF       0123*      cp 255 ; value if no sprite present
046B27 C2 CC 6A 04 0124*      jp nz,render_sprite
046B2B             0125*  ; get cell's render_type
046B2B 7D          0126*      ld a,l ; map_type_status
046B2C E6 02       0127*      and 2 ; mask off everything but lowest two bits
046B2E 28 02       0128*      jr z,@cube ; render_type_cube is 0
046B30 18 32       0129*      jr @nodraw ; placeholder for future implementation TODO
046B32             0130*  @cube:
046B32             0131*      ; get map_img_idx from cell_status lut
046B32 3A 53 6A 04 0132*      ld a,(to_img_idx)
046B36 FE FF       0133*      cp 255 ; value for cell with nothing to draw
046B38 28 2A       0134*      jr z,@nodraw
046B3A             0135*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
046B3A 21 1C 6E 04 0136*      ld hl,cube_img_idx_lookup
046B3E 47          0137*      ld b,a
046B3F 0E 03       0138*      ld c,3 ; three bytes per record
046B41 ED 4C       0139*      mlt bc
046B43 09          0140*      add hl,bc ; hl points to the cube's base buffer id
046B44 ED 27       0141*      ld hl,(hl) ; hl is the base buffer id
046B46 EB          0142*      ex de,hl ; stash the base buffer id in de for later
046B47 21 EF 6D 04 0143*      ld hl,cube_poly_idx_lookup
046B4B 3A 56 6A 04 0144*      ld a,(to_poly_id)
046B4F 01 00 00 00 0145*      ld bc,0 ; make sure bcu is zero
046B53 4F          0146*      ld c,a
046B54 09          0147*      add hl,bc ; hl is the buffer id index address
046B55 7E          0148*      ld a,(hl) ; a is the buffer id index value
046B56 21 00 00 00 0149*      ld hl,0 ; make sure hlu is zero
046B5A 6F          0150*      ld l,a ; hl is the buffer id index value
046B5B 19          0151*      add hl,de ; hl is the buffer id
046B5C 22 57 6A 04 0152*      ld (to_buffer_id),hl
046B60 C3 A9 6A 04 0153*      jp render_panel
046B64             0154*  @nodraw:
046B64 C9          0155*      ret
046B65             0156*  
046B65             0157*  ; render a full 3d scene
046B65             0158*  ; inputs: cur_x, cur_y, orientation set
046B65             0159*  ; outputs: pretty pictures
046B65             0160*  ; destroys: everything
046B65             0161*  render_scene:
046B65             0162*  ; clear the screen
046B65 CD 60 6A 04 0163*      call render_background
046B69             0164*  ; get current map position and camera orientation
046B69 ED 5B D1 B8 0165*      ld de,(cur_x) ; d,e = cur_y,x
       04          
046B6E CD D6 67 04 0166*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046B72             0167*  ; get cell_views address for this cell and orientation
046B72 3A D0 B8 04 0168*      ld a,(orientation)
046B76 5F          0169*      ld e,a
046B77 16 06       0170*      ld d,6 ; 6 bytes per orientation
046B79 ED 5C       0171*      mlt de ; de = orientation offset
046B7B EB          0172*      ex de,hl ; hl = orientation offset
046B7C 06 18       0173*      ld b,24 ; 24 bytes per cell in cell_views lut
046B7E ED 4C       0174*      mlt bc ; bc = offset from base address of cell_views lut
046B80 09          0175*      add hl,bc ; hl = total offset from cell_views base address
046B81 EB          0176*      ex de,hl ; becaue we can't add iy to hl
046B82 FD 21 00 E4 0177*      ld iy,cell_views ; base address of cell_views lut
       B7          
046B87 FD 19       0178*      add iy,de ; iy = cell_views address
046B89 FD 22 5A 6A 0179*      ld (cur_cell_views),iy
       04          
046B8E             0180*  ; cycle through the cell views masks and render the appropriate objects
046B8E 01 00 46 28 0181*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
046B92 AF          0182*      xor a ; poly_id
046B93 32 56 6A 04 0183*      ld (to_poly_id),a
046B97             0184*  @loop:
046B97 ED 43 A3 6B 0185*      ld (@bit_iy+2),bc
       04          
046B9C FD 2A 5A 6A 0186*      ld iy,(cur_cell_views)
       04          
046BA1             0187*  @bit_iy:
046BA1 FD CB 00 46 0188*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
046BA5 28 21       0189*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046BA7             0190*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046BA7 3A 56 6A 04 0191*      ld a,(to_poly_id)
046BAB 4F          0192*      ld c,a ; poly_id
046BAC 3A D0 B8 04 0193*      ld a,(orientation)
046BB0 CD AE 6C 04 0194*      call get_polys_deltas ; d,e = y,x deltas
046BB4 3A D1 B8 04 0195*      ld a,(cur_x)
046BB8 83          0196*      add a,e
046BB9 5F          0197*      ld e,a
046BBA 3A D2 B8 04 0198*      ld a,(cur_y)
046BBE 82          0199*      add a,d
046BBF 57          0200*      ld d,a
046BC0 3A 56 6A 04 0201*      ld a,(to_poly_id)
046BC4 CD 17 6B 04 0202*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
046BC8             0203*  @next_poly:
046BC8 ED 4B A3 6B 0204*      ld bc,(@bit_iy+2)
       04          
046BCD 3A 56 6A 04 0205*      ld a,(to_poly_id)
046BD1 3C          0206*      inc a ; a is next poly_id
046BD2 32 56 6A 04 0207*      ld (to_poly_id),a
046BD6 FE 2D       0208*      cp num_polys
046BD8 28 0D       0209*      jr z,@end
046BDA 3E 08       0210*      ld a,8
046BDC 80          0211*      add a,b
046BDD 47          0212*      ld b,a ; bit tested codes to 0x46 + b/8
046BDE FE 86       0213*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
046BE0 20 B5       0214*      jr nz,@loop
046BE2 06 46       0215*      ld b,0x46
046BE4 0C          0216*      inc c ; iy address offset
046BE5 18 B0       0217*      jr @loop
046BE7             0218*  @end:
046BE7             0219*  ; draw the graphic portions of the ui
046BE7 21 05 20 00 0220*  	ld hl,BUF_UI_LOWER_PANEL
046BEB CD 2C B0 04 0221*      call vdu_buff_select
046BEF 01 00 00 00 0222*  	ld bc,0 ; x
046BF3 11 A0 00 00 0223*  	ld de,160 ; y
046BF7 CD FD B1 04 0224*  	call vdu_plot_bmp
046BFB             0225*  
046BFB 2A EC B8 04 0226*      ld hl,(plyr_wpn_ui_lg)
046BFF ED 5B FE B8 0227*      ld de,(plyr_wpn_anim_fr)
       04          
046C04 19          0228*      add hl,de
046C05 CD 2C B0 04 0229*      call vdu_buff_select
046C09 01 80 00 00 0230*      ld bc,128 ; x
046C0D 11 60 00 00 0231*      ld de,96 ; y
046C11 CD FD B1 04 0232*      call vdu_plot_bmp
046C15             0233*  
046C15 2A E9 B8 04 0234*      ld hl,(plyr_wpn_ui_sm)
046C19 CD 2C B0 04 0235*      call vdu_buff_select
046C1D 01 0A 01 00 0236*      ld bc,266 ; x
046C21 11 B2 00 00 0237*      ld de,178 ; y
046C25 CD FD B1 04 0238*      call vdu_plot_bmp
046C29             0239*  
046C29 2A 5D 6A 04 0240*      ld hl,(bj_health_image)
046C2D CD 2C B0 04 0241*      call vdu_buff_select
046C31 01 84 00 00 0242*      ld bc,132 ; x
046C35 11 AA 00 00 0243*      ld de,170 ; y
046C39 CD FD B1 04 0244*      call vdu_plot_bmp
046C3D             0245*  
046C3D             0246*  ; draw the text portions of the ui
046C3D 0E 16       0247*      ld c,22 ; x
046C3F 06 03       0248*      ld b,3 ; y
046C41 CD 00 B0 04 0249*      call vdu_move_cursor
046C45 2A 01 B9 04 0250*      ld hl,(plyr_ammo)
046C49 CD 10 B5 04 0251*      call printDec
046C4D             0252*  
046C4D 0E 11       0253*      ld c,17 ; x
046C4F 06 03       0254*      ld b,3 ; y
046C51 CD 00 B0 04 0255*      call vdu_move_cursor
046C55 2A C2 B8 04 0256*      ld hl,(plyr_health)
046C59 CD 10 B5 04 0257*      call printDec
046C5D             0258*  
046C5D             0259*  ; DEBUG
046C5D 0E 11       0260*      ld c,17 ; x
046C5F 06 04       0261*      ld b,4  ; y
046C61 CD 00 B0 04 0262*      call vdu_move_cursor
046C65 2A 5F BB 04 0263*      ld hl,(last_damage)
046C69 CD 10 B5 04 0264*      call printDec
046C6D             0265*  ; END DEBUG
046C6D             0266*  
046C6D 0E 07       0267*      ld c,7; x
046C6F 06 03       0268*      ld b,3 ; y
046C71 CD 00 B0 04 0269*      call vdu_move_cursor
046C75 2A C8 B8 04 0270*      ld hl,(plyr_lives)
046C79 CD 10 B5 04 0271*      call printDec
046C7D             0272*  
046C7D 0E 03       0273*      ld c,3 ; x
046C7F 06 03       0274*      ld b,3 ; y
046C81 CD 00 B0 04 0275*      call vdu_move_cursor
046C85 2A BF B8 04 0276*      ld hl,(plyr_score)
046C89 CD 10 B5 04 0277*      call printDec
046C8D             0278*  
046C8D 0E 01       0279*      ld c,1 ; x
046C8F 06 03       0280*      ld b,3 ; y
046C91 CD 00 B0 04 0281*      call vdu_move_cursor
046C95 3A CB B8 04 0282*      ld a,(cur_floor)
046C99 CD F2 B4 04 0283*      call printHex8
046C9D             0284*  
046C9D 0E 01       0285*      ld c,1 ; x
046C9F 06 04       0286*      ld b,4 ; y
046CA1 CD 00 B0 04 0287*      call vdu_move_cursor
046CA5 3A CC B8 04 0288*      ld a,(cur_room)
046CA9 CD F2 B4 04 0289*      call printHex8
046CAD             0290*  
046CAD             0291*  ; ; DEBUG
046CAD             0292*      ; ld c,1 ; x
046CAD             0293*      ; ld b,5 ; y
046CAD             0294*      ; call vdu_move_cursor
046CAD             0295*      ; ld hl,cur_x
046CAD             0296*      ; ld a,5
046CAD             0297*      ; call dumpMemoryHex
046CAD             0298*  
046CAD             0299*      ; ld c,1 ; x
046CAD             0300*      ; ld b,7 ; y
046CAD             0301*      ; call vdu_move_cursor
046CAD             0302*      ; ld hl,room_flags
046CAD             0303*      ; ld a,10
046CAD             0304*      ; call dumpMemoryHex
046CAD             0305*  
046CAD             0306*  ;     ld c,1 ; x
046CAD             0307*  ;     ld b,7 ; y
046CAD             0308*  ;     call vdu_move_cursor
046CAD             0309*  ;     ld hl,sprite_new_x
046CAD             0310*  ;     ld a,3
046CAD             0311*  ;     call dumpMemoryHex
046CAD             0312*  
046CAD             0313*  ;     ld c,1 ; x
046CAD             0314*  ;     ld b,8 ; y
046CAD             0315*  ;     call vdu_move_cursor
046CAD             0316*  ;     ld hl,cur_x
046CAD             0317*  ;     ld a,3
046CAD             0318*  ;     call dumpMemoryHex
046CAD             0319*  ; ; END DEBUG
046CAD             0320*  
046CAD             0321*  ; all done
046CAD C9          0322*      ret
046CAE             0323*  
046CAE             0324*  ; get the map coordinates deltas for a given orientation and poly_id
046CAE             0325*  ; inputs: a is the orientation, c is the poly_id
046CAE             0326*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
046CAE             0327*  get_polys_deltas:
046CAE             0328*  ; get the base address of the orientation-specific deltas lookup table
046CAE FE 00       0329*      cp 0
046CB0 28 11       0330*      jr z,@orientation_0
046CB2 FE 01       0331*      cp 1
046CB4 28 13       0332*      jr z,@orientation_1
046CB6 FE 02       0333*      cp 2
046CB8 28 15       0334*      jr z,@orientation_2
046CBA FE 03       0335*      cp 3
046CBC 28 17       0336*      jr z,@orientation_3
046CBE             0337*  ; return zeros if not found
046CBE 11 00 00 00 0338*      ld de,0
046CC2 C9          0339*      ret
046CC3             0340*  @orientation_0: ; north
046CC3 21 3D 6E 04 0341*      ld hl,polys_map_deltas_0
046CC7 18 10       0342*      jr @get_deltas
046CC9             0343*  @orientation_1: ; east
046CC9 21 97 6E 04 0344*      ld hl,polys_map_deltas_1
046CCD 18 0A       0345*      jr @get_deltas
046CCF             0346*  @orientation_2: ; south
046CCF 21 F1 6E 04 0347*      ld hl,polys_map_deltas_2
046CD3 18 04       0348*      jr @get_deltas
046CD5             0349*  @orientation_3: ; west
046CD5 21 4B 6F 04 0350*      ld hl,polys_map_deltas_3
046CD9             0351*  @get_deltas:
046CD9 06 02       0352*      ld b,2 ; 2 bytes per record
046CDB ED 4C       0353*      mlt bc ; poly_id * 2
046CDD 09          0354*      add hl,bc ; hl points to the deltas
046CDE ED 17       0355*      ld de,(hl) ;d,e = dy,dx
046CE0 C9          0356*      ret
046CE1             0017   	include "src/asm/polys.asm"
046CE1             0001*  num_polys: equ 45
046CE1             0002*  
046CE1             0003*  polys_lookup_plot:
046CE1             0004*  ;	   plot_x,  plot_y:
046CE1 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
046CE7 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
046CED 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
046CF3 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
046CF9 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
046CFF B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
046D05 D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
046D0B F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
046D11 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
046D17 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
046D1D 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
046D23 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
046D29 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
046D2F B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
046D35 D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
046D3B F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
046D41 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
046D47 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
046D4D 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
046D53 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
046D59 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
046D5F B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046D65 E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046D6B 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046D71 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046D77 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046D7D 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046D83 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046D89 E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046D8F 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046D95 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046D9B 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046DA1 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046DA7 C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046DAD 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046DB3 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046DB9 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046DBF C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046DC5 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046DCB 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046DD1 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046DD7 D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046DDD 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046DE3 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046DE9 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046DEF             0050*  
046DEF             0051*  cube_poly_idx_lookup:
046DEF             0052*  ;	 img_idx,  poly_id
046DEF 00          0053*  	db 0 ; poly_id:0 0
046DF0 00          0054*  	db 0 ; poly_id:1 1
046DF1 00          0055*  	db 0 ; poly_id:2 2
046DF2 00          0056*  	db 0 ; poly_id:3 3
046DF3 00          0057*  	db 0 ; poly_id:4 4
046DF4 00          0058*  	db 0 ; poly_id:5 5
046DF5 00          0059*  	db 0 ; poly_id:6 6
046DF6 00          0060*  	db 0 ; poly_id:7 7
046DF7 00          0061*  	db 0 ; poly_id:8 8
046DF8 01          0062*  	db 1 ; poly_id:9 9
046DF9 02          0063*  	db 2 ; poly_id:10 10
046DFA 03          0064*  	db 3 ; poly_id:11 11
046DFB 04          0065*  	db 4 ; poly_id:12 12
046DFC 05          0066*  	db 5 ; poly_id:13 13
046DFD 06          0067*  	db 6 ; poly_id:14 14
046DFE 07          0068*  	db 7 ; poly_id:15 15
046DFF 08          0069*  	db 8 ; poly_id:16 16
046E00 09          0070*  	db 9 ; poly_id:17 17
046E01 09          0071*  	db 9 ; poly_id:18 18
046E02 09          0072*  	db 9 ; poly_id:19 19
046E03 09          0073*  	db 9 ; poly_id:20 20
046E04 09          0074*  	db 9 ; poly_id:21 21
046E05 09          0075*  	db 9 ; poly_id:22 22
046E06 09          0076*  	db 9 ; poly_id:23 23
046E07 0A          0077*  	db 10 ; poly_id:24 24
046E08 0B          0078*  	db 11 ; poly_id:25 25
046E09 0C          0079*  	db 12 ; poly_id:26 26
046E0A 0D          0080*  	db 13 ; poly_id:27 27
046E0B 0E          0081*  	db 14 ; poly_id:28 28
046E0C 0F          0082*  	db 15 ; poly_id:29 29
046E0D 10          0083*  	db 16 ; poly_id:30 30
046E0E 10          0084*  	db 16 ; poly_id:31 31
046E0F 10          0085*  	db 16 ; poly_id:32 32
046E10 10          0086*  	db 16 ; poly_id:33 33
046E11 10          0087*  	db 16 ; poly_id:34 34
046E12 11          0088*  	db 17 ; poly_id:35 35
046E13 12          0089*  	db 18 ; poly_id:36 36
046E14 13          0090*  	db 19 ; poly_id:37 37
046E15 14          0091*  	db 20 ; poly_id:38 38
046E16 15          0092*  	db 21 ; poly_id:39 39
046E17 15          0093*  	db 21 ; poly_id:40 40
046E18 15          0094*  	db 21 ; poly_id:41 41
046E19 16          0095*  	db 22 ; poly_id:42 42
046E1A 17          0096*  	db 23 ; poly_id:43 43
046E1B 18          0097*  	db 24 ; poly_id:44 44
046E1C             0098*  
046E1C             0099*  cube_img_idx_lookup:
046E1C             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046E1C 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046E1F 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046E22 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046E25 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046E28 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046E2B 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046E2E 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046E31 AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046E34 C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046E37 E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046E3A FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046E3D             0112*  
046E3D             0113*  ; map_delta_x,  map_delta_y
046E3D             0114*  polys_map_deltas_0: ; north orientation
046E3D FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046E3F FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046E41 FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046E43 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046E45 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046E47 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046E49 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046E4B 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046E4D 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046E4F FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046E51 FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046E53 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046E55 FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046E57 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046E59 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046E5B 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046E5D 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046E5F FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046E61 FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046E63 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046E65 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046E67 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046E69 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046E6B 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046E6D FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046E6F FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046E71 FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046E73 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046E75 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046E77 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046E79 FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046E7B FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046E7D 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046E7F 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046E81 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046E83 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046E85 FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046E87 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046E89 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046E8B FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046E8D 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046E8F 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046E91 FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046E93 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046E95 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046E97             0160*  
046E97             0161*  polys_map_deltas_1: ; east orientation
046E97 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046E99 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046E9B 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046E9D 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046E9F 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046EA1 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046EA3 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046EA5 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046EA7 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046EA9 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046EAB 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046EAD 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046EAF 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046EB1 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046EB3 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046EB5 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046EB7 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046EB9 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046EBB 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046EBD 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046EBF 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046EC1 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046EC3 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046EC5 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046EC7 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046EC9 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046ECB 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046ECD 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046ECF 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046ED1 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046ED3 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046ED5 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046ED7 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046ED9 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046EDB 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046EDD 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046EDF 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046EE1 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046EE3 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046EE5 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046EE7 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046EE9 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046EEB 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046EED 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046EEF 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046EF1             0207*  
046EF1             0208*  polys_map_deltas_2: ; south orientation
046EF1 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046EF3 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046EF5 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046EF7 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046EF9 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046EFB FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046EFD FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046EFF FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046F01 FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046F03 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046F05 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046F07 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046F09 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046F0B FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046F0D FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046F0F FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046F11 FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046F13 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046F15 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046F17 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046F19 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046F1B FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046F1D FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046F1F FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046F21 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046F23 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046F25 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046F27 FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046F29 FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046F2B FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046F2D 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046F2F 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046F31 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046F33 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046F35 FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046F37 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046F39 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046F3B FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046F3D FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046F3F 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046F41 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046F43 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046F45 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046F47 FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046F49 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046F4B             0254*  
046F4B             0255*  polys_map_deltas_3: ; west orientation
046F4B FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046F4D FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046F4F FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046F51 FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046F53 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046F55 FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046F57 FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046F59 FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046F5B FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046F5D FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046F5F FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046F61 FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046F63 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046F65 FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046F67 FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046F69 FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046F6B FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046F6D FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046F6F FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046F71 FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046F73 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046F75 FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046F77 FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046F79 FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046F7B FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046F7D FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046F7F FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046F81 FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046F83 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046F85 FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046F87 FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046F89 FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046F8B FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046F8D FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046F8F FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046F91 FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046F93 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046F95 FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046F97 FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046F99 FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046F9B FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046F9D FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046F9F FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046FA1 FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046FA3 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046FA5             0301*  
046FA5             0302*  num_sprite_polys: equ 25
046FA5             0303*  
046FA5             0304*  sprite_polys_lookup:
046FA5             0305*  ;south_id 	; poly_id
046FA5 00          0306*  	db 0	; 0
046FA6 01          0307*  	db 1	; 1
046FA7 02          0308*  	db 2	; 2
046FA8 03          0309*  	db 3	; 3
046FA9 04          0310*  	db 4	; 4
046FAA 05          0311*  	db 5	; 5
046FAB 06          0312*  	db 6	; 6
046FAC 07          0313*  	db 7	; 7
046FAD 08          0314*  	db 8	; 8
046FAE FF          0315*  	db 255	; 9
046FAF FF          0316*  	db 255	; 10
046FB0 FF          0317*  	db 255	; 11
046FB1 FF          0318*  	db 255	; 12
046FB2 FF          0319*  	db 255	; 13
046FB3 FF          0320*  	db 255	; 14
046FB4 FF          0321*  	db 255	; 15
046FB5 FF          0322*  	db 255	; 16
046FB6 09          0323*  	db 9	; 17
046FB7 0A          0324*  	db 10	; 18
046FB8 0B          0325*  	db 11	; 19
046FB9 0C          0326*  	db 12	; 20
046FBA 0D          0327*  	db 13	; 21
046FBB 0E          0328*  	db 14	; 22
046FBC 0F          0329*  	db 15	; 23
046FBD FF          0330*  	db 255	; 24
046FBE FF          0331*  	db 255	; 25
046FBF FF          0332*  	db 255	; 26
046FC0 FF          0333*  	db 255	; 27
046FC1 FF          0334*  	db 255	; 28
046FC2 FF          0335*  	db 255	; 29
046FC3 10          0336*  	db 16	; 30
046FC4 11          0337*  	db 17	; 31
046FC5 12          0338*  	db 18	; 32
046FC6 13          0339*  	db 19	; 33
046FC7 14          0340*  	db 20	; 34
046FC8 FF          0341*  	db 255	; 35
046FC9 FF          0342*  	db 255	; 36
046FCA FF          0343*  	db 255	; 37
046FCB FF          0344*  	db 255	; 38
046FCC 15          0345*  	db 21	; 39
046FCD 16          0346*  	db 22	; 40
046FCE 17          0347*  	db 23	; 41
046FCF FF          0348*  	db 255	; 42
046FD0 FF          0349*  	db 255	; 43
046FD1 18          0350*  	db 24	; 44
046FD2             0351*  
046FD2             0352*  sprite_imgs_lookup:
046FD2             0353*  ;	 sprite_obj; render_obj_id
046FD2 0E 70 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046FD5 EF 70 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046FD8 D0 71 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046FDB B1 72 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046FDE 92 73 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046FE1 73 74 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046FE4 54 75 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046FE7 35 76 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046FEA 16 77 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046FED F7 77 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046FF0 D8 78 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046FF3 B9 79 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046FF6 9A 7A 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046FF9 7B 7B 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046FFC 5C 7C 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046FFF 3D 7D 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
047002 1E 7E 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
047005 FF 7E 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
047008 E0 7F 04    0372*  	dl sprite_obj_018 ; render_obj_id:56
04700B C1 80 04    0373*  	dl sprite_obj_019 ; render_obj_id:60
04700E             0374*  ;	 plot_x,  plot_y, buffer_label
04700E             0375*  
04700E             0376*  ; render_obj_id:20
04700E             0377*  sprite_obj_000:
04700E 09 00 00 4E 0378*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047017 2C 00 00 4E 0379*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047020 50 00 00 4E 0380*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047029 73 00 00 4E 0381*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047032 97 00 00 4E 0382*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
04703B BA 00 00 4E 0383*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047044 DE 00 00 4E 0384*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
04704D 01 01 00 4E 0385*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047056 25 01 00 4E 0386*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
04705F 0B 00 00 4E 0387*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047068 39 00 00 4E 0388*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047071 66 00 00 4E 0389*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
04707A 94 00 00 4E 0390*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047083 C1 00 00 4E 0391*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
04708C EF 00 00 4E 0392*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047095 1C 01 00 4E 0393*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
04709E 11 00 00 4D 0394*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
0470A7 50 00 00 4D 0395*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
0470B0 91 00 00 4D 0396*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
0470B9 D1 00 00 4D 0397*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
0470C2 11 01 00 4D 0398*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
0470CB 1B 00 00 4C 0399*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
0470D4 85 00 00 4C 0400*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
0470DD F0 00 00 4C 0401*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
0470E6 6B 00 00 44 0402*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
0470EF             0403*  
0470EF             0404*  ; render_obj_id:21
0470EF             0405*  sprite_obj_001:
0470EF 0D 00 00 55 0406*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
0470F8 30 00 00 55 0407*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
047101 54 00 00 55 0408*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
04710A 77 00 00 55 0409*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
047113 9B 00 00 55 0410*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
04711C BE 00 00 55 0411*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
047125 E2 00 00 55 0412*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
04712E 05 01 00 55 0413*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
047137 29 01 00 55 0414*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
047140 10 00 00 57 0415*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
047149 3E 00 00 57 0416*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
047152 6B 00 00 57 0417*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
04715B 99 00 00 57 0418*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
047164 C6 00 00 57 0419*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
04716D F4 00 00 57 0420*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
047176 21 01 00 57 0421*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
04717F 16 00 00 5A 0422*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
047188 55 00 00 5A 0423*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
047191 96 00 00 5A 0424*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
04719A D6 00 00 5A 0425*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0471A3 16 01 00 5A 0426*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0471AC 26 00 00 60 0427*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0471B5 90 00 00 60 0428*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0471BE FB 00 00 60 0429*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0471C7 6E 00 00 82 0430*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
0471D0             0431*  
0471D0             0432*  ; render_obj_id:22
0471D0             0433*  sprite_obj_002:
0471D0 09 00 00 55 0434*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0471D9 2C 00 00 55 0435*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0471E2 50 00 00 55 0436*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0471EB 73 00 00 55 0437*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0471F4 97 00 00 55 0438*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0471FD BA 00 00 55 0439*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047206 DE 00 00 55 0440*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04720F 01 01 00 55 0441*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047218 25 01 00 55 0442*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047221 0B 00 00 57 0443*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04722A 39 00 00 57 0444*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047233 66 00 00 57 0445*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04723C 94 00 00 57 0446*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047245 C1 00 00 57 0447*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04724E EF 00 00 57 0448*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047257 1C 01 00 57 0449*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047260 10 00 00 5A 0450*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047269 4F 00 00 5A 0451*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047272 90 00 00 5A 0452*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
04727B D0 00 00 5A 0453*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047284 10 01 00 5A 0454*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
04728D 1B 00 00 60 0455*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
047296 85 00 00 60 0456*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
04729F F0 00 00 60 0457*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
0472A8 50 00 00 82 0458*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
0472B1             0459*  
0472B1             0460*  ; render_obj_id:23
0472B1             0461*  sprite_obj_003:
0472B1 0C 00 00 3E 0462*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472BA 2F 00 00 3E 0463*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472C3 53 00 00 3E 0464*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472CC 76 00 00 3E 0465*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472D5 9A 00 00 3E 0466*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472DE BD 00 00 3E 0467*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472E7 E1 00 00 3E 0468*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472F0 04 01 00 3E 0469*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0472F9 28 01 00 3E 0470*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047302 0F 00 00 39 0471*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
04730B 3D 00 00 39 0472*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
047314 6A 00 00 39 0473*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
04731D 98 00 00 39 0474*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
047326 C5 00 00 39 0475*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
04732F F3 00 00 39 0476*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
047338 20 01 00 39 0477*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
047341 16 00 00 30 0478*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
04734A 55 00 00 30 0479*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
047353 96 00 00 30 0480*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
04735C D6 00 00 30 0481*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
047365 16 01 00 30 0482*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
04736E 24 00 00 1A 0483*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047377 8E 00 00 1A 0484*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047380 F9 00 00 1A 0485*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047389 09 01 00 83 0486*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
047392             0487*  
047392             0488*  ; render_obj_id:24
047392             0489*  sprite_obj_004:
047392 0D 00 00 55 0490*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
04739B 30 00 00 55 0491*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473A4 54 00 00 55 0492*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473AD 77 00 00 55 0493*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473B6 9B 00 00 55 0494*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473BF BE 00 00 55 0495*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473C8 E2 00 00 55 0496*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473D1 05 01 00 55 0497*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473DA 29 01 00 55 0498*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
0473E3 10 00 00 57 0499*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
0473EC 3E 00 00 57 0500*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
0473F5 6B 00 00 57 0501*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
0473FE 99 00 00 57 0502*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
047407 C6 00 00 57 0503*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
047410 F4 00 00 57 0504*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
047419 21 01 00 57 0505*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
047422 16 00 00 5A 0506*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04742B 55 00 00 5A 0507*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
047434 96 00 00 5A 0508*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04743D D6 00 00 5A 0509*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
047446 16 01 00 5A 0510*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04744F 26 00 00 60 0511*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047458 90 00 00 60 0512*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047461 FB 00 00 60 0513*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
04746A 6E 00 00 82 0514*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
047473             0515*  
047473             0516*  ; render_obj_id:40
047473             0517*  sprite_obj_005:
047473 0A 00 00 5A 0518*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04747C 2D 00 00 5A 0519*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047485 51 00 00 5A 0520*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04748E 74 00 00 5A 0521*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047497 98 00 00 5A 0522*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474A0 BB 00 00 5A 0523*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474A9 DF 00 00 5A 0524*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474B2 02 01 00 5A 0525*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474BB 26 01 00 5A 0526*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474C4 0D 00 00 5C 0527*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474CD 3B 00 00 5C 0528*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474D6 68 00 00 5C 0529*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474DF 96 00 00 5C 0530*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474E8 C3 00 00 5C 0531*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474F1 F1 00 00 5C 0532*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0474FA 1E 01 00 5C 0533*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047503 13 00 00 62 0534*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04750C 52 00 00 62 0535*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047515 93 00 00 62 0536*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04751E D3 00 00 62 0537*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047527 13 01 00 62 0538*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047530 20 00 00 6D 0539*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
047539 8A 00 00 6D 0540*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
047542 F5 00 00 6D 0541*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
04754B E0 00 00 A0 0542*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
047554             0543*  
047554             0544*  ; render_obj_id:41
047554             0545*  sprite_obj_006:
047554 0C 00 00 55 0546*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
04755D 2F 00 00 55 0547*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
047566 53 00 00 55 0548*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
04756F 76 00 00 55 0549*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
047578 9A 00 00 55 0550*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
047581 BD 00 00 55 0551*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
04758A E1 00 00 55 0552*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
047593 04 01 00 55 0553*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
04759C 28 01 00 55 0554*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475A5 0E 00 00 57 0555*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475AE 3C 00 00 57 0556*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475B7 69 00 00 57 0557*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475C0 97 00 00 57 0558*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475C9 C4 00 00 57 0559*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475D2 F2 00 00 57 0560*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475DB 1F 01 00 57 0561*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
0475E4 15 00 00 5B 0562*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0475ED 54 00 00 5B 0563*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0475F6 95 00 00 5B 0564*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0475FF D5 00 00 5B 0565*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047608 15 01 00 5B 0566*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047611 23 00 00 62 0567*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
04761A 8D 00 00 62 0568*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
047623 F8 00 00 62 0569*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
04762C 84 00 00 87 0570*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
047635             0571*  
047635             0572*  ; render_obj_id:42
047635             0573*  sprite_obj_007:
047635 0D 00 00 57 0574*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
04763E 30 00 00 57 0575*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
047647 54 00 00 57 0576*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
047650 77 00 00 57 0577*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
047659 9B 00 00 57 0578*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
047662 BE 00 00 57 0579*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
04766B E2 00 00 57 0580*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
047674 05 01 00 57 0581*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
04767D 29 01 00 57 0582*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
047686 10 00 00 5A 0583*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04768F 3E 00 00 5A 0584*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047698 6B 00 00 5A 0585*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0476A1 99 00 00 5A 0586*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0476AA C6 00 00 5A 0587*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0476B3 F4 00 00 5A 0588*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0476BC 21 01 00 5A 0589*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0476C5 18 00 00 5F 0590*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0476CE 57 00 00 5F 0591*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0476D7 98 00 00 5F 0592*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0476E0 D8 00 00 5F 0593*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0476E9 18 01 00 5F 0594*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0476F2 28 00 00 69 0595*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
0476FB 92 00 00 69 0596*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
047704 FD 00 00 69 0597*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
04770D 7D 00 00 9C 0598*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
047716             0599*  
047716             0600*  ; render_obj_id:43
047716             0601*  sprite_obj_008:
047716 0C 00 00 5C 0602*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04771F 2F 00 00 5C 0603*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047728 53 00 00 5C 0604*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047731 76 00 00 5C 0605*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04773A 9A 00 00 5C 0606*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047743 BD 00 00 5C 0607*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04774C E1 00 00 5C 0608*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047755 04 01 00 5C 0609*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04775E 28 01 00 5C 0610*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047767 0F 00 00 61 0611*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047770 3D 00 00 61 0612*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047779 6A 00 00 61 0613*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047782 98 00 00 61 0614*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04778B C5 00 00 61 0615*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047794 F3 00 00 61 0616*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04779D 20 01 00 61 0617*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0477A6 15 00 00 68 0618*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0477AF 54 00 00 68 0619*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0477B8 95 00 00 68 0620*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0477C1 D5 00 00 68 0621*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0477CA 15 01 00 68 0622*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0477D3 24 00 00 77 0623*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
0477DC 8E 00 00 77 0624*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
0477E5 F9 00 00 77 0625*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
0477EE D4 00 00 9F 0626*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
0477F7             0627*  
0477F7             0628*  ; render_obj_id:44
0477F7             0629*  sprite_obj_009:
0477F7 0F 00 00 5C 0630*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047800 32 00 00 5C 0631*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047809 56 00 00 5C 0632*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047812 79 00 00 5C 0633*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04781B 9D 00 00 5C 0634*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047824 C0 00 00 5C 0635*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04782D E4 00 00 5C 0636*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047836 07 01 00 5C 0637*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04783F 2B 01 00 5C 0638*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047848 14 00 00 5F 0639*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047851 42 00 00 5F 0640*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04785A 6F 00 00 5F 0641*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047863 9D 00 00 5F 0642*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04786C CA 00 00 5F 0643*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047875 F8 00 00 5F 0644*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04787E 25 01 00 5F 0645*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047887 1B 00 00 66 0646*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047890 5A 00 00 66 0647*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
047899 9B 00 00 66 0648*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
0478A2 DB 00 00 66 0649*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
0478AB 1B 01 00 66 0650*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
0478B4 2E 00 00 75 0651*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
0478BD 98 00 00 75 0652*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
0478C6 03 01 00 75 0653*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
0478CF C8 00 00 A1 0654*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
0478D8             0655*  
0478D8             0656*  ; render_obj_id:45
0478D8             0657*  sprite_obj_010:
0478D8 09 00 00 56 0658*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
0478E1 2C 00 00 56 0659*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
0478EA 50 00 00 56 0660*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
0478F3 73 00 00 56 0661*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
0478FC 97 00 00 56 0662*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
047905 BA 00 00 56 0663*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
04790E DE 00 00 56 0664*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
047917 01 01 00 56 0665*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
047920 25 01 00 56 0666*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
047929 0C 00 00 58 0667*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
047932 3A 00 00 58 0668*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
04793B 67 00 00 58 0669*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
047944 95 00 00 58 0670*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
04794D C2 00 00 58 0671*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
047956 F0 00 00 58 0672*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
04795F 1D 01 00 58 0673*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
047968 11 00 00 5D 0674*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047971 50 00 00 5D 0675*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04797A 91 00 00 5D 0676*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047983 D1 00 00 5D 0677*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04798C 11 01 00 5D 0678*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047995 1D 00 00 63 0679*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
04799E 87 00 00 63 0680*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
0479A7 F2 00 00 63 0681*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
0479B0 58 00 00 8D 0682*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
0479B9             0683*  
0479B9             0684*  ; render_obj_id:46
0479B9             0685*  sprite_obj_011:
0479B9 09 00 00 58 0686*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479C2 2C 00 00 58 0687*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479CB 50 00 00 58 0688*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479D4 73 00 00 58 0689*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479DD 97 00 00 58 0690*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479E6 BA 00 00 58 0691*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479EF DE 00 00 58 0692*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0479F8 01 01 00 58 0693*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A01 25 01 00 58 0694*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A0A 0C 00 00 5A 0695*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A13 3A 00 00 5A 0696*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A1C 67 00 00 5A 0697*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A25 95 00 00 5A 0698*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A2E C2 00 00 5A 0699*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A37 F0 00 00 5A 0700*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A40 1D 01 00 5A 0701*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A49 11 00 00 60 0702*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047A52 50 00 00 60 0703*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047A5B 91 00 00 60 0704*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047A64 D1 00 00 60 0705*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047A6D 11 01 00 60 0706*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047A76 1D 00 00 69 0707*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047A7F 87 00 00 69 0708*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047A88 F2 00 00 69 0709*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047A91 8E 00 00 9F 0710*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
047A9A             0711*  
047A9A             0712*  ; render_obj_id:47
047A9A             0713*  sprite_obj_012:
047A9A 09 00 00 57 0714*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AA3 2C 00 00 57 0715*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AAC 50 00 00 57 0716*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AB5 73 00 00 57 0717*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047ABE 97 00 00 57 0718*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AC7 BA 00 00 57 0719*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AD0 DE 00 00 57 0720*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AD9 01 01 00 57 0721*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AE2 25 01 00 57 0722*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047AEB 0C 00 00 59 0723*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
047AF4 3A 00 00 59 0724*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
047AFD 67 00 00 59 0725*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B06 95 00 00 59 0726*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B0F C2 00 00 59 0727*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B18 F0 00 00 59 0728*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B21 1D 01 00 59 0729*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B2A 11 00 00 5E 0730*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047B33 50 00 00 5E 0731*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047B3C 91 00 00 5E 0732*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047B45 D1 00 00 5E 0733*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047B4E 11 01 00 5E 0734*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047B57 1D 00 00 66 0735*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
047B60 87 00 00 66 0736*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047B69 F2 00 00 66 0737*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047B72 B2 00 00 96 0738*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
047B7B             0739*  
047B7B             0740*  ; render_obj_id:48
047B7B             0741*  sprite_obj_013:
047B7B 0A 00 00 5A 0742*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047B84 2D 00 00 5A 0743*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047B8D 51 00 00 5A 0744*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047B96 74 00 00 5A 0745*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047B9F 98 00 00 5A 0746*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BA8 BB 00 00 5A 0747*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BB1 DF 00 00 5A 0748*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BBA 02 01 00 5A 0749*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BC3 26 01 00 5A 0750*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BCC 0D 00 00 5C 0751*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047BD5 3B 00 00 5C 0752*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047BDE 68 00 00 5C 0753*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047BE7 96 00 00 5C 0754*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047BF0 C3 00 00 5C 0755*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047BF9 F1 00 00 5C 0756*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C02 1E 01 00 5C 0757*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C0B 12 00 00 62 0758*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C14 51 00 00 62 0759*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C1D 92 00 00 62 0760*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C26 D2 00 00 62 0761*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C2F 12 01 00 62 0762*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C38 1D 00 00 6C 0763*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047C41 87 00 00 6C 0764*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047C4A F2 00 00 6C 0765*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047C53 00 01 00 A0 0766*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
047C5C             0767*  
047C5C             0768*  ; render_obj_id:49
047C5C             0769*  sprite_obj_014:
047C5C 0A 00 00 59 0770*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C65 2D 00 00 59 0771*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C6E 51 00 00 59 0772*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C77 74 00 00 59 0773*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C80 98 00 00 59 0774*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C89 BB 00 00 59 0775*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C92 DF 00 00 59 0776*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
047C9B 02 01 00 59 0777*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CA4 26 01 00 59 0778*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CAD 0E 00 00 5B 0779*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CB6 3C 00 00 5B 0780*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CBF 69 00 00 5B 0781*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CC8 97 00 00 5B 0782*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CD1 C4 00 00 5B 0783*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CDA F2 00 00 5B 0784*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CE3 1F 01 00 5B 0785*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047CEC 13 00 00 62 0786*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047CF5 52 00 00 62 0787*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047CFE 93 00 00 62 0788*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D07 D3 00 00 62 0789*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D10 13 01 00 62 0790*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D19 20 00 00 6C 0791*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047D22 8A 00 00 6C 0792*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047D2B F5 00 00 6C 0793*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047D34 E8 00 00 A0 0794*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
047D3D             0795*  
047D3D             0796*  ; render_obj_id:50
047D3D             0797*  sprite_obj_015:
047D3D 0D 00 00 53 0798*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D46 30 00 00 53 0799*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D4F 54 00 00 53 0800*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D58 77 00 00 53 0801*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D61 9B 00 00 53 0802*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D6A BE 00 00 53 0803*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D73 E2 00 00 53 0804*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D7C 05 01 00 53 0805*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D85 29 01 00 53 0806*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047D8E 10 00 00 54 0807*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047D97 3E 00 00 54 0808*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DA0 6B 00 00 54 0809*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DA9 99 00 00 54 0810*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DB2 C6 00 00 54 0811*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DBB F4 00 00 54 0812*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DC4 21 01 00 54 0813*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047DCD 16 00 00 56 0814*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047DD6 55 00 00 56 0815*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047DDF 96 00 00 56 0816*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047DE8 D6 00 00 56 0817*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047DF1 16 01 00 56 0818*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047DFA 26 00 00 5A 0819*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E03 90 00 00 5A 0820*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E0C FB 00 00 5A 0821*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E15 78 00 00 6E 0822*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047E1E             0823*  
047E1E             0824*  ; render_obj_id:51
047E1E             0825*  sprite_obj_016:
047E1E 0B 00 00 49 0826*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E27 2E 00 00 49 0827*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E30 52 00 00 49 0828*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E39 75 00 00 49 0829*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E42 99 00 00 49 0830*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E4B BC 00 00 49 0831*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E54 E0 00 00 49 0832*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E5D 03 01 00 49 0833*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E66 27 01 00 49 0834*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E6F 0D 00 00 48 0835*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047E78 3B 00 00 48 0836*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047E81 68 00 00 48 0837*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047E8A 96 00 00 48 0838*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047E93 C3 00 00 48 0839*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047E9C F1 00 00 48 0840*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047EA5 1E 01 00 48 0841*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047EAE 13 00 00 45 0842*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047EB7 52 00 00 45 0843*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047EC0 93 00 00 45 0844*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047EC9 D3 00 00 45 0845*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047ED2 13 01 00 45 0846*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047EDB 20 00 00 3E 0847*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047EE4 8A 00 00 3E 0848*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047EED F5 00 00 3E 0849*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047EF6 5E 00 00 1C 0850*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047EFF             0851*  
047EFF             0852*  ; render_obj_id:52
047EFF             0853*  sprite_obj_017:
047EFF 0C 00 00 49 0854*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F08 2F 00 00 49 0855*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F11 53 00 00 49 0856*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F1A 76 00 00 49 0857*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F23 9A 00 00 49 0858*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F2C BD 00 00 49 0859*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F35 E1 00 00 49 0860*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F3E 04 01 00 49 0861*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F47 28 01 00 49 0862*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F50 0F 00 00 48 0863*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F59 3D 00 00 48 0864*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F62 6A 00 00 48 0865*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F6B 98 00 00 48 0866*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F74 C5 00 00 48 0867*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F7D F3 00 00 48 0868*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F86 20 01 00 48 0869*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047F8F 16 00 00 45 0870*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047F98 55 00 00 45 0871*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047FA1 96 00 00 45 0872*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047FAA D6 00 00 45 0873*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047FB3 16 01 00 45 0874*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047FBC 24 00 00 3E 0875*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047FC5 8E 00 00 3E 0876*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047FCE F9 00 00 3E 0877*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047FD7 6B 00 00 1C 0878*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047FE0             0879*  
047FE0             0880*  ; render_obj_id:56
047FE0             0881*  sprite_obj_018:
047FE0 08 00 00 56 0882*  	dl 0x000008,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047FE9 2B 00 00 56 0883*  	dl 0x00002B,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047FF2 4F 00 00 56 0884*  	dl 0x00004F,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047FFB 72 00 00 56 0885*  	dl 0x000072,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048004 96 00 00 56 0886*  	dl 0x000096,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04800D B9 00 00 56 0887*  	dl 0x0000B9,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048016 DD 00 00 56 0888*  	dl 0x0000DD,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04801F 00 01 00 56 0889*  	dl 0x000100,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048028 24 01 00 56 0890*  	dl 0x000124,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048031 0B 00 00 59 0891*  	dl 0x00000B,0x000059,BUF_56_020
       00 00 6E 02 
       00          
04803A 39 00 00 59 0892*  	dl 0x000039,0x000059,BUF_56_020
       00 00 6E 02 
       00          
048043 66 00 00 59 0893*  	dl 0x000066,0x000059,BUF_56_020
       00 00 6E 02 
       00          
04804C 94 00 00 59 0894*  	dl 0x000094,0x000059,BUF_56_020
       00 00 6E 02 
       00          
048055 C1 00 00 59 0895*  	dl 0x0000C1,0x000059,BUF_56_020
       00 00 6E 02 
       00          
04805E EF 00 00 59 0896*  	dl 0x0000EF,0x000059,BUF_56_020
       00 00 6E 02 
       00          
048067 1C 01 00 59 0897*  	dl 0x00011C,0x000059,BUF_56_020
       00 00 6E 02 
       00          
048070 0E 00 00 5D 0898*  	dl 0x00000E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
048079 4D 00 00 5D 0899*  	dl 0x00004D,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
048082 8E 00 00 5D 0900*  	dl 0x00008E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
04808B CE 00 00 5D 0901*  	dl 0x0000CE,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
048094 0E 01 00 5D 0902*  	dl 0x00010E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
04809D 17 00 00 66 0903*  	dl 0x000017,0x000066,BUF_56_040
       00 00 70 02 
       00          
0480A6 81 00 00 66 0904*  	dl 0x000081,0x000066,BUF_56_040
       00 00 70 02 
       00          
0480AF EC 00 00 66 0905*  	dl 0x0000EC,0x000066,BUF_56_040
       00 00 70 02 
       00          
0480B8 A0 00 00 93 0906*  	dl 0x0000A0,0x000093,BUF_56_044
       00 00 71 02 
       00          
0480C1             0907*  
0480C1             0908*  ; render_obj_id:60
0480C1             0909*  sprite_obj_019:
0480C1 03 00 00 41 0910*  	dl 0x000003,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480CA 26 00 00 41 0911*  	dl 0x000026,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480D3 4A 00 00 41 0912*  	dl 0x00004A,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480DC 6D 00 00 41 0913*  	dl 0x00006D,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480E5 91 00 00 41 0914*  	dl 0x000091,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480EE B4 00 00 41 0915*  	dl 0x0000B4,0x000041,BUF_60_004
       00 00 72 02 
       00          
0480F7 D8 00 00 41 0916*  	dl 0x0000D8,0x000041,BUF_60_004
       00 00 72 02 
       00          
048100 FB 00 00 41 0917*  	dl 0x0000FB,0x000041,BUF_60_004
       00 00 72 02 
       00          
048109 1F 01 00 41 0918*  	dl 0x00011F,0x000041,BUF_60_004
       00 00 72 02 
       00          
048112 03 00 00 3C 0919*  	dl 0x000003,0x00003C,BUF_60_020
       00 00 73 02 
       00          
04811B 31 00 00 3C 0920*  	dl 0x000031,0x00003C,BUF_60_020
       00 00 73 02 
       00          
048124 5E 00 00 3C 0921*  	dl 0x00005E,0x00003C,BUF_60_020
       00 00 73 02 
       00          
04812D 8C 00 00 3C 0922*  	dl 0x00008C,0x00003C,BUF_60_020
       00 00 73 02 
       00          
048136 B9 00 00 3C 0923*  	dl 0x0000B9,0x00003C,BUF_60_020
       00 00 73 02 
       00          
04813F E7 00 00 3C 0924*  	dl 0x0000E7,0x00003C,BUF_60_020
       00 00 73 02 
       00          
048148 14 01 00 3C 0925*  	dl 0x000114,0x00003C,BUF_60_020
       00 00 73 02 
       00          
048151 05 00 00 35 0926*  	dl 0x000005,0x000035,BUF_60_032
       00 00 74 02 
       00          
04815A 44 00 00 35 0927*  	dl 0x000044,0x000035,BUF_60_032
       00 00 74 02 
       00          
048163 85 00 00 35 0928*  	dl 0x000085,0x000035,BUF_60_032
       00 00 74 02 
       00          
04816C C5 00 00 35 0929*  	dl 0x0000C5,0x000035,BUF_60_032
       00 00 74 02 
       00          
048175 05 01 00 35 0930*  	dl 0x000105,0x000035,BUF_60_032
       00 00 74 02 
       00          
04817E 07 00 00 21 0931*  	dl 0x000007,0x000021,BUF_60_040
       00 00 75 02 
       00          
048187 71 00 00 21 0932*  	dl 0x000071,0x000021,BUF_60_040
       00 00 75 02 
       00          
048190 DC 00 00 21 0933*  	dl 0x0000DC,0x000021,BUF_60_040
       00 00 75 02 
       00          
048199 15 00 00 00 0934*  	dl 0x000015,0x000000,BUF_60_044
       00 00 76 02 
       00          
0481A2             0935*  
0481A2             0936*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
0481A2             0937*  
0481A2             0938*  map_type_status_lut:
0481A2             0939*  ; {map_type_status}, {sprite_obj} ; {obj_id} ({render_obj_id}) {tile_name} {render_type_idx} {render_type}
0481A2 50 FF       0940*  	db %01010000, 255 ; 10 (10) LIGHT GREY WALL 0 cube
0481A4 50 FF       0941*  	db %01010000, 255 ; 11 (11) JAIL CELL 0 cube
0481A6 50 FF       0942*  	db %01010000, 255 ; 12 (12) STONE ARCH BIRD 0 cube
0481A8 50 FF       0943*  	db %01010000, 255 ; 13 (13) DARK GREY WALL 0 cube
0481AA 50 FF       0944*  	db %01010000, 255 ; 14 (14) WOOD WALL 0 cube
0481AC 50 FF       0945*  	db %01010000, 255 ; 15 (15) HANGING FLAG 0 cube
0481AE 50 FF       0946*  	db %01010000, 255 ; 16 (16) WOOD EAGLE 0 cube
0481B0 50 FF       0947*  	db %01010000, 255 ; 17 (17) BLUE WALL 0 cube
0481B2 02 FF       0948*  	db %00000010, 255 ; 18 (None) PLACEHOLDER 2 null cell
0481B4 42 FF       0949*  	db %01000010, 255 ; 19 (19) NULL CELL 2 null cell
0481B6 43 00       0950*  	db %01000011, 0 ; 20 (20) LAMP 3 sprite
0481B8 43 01       0951*  	db %01000011, 1 ; 21 (21) BARREL 3 sprite
0481BA 43 02       0952*  	db %01000011, 2 ; 22 (22) TABLE 3 sprite
0481BC 03 03       0953*  	db %00000011, 3 ; 23 (23) OVERHEAD LIGHT 3 sprite
0481BE 43 04       0954*  	db %01000011, 4 ; 24 (24) RADIOACTIVE BARREL 3 sprite
0481C0 00 FF       0955*  	db %00000000, 255 ; 25 (25) BJ 25% 4 ui
0481C2 00 FF       0956*  	db %00000000, 255 ; 26 (26) BJ 50% 4 ui
0481C4 00 FF       0957*  	db %00000000, 255 ; 27 (27) BJ 75% 4 ui
0481C6 08 FF       0958*  	db %00001000, 255 ; 28 (28) BJ 100%/ START POSITION 4 ui
0481C8 01 FF       0959*  	db %00000001, 255 ; 29 (29) GREY FLOOR 1 floor
0481CA 34 FF       0960*  	db %00110100, 255 ; 30 (57) DOOR TO ROOM 0 0 cube
0481CC 34 FF       0961*  	db %00110100, 255 ; 31 (57) DOOR TO ROOM 1 0 cube
0481CE 34 FF       0962*  	db %00110100, 255 ; 32 (57) DOOR TO ROOM 2 0 cube
0481D0 34 FF       0963*  	db %00110100, 255 ; 33 (57) DOOR TO ROOM 3 0 cube
0481D2 34 FF       0964*  	db %00110100, 255 ; 34 (57) DOOR TO ROOM 4 0 cube
0481D4 34 FF       0965*  	db %00110100, 255 ; 35 (57) DOOR TO ROOM 5 0 cube
0481D6 34 FF       0966*  	db %00110100, 255 ; 36 (57) DOOR TO ROOM 6 0 cube
0481D8 34 FF       0967*  	db %00110100, 255 ; 37 (57) DOOR TO ROOM 7 0 cube
0481DA 34 FF       0968*  	db %00110100, 255 ; 38 (57) DOOR TO ROOM 8 0 cube
0481DC 34 FF       0969*  	db %00110100, 255 ; 39 (57) DOOR TO ROOM 9 0 cube
0481DE 03 05       0970*  	db %00000011, 5 ; 40 (40) HEALTH PACK 3 sprite
0481E0 03 06       0971*  	db %00000011, 6 ; 41 (41) GOLD CHALISE 3 sprite
0481E2 03 07       0972*  	db %00000011, 7 ; 42 (42) GOLD CROSS 3 sprite
0481E4 03 08       0973*  	db %00000011, 8 ; 43 (43) PLATE OF FOOD 3 sprite
0481E6 03 09       0974*  	db %00000011, 9 ; 44 (44) KEYCARD 3 sprite
0481E8 03 0A       0975*  	db %00000011, 10 ; 45 (45) GOLD CHEST 3 sprite
0481EA 03 0B       0976*  	db %00000011, 11 ; 46 (46) MACHINE GUN 3 sprite
0481EC 03 0C       0977*  	db %00000011, 12 ; 47 (47) GATLING GUN 3 sprite
0481EE 03 0D       0978*  	db %00000011, 13 ; 48 (48) DOG FOOD 3 sprite
0481F0 03 0E       0979*  	db %00000011, 14 ; 49 (49) GOLD KEY 3 sprite
0481F2 43 0F       0980*  	db %01000011, 15 ; 50 (50) DOG 3 sprite
0481F4 43 10       0981*  	db %01000011, 16 ; 51 (51) GERMAN TROOPER 3 sprite
0481F6 43 11       0982*  	db %01000011, 17 ; 52 (52) SS GUARD 3 sprite
0481F8 02 FF       0983*  	db %00000010, 255 ; 53 (None) PLACEHOLDER 2 null cell
0481FA 02 FF       0984*  	db %00000010, 255 ; 54 (None) PLACEHOLDER 2 null cell
0481FC 02 FF       0985*  	db %00000010, 255 ; 55 (None) PLACEHOLDER 2 null cell
0481FE 03 12       0986*  	db %00000011, 18 ; 56 (56) DEAD GUARD 3 sprite
048200 90 FF       0987*  	db %10010000, 255 ; 57 (57) REGULAR DOOR 0 cube
048202 70 FF       0988*  	db %01110000, 255 ; 58 (58) ELEVATOR SWITCH 0 cube
048204 90 FF       0989*  	db %10010000, 255 ; 59 (59) ELEVATOR DOOR 0 cube
048206 43 13       0990*  	db %01000011, 19 ; 60 (60) EXPLOSION 3 sprite
048208 02 FF       0991*  	db %00000010, 255 ; 61 (None) PLACEHOLDER 2 null cell
04820A 02 FF       0992*  	db %00000010, 255 ; 62 (None) PLACEHOLDER 2 null cell
04820C 02 FF       0993*  	db %00000010, 255 ; 63 (None) PLACEHOLDER 2 null cell
04820E 02 FF       0994*  	db %00000010, 255 ; 64 (None) PLACEHOLDER 2 null cell
048210 02 FF       0995*  	db %00000010, 255 ; 65 (None) PLACEHOLDER 2 null cell
048212 02 FF       0996*  	db %00000010, 255 ; 66 (None) PLACEHOLDER 2 null cell
048214 02 FF       0997*  	db %00000010, 255 ; 67 (None) PLACEHOLDER 2 null cell
048216 02 FF       0998*  	db %00000010, 255 ; 68 (None) PLACEHOLDER 2 null cell
048218 02 FF       0999*  	db %00000010, 255 ; 69 (None) PLACEHOLDER 2 null cell
04821A 02 FF       1000*  	db %00000010, 255 ; 70 (None) PLACEHOLDER 2 null cell
04821C 02 FF       1001*  	db %00000010, 255 ; 71 (None) PLACEHOLDER 2 null cell
04821E 02 FF       1002*  	db %00000010, 255 ; 72 (None) PLACEHOLDER 2 null cell
048220 02 FF       1003*  	db %00000010, 255 ; 73 (None) PLACEHOLDER 2 null cell
048222 02 FF       1004*  	db %00000010, 255 ; 74 (None) PLACEHOLDER 2 null cell
048224 02 FF       1005*  	db %00000010, 255 ; 75 (None) PLACEHOLDER 2 null cell
048226 02 FF       1006*  	db %00000010, 255 ; 76 (None) PLACEHOLDER 2 null cell
048228 02 FF       1007*  	db %00000010, 255 ; 77 (None) PLACEHOLDER 2 null cell
04822A 02 FF       1008*  	db %00000010, 255 ; 78 (None) PLACEHOLDER 2 null cell
04822C 02 FF       1009*  	db %00000010, 255 ; 79 (None) PLACEHOLDER 2 null cell
04822E 02 FF       1010*  	db %00000010, 255 ; 80 (None) PLACEHOLDER 2 null cell
048230 02 FF       1011*  	db %00000010, 255 ; 81 (None) PLACEHOLDER 2 null cell
048232 02 FF       1012*  	db %00000010, 255 ; 82 (None) PLACEHOLDER 2 null cell
048234 02 FF       1013*  	db %00000010, 255 ; 83 (None) PLACEHOLDER 2 null cell
048236 02 FF       1014*  	db %00000010, 255 ; 84 (None) PLACEHOLDER 2 null cell
048238 02 FF       1015*  	db %00000010, 255 ; 85 (None) PLACEHOLDER 2 null cell
04823A 02 FF       1016*  	db %00000010, 255 ; 86 (None) PLACEHOLDER 2 null cell
04823C 02 FF       1017*  	db %00000010, 255 ; 87 (None) PLACEHOLDER 2 null cell
04823E 02 FF       1018*  	db %00000010, 255 ; 88 (None) PLACEHOLDER 2 null cell
048240 02 FF       1019*  	db %00000010, 255 ; 89 (None) PLACEHOLDER 2 null cell
048242 02 FF       1020*  	db %00000010, 255 ; 90 (None) PLACEHOLDER 2 null cell
048244 02 FF       1021*  	db %00000010, 255 ; 91 (None) PLACEHOLDER 2 null cell
048246 02 FF       1022*  	db %00000010, 255 ; 92 (None) PLACEHOLDER 2 null cell
048248 02 FF       1023*  	db %00000010, 255 ; 93 (None) PLACEHOLDER 2 null cell
04824A 02 FF       1024*  	db %00000010, 255 ; 94 (None) PLACEHOLDER 2 null cell
04824C 02 FF       1025*  	db %00000010, 255 ; 95 (None) PLACEHOLDER 2 null cell
04824E 02 FF       1026*  	db %00000010, 255 ; 96 (None) PLACEHOLDER 2 null cell
048250 02 FF       1027*  	db %00000010, 255 ; 97 (None) PLACEHOLDER 2 null cell
048252 02 FF       1028*  	db %00000010, 255 ; 98 (None) PLACEHOLDER 2 null cell
048254 02 FF       1029*  	db %00000010, 255 ; 99 (None) PLACEHOLDER 2 null cell
048256             0018   	include "src/asm/font_itc_honda.asm"
048256             0001*  ; Bitmap indices:
048256             0002*  BUF_4384: equ 0x1120 ; 32
048256             0003*  ; Missing character 33 !
048256             0004*  ; Missing character 34 "
048256             0005*  ; Missing character 35 #
048256             0006*  ; Missing character 36 $
048256             0007*  ; Missing character 37 %
048256             0008*  ; Missing character 38 &
048256             0009*  ; Missing character 39 '
048256             0010*  ; Missing character 40 (
048256             0011*  ; Missing character 41 )
048256             0012*  ; Missing character 42 *
048256             0013*  ; Missing character 43 +
048256             0014*  ; Missing character 44 ,
048256             0015*  ; Missing character 45 -
048256             0016*  BUF_4398: equ 0x112E ; 46 .
048256             0017*  ; Missing character 47 /
048256             0018*  BUF_4400: equ 0x1130 ; 48 0
048256             0019*  BUF_4401: equ 0x1131 ; 49 1
048256             0020*  BUF_4402: equ 0x1132 ; 50 2
048256             0021*  BUF_4403: equ 0x1133 ; 51 3
048256             0022*  BUF_4404: equ 0x1134 ; 52 4
048256             0023*  BUF_4405: equ 0x1135 ; 53 5
048256             0024*  BUF_4406: equ 0x1136 ; 54 6
048256             0025*  BUF_4407: equ 0x1137 ; 55 7
048256             0026*  BUF_4408: equ 0x1138 ; 56 8
048256             0027*  BUF_4409: equ 0x1139 ; 57 9
048256             0028*  ; Missing character 58 :
048256             0029*  ; Missing character 59 ;
048256             0030*  ; Missing character 60 <
048256             0031*  ; Missing character 61 =
048256             0032*  ; Missing character 62 >
048256             0033*  ; Missing character 63 ?
048256             0034*  ; Missing character 64 @
048256             0035*  BUF_4417: equ 0x1141 ; 65 A
048256             0036*  BUF_4418: equ 0x1142 ; 66 B
048256             0037*  BUF_4419: equ 0x1143 ; 67 C
048256             0038*  BUF_4420: equ 0x1144 ; 68 D
048256             0039*  BUF_4421: equ 0x1145 ; 69 E
048256             0040*  BUF_4422: equ 0x1146 ; 70 F
048256             0041*  BUF_4423: equ 0x1147 ; 71 G
048256             0042*  BUF_4424: equ 0x1148 ; 72 H
048256             0043*  BUF_4425: equ 0x1149 ; 73 I
048256             0044*  BUF_4426: equ 0x114A ; 74 J
048256             0045*  BUF_4427: equ 0x114B ; 75 K
048256             0046*  BUF_4428: equ 0x114C ; 76 L
048256             0047*  BUF_4429: equ 0x114D ; 77 M
048256             0048*  BUF_4430: equ 0x114E ; 78 N
048256             0049*  BUF_4431: equ 0x114F ; 79 O
048256             0050*  BUF_4432: equ 0x1150 ; 80 P
048256             0051*  BUF_4433: equ 0x1151 ; 81 Q
048256             0052*  BUF_4434: equ 0x1152 ; 82 R
048256             0053*  BUF_4435: equ 0x1153 ; 83 S
048256             0054*  BUF_4436: equ 0x1154 ; 84 T
048256             0055*  BUF_4437: equ 0x1155 ; 85 U
048256             0056*  BUF_4438: equ 0x1156 ; 86 V
048256             0057*  BUF_4439: equ 0x1157 ; 87 W
048256             0058*  BUF_4440: equ 0x1158 ; 88 X
048256             0059*  BUF_4441: equ 0x1159 ; 89 Y
048256             0060*  BUF_4442: equ 0x115A ; 90 Z
048256             0061*  ; Missing character 91 [
048256             0062*  ; Missing character 92 \
048256             0063*  ; Missing character 93 ]
048256             0064*  ; Missing character 94 ^
048256             0065*  ; Missing character 95 _
048256             0066*  ; Missing character 96 `
048256             0067*  BUF_4449: equ 0x1161 ; 97 a
048256             0068*  BUF_4450: equ 0x1162 ; 98 b
048256             0069*  BUF_4451: equ 0x1163 ; 99 c
048256             0070*  BUF_4452: equ 0x1164 ; 100 d
048256             0071*  BUF_4453: equ 0x1165 ; 101 e
048256             0072*  BUF_4454: equ 0x1166 ; 102 f
048256             0073*  BUF_4455: equ 0x1167 ; 103 g
048256             0074*  BUF_4456: equ 0x1168 ; 104 h
048256             0075*  BUF_4457: equ 0x1169 ; 105 i
048256             0076*  BUF_4458: equ 0x116A ; 106 j
048256             0077*  BUF_4459: equ 0x116B ; 107 k
048256             0078*  BUF_4460: equ 0x116C ; 108 l
048256             0079*  BUF_4461: equ 0x116D ; 109 m
048256             0080*  BUF_4462: equ 0x116E ; 110 n
048256             0081*  BUF_4463: equ 0x116F ; 111 o
048256             0082*  BUF_4464: equ 0x1170 ; 112 p
048256             0083*  BUF_4465: equ 0x1171 ; 113 q
048256             0084*  BUF_4466: equ 0x1172 ; 114 r
048256             0085*  BUF_4467: equ 0x1173 ; 115 s
048256             0086*  BUF_4468: equ 0x1174 ; 116 t
048256             0087*  BUF_4469: equ 0x1175 ; 117 u
048256             0088*  BUF_4470: equ 0x1176 ; 118 v
048256             0089*  BUF_4471: equ 0x1177 ; 119 w
048256             0090*  BUF_4472: equ 0x1178 ; 120 x
048256             0091*  BUF_4473: equ 0x1179 ; 121 y
048256             0092*  BUF_4474: equ 0x117A ; 122 z
048256             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048256             0094*  font_itc_honda:
048256 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
04825C 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
048262 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
048268 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
04826E 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
048274 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
04827A 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
048280 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
048286 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
04828C 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
048292 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
048298 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
04829E 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
0482A4 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
0482AA 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
0482B0 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
0482B6 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
0482BC 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
0482C2 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
0482C8 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
0482CE 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
0482D4 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
0482DA 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
0482E0 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
0482E6 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
0482EC 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
0482F2 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
0482F8 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
0482FE 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
048304 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
04830A 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
048310 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
048316 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
04831C 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
048322 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
048328 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
04832E 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
048334 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
04833A 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
048340 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
048346 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
04834C 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
048352 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
048358 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
04835E 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
048364 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
04836A 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
048370 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
048376 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
04837C 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
048382 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
048388 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
04838E 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
048394 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
04839A 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
0483A0 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
0483A6 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
0483AC 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
0483B2 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
0483B8 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
0483BE 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
0483C4 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
0483CA 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
0483D0 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
0483D6 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
0483DC 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
0483E2 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
0483E8 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
0483EE 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
0483F4 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
0483FA 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
048400 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
048406 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
04840C 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
048412 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
048418 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
04841E 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
048424 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
04842A 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
048430 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
048436 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
04843C 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
048442 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
048448 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
04844E 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
048454 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
04845A 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
048460 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
048466 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
04846C 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
048472 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
048478             0186*  
048478             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048478             0188*  load_font_itc_honda:
048478             0189*  
048478 21 B9 8D 04 0190*  	ld hl,Fhonda032
04847C 11 8D CA 04 0191*  	ld de,filedata
048480 01 00 00 01 0192*  	ld bc,65536
048484 3E 01       0193*  	ld a,mos_load
048486 5B CF       0194*  	RST.LIL 08h
048488 21 20 11 00 0195*  	ld hl,BUF_4384
04848C 01 06 00 00 0196*  	ld bc,6
048490 11 01 00 00 0197*  	ld de,1
048494 DD 21 06 00 0198*  	ld ix,6
       00          
048499 CD D8 BF 04 0199*  	call vdu_load_img
04849D             0200*  ; Missing character 33
04849D             0201*  ; Missing character 34
04849D             0202*  ; Missing character 35
04849D             0203*  ; Missing character 36
04849D             0204*  ; Missing character 37
04849D             0205*  ; Missing character 38
04849D             0206*  ; Missing character 39
04849D             0207*  ; Missing character 40
04849D             0208*  ; Missing character 41
04849D             0209*  ; Missing character 42
04849D             0210*  ; Missing character 43
04849D             0211*  ; Missing character 44
04849D             0212*  ; Missing character 45
04849D             0213*  
04849D 21 CF 8D 04 0214*  	ld hl,Fhonda046
0484A1 11 8D CA 04 0215*  	ld de,filedata
0484A5 01 00 00 01 0216*  	ld bc,65536
0484A9 3E 01       0217*  	ld a,mos_load
0484AB 5B CF       0218*  	RST.LIL 08h
0484AD 21 2E 11 00 0219*  	ld hl,BUF_4398
0484B1 01 05 00 00 0220*  	ld bc,5
0484B5 11 05 00 00 0221*  	ld de,5
0484B9 DD 21 19 00 0222*  	ld ix,25
       00          
0484BE CD D8 BF 04 0223*  	call vdu_load_img
0484C2             0224*  ; Missing character 47
0484C2             0225*  
0484C2 21 E5 8D 04 0226*  	ld hl,Fhonda048
0484C6 11 8D CA 04 0227*  	ld de,filedata
0484CA 01 00 00 01 0228*  	ld bc,65536
0484CE 3E 01       0229*  	ld a,mos_load
0484D0 5B CF       0230*  	RST.LIL 08h
0484D2 21 30 11 00 0231*  	ld hl,BUF_4400
0484D6 01 0A 00 00 0232*  	ld bc,10
0484DA 11 12 00 00 0233*  	ld de,18
0484DE DD 21 B4 00 0234*  	ld ix,180
       00          
0484E3 CD D8 BF 04 0235*  	call vdu_load_img
0484E7             0236*  
0484E7 21 FB 8D 04 0237*  	ld hl,Fhonda049
0484EB 11 8D CA 04 0238*  	ld de,filedata
0484EF 01 00 00 01 0239*  	ld bc,65536
0484F3 3E 01       0240*  	ld a,mos_load
0484F5 5B CF       0241*  	RST.LIL 08h
0484F7 21 31 11 00 0242*  	ld hl,BUF_4401
0484FB 01 04 00 00 0243*  	ld bc,4
0484FF 11 12 00 00 0244*  	ld de,18
048503 DD 21 48 00 0245*  	ld ix,72
       00          
048508 CD D8 BF 04 0246*  	call vdu_load_img
04850C             0247*  
04850C 21 11 8E 04 0248*  	ld hl,Fhonda050
048510 11 8D CA 04 0249*  	ld de,filedata
048514 01 00 00 01 0250*  	ld bc,65536
048518 3E 01       0251*  	ld a,mos_load
04851A 5B CF       0252*  	RST.LIL 08h
04851C 21 32 11 00 0253*  	ld hl,BUF_4402
048520 01 09 00 00 0254*  	ld bc,9
048524 11 12 00 00 0255*  	ld de,18
048528 DD 21 A2 00 0256*  	ld ix,162
       00          
04852D CD D8 BF 04 0257*  	call vdu_load_img
048531             0258*  
048531 21 27 8E 04 0259*  	ld hl,Fhonda051
048535 11 8D CA 04 0260*  	ld de,filedata
048539 01 00 00 01 0261*  	ld bc,65536
04853D 3E 01       0262*  	ld a,mos_load
04853F 5B CF       0263*  	RST.LIL 08h
048541 21 33 11 00 0264*  	ld hl,BUF_4403
048545 01 0A 00 00 0265*  	ld bc,10
048549 11 12 00 00 0266*  	ld de,18
04854D DD 21 B4 00 0267*  	ld ix,180
       00          
048552 CD D8 BF 04 0268*  	call vdu_load_img
048556             0269*  
048556 21 3D 8E 04 0270*  	ld hl,Fhonda052
04855A 11 8D CA 04 0271*  	ld de,filedata
04855E 01 00 00 01 0272*  	ld bc,65536
048562 3E 01       0273*  	ld a,mos_load
048564 5B CF       0274*  	RST.LIL 08h
048566 21 34 11 00 0275*  	ld hl,BUF_4404
04856A 01 0C 00 00 0276*  	ld bc,12
04856E 11 12 00 00 0277*  	ld de,18
048572 DD 21 D8 00 0278*  	ld ix,216
       00          
048577 CD D8 BF 04 0279*  	call vdu_load_img
04857B             0280*  
04857B 21 53 8E 04 0281*  	ld hl,Fhonda053
04857F 11 8D CA 04 0282*  	ld de,filedata
048583 01 00 00 01 0283*  	ld bc,65536
048587 3E 01       0284*  	ld a,mos_load
048589 5B CF       0285*  	RST.LIL 08h
04858B 21 35 11 00 0286*  	ld hl,BUF_4405
04858F 01 0A 00 00 0287*  	ld bc,10
048593 11 12 00 00 0288*  	ld de,18
048597 DD 21 B4 00 0289*  	ld ix,180
       00          
04859C CD D8 BF 04 0290*  	call vdu_load_img
0485A0             0291*  
0485A0 21 69 8E 04 0292*  	ld hl,Fhonda054
0485A4 11 8D CA 04 0293*  	ld de,filedata
0485A8 01 00 00 01 0294*  	ld bc,65536
0485AC 3E 01       0295*  	ld a,mos_load
0485AE 5B CF       0296*  	RST.LIL 08h
0485B0 21 36 11 00 0297*  	ld hl,BUF_4406
0485B4 01 0A 00 00 0298*  	ld bc,10
0485B8 11 12 00 00 0299*  	ld de,18
0485BC DD 21 B4 00 0300*  	ld ix,180
       00          
0485C1 CD D8 BF 04 0301*  	call vdu_load_img
0485C5             0302*  
0485C5 21 7F 8E 04 0303*  	ld hl,Fhonda055
0485C9 11 8D CA 04 0304*  	ld de,filedata
0485CD 01 00 00 01 0305*  	ld bc,65536
0485D1 3E 01       0306*  	ld a,mos_load
0485D3 5B CF       0307*  	RST.LIL 08h
0485D5 21 37 11 00 0308*  	ld hl,BUF_4407
0485D9 01 08 00 00 0309*  	ld bc,8
0485DD 11 12 00 00 0310*  	ld de,18
0485E1 DD 21 90 00 0311*  	ld ix,144
       00          
0485E6 CD D8 BF 04 0312*  	call vdu_load_img
0485EA             0313*  
0485EA 21 95 8E 04 0314*  	ld hl,Fhonda056
0485EE 11 8D CA 04 0315*  	ld de,filedata
0485F2 01 00 00 01 0316*  	ld bc,65536
0485F6 3E 01       0317*  	ld a,mos_load
0485F8 5B CF       0318*  	RST.LIL 08h
0485FA 21 38 11 00 0319*  	ld hl,BUF_4408
0485FE 01 0A 00 00 0320*  	ld bc,10
048602 11 12 00 00 0321*  	ld de,18
048606 DD 21 B4 00 0322*  	ld ix,180
       00          
04860B CD D8 BF 04 0323*  	call vdu_load_img
04860F             0324*  
04860F 21 AB 8E 04 0325*  	ld hl,Fhonda057
048613 11 8D CA 04 0326*  	ld de,filedata
048617 01 00 00 01 0327*  	ld bc,65536
04861B 3E 01       0328*  	ld a,mos_load
04861D 5B CF       0329*  	RST.LIL 08h
04861F 21 39 11 00 0330*  	ld hl,BUF_4409
048623 01 0A 00 00 0331*  	ld bc,10
048627 11 12 00 00 0332*  	ld de,18
04862B DD 21 B4 00 0333*  	ld ix,180
       00          
048630 CD D8 BF 04 0334*  	call vdu_load_img
048634             0335*  ; Missing character 58
048634             0336*  ; Missing character 59
048634             0337*  ; Missing character 60
048634             0338*  ; Missing character 61
048634             0339*  ; Missing character 62
048634             0340*  ; Missing character 63
048634             0341*  ; Missing character 64
048634             0342*  
048634 21 C1 8E 04 0343*  	ld hl,Fhonda065
048638 11 8D CA 04 0344*  	ld de,filedata
04863C 01 00 00 01 0345*  	ld bc,65536
048640 3E 01       0346*  	ld a,mos_load
048642 5B CF       0347*  	RST.LIL 08h
048644 21 41 11 00 0348*  	ld hl,BUF_4417
048648 01 0A 00 00 0349*  	ld bc,10
04864C 11 12 00 00 0350*  	ld de,18
048650 DD 21 B4 00 0351*  	ld ix,180
       00          
048655 CD D8 BF 04 0352*  	call vdu_load_img
048659             0353*  
048659 21 D7 8E 04 0354*  	ld hl,Fhonda066
04865D 11 8D CA 04 0355*  	ld de,filedata
048661 01 00 00 01 0356*  	ld bc,65536
048665 3E 01       0357*  	ld a,mos_load
048667 5B CF       0358*  	RST.LIL 08h
048669 21 42 11 00 0359*  	ld hl,BUF_4418
04866D 01 0A 00 00 0360*  	ld bc,10
048671 11 12 00 00 0361*  	ld de,18
048675 DD 21 B4 00 0362*  	ld ix,180
       00          
04867A CD D8 BF 04 0363*  	call vdu_load_img
04867E             0364*  
04867E 21 ED 8E 04 0365*  	ld hl,Fhonda067
048682 11 8D CA 04 0366*  	ld de,filedata
048686 01 00 00 01 0367*  	ld bc,65536
04868A 3E 01       0368*  	ld a,mos_load
04868C 5B CF       0369*  	RST.LIL 08h
04868E 21 43 11 00 0370*  	ld hl,BUF_4419
048692 01 08 00 00 0371*  	ld bc,8
048696 11 13 00 00 0372*  	ld de,19
04869A DD 21 98 00 0373*  	ld ix,152
       00          
04869F CD D8 BF 04 0374*  	call vdu_load_img
0486A3             0375*  
0486A3 21 03 8F 04 0376*  	ld hl,Fhonda068
0486A7 11 8D CA 04 0377*  	ld de,filedata
0486AB 01 00 00 01 0378*  	ld bc,65536
0486AF 3E 01       0379*  	ld a,mos_load
0486B1 5B CF       0380*  	RST.LIL 08h
0486B3 21 44 11 00 0381*  	ld hl,BUF_4420
0486B7 01 0A 00 00 0382*  	ld bc,10
0486BB 11 12 00 00 0383*  	ld de,18
0486BF DD 21 B4 00 0384*  	ld ix,180
       00          
0486C4 CD D8 BF 04 0385*  	call vdu_load_img
0486C8             0386*  
0486C8 21 19 8F 04 0387*  	ld hl,Fhonda069
0486CC 11 8D CA 04 0388*  	ld de,filedata
0486D0 01 00 00 01 0389*  	ld bc,65536
0486D4 3E 01       0390*  	ld a,mos_load
0486D6 5B CF       0391*  	RST.LIL 08h
0486D8 21 45 11 00 0392*  	ld hl,BUF_4421
0486DC 01 08 00 00 0393*  	ld bc,8
0486E0 11 12 00 00 0394*  	ld de,18
0486E4 DD 21 90 00 0395*  	ld ix,144
       00          
0486E9 CD D8 BF 04 0396*  	call vdu_load_img
0486ED             0397*  
0486ED 21 2F 8F 04 0398*  	ld hl,Fhonda070
0486F1 11 8D CA 04 0399*  	ld de,filedata
0486F5 01 00 00 01 0400*  	ld bc,65536
0486F9 3E 01       0401*  	ld a,mos_load
0486FB 5B CF       0402*  	RST.LIL 08h
0486FD 21 46 11 00 0403*  	ld hl,BUF_4422
048701 01 08 00 00 0404*  	ld bc,8
048705 11 12 00 00 0405*  	ld de,18
048709 DD 21 90 00 0406*  	ld ix,144
       00          
04870E CD D8 BF 04 0407*  	call vdu_load_img
048712             0408*  
048712 21 45 8F 04 0409*  	ld hl,Fhonda071
048716 11 8D CA 04 0410*  	ld de,filedata
04871A 01 00 00 01 0411*  	ld bc,65536
04871E 3E 01       0412*  	ld a,mos_load
048720 5B CF       0413*  	RST.LIL 08h
048722 21 47 11 00 0414*  	ld hl,BUF_4423
048726 01 0A 00 00 0415*  	ld bc,10
04872A 11 12 00 00 0416*  	ld de,18
04872E DD 21 B4 00 0417*  	ld ix,180
       00          
048733 CD D8 BF 04 0418*  	call vdu_load_img
048737             0419*  
048737 21 5B 8F 04 0420*  	ld hl,Fhonda072
04873B 11 8D CA 04 0421*  	ld de,filedata
04873F 01 00 00 01 0422*  	ld bc,65536
048743 3E 01       0423*  	ld a,mos_load
048745 5B CF       0424*  	RST.LIL 08h
048747 21 48 11 00 0425*  	ld hl,BUF_4424
04874B 01 0A 00 00 0426*  	ld bc,10
04874F 11 12 00 00 0427*  	ld de,18
048753 DD 21 B4 00 0428*  	ld ix,180
       00          
048758 CD D8 BF 04 0429*  	call vdu_load_img
04875C             0430*  
04875C 21 71 8F 04 0431*  	ld hl,Fhonda073
048760 11 8D CA 04 0432*  	ld de,filedata
048764 01 00 00 01 0433*  	ld bc,65536
048768 3E 01       0434*  	ld a,mos_load
04876A 5B CF       0435*  	RST.LIL 08h
04876C 21 49 11 00 0436*  	ld hl,BUF_4425
048770 01 03 00 00 0437*  	ld bc,3
048774 11 12 00 00 0438*  	ld de,18
048778 DD 21 36 00 0439*  	ld ix,54
       00          
04877D CD D8 BF 04 0440*  	call vdu_load_img
048781             0441*  
048781 21 87 8F 04 0442*  	ld hl,Fhonda074
048785 11 8D CA 04 0443*  	ld de,filedata
048789 01 00 00 01 0444*  	ld bc,65536
04878D 3E 01       0445*  	ld a,mos_load
04878F 5B CF       0446*  	RST.LIL 08h
048791 21 4A 11 00 0447*  	ld hl,BUF_4426
048795 01 06 00 00 0448*  	ld bc,6
048799 11 12 00 00 0449*  	ld de,18
04879D DD 21 6C 00 0450*  	ld ix,108
       00          
0487A2 CD D8 BF 04 0451*  	call vdu_load_img
0487A6             0452*  
0487A6 21 9D 8F 04 0453*  	ld hl,Fhonda075
0487AA 11 8D CA 04 0454*  	ld de,filedata
0487AE 01 00 00 01 0455*  	ld bc,65536
0487B2 3E 01       0456*  	ld a,mos_load
0487B4 5B CF       0457*  	RST.LIL 08h
0487B6 21 4B 11 00 0458*  	ld hl,BUF_4427
0487BA 01 0A 00 00 0459*  	ld bc,10
0487BE 11 12 00 00 0460*  	ld de,18
0487C2 DD 21 B4 00 0461*  	ld ix,180
       00          
0487C7 CD D8 BF 04 0462*  	call vdu_load_img
0487CB             0463*  
0487CB 21 B3 8F 04 0464*  	ld hl,Fhonda076
0487CF 11 8D CA 04 0465*  	ld de,filedata
0487D3 01 00 00 01 0466*  	ld bc,65536
0487D7 3E 01       0467*  	ld a,mos_load
0487D9 5B CF       0468*  	RST.LIL 08h
0487DB 21 4C 11 00 0469*  	ld hl,BUF_4428
0487DF 01 08 00 00 0470*  	ld bc,8
0487E3 11 12 00 00 0471*  	ld de,18
0487E7 DD 21 90 00 0472*  	ld ix,144
       00          
0487EC CD D8 BF 04 0473*  	call vdu_load_img
0487F0             0474*  
0487F0 21 C9 8F 04 0475*  	ld hl,Fhonda077
0487F4 11 8D CA 04 0476*  	ld de,filedata
0487F8 01 00 00 01 0477*  	ld bc,65536
0487FC 3E 01       0478*  	ld a,mos_load
0487FE 5B CF       0479*  	RST.LIL 08h
048800 21 4D 11 00 0480*  	ld hl,BUF_4429
048804 01 0E 00 00 0481*  	ld bc,14
048808 11 12 00 00 0482*  	ld de,18
04880C DD 21 FC 00 0483*  	ld ix,252
       00          
048811 CD D8 BF 04 0484*  	call vdu_load_img
048815             0485*  
048815 21 DF 8F 04 0486*  	ld hl,Fhonda078
048819 11 8D CA 04 0487*  	ld de,filedata
04881D 01 00 00 01 0488*  	ld bc,65536
048821 3E 01       0489*  	ld a,mos_load
048823 5B CF       0490*  	RST.LIL 08h
048825 21 4E 11 00 0491*  	ld hl,BUF_4430
048829 01 0A 00 00 0492*  	ld bc,10
04882D 11 12 00 00 0493*  	ld de,18
048831 DD 21 B4 00 0494*  	ld ix,180
       00          
048836 CD D8 BF 04 0495*  	call vdu_load_img
04883A             0496*  
04883A 21 F5 8F 04 0497*  	ld hl,Fhonda079
04883E 11 8D CA 04 0498*  	ld de,filedata
048842 01 00 00 01 0499*  	ld bc,65536
048846 3E 01       0500*  	ld a,mos_load
048848 5B CF       0501*  	RST.LIL 08h
04884A 21 4F 11 00 0502*  	ld hl,BUF_4431
04884E 01 0A 00 00 0503*  	ld bc,10
048852 11 12 00 00 0504*  	ld de,18
048856 DD 21 B4 00 0505*  	ld ix,180
       00          
04885B CD D8 BF 04 0506*  	call vdu_load_img
04885F             0507*  
04885F 21 0B 90 04 0508*  	ld hl,Fhonda080
048863 11 8D CA 04 0509*  	ld de,filedata
048867 01 00 00 01 0510*  	ld bc,65536
04886B 3E 01       0511*  	ld a,mos_load
04886D 5B CF       0512*  	RST.LIL 08h
04886F 21 50 11 00 0513*  	ld hl,BUF_4432
048873 01 0A 00 00 0514*  	ld bc,10
048877 11 12 00 00 0515*  	ld de,18
04887B DD 21 B4 00 0516*  	ld ix,180
       00          
048880 CD D8 BF 04 0517*  	call vdu_load_img
048884             0518*  
048884 21 21 90 04 0519*  	ld hl,Fhonda081
048888 11 8D CA 04 0520*  	ld de,filedata
04888C 01 00 00 01 0521*  	ld bc,65536
048890 3E 01       0522*  	ld a,mos_load
048892 5B CF       0523*  	RST.LIL 08h
048894 21 51 11 00 0524*  	ld hl,BUF_4433
048898 01 0A 00 00 0525*  	ld bc,10
04889C 11 15 00 00 0526*  	ld de,21
0488A0 DD 21 D2 00 0527*  	ld ix,210
       00          
0488A5 CD D8 BF 04 0528*  	call vdu_load_img
0488A9             0529*  
0488A9 21 37 90 04 0530*  	ld hl,Fhonda082
0488AD 11 8D CA 04 0531*  	ld de,filedata
0488B1 01 00 00 01 0532*  	ld bc,65536
0488B5 3E 01       0533*  	ld a,mos_load
0488B7 5B CF       0534*  	RST.LIL 08h
0488B9 21 52 11 00 0535*  	ld hl,BUF_4434
0488BD 01 0A 00 00 0536*  	ld bc,10
0488C1 11 12 00 00 0537*  	ld de,18
0488C5 DD 21 B4 00 0538*  	ld ix,180
       00          
0488CA CD D8 BF 04 0539*  	call vdu_load_img
0488CE             0540*  
0488CE 21 4D 90 04 0541*  	ld hl,Fhonda083
0488D2 11 8D CA 04 0542*  	ld de,filedata
0488D6 01 00 00 01 0543*  	ld bc,65536
0488DA 3E 01       0544*  	ld a,mos_load
0488DC 5B CF       0545*  	RST.LIL 08h
0488DE 21 53 11 00 0546*  	ld hl,BUF_4435
0488E2 01 09 00 00 0547*  	ld bc,9
0488E6 11 13 00 00 0548*  	ld de,19
0488EA DD 21 AB 00 0549*  	ld ix,171
       00          
0488EF CD D8 BF 04 0550*  	call vdu_load_img
0488F3             0551*  
0488F3 21 63 90 04 0552*  	ld hl,Fhonda084
0488F7 11 8D CA 04 0553*  	ld de,filedata
0488FB 01 00 00 01 0554*  	ld bc,65536
0488FF 3E 01       0555*  	ld a,mos_load
048901 5B CF       0556*  	RST.LIL 08h
048903 21 54 11 00 0557*  	ld hl,BUF_4436
048907 01 0A 00 00 0558*  	ld bc,10
04890B 11 12 00 00 0559*  	ld de,18
04890F DD 21 B4 00 0560*  	ld ix,180
       00          
048914 CD D8 BF 04 0561*  	call vdu_load_img
048918             0562*  
048918 21 79 90 04 0563*  	ld hl,Fhonda085
04891C 11 8D CA 04 0564*  	ld de,filedata
048920 01 00 00 01 0565*  	ld bc,65536
048924 3E 01       0566*  	ld a,mos_load
048926 5B CF       0567*  	RST.LIL 08h
048928 21 55 11 00 0568*  	ld hl,BUF_4437
04892C 01 0A 00 00 0569*  	ld bc,10
048930 11 12 00 00 0570*  	ld de,18
048934 DD 21 B4 00 0571*  	ld ix,180
       00          
048939 CD D8 BF 04 0572*  	call vdu_load_img
04893D             0573*  
04893D 21 8F 90 04 0574*  	ld hl,Fhonda086
048941 11 8D CA 04 0575*  	ld de,filedata
048945 01 00 00 01 0576*  	ld bc,65536
048949 3E 01       0577*  	ld a,mos_load
04894B 5B CF       0578*  	RST.LIL 08h
04894D 21 56 11 00 0579*  	ld hl,BUF_4438
048951 01 0A 00 00 0580*  	ld bc,10
048955 11 12 00 00 0581*  	ld de,18
048959 DD 21 B4 00 0582*  	ld ix,180
       00          
04895E CD D8 BF 04 0583*  	call vdu_load_img
048962             0584*  
048962 21 A5 90 04 0585*  	ld hl,Fhonda087
048966 11 8D CA 04 0586*  	ld de,filedata
04896A 01 00 00 01 0587*  	ld bc,65536
04896E 3E 01       0588*  	ld a,mos_load
048970 5B CF       0589*  	RST.LIL 08h
048972 21 57 11 00 0590*  	ld hl,BUF_4439
048976 01 10 00 00 0591*  	ld bc,16
04897A 11 12 00 00 0592*  	ld de,18
04897E DD 21 20 01 0593*  	ld ix,288
       00          
048983 CD D8 BF 04 0594*  	call vdu_load_img
048987             0595*  
048987 21 BB 90 04 0596*  	ld hl,Fhonda088
04898B 11 8D CA 04 0597*  	ld de,filedata
04898F 01 00 00 01 0598*  	ld bc,65536
048993 3E 01       0599*  	ld a,mos_load
048995 5B CF       0600*  	RST.LIL 08h
048997 21 58 11 00 0601*  	ld hl,BUF_4440
04899B 01 0A 00 00 0602*  	ld bc,10
04899F 11 12 00 00 0603*  	ld de,18
0489A3 DD 21 B4 00 0604*  	ld ix,180
       00          
0489A8 CD D8 BF 04 0605*  	call vdu_load_img
0489AC             0606*  
0489AC 21 D1 90 04 0607*  	ld hl,Fhonda089
0489B0 11 8D CA 04 0608*  	ld de,filedata
0489B4 01 00 00 01 0609*  	ld bc,65536
0489B8 3E 01       0610*  	ld a,mos_load
0489BA 5B CF       0611*  	RST.LIL 08h
0489BC 21 59 11 00 0612*  	ld hl,BUF_4441
0489C0 01 0A 00 00 0613*  	ld bc,10
0489C4 11 12 00 00 0614*  	ld de,18
0489C8 DD 21 B4 00 0615*  	ld ix,180
       00          
0489CD CD D8 BF 04 0616*  	call vdu_load_img
0489D1             0617*  
0489D1 21 E7 90 04 0618*  	ld hl,Fhonda090
0489D5 11 8D CA 04 0619*  	ld de,filedata
0489D9 01 00 00 01 0620*  	ld bc,65536
0489DD 3E 01       0621*  	ld a,mos_load
0489DF 5B CF       0622*  	RST.LIL 08h
0489E1 21 5A 11 00 0623*  	ld hl,BUF_4442
0489E5 01 09 00 00 0624*  	ld bc,9
0489E9 11 12 00 00 0625*  	ld de,18
0489ED DD 21 A2 00 0626*  	ld ix,162
       00          
0489F2 CD D8 BF 04 0627*  	call vdu_load_img
0489F6             0628*  ; Missing character 91
0489F6             0629*  ; Missing character 92
0489F6             0630*  ; Missing character 93
0489F6             0631*  ; Missing character 94
0489F6             0632*  ; Missing character 95
0489F6             0633*  ; Missing character 96
0489F6             0634*  
0489F6 21 FD 90 04 0635*  	ld hl,Fhonda097
0489FA 11 8D CA 04 0636*  	ld de,filedata
0489FE 01 00 00 01 0637*  	ld bc,65536
048A02 3E 01       0638*  	ld a,mos_load
048A04 5B CF       0639*  	RST.LIL 08h
048A06 21 61 11 00 0640*  	ld hl,BUF_4449
048A0A 01 08 00 00 0641*  	ld bc,8
048A0E 11 0C 00 00 0642*  	ld de,12
048A12 DD 21 60 00 0643*  	ld ix,96
       00          
048A17 CD D8 BF 04 0644*  	call vdu_load_img
048A1B             0645*  
048A1B 21 13 91 04 0646*  	ld hl,Fhonda098
048A1F 11 8D CA 04 0647*  	ld de,filedata
048A23 01 00 00 01 0648*  	ld bc,65536
048A27 3E 01       0649*  	ld a,mos_load
048A29 5B CF       0650*  	RST.LIL 08h
048A2B 21 62 11 00 0651*  	ld hl,BUF_4450
048A2F 01 09 00 00 0652*  	ld bc,9
048A33 11 12 00 00 0653*  	ld de,18
048A37 DD 21 A2 00 0654*  	ld ix,162
       00          
048A3C CD D8 BF 04 0655*  	call vdu_load_img
048A40             0656*  
048A40 21 29 91 04 0657*  	ld hl,Fhonda099
048A44 11 8D CA 04 0658*  	ld de,filedata
048A48 01 00 00 01 0659*  	ld bc,65536
048A4C 3E 01       0660*  	ld a,mos_load
048A4E 5B CF       0661*  	RST.LIL 08h
048A50 21 63 11 00 0662*  	ld hl,BUF_4451
048A54 01 07 00 00 0663*  	ld bc,7
048A58 11 0C 00 00 0664*  	ld de,12
048A5C DD 21 54 00 0665*  	ld ix,84
       00          
048A61 CD D8 BF 04 0666*  	call vdu_load_img
048A65             0667*  
048A65 21 3F 91 04 0668*  	ld hl,Fhonda100
048A69 11 8D CA 04 0669*  	ld de,filedata
048A6D 01 00 00 01 0670*  	ld bc,65536
048A71 3E 01       0671*  	ld a,mos_load
048A73 5B CF       0672*  	RST.LIL 08h
048A75 21 64 11 00 0673*  	ld hl,BUF_4452
048A79 01 09 00 00 0674*  	ld bc,9
048A7D 11 12 00 00 0675*  	ld de,18
048A81 DD 21 A2 00 0676*  	ld ix,162
       00          
048A86 CD D8 BF 04 0677*  	call vdu_load_img
048A8A             0678*  
048A8A 21 55 91 04 0679*  	ld hl,Fhonda101
048A8E 11 8D CA 04 0680*  	ld de,filedata
048A92 01 00 00 01 0681*  	ld bc,65536
048A96 3E 01       0682*  	ld a,mos_load
048A98 5B CF       0683*  	RST.LIL 08h
048A9A 21 65 11 00 0684*  	ld hl,BUF_4453
048A9E 01 08 00 00 0685*  	ld bc,8
048AA2 11 0C 00 00 0686*  	ld de,12
048AA6 DD 21 60 00 0687*  	ld ix,96
       00          
048AAB CD D8 BF 04 0688*  	call vdu_load_img
048AAF             0689*  
048AAF 21 6B 91 04 0690*  	ld hl,Fhonda102
048AB3 11 8D CA 04 0691*  	ld de,filedata
048AB7 01 00 00 01 0692*  	ld bc,65536
048ABB 3E 01       0693*  	ld a,mos_load
048ABD 5B CF       0694*  	RST.LIL 08h
048ABF 21 66 11 00 0695*  	ld hl,BUF_4454
048AC3 01 09 00 00 0696*  	ld bc,9
048AC7 11 12 00 00 0697*  	ld de,18
048ACB DD 21 A2 00 0698*  	ld ix,162
       00          
048AD0 CD D8 BF 04 0699*  	call vdu_load_img
048AD4             0700*  
048AD4 21 81 91 04 0701*  	ld hl,Fhonda103
048AD8 11 8D CA 04 0702*  	ld de,filedata
048ADC 01 00 00 01 0703*  	ld bc,65536
048AE0 3E 01       0704*  	ld a,mos_load
048AE2 5B CF       0705*  	RST.LIL 08h
048AE4 21 67 11 00 0706*  	ld hl,BUF_4455
048AE8 01 09 00 00 0707*  	ld bc,9
048AEC 11 12 00 00 0708*  	ld de,18
048AF0 DD 21 A2 00 0709*  	ld ix,162
       00          
048AF5 CD D8 BF 04 0710*  	call vdu_load_img
048AF9             0711*  
048AF9 21 97 91 04 0712*  	ld hl,Fhonda104
048AFD 11 8D CA 04 0713*  	ld de,filedata
048B01 01 00 00 01 0714*  	ld bc,65536
048B05 3E 01       0715*  	ld a,mos_load
048B07 5B CF       0716*  	RST.LIL 08h
048B09 21 68 11 00 0717*  	ld hl,BUF_4456
048B0D 01 09 00 00 0718*  	ld bc,9
048B11 11 12 00 00 0719*  	ld de,18
048B15 DD 21 A2 00 0720*  	ld ix,162
       00          
048B1A CD D8 BF 04 0721*  	call vdu_load_img
048B1E             0722*  
048B1E 21 AD 91 04 0723*  	ld hl,Fhonda105
048B22 11 8D CA 04 0724*  	ld de,filedata
048B26 01 00 00 01 0725*  	ld bc,65536
048B2A 3E 01       0726*  	ld a,mos_load
048B2C 5B CF       0727*  	RST.LIL 08h
048B2E 21 69 11 00 0728*  	ld hl,BUF_4457
048B32 01 04 00 00 0729*  	ld bc,4
048B36 11 12 00 00 0730*  	ld de,18
048B3A DD 21 48 00 0731*  	ld ix,72
       00          
048B3F CD D8 BF 04 0732*  	call vdu_load_img
048B43             0733*  
048B43 21 C3 91 04 0734*  	ld hl,Fhonda106
048B47 11 8D CA 04 0735*  	ld de,filedata
048B4B 01 00 00 01 0736*  	ld bc,65536
048B4F 3E 01       0737*  	ld a,mos_load
048B51 5B CF       0738*  	RST.LIL 08h
048B53 21 6A 11 00 0739*  	ld hl,BUF_4458
048B57 01 08 00 00 0740*  	ld bc,8
048B5B 11 18 00 00 0741*  	ld de,24
048B5F DD 21 C0 00 0742*  	ld ix,192
       00          
048B64 CD D8 BF 04 0743*  	call vdu_load_img
048B68             0744*  
048B68 21 D9 91 04 0745*  	ld hl,Fhonda107
048B6C 11 8D CA 04 0746*  	ld de,filedata
048B70 01 00 00 01 0747*  	ld bc,65536
048B74 3E 01       0748*  	ld a,mos_load
048B76 5B CF       0749*  	RST.LIL 08h
048B78 21 6B 11 00 0750*  	ld hl,BUF_4459
048B7C 01 09 00 00 0751*  	ld bc,9
048B80 11 12 00 00 0752*  	ld de,18
048B84 DD 21 A2 00 0753*  	ld ix,162
       00          
048B89 CD D8 BF 04 0754*  	call vdu_load_img
048B8D             0755*  
048B8D 21 EF 91 04 0756*  	ld hl,Fhonda108
048B91 11 8D CA 04 0757*  	ld de,filedata
048B95 01 00 00 01 0758*  	ld bc,65536
048B99 3E 01       0759*  	ld a,mos_load
048B9B 5B CF       0760*  	RST.LIL 08h
048B9D 21 6C 11 00 0761*  	ld hl,BUF_4460
048BA1 01 03 00 00 0762*  	ld bc,3
048BA5 11 12 00 00 0763*  	ld de,18
048BA9 DD 21 36 00 0764*  	ld ix,54
       00          
048BAE CD D8 BF 04 0765*  	call vdu_load_img
048BB2             0766*  
048BB2 21 05 92 04 0767*  	ld hl,Fhonda109
048BB6 11 8D CA 04 0768*  	ld de,filedata
048BBA 01 00 00 01 0769*  	ld bc,65536
048BBE 3E 01       0770*  	ld a,mos_load
048BC0 5B CF       0771*  	RST.LIL 08h
048BC2 21 6D 11 00 0772*  	ld hl,BUF_4461
048BC6 01 0E 00 00 0773*  	ld bc,14
048BCA 11 0D 00 00 0774*  	ld de,13
048BCE DD 21 B6 00 0775*  	ld ix,182
       00          
048BD3 CD D8 BF 04 0776*  	call vdu_load_img
048BD7             0777*  
048BD7 21 1B 92 04 0778*  	ld hl,Fhonda110
048BDB 11 8D CA 04 0779*  	ld de,filedata
048BDF 01 00 00 01 0780*  	ld bc,65536
048BE3 3E 01       0781*  	ld a,mos_load
048BE5 5B CF       0782*  	RST.LIL 08h
048BE7 21 6E 11 00 0783*  	ld hl,BUF_4462
048BEB 01 09 00 00 0784*  	ld bc,9
048BEF 11 0C 00 00 0785*  	ld de,12
048BF3 DD 21 6C 00 0786*  	ld ix,108
       00          
048BF8 CD D8 BF 04 0787*  	call vdu_load_img
048BFC             0788*  
048BFC 21 31 92 04 0789*  	ld hl,Fhonda111
048C00 11 8D CA 04 0790*  	ld de,filedata
048C04 01 00 00 01 0791*  	ld bc,65536
048C08 3E 01       0792*  	ld a,mos_load
048C0A 5B CF       0793*  	RST.LIL 08h
048C0C 21 6F 11 00 0794*  	ld hl,BUF_4463
048C10 01 09 00 00 0795*  	ld bc,9
048C14 11 0C 00 00 0796*  	ld de,12
048C18 DD 21 6C 00 0797*  	ld ix,108
       00          
048C1D CD D8 BF 04 0798*  	call vdu_load_img
048C21             0799*  
048C21 21 47 92 04 0800*  	ld hl,Fhonda112
048C25 11 8D CA 04 0801*  	ld de,filedata
048C29 01 00 00 01 0802*  	ld bc,65536
048C2D 3E 01       0803*  	ld a,mos_load
048C2F 5B CF       0804*  	RST.LIL 08h
048C31 21 70 11 00 0805*  	ld hl,BUF_4464
048C35 01 09 00 00 0806*  	ld bc,9
048C39 11 12 00 00 0807*  	ld de,18
048C3D DD 21 A2 00 0808*  	ld ix,162
       00          
048C42 CD D8 BF 04 0809*  	call vdu_load_img
048C46             0810*  
048C46 21 5D 92 04 0811*  	ld hl,Fhonda113
048C4A 11 8D CA 04 0812*  	ld de,filedata
048C4E 01 00 00 01 0813*  	ld bc,65536
048C52 3E 01       0814*  	ld a,mos_load
048C54 5B CF       0815*  	RST.LIL 08h
048C56 21 71 11 00 0816*  	ld hl,BUF_4465
048C5A 01 09 00 00 0817*  	ld bc,9
048C5E 11 12 00 00 0818*  	ld de,18
048C62 DD 21 A2 00 0819*  	ld ix,162
       00          
048C67 CD D8 BF 04 0820*  	call vdu_load_img
048C6B             0821*  
048C6B 21 73 92 04 0822*  	ld hl,Fhonda114
048C6F 11 8D CA 04 0823*  	ld de,filedata
048C73 01 00 00 01 0824*  	ld bc,65536
048C77 3E 01       0825*  	ld a,mos_load
048C79 5B CF       0826*  	RST.LIL 08h
048C7B 21 72 11 00 0827*  	ld hl,BUF_4466
048C7F 01 06 00 00 0828*  	ld bc,6
048C83 11 0D 00 00 0829*  	ld de,13
048C87 DD 21 4E 00 0830*  	ld ix,78
       00          
048C8C CD D8 BF 04 0831*  	call vdu_load_img
048C90             0832*  
048C90 21 89 92 04 0833*  	ld hl,Fhonda115
048C94 11 8D CA 04 0834*  	ld de,filedata
048C98 01 00 00 01 0835*  	ld bc,65536
048C9C 3E 01       0836*  	ld a,mos_load
048C9E 5B CF       0837*  	RST.LIL 08h
048CA0 21 73 11 00 0838*  	ld hl,BUF_4467
048CA4 01 08 00 00 0839*  	ld bc,8
048CA8 11 0D 00 00 0840*  	ld de,13
048CAC DD 21 68 00 0841*  	ld ix,104
       00          
048CB1 CD D8 BF 04 0842*  	call vdu_load_img
048CB5             0843*  
048CB5 21 9F 92 04 0844*  	ld hl,Fhonda116
048CB9 11 8D CA 04 0845*  	ld de,filedata
048CBD 01 00 00 01 0846*  	ld bc,65536
048CC1 3E 01       0847*  	ld a,mos_load
048CC3 5B CF       0848*  	RST.LIL 08h
048CC5 21 74 11 00 0849*  	ld hl,BUF_4468
048CC9 01 07 00 00 0850*  	ld bc,7
048CCD 11 0F 00 00 0851*  	ld de,15
048CD1 DD 21 69 00 0852*  	ld ix,105
       00          
048CD6 CD D8 BF 04 0853*  	call vdu_load_img
048CDA             0854*  
048CDA 21 B5 92 04 0855*  	ld hl,Fhonda117
048CDE 11 8D CA 04 0856*  	ld de,filedata
048CE2 01 00 00 01 0857*  	ld bc,65536
048CE6 3E 01       0858*  	ld a,mos_load
048CE8 5B CF       0859*  	RST.LIL 08h
048CEA 21 75 11 00 0860*  	ld hl,BUF_4469
048CEE 01 09 00 00 0861*  	ld bc,9
048CF2 11 0C 00 00 0862*  	ld de,12
048CF6 DD 21 6C 00 0863*  	ld ix,108
       00          
048CFB CD D8 BF 04 0864*  	call vdu_load_img
048CFF             0865*  
048CFF 21 CB 92 04 0866*  	ld hl,Fhonda118
048D03 11 8D CA 04 0867*  	ld de,filedata
048D07 01 00 00 01 0868*  	ld bc,65536
048D0B 3E 01       0869*  	ld a,mos_load
048D0D 5B CF       0870*  	RST.LIL 08h
048D0F 21 76 11 00 0871*  	ld hl,BUF_4470
048D13 01 09 00 00 0872*  	ld bc,9
048D17 11 0C 00 00 0873*  	ld de,12
048D1B DD 21 6C 00 0874*  	ld ix,108
       00          
048D20 CD D8 BF 04 0875*  	call vdu_load_img
048D24             0876*  
048D24 21 E1 92 04 0877*  	ld hl,Fhonda119
048D28 11 8D CA 04 0878*  	ld de,filedata
048D2C 01 00 00 01 0879*  	ld bc,65536
048D30 3E 01       0880*  	ld a,mos_load
048D32 5B CF       0881*  	RST.LIL 08h
048D34 21 77 11 00 0882*  	ld hl,BUF_4471
048D38 01 0E 00 00 0883*  	ld bc,14
048D3C 11 0C 00 00 0884*  	ld de,12
048D40 DD 21 A8 00 0885*  	ld ix,168
       00          
048D45 CD D8 BF 04 0886*  	call vdu_load_img
048D49             0887*  
048D49 21 F7 92 04 0888*  	ld hl,Fhonda120
048D4D 11 8D CA 04 0889*  	ld de,filedata
048D51 01 00 00 01 0890*  	ld bc,65536
048D55 3E 01       0891*  	ld a,mos_load
048D57 5B CF       0892*  	RST.LIL 08h
048D59 21 78 11 00 0893*  	ld hl,BUF_4472
048D5D 01 09 00 00 0894*  	ld bc,9
048D61 11 0C 00 00 0895*  	ld de,12
048D65 DD 21 6C 00 0896*  	ld ix,108
       00          
048D6A CD D8 BF 04 0897*  	call vdu_load_img
048D6E             0898*  
048D6E 21 0D 93 04 0899*  	ld hl,Fhonda121
048D72 11 8D CA 04 0900*  	ld de,filedata
048D76 01 00 00 01 0901*  	ld bc,65536
048D7A 3E 01       0902*  	ld a,mos_load
048D7C 5B CF       0903*  	RST.LIL 08h
048D7E 21 79 11 00 0904*  	ld hl,BUF_4473
048D82 01 09 00 00 0905*  	ld bc,9
048D86 11 11 00 00 0906*  	ld de,17
048D8A DD 21 99 00 0907*  	ld ix,153
       00          
048D8F CD D8 BF 04 0908*  	call vdu_load_img
048D93             0909*  
048D93 21 23 93 04 0910*  	ld hl,Fhonda122
048D97 11 8D CA 04 0911*  	ld de,filedata
048D9B 01 00 00 01 0912*  	ld bc,65536
048D9F 3E 01       0913*  	ld a,mos_load
048DA1 5B CF       0914*  	RST.LIL 08h
048DA3 21 7A 11 00 0915*  	ld hl,BUF_4474
048DA7 01 09 00 00 0916*  	ld bc,9
048DAB 11 0C 00 00 0917*  	ld de,12
048DAF DD 21 6C 00 0918*  	ld ix,108
       00          
048DB4 CD D8 BF 04 0919*  	call vdu_load_img
048DB8             0920*  
048DB8 C9          0921*  	ret
048DB9             0922*  
048DB9 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
048DCF 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048DE5 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
048DFB 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
048E11 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048E27 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
048E3D 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
048E53 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
048E69 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
048E7F 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
048E95 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
048EAB 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
048EC1 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
048ED7 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
048EED 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
048F03 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
048F19 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048F2F 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048F45 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
048F5B 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
048F71 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
048F87 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
048F9D 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
048FB3 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
048FC9 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
048FDF 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048FF5 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
04900B 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
049021 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
049037 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
04904D 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
049063 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
049079 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
04908F 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
0490A5 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
0490BB 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
0490D1 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
0490E7 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
0490FD 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
049113 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
049129 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
04913F 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
049155 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
04916B 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
049181 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
049197 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
0491AD 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
0491C3 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
0491D9 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
0491EF 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
049205 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
04921B 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
049231 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
049247 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
04925D 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
049273 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
049289 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
04929F 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
0492B5 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
0492CB 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
0492E1 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
0492F7 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
04930D 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
049323 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
049339             0019   	include "src/asm/font_retro_computer.asm"
049339             0001*  ; Bitmap indices:
049339             0002*  BUF_4128: equ 0x1020 ; 32
049339             0003*  BUF_4129: equ 0x1021 ; 33 !
049339             0004*  ; Missing character 34 "
049339             0005*  ; Missing character 35 #
049339             0006*  ; Missing character 36 $
049339             0007*  ; Missing character 37 %
049339             0008*  ; Missing character 38 &
049339             0009*  ; Missing character 39 '
049339             0010*  ; Missing character 40 (
049339             0011*  ; Missing character 41 )
049339             0012*  ; Missing character 42 *
049339             0013*  ; Missing character 43 +
049339             0014*  ; Missing character 44 ,
049339             0015*  ; Missing character 45 -
049339             0016*  ; Missing character 46 .
049339             0017*  ; Missing character 47 /
049339             0018*  BUF_4144: equ 0x1030 ; 48 0
049339             0019*  BUF_4145: equ 0x1031 ; 49 1
049339             0020*  BUF_4146: equ 0x1032 ; 50 2
049339             0021*  BUF_4147: equ 0x1033 ; 51 3
049339             0022*  BUF_4148: equ 0x1034 ; 52 4
049339             0023*  BUF_4149: equ 0x1035 ; 53 5
049339             0024*  BUF_4150: equ 0x1036 ; 54 6
049339             0025*  BUF_4151: equ 0x1037 ; 55 7
049339             0026*  BUF_4152: equ 0x1038 ; 56 8
049339             0027*  BUF_4153: equ 0x1039 ; 57 9
049339             0028*  ; Missing character 58 :
049339             0029*  ; Missing character 59 ;
049339             0030*  ; Missing character 60 <
049339             0031*  ; Missing character 61 =
049339             0032*  ; Missing character 62 >
049339             0033*  BUF_4159: equ 0x103F ; 63 ?
049339             0034*  ; Missing character 64 @
049339             0035*  BUF_4161: equ 0x1041 ; 65 A
049339             0036*  BUF_4162: equ 0x1042 ; 66 B
049339             0037*  BUF_4163: equ 0x1043 ; 67 C
049339             0038*  BUF_4164: equ 0x1044 ; 68 D
049339             0039*  BUF_4165: equ 0x1045 ; 69 E
049339             0040*  BUF_4166: equ 0x1046 ; 70 F
049339             0041*  BUF_4167: equ 0x1047 ; 71 G
049339             0042*  BUF_4168: equ 0x1048 ; 72 H
049339             0043*  BUF_4169: equ 0x1049 ; 73 I
049339             0044*  BUF_4170: equ 0x104A ; 74 J
049339             0045*  BUF_4171: equ 0x104B ; 75 K
049339             0046*  BUF_4172: equ 0x104C ; 76 L
049339             0047*  BUF_4173: equ 0x104D ; 77 M
049339             0048*  BUF_4174: equ 0x104E ; 78 N
049339             0049*  BUF_4175: equ 0x104F ; 79 O
049339             0050*  BUF_4176: equ 0x1050 ; 80 P
049339             0051*  BUF_4177: equ 0x1051 ; 81 Q
049339             0052*  BUF_4178: equ 0x1052 ; 82 R
049339             0053*  BUF_4179: equ 0x1053 ; 83 S
049339             0054*  BUF_4180: equ 0x1054 ; 84 T
049339             0055*  BUF_4181: equ 0x1055 ; 85 U
049339             0056*  BUF_4182: equ 0x1056 ; 86 V
049339             0057*  BUF_4183: equ 0x1057 ; 87 W
049339             0058*  BUF_4184: equ 0x1058 ; 88 X
049339             0059*  BUF_4185: equ 0x1059 ; 89 Y
049339             0060*  BUF_4186: equ 0x105A ; 90 Z
049339             0061*  ; Missing character 91 [
049339             0062*  ; Missing character 92 \
049339             0063*  ; Missing character 93 ]
049339             0064*  ; Missing character 94 ^
049339             0065*  ; Missing character 95 _
049339             0066*  ; Missing character 96 `
049339             0067*  ; Missing character 97 a
049339             0068*  ; Missing character 98 b
049339             0069*  ; Missing character 99 c
049339             0070*  ; Missing character 100 d
049339             0071*  ; Missing character 101 e
049339             0072*  ; Missing character 102 f
049339             0073*  ; Missing character 103 g
049339             0074*  ; Missing character 104 h
049339             0075*  ; Missing character 105 i
049339             0076*  ; Missing character 106 j
049339             0077*  ; Missing character 107 k
049339             0078*  ; Missing character 108 l
049339             0079*  ; Missing character 109 m
049339             0080*  ; Missing character 110 n
049339             0081*  ; Missing character 111 o
049339             0082*  ; Missing character 112 p
049339             0083*  ; Missing character 113 q
049339             0084*  ; Missing character 114 r
049339             0085*  ; Missing character 115 s
049339             0086*  ; Missing character 116 t
049339             0087*  ; Missing character 117 u
049339             0088*  ; Missing character 118 v
049339             0089*  ; Missing character 119 w
049339             0090*  ; Missing character 120 x
049339             0091*  ; Missing character 121 y
049339             0092*  ; Missing character 122 z
049339             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
049339             0094*  font_retro_computer:
049339 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
04933F 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
049345 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
04934B 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
049351 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
049357 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
04935D 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
049363 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
049369 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
04936F 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
049375 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
04937B 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
049381 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
049387 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
04938D 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
049393 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
049399 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
04939F 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
0493A5 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
0493AB 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
0493B1 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
0493B7 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
0493BD 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
0493C3 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
0493C9 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
0493CF 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
0493D5 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
0493DB 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
0493E1 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
0493E7 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
0493ED 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
0493F3 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
0493F9 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
0493FF 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
049405 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
04940B 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
049411 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
049417 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
04941D 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
049423 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
049429 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
04942F 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
049435 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
04943B 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
049441 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
049447 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
04944D 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
049453 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
049459 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
04945F 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
049465 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
04946B 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
049471 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
049477 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
04947D 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
049483 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
049489 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
04948F 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
049495 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
04949B 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
0494A1 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
0494A7 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
0494AD 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
0494B3 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
0494B9 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
0494BF 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
0494C5 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
0494CB 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
0494D1 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
0494D7 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
0494DD 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
0494E3 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
0494E9 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
0494EF 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
0494F5 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
0494FB 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
049501 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
049507 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
04950D 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
049513 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
049519 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
04951F 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
049525 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
04952B 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
049531 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
049537 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
04953D 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
049543 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
049549 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
04954F 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
049555 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
04955B             0186*  
04955B             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
04955B             0188*  load_font_retro_computer:
04955B             0189*  
04955B 21 FF 9A 04 0190*  	ld hl,Frc032
04955F 11 8D CA 04 0191*  	ld de,filedata
049563 01 00 00 01 0192*  	ld bc,65536
049567 3E 01       0193*  	ld a,mos_load
049569 5B CF       0194*  	RST.LIL 08h
04956B 21 20 10 00 0195*  	ld hl,BUF_4128
04956F 01 06 00 00 0196*  	ld bc,6
049573 11 01 00 00 0197*  	ld de,1
049577 DD 21 06 00 0198*  	ld ix,6
       00          
04957C CD D8 BF 04 0199*  	call vdu_load_img
049580             0200*  
049580 21 12 9B 04 0201*  	ld hl,Frc033
049584 11 8D CA 04 0202*  	ld de,filedata
049588 01 00 00 01 0203*  	ld bc,65536
04958C 3E 01       0204*  	ld a,mos_load
04958E 5B CF       0205*  	RST.LIL 08h
049590 21 21 10 00 0206*  	ld hl,BUF_4129
049594 01 03 00 00 0207*  	ld bc,3
049598 11 0E 00 00 0208*  	ld de,14
04959C DD 21 2A 00 0209*  	ld ix,42
       00          
0495A1 CD D8 BF 04 0210*  	call vdu_load_img
0495A5             0211*  ; Missing character 34
0495A5             0212*  ; Missing character 35
0495A5             0213*  ; Missing character 36
0495A5             0214*  ; Missing character 37
0495A5             0215*  ; Missing character 38
0495A5             0216*  ; Missing character 39
0495A5             0217*  ; Missing character 40
0495A5             0218*  ; Missing character 41
0495A5             0219*  ; Missing character 42
0495A5             0220*  ; Missing character 43
0495A5             0221*  ; Missing character 44
0495A5             0222*  ; Missing character 45
0495A5             0223*  ; Missing character 46
0495A5             0224*  ; Missing character 47
0495A5             0225*  
0495A5 21 25 9B 04 0226*  	ld hl,Frc048
0495A9 11 8D CA 04 0227*  	ld de,filedata
0495AD 01 00 00 01 0228*  	ld bc,65536
0495B1 3E 01       0229*  	ld a,mos_load
0495B3 5B CF       0230*  	RST.LIL 08h
0495B5 21 30 10 00 0231*  	ld hl,BUF_4144
0495B9 01 08 00 00 0232*  	ld bc,8
0495BD 11 0E 00 00 0233*  	ld de,14
0495C1 DD 21 70 00 0234*  	ld ix,112
       00          
0495C6 CD D8 BF 04 0235*  	call vdu_load_img
0495CA             0236*  
0495CA 21 38 9B 04 0237*  	ld hl,Frc049
0495CE 11 8D CA 04 0238*  	ld de,filedata
0495D2 01 00 00 01 0239*  	ld bc,65536
0495D6 3E 01       0240*  	ld a,mos_load
0495D8 5B CF       0241*  	RST.LIL 08h
0495DA 21 31 10 00 0242*  	ld hl,BUF_4145
0495DE 01 08 00 00 0243*  	ld bc,8
0495E2 11 0E 00 00 0244*  	ld de,14
0495E6 DD 21 70 00 0245*  	ld ix,112
       00          
0495EB CD D8 BF 04 0246*  	call vdu_load_img
0495EF             0247*  
0495EF 21 4B 9B 04 0248*  	ld hl,Frc050
0495F3 11 8D CA 04 0249*  	ld de,filedata
0495F7 01 00 00 01 0250*  	ld bc,65536
0495FB 3E 01       0251*  	ld a,mos_load
0495FD 5B CF       0252*  	RST.LIL 08h
0495FF 21 32 10 00 0253*  	ld hl,BUF_4146
049603 01 08 00 00 0254*  	ld bc,8
049607 11 0E 00 00 0255*  	ld de,14
04960B DD 21 70 00 0256*  	ld ix,112
       00          
049610 CD D8 BF 04 0257*  	call vdu_load_img
049614             0258*  
049614 21 5E 9B 04 0259*  	ld hl,Frc051
049618 11 8D CA 04 0260*  	ld de,filedata
04961C 01 00 00 01 0261*  	ld bc,65536
049620 3E 01       0262*  	ld a,mos_load
049622 5B CF       0263*  	RST.LIL 08h
049624 21 33 10 00 0264*  	ld hl,BUF_4147
049628 01 08 00 00 0265*  	ld bc,8
04962C 11 0E 00 00 0266*  	ld de,14
049630 DD 21 70 00 0267*  	ld ix,112
       00          
049635 CD D8 BF 04 0268*  	call vdu_load_img
049639             0269*  
049639 21 71 9B 04 0270*  	ld hl,Frc052
04963D 11 8D CA 04 0271*  	ld de,filedata
049641 01 00 00 01 0272*  	ld bc,65536
049645 3E 01       0273*  	ld a,mos_load
049647 5B CF       0274*  	RST.LIL 08h
049649 21 34 10 00 0275*  	ld hl,BUF_4148
04964D 01 08 00 00 0276*  	ld bc,8
049651 11 0E 00 00 0277*  	ld de,14
049655 DD 21 70 00 0278*  	ld ix,112
       00          
04965A CD D8 BF 04 0279*  	call vdu_load_img
04965E             0280*  
04965E 21 84 9B 04 0281*  	ld hl,Frc053
049662 11 8D CA 04 0282*  	ld de,filedata
049666 01 00 00 01 0283*  	ld bc,65536
04966A 3E 01       0284*  	ld a,mos_load
04966C 5B CF       0285*  	RST.LIL 08h
04966E 21 35 10 00 0286*  	ld hl,BUF_4149
049672 01 08 00 00 0287*  	ld bc,8
049676 11 0E 00 00 0288*  	ld de,14
04967A DD 21 70 00 0289*  	ld ix,112
       00          
04967F CD D8 BF 04 0290*  	call vdu_load_img
049683             0291*  
049683 21 97 9B 04 0292*  	ld hl,Frc054
049687 11 8D CA 04 0293*  	ld de,filedata
04968B 01 00 00 01 0294*  	ld bc,65536
04968F 3E 01       0295*  	ld a,mos_load
049691 5B CF       0296*  	RST.LIL 08h
049693 21 36 10 00 0297*  	ld hl,BUF_4150
049697 01 08 00 00 0298*  	ld bc,8
04969B 11 0E 00 00 0299*  	ld de,14
04969F DD 21 70 00 0300*  	ld ix,112
       00          
0496A4 CD D8 BF 04 0301*  	call vdu_load_img
0496A8             0302*  
0496A8 21 AA 9B 04 0303*  	ld hl,Frc055
0496AC 11 8D CA 04 0304*  	ld de,filedata
0496B0 01 00 00 01 0305*  	ld bc,65536
0496B4 3E 01       0306*  	ld a,mos_load
0496B6 5B CF       0307*  	RST.LIL 08h
0496B8 21 37 10 00 0308*  	ld hl,BUF_4151
0496BC 01 08 00 00 0309*  	ld bc,8
0496C0 11 0E 00 00 0310*  	ld de,14
0496C4 DD 21 70 00 0311*  	ld ix,112
       00          
0496C9 CD D8 BF 04 0312*  	call vdu_load_img
0496CD             0313*  
0496CD 21 BD 9B 04 0314*  	ld hl,Frc056
0496D1 11 8D CA 04 0315*  	ld de,filedata
0496D5 01 00 00 01 0316*  	ld bc,65536
0496D9 3E 01       0317*  	ld a,mos_load
0496DB 5B CF       0318*  	RST.LIL 08h
0496DD 21 38 10 00 0319*  	ld hl,BUF_4152
0496E1 01 08 00 00 0320*  	ld bc,8
0496E5 11 0E 00 00 0321*  	ld de,14
0496E9 DD 21 70 00 0322*  	ld ix,112
       00          
0496EE CD D8 BF 04 0323*  	call vdu_load_img
0496F2             0324*  
0496F2 21 D0 9B 04 0325*  	ld hl,Frc057
0496F6 11 8D CA 04 0326*  	ld de,filedata
0496FA 01 00 00 01 0327*  	ld bc,65536
0496FE 3E 01       0328*  	ld a,mos_load
049700 5B CF       0329*  	RST.LIL 08h
049702 21 39 10 00 0330*  	ld hl,BUF_4153
049706 01 08 00 00 0331*  	ld bc,8
04970A 11 0E 00 00 0332*  	ld de,14
04970E DD 21 70 00 0333*  	ld ix,112
       00          
049713 CD D8 BF 04 0334*  	call vdu_load_img
049717             0335*  ; Missing character 58
049717             0336*  ; Missing character 59
049717             0337*  ; Missing character 60
049717             0338*  ; Missing character 61
049717             0339*  ; Missing character 62
049717             0340*  
049717 21 E3 9B 04 0341*  	ld hl,Frc063
04971B 11 8D CA 04 0342*  	ld de,filedata
04971F 01 00 00 01 0343*  	ld bc,65536
049723 3E 01       0344*  	ld a,mos_load
049725 5B CF       0345*  	RST.LIL 08h
049727 21 3F 10 00 0346*  	ld hl,BUF_4159
04972B 01 08 00 00 0347*  	ld bc,8
04972F 11 0E 00 00 0348*  	ld de,14
049733 DD 21 70 00 0349*  	ld ix,112
       00          
049738 CD D8 BF 04 0350*  	call vdu_load_img
04973C             0351*  ; Missing character 64
04973C             0352*  
04973C 21 F6 9B 04 0353*  	ld hl,Frc065
049740 11 8D CA 04 0354*  	ld de,filedata
049744 01 00 00 01 0355*  	ld bc,65536
049748 3E 01       0356*  	ld a,mos_load
04974A 5B CF       0357*  	RST.LIL 08h
04974C 21 41 10 00 0358*  	ld hl,BUF_4161
049750 01 07 00 00 0359*  	ld bc,7
049754 11 0E 00 00 0360*  	ld de,14
049758 DD 21 62 00 0361*  	ld ix,98
       00          
04975D CD D8 BF 04 0362*  	call vdu_load_img
049761             0363*  
049761 21 09 9C 04 0364*  	ld hl,Frc066
049765 11 8D CA 04 0365*  	ld de,filedata
049769 01 00 00 01 0366*  	ld bc,65536
04976D 3E 01       0367*  	ld a,mos_load
04976F 5B CF       0368*  	RST.LIL 08h
049771 21 42 10 00 0369*  	ld hl,BUF_4162
049775 01 08 00 00 0370*  	ld bc,8
049779 11 0E 00 00 0371*  	ld de,14
04977D DD 21 70 00 0372*  	ld ix,112
       00          
049782 CD D8 BF 04 0373*  	call vdu_load_img
049786             0374*  
049786 21 1C 9C 04 0375*  	ld hl,Frc067
04978A 11 8D CA 04 0376*  	ld de,filedata
04978E 01 00 00 01 0377*  	ld bc,65536
049792 3E 01       0378*  	ld a,mos_load
049794 5B CF       0379*  	RST.LIL 08h
049796 21 43 10 00 0380*  	ld hl,BUF_4163
04979A 01 07 00 00 0381*  	ld bc,7
04979E 11 0E 00 00 0382*  	ld de,14
0497A2 DD 21 62 00 0383*  	ld ix,98
       00          
0497A7 CD D8 BF 04 0384*  	call vdu_load_img
0497AB             0385*  
0497AB 21 2F 9C 04 0386*  	ld hl,Frc068
0497AF 11 8D CA 04 0387*  	ld de,filedata
0497B3 01 00 00 01 0388*  	ld bc,65536
0497B7 3E 01       0389*  	ld a,mos_load
0497B9 5B CF       0390*  	RST.LIL 08h
0497BB 21 44 10 00 0391*  	ld hl,BUF_4164
0497BF 01 08 00 00 0392*  	ld bc,8
0497C3 11 0E 00 00 0393*  	ld de,14
0497C7 DD 21 70 00 0394*  	ld ix,112
       00          
0497CC CD D8 BF 04 0395*  	call vdu_load_img
0497D0             0396*  
0497D0 21 42 9C 04 0397*  	ld hl,Frc069
0497D4 11 8D CA 04 0398*  	ld de,filedata
0497D8 01 00 00 01 0399*  	ld bc,65536
0497DC 3E 01       0400*  	ld a,mos_load
0497DE 5B CF       0401*  	RST.LIL 08h
0497E0 21 45 10 00 0402*  	ld hl,BUF_4165
0497E4 01 08 00 00 0403*  	ld bc,8
0497E8 11 0E 00 00 0404*  	ld de,14
0497EC DD 21 70 00 0405*  	ld ix,112
       00          
0497F1 CD D8 BF 04 0406*  	call vdu_load_img
0497F5             0407*  
0497F5 21 55 9C 04 0408*  	ld hl,Frc070
0497F9 11 8D CA 04 0409*  	ld de,filedata
0497FD 01 00 00 01 0410*  	ld bc,65536
049801 3E 01       0411*  	ld a,mos_load
049803 5B CF       0412*  	RST.LIL 08h
049805 21 46 10 00 0413*  	ld hl,BUF_4166
049809 01 07 00 00 0414*  	ld bc,7
04980D 11 0E 00 00 0415*  	ld de,14
049811 DD 21 62 00 0416*  	ld ix,98
       00          
049816 CD D8 BF 04 0417*  	call vdu_load_img
04981A             0418*  
04981A 21 68 9C 04 0419*  	ld hl,Frc071
04981E 11 8D CA 04 0420*  	ld de,filedata
049822 01 00 00 01 0421*  	ld bc,65536
049826 3E 01       0422*  	ld a,mos_load
049828 5B CF       0423*  	RST.LIL 08h
04982A 21 47 10 00 0424*  	ld hl,BUF_4167
04982E 01 08 00 00 0425*  	ld bc,8
049832 11 0E 00 00 0426*  	ld de,14
049836 DD 21 70 00 0427*  	ld ix,112
       00          
04983B CD D8 BF 04 0428*  	call vdu_load_img
04983F             0429*  
04983F 21 7B 9C 04 0430*  	ld hl,Frc072
049843 11 8D CA 04 0431*  	ld de,filedata
049847 01 00 00 01 0432*  	ld bc,65536
04984B 3E 01       0433*  	ld a,mos_load
04984D 5B CF       0434*  	RST.LIL 08h
04984F 21 48 10 00 0435*  	ld hl,BUF_4168
049853 01 07 00 00 0436*  	ld bc,7
049857 11 0E 00 00 0437*  	ld de,14
04985B DD 21 62 00 0438*  	ld ix,98
       00          
049860 CD D8 BF 04 0439*  	call vdu_load_img
049864             0440*  
049864 21 8E 9C 04 0441*  	ld hl,Frc073
049868 11 8D CA 04 0442*  	ld de,filedata
04986C 01 00 00 01 0443*  	ld bc,65536
049870 3E 01       0444*  	ld a,mos_load
049872 5B CF       0445*  	RST.LIL 08h
049874 21 49 10 00 0446*  	ld hl,BUF_4169
049878 01 07 00 00 0447*  	ld bc,7
04987C 11 0E 00 00 0448*  	ld de,14
049880 DD 21 62 00 0449*  	ld ix,98
       00          
049885 CD D8 BF 04 0450*  	call vdu_load_img
049889             0451*  
049889 21 A1 9C 04 0452*  	ld hl,Frc074
04988D 11 8D CA 04 0453*  	ld de,filedata
049891 01 00 00 01 0454*  	ld bc,65536
049895 3E 01       0455*  	ld a,mos_load
049897 5B CF       0456*  	RST.LIL 08h
049899 21 4A 10 00 0457*  	ld hl,BUF_4170
04989D 01 08 00 00 0458*  	ld bc,8
0498A1 11 0E 00 00 0459*  	ld de,14
0498A5 DD 21 70 00 0460*  	ld ix,112
       00          
0498AA CD D8 BF 04 0461*  	call vdu_load_img
0498AE             0462*  
0498AE 21 B4 9C 04 0463*  	ld hl,Frc075
0498B2 11 8D CA 04 0464*  	ld de,filedata
0498B6 01 00 00 01 0465*  	ld bc,65536
0498BA 3E 01       0466*  	ld a,mos_load
0498BC 5B CF       0467*  	RST.LIL 08h
0498BE 21 4B 10 00 0468*  	ld hl,BUF_4171
0498C2 01 07 00 00 0469*  	ld bc,7
0498C6 11 0E 00 00 0470*  	ld de,14
0498CA DD 21 62 00 0471*  	ld ix,98
       00          
0498CF CD D8 BF 04 0472*  	call vdu_load_img
0498D3             0473*  
0498D3 21 C7 9C 04 0474*  	ld hl,Frc076
0498D7 11 8D CA 04 0475*  	ld de,filedata
0498DB 01 00 00 01 0476*  	ld bc,65536
0498DF 3E 01       0477*  	ld a,mos_load
0498E1 5B CF       0478*  	RST.LIL 08h
0498E3 21 4C 10 00 0479*  	ld hl,BUF_4172
0498E7 01 08 00 00 0480*  	ld bc,8
0498EB 11 0E 00 00 0481*  	ld de,14
0498EF DD 21 70 00 0482*  	ld ix,112
       00          
0498F4 CD D8 BF 04 0483*  	call vdu_load_img
0498F8             0484*  
0498F8 21 DA 9C 04 0485*  	ld hl,Frc077
0498FC 11 8D CA 04 0486*  	ld de,filedata
049900 01 00 00 01 0487*  	ld bc,65536
049904 3E 01       0488*  	ld a,mos_load
049906 5B CF       0489*  	RST.LIL 08h
049908 21 4D 10 00 0490*  	ld hl,BUF_4173
04990C 01 09 00 00 0491*  	ld bc,9
049910 11 0E 00 00 0492*  	ld de,14
049914 DD 21 7E 00 0493*  	ld ix,126
       00          
049919 CD D8 BF 04 0494*  	call vdu_load_img
04991D             0495*  
04991D 21 ED 9C 04 0496*  	ld hl,Frc078
049921 11 8D CA 04 0497*  	ld de,filedata
049925 01 00 00 01 0498*  	ld bc,65536
049929 3E 01       0499*  	ld a,mos_load
04992B 5B CF       0500*  	RST.LIL 08h
04992D 21 4E 10 00 0501*  	ld hl,BUF_4174
049931 01 07 00 00 0502*  	ld bc,7
049935 11 0E 00 00 0503*  	ld de,14
049939 DD 21 62 00 0504*  	ld ix,98
       00          
04993E CD D8 BF 04 0505*  	call vdu_load_img
049942             0506*  
049942 21 00 9D 04 0507*  	ld hl,Frc079
049946 11 8D CA 04 0508*  	ld de,filedata
04994A 01 00 00 01 0509*  	ld bc,65536
04994E 3E 01       0510*  	ld a,mos_load
049950 5B CF       0511*  	RST.LIL 08h
049952 21 4F 10 00 0512*  	ld hl,BUF_4175
049956 01 08 00 00 0513*  	ld bc,8
04995A 11 0E 00 00 0514*  	ld de,14
04995E DD 21 70 00 0515*  	ld ix,112
       00          
049963 CD D8 BF 04 0516*  	call vdu_load_img
049967             0517*  
049967 21 13 9D 04 0518*  	ld hl,Frc080
04996B 11 8D CA 04 0519*  	ld de,filedata
04996F 01 00 00 01 0520*  	ld bc,65536
049973 3E 01       0521*  	ld a,mos_load
049975 5B CF       0522*  	RST.LIL 08h
049977 21 50 10 00 0523*  	ld hl,BUF_4176
04997B 01 07 00 00 0524*  	ld bc,7
04997F 11 0E 00 00 0525*  	ld de,14
049983 DD 21 62 00 0526*  	ld ix,98
       00          
049988 CD D8 BF 04 0527*  	call vdu_load_img
04998C             0528*  
04998C 21 26 9D 04 0529*  	ld hl,Frc081
049990 11 8D CA 04 0530*  	ld de,filedata
049994 01 00 00 01 0531*  	ld bc,65536
049998 3E 01       0532*  	ld a,mos_load
04999A 5B CF       0533*  	RST.LIL 08h
04999C 21 51 10 00 0534*  	ld hl,BUF_4177
0499A0 01 08 00 00 0535*  	ld bc,8
0499A4 11 0F 00 00 0536*  	ld de,15
0499A8 DD 21 78 00 0537*  	ld ix,120
       00          
0499AD CD D8 BF 04 0538*  	call vdu_load_img
0499B1             0539*  
0499B1 21 39 9D 04 0540*  	ld hl,Frc082
0499B5 11 8D CA 04 0541*  	ld de,filedata
0499B9 01 00 00 01 0542*  	ld bc,65536
0499BD 3E 01       0543*  	ld a,mos_load
0499BF 5B CF       0544*  	RST.LIL 08h
0499C1 21 52 10 00 0545*  	ld hl,BUF_4178
0499C5 01 08 00 00 0546*  	ld bc,8
0499C9 11 0E 00 00 0547*  	ld de,14
0499CD DD 21 70 00 0548*  	ld ix,112
       00          
0499D2 CD D8 BF 04 0549*  	call vdu_load_img
0499D6             0550*  
0499D6 21 4C 9D 04 0551*  	ld hl,Frc083
0499DA 11 8D CA 04 0552*  	ld de,filedata
0499DE 01 00 00 01 0553*  	ld bc,65536
0499E2 3E 01       0554*  	ld a,mos_load
0499E4 5B CF       0555*  	RST.LIL 08h
0499E6 21 53 10 00 0556*  	ld hl,BUF_4179
0499EA 01 08 00 00 0557*  	ld bc,8
0499EE 11 0E 00 00 0558*  	ld de,14
0499F2 DD 21 70 00 0559*  	ld ix,112
       00          
0499F7 CD D8 BF 04 0560*  	call vdu_load_img
0499FB             0561*  
0499FB 21 5F 9D 04 0562*  	ld hl,Frc084
0499FF 11 8D CA 04 0563*  	ld de,filedata
049A03 01 00 00 01 0564*  	ld bc,65536
049A07 3E 01       0565*  	ld a,mos_load
049A09 5B CF       0566*  	RST.LIL 08h
049A0B 21 54 10 00 0567*  	ld hl,BUF_4180
049A0F 01 07 00 00 0568*  	ld bc,7
049A13 11 0E 00 00 0569*  	ld de,14
049A17 DD 21 62 00 0570*  	ld ix,98
       00          
049A1C CD D8 BF 04 0571*  	call vdu_load_img
049A20             0572*  
049A20 21 72 9D 04 0573*  	ld hl,Frc085
049A24 11 8D CA 04 0574*  	ld de,filedata
049A28 01 00 00 01 0575*  	ld bc,65536
049A2C 3E 01       0576*  	ld a,mos_load
049A2E 5B CF       0577*  	RST.LIL 08h
049A30 21 55 10 00 0578*  	ld hl,BUF_4181
049A34 01 08 00 00 0579*  	ld bc,8
049A38 11 0E 00 00 0580*  	ld de,14
049A3C DD 21 70 00 0581*  	ld ix,112
       00          
049A41 CD D8 BF 04 0582*  	call vdu_load_img
049A45             0583*  
049A45 21 85 9D 04 0584*  	ld hl,Frc086
049A49 11 8D CA 04 0585*  	ld de,filedata
049A4D 01 00 00 01 0586*  	ld bc,65536
049A51 3E 01       0587*  	ld a,mos_load
049A53 5B CF       0588*  	RST.LIL 08h
049A55 21 56 10 00 0589*  	ld hl,BUF_4182
049A59 01 07 00 00 0590*  	ld bc,7
049A5D 11 0E 00 00 0591*  	ld de,14
049A61 DD 21 62 00 0592*  	ld ix,98
       00          
049A66 CD D8 BF 04 0593*  	call vdu_load_img
049A6A             0594*  
049A6A 21 98 9D 04 0595*  	ld hl,Frc087
049A6E 11 8D CA 04 0596*  	ld de,filedata
049A72 01 00 00 01 0597*  	ld bc,65536
049A76 3E 01       0598*  	ld a,mos_load
049A78 5B CF       0599*  	RST.LIL 08h
049A7A 21 57 10 00 0600*  	ld hl,BUF_4183
049A7E 01 0B 00 00 0601*  	ld bc,11
049A82 11 0E 00 00 0602*  	ld de,14
049A86 DD 21 9A 00 0603*  	ld ix,154
       00          
049A8B CD D8 BF 04 0604*  	call vdu_load_img
049A8F             0605*  
049A8F 21 AB 9D 04 0606*  	ld hl,Frc088
049A93 11 8D CA 04 0607*  	ld de,filedata
049A97 01 00 00 01 0608*  	ld bc,65536
049A9B 3E 01       0609*  	ld a,mos_load
049A9D 5B CF       0610*  	RST.LIL 08h
049A9F 21 58 10 00 0611*  	ld hl,BUF_4184
049AA3 01 07 00 00 0612*  	ld bc,7
049AA7 11 0E 00 00 0613*  	ld de,14
049AAB DD 21 62 00 0614*  	ld ix,98
       00          
049AB0 CD D8 BF 04 0615*  	call vdu_load_img
049AB4             0616*  
049AB4 21 BE 9D 04 0617*  	ld hl,Frc089
049AB8 11 8D CA 04 0618*  	ld de,filedata
049ABC 01 00 00 01 0619*  	ld bc,65536
049AC0 3E 01       0620*  	ld a,mos_load
049AC2 5B CF       0621*  	RST.LIL 08h
049AC4 21 59 10 00 0622*  	ld hl,BUF_4185
049AC8 01 08 00 00 0623*  	ld bc,8
049ACC 11 0E 00 00 0624*  	ld de,14
049AD0 DD 21 70 00 0625*  	ld ix,112
       00          
049AD5 CD D8 BF 04 0626*  	call vdu_load_img
049AD9             0627*  
049AD9 21 D1 9D 04 0628*  	ld hl,Frc090
049ADD 11 8D CA 04 0629*  	ld de,filedata
049AE1 01 00 00 01 0630*  	ld bc,65536
049AE5 3E 01       0631*  	ld a,mos_load
049AE7 5B CF       0632*  	RST.LIL 08h
049AE9 21 5A 10 00 0633*  	ld hl,BUF_4186
049AED 01 07 00 00 0634*  	ld bc,7
049AF1 11 0E 00 00 0635*  	ld de,14
049AF5 DD 21 62 00 0636*  	ld ix,98
       00          
049AFA CD D8 BF 04 0637*  	call vdu_load_img
049AFE             0638*  ; Missing character 91
049AFE             0639*  ; Missing character 92
049AFE             0640*  ; Missing character 93
049AFE             0641*  ; Missing character 94
049AFE             0642*  ; Missing character 95
049AFE             0643*  ; Missing character 96
049AFE             0644*  ; Missing character 97
049AFE             0645*  ; Missing character 98
049AFE             0646*  ; Missing character 99
049AFE             0647*  ; Missing character 100
049AFE             0648*  ; Missing character 101
049AFE             0649*  ; Missing character 102
049AFE             0650*  ; Missing character 103
049AFE             0651*  ; Missing character 104
049AFE             0652*  ; Missing character 105
049AFE             0653*  ; Missing character 106
049AFE             0654*  ; Missing character 107
049AFE             0655*  ; Missing character 108
049AFE             0656*  ; Missing character 109
049AFE             0657*  ; Missing character 110
049AFE             0658*  ; Missing character 111
049AFE             0659*  ; Missing character 112
049AFE             0660*  ; Missing character 113
049AFE             0661*  ; Missing character 114
049AFE             0662*  ; Missing character 115
049AFE             0663*  ; Missing character 116
049AFE             0664*  ; Missing character 117
049AFE             0665*  ; Missing character 118
049AFE             0666*  ; Missing character 119
049AFE             0667*  ; Missing character 120
049AFE             0668*  ; Missing character 121
049AFE             0669*  ; Missing character 122
049AFE             0670*  
049AFE C9          0671*  	ret
049AFF             0672*  
049AFF 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
049B12 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049B25 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049B38 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
049B4B 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
049B5E 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
049B71 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
049B84 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
049B97 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
049BAA 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
049BBD 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
049BD0 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
049BE3 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049BF6 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
049C09 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
049C1C 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049C2F 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
049C42 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049C55 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049C68 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
049C7B 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
049C8E 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
049CA1 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
049CB4 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
049CC7 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
049CDA 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
049CED 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
049D00 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
049D13 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049D26 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
049D39 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
049D4C 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049D5F 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
049D72 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
049D85 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
049D98 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
049DAB 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
049DBE 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
049DD1 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049DE4             0020   	include "src/asm/ui.asm"
049DE4             0001*  ; ui routines will go here
049DE4             0021   	include "src/asm/ui_img.asm"
049DE4             0001*  ; Bitmap indices:
049DE4             0002*  BUF_UI_BJ_025: equ 0x2000
049DE4             0003*  BUF_UI_BJ_050: equ 0x2001
049DE4             0004*  BUF_UI_BJ_075: equ 0x2002
049DE4             0005*  BUF_UI_BJ_100: equ 0x2003
049DE4             0006*  BUF_UI_BJ_120_120: equ 0x2004
049DE4             0007*  BUF_UI_LOWER_PANEL: equ 0x2005
049DE4             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2006
049DE4             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2007
049DE4             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2008
049DE4             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2009
049DE4             0012*  BUF_UI_SPLASH: equ 0x200A
049DE4             0013*  
049DE4             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
049DE4             0015*  load_ui_images:
049DE4             0016*  
049DE4 21 A8 9F 04 0017*  	ld hl,F_UI_bj_025
049DE8 11 8D CA 04 0018*  	ld de,filedata
049DEC 01 00 00 01 0019*  	ld bc,65536
049DF0 3E 01       0020*  	ld a,mos_load
049DF2 5B CF       0021*  	RST.LIL 08h
049DF4 21 00 20 00 0022*  	ld hl,BUF_UI_BJ_025
049DF8 01 20 00 00 0023*  	ld bc,32
049DFC 11 20 00 00 0024*  	ld de,32
049E00 DD 21 00 04 0025*  	ld ix,1024
       00          
049E05 CD D8 BF 04 0026*  	call vdu_load_img
049E09 3E 2E       0027*  	LD A, '.'
049E0B 5B D7       0028*  	RST.LIL 10h
049E0D             0029*  
049E0D 21 B8 9F 04 0030*  	ld hl,F_UI_bj_050
049E11 11 8D CA 04 0031*  	ld de,filedata
049E15 01 00 00 01 0032*  	ld bc,65536
049E19 3E 01       0033*  	ld a,mos_load
049E1B 5B CF       0034*  	RST.LIL 08h
049E1D 21 01 20 00 0035*  	ld hl,BUF_UI_BJ_050
049E21 01 20 00 00 0036*  	ld bc,32
049E25 11 20 00 00 0037*  	ld de,32
049E29 DD 21 00 04 0038*  	ld ix,1024
       00          
049E2E CD D8 BF 04 0039*  	call vdu_load_img
049E32 3E 2E       0040*  	LD A, '.'
049E34 5B D7       0041*  	RST.LIL 10h
049E36             0042*  
049E36 21 C8 9F 04 0043*  	ld hl,F_UI_bj_075
049E3A 11 8D CA 04 0044*  	ld de,filedata
049E3E 01 00 00 01 0045*  	ld bc,65536
049E42 3E 01       0046*  	ld a,mos_load
049E44 5B CF       0047*  	RST.LIL 08h
049E46 21 02 20 00 0048*  	ld hl,BUF_UI_BJ_075
049E4A 01 20 00 00 0049*  	ld bc,32
049E4E 11 20 00 00 0050*  	ld de,32
049E52 DD 21 00 04 0051*  	ld ix,1024
       00          
049E57 CD D8 BF 04 0052*  	call vdu_load_img
049E5B 3E 2E       0053*  	LD A, '.'
049E5D 5B D7       0054*  	RST.LIL 10h
049E5F             0055*  
049E5F 21 D8 9F 04 0056*  	ld hl,F_UI_bj_100
049E63 11 8D CA 04 0057*  	ld de,filedata
049E67 01 00 00 01 0058*  	ld bc,65536
049E6B 3E 01       0059*  	ld a,mos_load
049E6D 5B CF       0060*  	RST.LIL 08h
049E6F 21 03 20 00 0061*  	ld hl,BUF_UI_BJ_100
049E73 01 20 00 00 0062*  	ld bc,32
049E77 11 20 00 00 0063*  	ld de,32
049E7B DD 21 00 04 0064*  	ld ix,1024
       00          
049E80 CD D8 BF 04 0065*  	call vdu_load_img
049E84 3E 2E       0066*  	LD A, '.'
049E86 5B D7       0067*  	RST.LIL 10h
049E88             0068*  
049E88 21 E8 9F 04 0069*  	ld hl,F_UI_bj_120_120
049E8C 11 8D CA 04 0070*  	ld de,filedata
049E90 01 00 00 01 0071*  	ld bc,65536
049E94 3E 01       0072*  	ld a,mos_load
049E96 5B CF       0073*  	RST.LIL 08h
049E98 21 04 20 00 0074*  	ld hl,BUF_UI_BJ_120_120
049E9C 01 78 00 00 0075*  	ld bc,120
049EA0 11 78 00 00 0076*  	ld de,120
049EA4 DD 21 40 38 0077*  	ld ix,14400
       00          
049EA9 CD D8 BF 04 0078*  	call vdu_load_img
049EAD 3E 2E       0079*  	LD A, '.'
049EAF 5B D7       0080*  	RST.LIL 10h
049EB1             0081*  
049EB1 21 FC 9F 04 0082*  	ld hl,F_UI_lower_panel
049EB5 11 8D CA 04 0083*  	ld de,filedata
049EB9 01 00 00 01 0084*  	ld bc,65536
049EBD 3E 01       0085*  	ld a,mos_load
049EBF 5B CF       0086*  	RST.LIL 08h
049EC1 21 05 20 00 0087*  	ld hl,BUF_UI_LOWER_PANEL
049EC5 01 40 01 00 0088*  	ld bc,320
049EC9 11 50 00 00 0089*  	ld de,80
049ECD DD 21 00 64 0090*  	ld ix,25600
       00          
049ED2 CD D8 BF 04 0091*  	call vdu_load_img
049ED6 3E 2E       0092*  	LD A, '.'
049ED8 5B D7       0093*  	RST.LIL 10h
049EDA             0094*  
049EDA 21 11 A0 04 0095*  	ld hl,F_UI_lower_panel_gatling
049EDE 11 8D CA 04 0096*  	ld de,filedata
049EE2 01 00 00 01 0097*  	ld bc,65536
049EE6 3E 01       0098*  	ld a,mos_load
049EE8 5B CF       0099*  	RST.LIL 08h
049EEA 21 06 20 00 0100*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
049EEE 01 28 00 00 0101*  	ld bc,40
049EF2 11 14 00 00 0102*  	ld de,20
049EF6 DD 21 20 03 0103*  	ld ix,800
       00          
049EFB CD D8 BF 04 0104*  	call vdu_load_img
049EFF 3E 2E       0105*  	LD A, '.'
049F01 5B D7       0106*  	RST.LIL 10h
049F03             0107*  
049F03 21 2E A0 04 0108*  	ld hl,F_UI_lower_panel_knife
049F07 11 8D CA 04 0109*  	ld de,filedata
049F0B 01 00 00 01 0110*  	ld bc,65536
049F0F 3E 01       0111*  	ld a,mos_load
049F11 5B CF       0112*  	RST.LIL 08h
049F13 21 07 20 00 0113*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
049F17 01 28 00 00 0114*  	ld bc,40
049F1B 11 14 00 00 0115*  	ld de,20
049F1F DD 21 20 03 0116*  	ld ix,800
       00          
049F24 CD D8 BF 04 0117*  	call vdu_load_img
049F28 3E 2E       0118*  	LD A, '.'
049F2A 5B D7       0119*  	RST.LIL 10h
049F2C             0120*  
049F2C 21 49 A0 04 0121*  	ld hl,F_UI_lower_panel_machine_gun
049F30 11 8D CA 04 0122*  	ld de,filedata
049F34 01 00 00 01 0123*  	ld bc,65536
049F38 3E 01       0124*  	ld a,mos_load
049F3A 5B CF       0125*  	RST.LIL 08h
049F3C 21 08 20 00 0126*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
049F40 01 28 00 00 0127*  	ld bc,40
049F44 11 14 00 00 0128*  	ld de,20
049F48 DD 21 20 03 0129*  	ld ix,800
       00          
049F4D CD D8 BF 04 0130*  	call vdu_load_img
049F51 3E 2E       0131*  	LD A, '.'
049F53 5B D7       0132*  	RST.LIL 10h
049F55             0133*  
049F55 21 6A A0 04 0134*  	ld hl,F_UI_lower_panel_pistol
049F59 11 8D CA 04 0135*  	ld de,filedata
049F5D 01 00 00 01 0136*  	ld bc,65536
049F61 3E 01       0137*  	ld a,mos_load
049F63 5B CF       0138*  	RST.LIL 08h
049F65 21 09 20 00 0139*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
049F69 01 28 00 00 0140*  	ld bc,40
049F6D 11 14 00 00 0141*  	ld de,20
049F71 DD 21 20 03 0142*  	ld ix,800
       00          
049F76 CD D8 BF 04 0143*  	call vdu_load_img
049F7A 3E 2E       0144*  	LD A, '.'
049F7C 5B D7       0145*  	RST.LIL 10h
049F7E             0146*  
049F7E 21 86 A0 04 0147*  	ld hl,F_UI_splash
049F82 11 8D CA 04 0148*  	ld de,filedata
049F86 01 00 00 01 0149*  	ld bc,65536
049F8A 3E 01       0150*  	ld a,mos_load
049F8C 5B CF       0151*  	RST.LIL 08h
049F8E 21 0A 20 00 0152*  	ld hl,BUF_UI_SPLASH
049F92 01 40 01 00 0153*  	ld bc,320
049F96 11 A0 00 00 0154*  	ld de,160
049F9A DD 21 00 C8 0155*  	ld ix,51200
       00          
049F9F CD D8 BF 04 0156*  	call vdu_load_img
049FA3 3E 2E       0157*  	LD A, '.'
049FA5 5B D7       0158*  	RST.LIL 10h
049FA7             0159*  
049FA7 C9          0160*  	ret
049FA8             0161*  
049FA8 75 69 2F 62 0162*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
049FB8 75 69 2F 62 0163*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
049FC8 75 69 2F 62 0164*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
049FD8 75 69 2F 62 0165*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
049FE8 75 69 2F 62 0166*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
049FFC 75 69 2F 6C 0167*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
04A011 75 69 2F 6C 0168*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
04A02E 75 69 2F 6C 0169*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04A049 75 69 2F 6C 0170*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
04A06A 75 69 2F 6C 0171*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
04A086 75 69 2F 73 0172*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
04A096             0022   	include "src/asm/ui_img_bj.asm"
04A096             0001*  ; Bitmap indices:
04A096             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
04A096             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
04A096             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
04A096             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
04A096             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
04A096             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
04A096             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
04A096             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
04A096             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
04A096             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
04A096             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
04A096             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
04A096             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
04A096             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
04A096             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
04A096             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
04A096             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
04A096             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
04A096             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
04A096             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
04A096             0022*  
04A096             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
04A096             0024*  load_ui_images_bj:
04A096             0025*  
04A096 21 CB A3 04 0026*  	ld hl,F_UI_bj_gatling_00
04A09A 11 8D CA 04 0027*  	ld de,filedata
04A09E 01 00 00 01 0028*  	ld bc,65536
04A0A2 3E 01       0029*  	ld a,mos_load
04A0A4 5B CF       0030*  	RST.LIL 08h
04A0A6 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
04A0AA 01 40 00 00 0032*  	ld bc,64
04A0AE 11 40 00 00 0033*  	ld de,64
04A0B2 DD 21 00 10 0034*  	ld ix,4096
       00          
04A0B7 CD D8 BF 04 0035*  	call vdu_load_img
04A0BB 3E 2E       0036*  	LD A, '.'
04A0BD 5B D7       0037*  	RST.LIL 10h
04A0BF             0038*  
04A0BF 21 E5 A3 04 0039*  	ld hl,F_UI_bj_gatling_01
04A0C3 11 8D CA 04 0040*  	ld de,filedata
04A0C7 01 00 00 01 0041*  	ld bc,65536
04A0CB 3E 01       0042*  	ld a,mos_load
04A0CD 5B CF       0043*  	RST.LIL 08h
04A0CF 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
04A0D3 01 40 00 00 0045*  	ld bc,64
04A0D7 11 40 00 00 0046*  	ld de,64
04A0DB DD 21 00 10 0047*  	ld ix,4096
       00          
04A0E0 CD D8 BF 04 0048*  	call vdu_load_img
04A0E4 3E 2E       0049*  	LD A, '.'
04A0E6 5B D7       0050*  	RST.LIL 10h
04A0E8             0051*  
04A0E8 21 FF A3 04 0052*  	ld hl,F_UI_bj_gatling_02
04A0EC 11 8D CA 04 0053*  	ld de,filedata
04A0F0 01 00 00 01 0054*  	ld bc,65536
04A0F4 3E 01       0055*  	ld a,mos_load
04A0F6 5B CF       0056*  	RST.LIL 08h
04A0F8 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
04A0FC 01 40 00 00 0058*  	ld bc,64
04A100 11 40 00 00 0059*  	ld de,64
04A104 DD 21 00 10 0060*  	ld ix,4096
       00          
04A109 CD D8 BF 04 0061*  	call vdu_load_img
04A10D 3E 2E       0062*  	LD A, '.'
04A10F 5B D7       0063*  	RST.LIL 10h
04A111             0064*  
04A111 21 19 A4 04 0065*  	ld hl,F_UI_bj_gatling_03
04A115 11 8D CA 04 0066*  	ld de,filedata
04A119 01 00 00 01 0067*  	ld bc,65536
04A11D 3E 01       0068*  	ld a,mos_load
04A11F 5B CF       0069*  	RST.LIL 08h
04A121 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
04A125 01 40 00 00 0071*  	ld bc,64
04A129 11 40 00 00 0072*  	ld de,64
04A12D DD 21 00 10 0073*  	ld ix,4096
       00          
04A132 CD D8 BF 04 0074*  	call vdu_load_img
04A136 3E 2E       0075*  	LD A, '.'
04A138 5B D7       0076*  	RST.LIL 10h
04A13A             0077*  
04A13A 21 33 A4 04 0078*  	ld hl,F_UI_bj_gatling_04
04A13E 11 8D CA 04 0079*  	ld de,filedata
04A142 01 00 00 01 0080*  	ld bc,65536
04A146 3E 01       0081*  	ld a,mos_load
04A148 5B CF       0082*  	RST.LIL 08h
04A14A 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
04A14E 01 40 00 00 0084*  	ld bc,64
04A152 11 40 00 00 0085*  	ld de,64
04A156 DD 21 00 10 0086*  	ld ix,4096
       00          
04A15B CD D8 BF 04 0087*  	call vdu_load_img
04A15F 3E 2E       0088*  	LD A, '.'
04A161 5B D7       0089*  	RST.LIL 10h
04A163             0090*  
04A163 21 4D A4 04 0091*  	ld hl,F_UI_bj_knife_00
04A167 11 8D CA 04 0092*  	ld de,filedata
04A16B 01 00 00 01 0093*  	ld bc,65536
04A16F 3E 01       0094*  	ld a,mos_load
04A171 5B CF       0095*  	RST.LIL 08h
04A173 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
04A177 01 40 00 00 0097*  	ld bc,64
04A17B 11 40 00 00 0098*  	ld de,64
04A17F DD 21 00 10 0099*  	ld ix,4096
       00          
04A184 CD D8 BF 04 0100*  	call vdu_load_img
04A188 3E 2E       0101*  	LD A, '.'
04A18A 5B D7       0102*  	RST.LIL 10h
04A18C             0103*  
04A18C 21 65 A4 04 0104*  	ld hl,F_UI_bj_knife_01
04A190 11 8D CA 04 0105*  	ld de,filedata
04A194 01 00 00 01 0106*  	ld bc,65536
04A198 3E 01       0107*  	ld a,mos_load
04A19A 5B CF       0108*  	RST.LIL 08h
04A19C 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
04A1A0 01 40 00 00 0110*  	ld bc,64
04A1A4 11 40 00 00 0111*  	ld de,64
04A1A8 DD 21 00 10 0112*  	ld ix,4096
       00          
04A1AD CD D8 BF 04 0113*  	call vdu_load_img
04A1B1 3E 2E       0114*  	LD A, '.'
04A1B3 5B D7       0115*  	RST.LIL 10h
04A1B5             0116*  
04A1B5 21 7D A4 04 0117*  	ld hl,F_UI_bj_knife_02
04A1B9 11 8D CA 04 0118*  	ld de,filedata
04A1BD 01 00 00 01 0119*  	ld bc,65536
04A1C1 3E 01       0120*  	ld a,mos_load
04A1C3 5B CF       0121*  	RST.LIL 08h
04A1C5 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
04A1C9 01 40 00 00 0123*  	ld bc,64
04A1CD 11 40 00 00 0124*  	ld de,64
04A1D1 DD 21 00 10 0125*  	ld ix,4096
       00          
04A1D6 CD D8 BF 04 0126*  	call vdu_load_img
04A1DA 3E 2E       0127*  	LD A, '.'
04A1DC 5B D7       0128*  	RST.LIL 10h
04A1DE             0129*  
04A1DE 21 95 A4 04 0130*  	ld hl,F_UI_bj_knife_03
04A1E2 11 8D CA 04 0131*  	ld de,filedata
04A1E6 01 00 00 01 0132*  	ld bc,65536
04A1EA 3E 01       0133*  	ld a,mos_load
04A1EC 5B CF       0134*  	RST.LIL 08h
04A1EE 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
04A1F2 01 40 00 00 0136*  	ld bc,64
04A1F6 11 40 00 00 0137*  	ld de,64
04A1FA DD 21 00 10 0138*  	ld ix,4096
       00          
04A1FF CD D8 BF 04 0139*  	call vdu_load_img
04A203 3E 2E       0140*  	LD A, '.'
04A205 5B D7       0141*  	RST.LIL 10h
04A207             0142*  
04A207 21 AD A4 04 0143*  	ld hl,F_UI_bj_knife_04
04A20B 11 8D CA 04 0144*  	ld de,filedata
04A20F 01 00 00 01 0145*  	ld bc,65536
04A213 3E 01       0146*  	ld a,mos_load
04A215 5B CF       0147*  	RST.LIL 08h
04A217 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
04A21B 01 40 00 00 0149*  	ld bc,64
04A21F 11 40 00 00 0150*  	ld de,64
04A223 DD 21 00 10 0151*  	ld ix,4096
       00          
04A228 CD D8 BF 04 0152*  	call vdu_load_img
04A22C 3E 2E       0153*  	LD A, '.'
04A22E 5B D7       0154*  	RST.LIL 10h
04A230             0155*  
04A230 21 C5 A4 04 0156*  	ld hl,F_UI_bj_machine_gun_00
04A234 11 8D CA 04 0157*  	ld de,filedata
04A238 01 00 00 01 0158*  	ld bc,65536
04A23C 3E 01       0159*  	ld a,mos_load
04A23E 5B CF       0160*  	RST.LIL 08h
04A240 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
04A244 01 40 00 00 0162*  	ld bc,64
04A248 11 40 00 00 0163*  	ld de,64
04A24C DD 21 00 10 0164*  	ld ix,4096
       00          
04A251 CD D8 BF 04 0165*  	call vdu_load_img
04A255 3E 2E       0166*  	LD A, '.'
04A257 5B D7       0167*  	RST.LIL 10h
04A259             0168*  
04A259 21 E3 A4 04 0169*  	ld hl,F_UI_bj_machine_gun_01
04A25D 11 8D CA 04 0170*  	ld de,filedata
04A261 01 00 00 01 0171*  	ld bc,65536
04A265 3E 01       0172*  	ld a,mos_load
04A267 5B CF       0173*  	RST.LIL 08h
04A269 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
04A26D 01 40 00 00 0175*  	ld bc,64
04A271 11 40 00 00 0176*  	ld de,64
04A275 DD 21 00 10 0177*  	ld ix,4096
       00          
04A27A CD D8 BF 04 0178*  	call vdu_load_img
04A27E 3E 2E       0179*  	LD A, '.'
04A280 5B D7       0180*  	RST.LIL 10h
04A282             0181*  
04A282 21 01 A5 04 0182*  	ld hl,F_UI_bj_machine_gun_02
04A286 11 8D CA 04 0183*  	ld de,filedata
04A28A 01 00 00 01 0184*  	ld bc,65536
04A28E 3E 01       0185*  	ld a,mos_load
04A290 5B CF       0186*  	RST.LIL 08h
04A292 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
04A296 01 40 00 00 0188*  	ld bc,64
04A29A 11 40 00 00 0189*  	ld de,64
04A29E DD 21 00 10 0190*  	ld ix,4096
       00          
04A2A3 CD D8 BF 04 0191*  	call vdu_load_img
04A2A7 3E 2E       0192*  	LD A, '.'
04A2A9 5B D7       0193*  	RST.LIL 10h
04A2AB             0194*  
04A2AB 21 1F A5 04 0195*  	ld hl,F_UI_bj_machine_gun_03
04A2AF 11 8D CA 04 0196*  	ld de,filedata
04A2B3 01 00 00 01 0197*  	ld bc,65536
04A2B7 3E 01       0198*  	ld a,mos_load
04A2B9 5B CF       0199*  	RST.LIL 08h
04A2BB 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
04A2BF 01 40 00 00 0201*  	ld bc,64
04A2C3 11 40 00 00 0202*  	ld de,64
04A2C7 DD 21 00 10 0203*  	ld ix,4096
       00          
04A2CC CD D8 BF 04 0204*  	call vdu_load_img
04A2D0 3E 2E       0205*  	LD A, '.'
04A2D2 5B D7       0206*  	RST.LIL 10h
04A2D4             0207*  
04A2D4 21 3D A5 04 0208*  	ld hl,F_UI_bj_machine_gun_04
04A2D8 11 8D CA 04 0209*  	ld de,filedata
04A2DC 01 00 00 01 0210*  	ld bc,65536
04A2E0 3E 01       0211*  	ld a,mos_load
04A2E2 5B CF       0212*  	RST.LIL 08h
04A2E4 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
04A2E8 01 40 00 00 0214*  	ld bc,64
04A2EC 11 40 00 00 0215*  	ld de,64
04A2F0 DD 21 00 10 0216*  	ld ix,4096
       00          
04A2F5 CD D8 BF 04 0217*  	call vdu_load_img
04A2F9 3E 2E       0218*  	LD A, '.'
04A2FB 5B D7       0219*  	RST.LIL 10h
04A2FD             0220*  
04A2FD 21 5B A5 04 0221*  	ld hl,F_UI_bj_pistol_00
04A301 11 8D CA 04 0222*  	ld de,filedata
04A305 01 00 00 01 0223*  	ld bc,65536
04A309 3E 01       0224*  	ld a,mos_load
04A30B 5B CF       0225*  	RST.LIL 08h
04A30D 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
04A311 01 40 00 00 0227*  	ld bc,64
04A315 11 40 00 00 0228*  	ld de,64
04A319 DD 21 00 10 0229*  	ld ix,4096
       00          
04A31E CD D8 BF 04 0230*  	call vdu_load_img
04A322 3E 2E       0231*  	LD A, '.'
04A324 5B D7       0232*  	RST.LIL 10h
04A326             0233*  
04A326 21 74 A5 04 0234*  	ld hl,F_UI_bj_pistol_01
04A32A 11 8D CA 04 0235*  	ld de,filedata
04A32E 01 00 00 01 0236*  	ld bc,65536
04A332 3E 01       0237*  	ld a,mos_load
04A334 5B CF       0238*  	RST.LIL 08h
04A336 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
04A33A 01 40 00 00 0240*  	ld bc,64
04A33E 11 40 00 00 0241*  	ld de,64
04A342 DD 21 00 10 0242*  	ld ix,4096
       00          
04A347 CD D8 BF 04 0243*  	call vdu_load_img
04A34B 3E 2E       0244*  	LD A, '.'
04A34D 5B D7       0245*  	RST.LIL 10h
04A34F             0246*  
04A34F 21 8D A5 04 0247*  	ld hl,F_UI_bj_pistol_02
04A353 11 8D CA 04 0248*  	ld de,filedata
04A357 01 00 00 01 0249*  	ld bc,65536
04A35B 3E 01       0250*  	ld a,mos_load
04A35D 5B CF       0251*  	RST.LIL 08h
04A35F 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
04A363 01 40 00 00 0253*  	ld bc,64
04A367 11 40 00 00 0254*  	ld de,64
04A36B DD 21 00 10 0255*  	ld ix,4096
       00          
04A370 CD D8 BF 04 0256*  	call vdu_load_img
04A374 3E 2E       0257*  	LD A, '.'
04A376 5B D7       0258*  	RST.LIL 10h
04A378             0259*  
04A378 21 A6 A5 04 0260*  	ld hl,F_UI_bj_pistol_03
04A37C 11 8D CA 04 0261*  	ld de,filedata
04A380 01 00 00 01 0262*  	ld bc,65536
04A384 3E 01       0263*  	ld a,mos_load
04A386 5B CF       0264*  	RST.LIL 08h
04A388 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
04A38C 01 40 00 00 0266*  	ld bc,64
04A390 11 40 00 00 0267*  	ld de,64
04A394 DD 21 00 10 0268*  	ld ix,4096
       00          
04A399 CD D8 BF 04 0269*  	call vdu_load_img
04A39D 3E 2E       0270*  	LD A, '.'
04A39F 5B D7       0271*  	RST.LIL 10h
04A3A1             0272*  
04A3A1 21 BF A5 04 0273*  	ld hl,F_UI_bj_pistol_04
04A3A5 11 8D CA 04 0274*  	ld de,filedata
04A3A9 01 00 00 01 0275*  	ld bc,65536
04A3AD 3E 01       0276*  	ld a,mos_load
04A3AF 5B CF       0277*  	RST.LIL 08h
04A3B1 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
04A3B5 01 40 00 00 0279*  	ld bc,64
04A3B9 11 40 00 00 0280*  	ld de,64
04A3BD DD 21 00 10 0281*  	ld ix,4096
       00          
04A3C2 CD D8 BF 04 0282*  	call vdu_load_img
04A3C6 3E 2E       0283*  	LD A, '.'
04A3C8 5B D7       0284*  	RST.LIL 10h
04A3CA             0285*  
04A3CA C9          0286*  	ret
04A3CB             0287*  
04A3CB 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A3E5 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A3FF 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A419 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A433 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A44D 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
04A465 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
04A47D 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04A495 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
04A4AD 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04A4C5 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A4E3 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A501 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A51F 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A53D 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A55B 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
04A574 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
04A58D 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04A5A6 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
04A5BF 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
04A5D8             0023   	include "src/asm/sprites.asm"
04A5D8             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
04A5D8             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
04A5D8             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
04A5D8             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
04A5D8             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
04A5D8             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
04A5D8             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
04A5D8             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
04A5D8             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
04A5D8             0010*  sprite_anim_timer:      equ 08 ; 1 byte  - when hits zero, draw next animation frame
04A5D8             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
04A5D8             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
04A5D8             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, binary
04A5D8             0014*  sprite_health_modifier: equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
04A5D8             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
04A5D8             0016*  sprite_record_size:     equ 16 ; 16 bytes per sprite record
04A5D8             0017*  
04A5D8             0018*  ; sprite_triggers_mask defs
04A5D8             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
04A5D8             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
04A5D8             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
04A5D8             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
04A5D8             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
04A5D8             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
04A5D8             0025*  
04A5D8             0026*  ; obj_ids for selected sprites
04A5D8             0027*  ; these are the sprite_obj values for the selected sprites
04A5D8             0028*  OBJ_ID_DEAD_GUARD:      equ 56
04A5D8             0029*  OBJ_ID_EXPLOSION:       equ 60
04A5D8             0030*  
04A5D8             0031*  ; ###### SPRITE TABLE VARIABLES ######
04A5D8             0032*  ; maximum number of sprites
04A5D8             0033*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
04A5D8             0034*  table_total_bytes:      equ table_max_records*sprite_record_size
04A5D8             0035*  
04A5D8             0036*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
04A5D8             0037*  sprite_table_base:       equ 0xB7FC00
04A5D8             0038*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
04A5D8             0039*  
04A5D8             0040*  ; pointer to top address of current record, initialized to sprite_table_base
04A5D8 00 FC B7    0041*  sprite_table_pointer: dl sprite_table_base
04A5DB             0042*  ; how many active sprites
04A5DB 00          0043*  table_active_sprites: db 0x00
04A5DC             0044*  ; flag indicating collision with screen edge
04A5DC             0045*  ; uses orientation codes to specify which edge(s)
04A5DC 00          0046*  sprite_screen_edge: db #00
04A5DD             0047*  ; next sprite id to use
04A5DD 00          0048*  sprite_next_id: db 0
04A5DE             0049*  
04A5DE             0050*  ; ######### COLLISION SPRITE PARAMETERS ##########
04A5DE             0051*  ; integer coordinates are all that are needed for collision calculations
04A5DE 00          0052*  collision_x: db 0x00
04A5DF 00          0053*  collision_y: db 0x00
04A5E0 00          0054*  collision_dim_x: db 0x00
04A5E1 00          0055*  collision_dim_y: db 0x00
04A5E2             0056*  
04A5E2             0057*  ; scratch variables
04A5E2 00          0058*  x: db 0x00 ; 8-bit signed integer
04A5E3 00          0059*  y: db 0x00 ; 8-bit signed integer
04A5E4 00 00 00    0060*  x0: dl 0x000000 ; 16.8 signed fixed place
04A5E7 00 00 00    0061*  y0: dl 0x000000 ; 16.8 signed fixed place
04A5EA 00 00 00    0062*  incx1: dl 0x000000 ; 16.8 signed fixed place
04A5ED 00 00 00    0063*  incy1: dl 0x000000 ; 16.8 signed fixed place
04A5F0 00 00 00    0064*  incx2: dl 0x000000 ; 16.8 signed fixed place
04A5F3 00 00 00    0065*  incy2: dl 0x000000 ; 16.8 signed fixed place
04A5F6             0066*  
04A5F6             0067*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04A5F6 00 00 00    0068*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04A5F9 00 00 00    0069*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A5FC 00 00 00    0070*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A5FF             0071*  
04A5FF             0072*  ; gets the next available sprite id
04A5FF             0073*  ; inputs; none
04A5FF             0074*  ; returns: if new sprite available, a = sprite id,
04A5FF             0075*  ;      ix pointing to new sprite vars, carry set
04A5FF             0076*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04A5FF             0077*  ; destroys: a,b,hl,ix
04A5FF             0078*  ; affects: bumps table_active_sprites by one
04A5FF             0079*  table_get_next_id:
04A5FF DD 21 00 FC 0080*      ld ix,sprite_table_base
       B7          
04A604 11 10 00 00 0081*      ld de,sprite_record_size
04A608 06 40       0082*      ld b,table_max_records
04A60A             0083*  @loop:
04A60A DD 7E 01    0084*      ld a,(ix+sprite_obj)
04A60D A7          0085*      and a
04A60E 28 06       0086*      jr z,@found
04A610 DD 19       0087*      add ix,de
04A612 10 F6       0088*      djnz @loop
04A614             0089*  @notfound:
04A614 AF          0090*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04A615 C9          0091*      ret
04A616             0092*  @found:
04A616             0093*  ; bump number of active sprites
04A616 21 DB A5 04 0094*      ld hl,table_active_sprites
04A61A 34          0095*      inc (hl)
04A61B             0096*  ; return sprite id
04A61B 3E 40       0097*      ld a,table_max_records
04A61D 90          0098*      sub b
04A61E 32 DD A5 04 0099*      ld (sprite_next_id),a
04A622 37          0100*      scf ; sets carry flag indicating we found a free sprite
04A623 C9          0101*      ret ; done
04A624             0102*  
04A624             0103*  ; deactivate the sprite with the given id
04A624             0104*  ; inputs: a = sprite id
04A624             0105*  ; outputs: nothing
04A624             0106*  ; destroys: a,ix,de
04A624             0107*  ; affects: decrements table_active_sprites by one
04A624             0108*  table_deactivate_sprite:
04A624 F5          0109*      push af ; save sprite id bc we need it later
04A625 CD 9E B2 04 0110*      call vdu_sprite_select
04A629 CD 22 B3 04 0111*      call vdu_sprite_hide
04A62D F1          0112*      pop af ; restore sprite id
04A62E 11 00 00 00 0113*      ld de,0 ; clear deu
04A632 57          0114*      ld d,a
04A633 1E 10       0115*      ld e,sprite_record_size
04A635 ED 5C       0116*      mlt de
04A637 DD 21 00 FC 0117*      ld ix,sprite_table_base
       B7          
04A63C DD 19       0118*      add ix,de
04A63E AF          0119*      xor a
04A63F DD 77 01    0120*      ld (ix+sprite_obj),a
04A642 DD 21 DB A5 0121*      ld ix,table_active_sprites
       04          
04A647 DD 35 00    0122*      dec (ix)
04A64A C9          0123*      ret
04A64B             0124*  
04A64B             0125*  ; sets iy and sprite_table_pointer to the sprite record with the given id
04A64B             0126*  ; inputs: a = sprite id
04A64B             0127*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
04A64B             0128*  ; destroys: bc
04A64B             0129*  sprite_set_pointer:
04A64B 47          0130*      ld b,a
04A64C 0E 10       0131*      ld c,sprite_record_size
04A64E ED 4C       0132*      mlt bc
04A650 FD 21 00 FC 0133*      ld iy,sprite_table_base
       B7          
04A655 FD 09       0134*      add iy,bc
04A657 FD 22 D8 A5 0135*      ld (sprite_table_pointer),iy
       04          
04A65C C9          0136*      ret
04A65D             0137*  
04A65D             0138*  ; points ix at the map address of the sprite's current location
04A65D             0139*  ; inputs: iy pointed at sprite record
04A65D             0140*  ; outputs: ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A65D             0141*  ; destroys: af,de,hl
04A65D             0142*  sprite_get_cell:
04A65D             0143*  ; point ix at sprite's current map location
04A65D 11 00 00 00 0144*      ld de,0 ; make sure deu is zero
04A661 FD 5E 04    0145*      ld e,(iy+sprite_x)
04A664 FD 56 05    0146*      ld d,(iy+sprite_y)
04A667 CD D6 67 04 0147*      call get_cell_from_coords
04A66B C9          0148*      ret
04A66C             0149*  
04A66C             0150*  ; set the active sprite record to no sprite and remove it from the map cell it was in
04A66C             0151*  ; inputs: iy pointed at sprite record to clear
04A66C             0152*  sprite_kill:
04A66C             0153*  ; point ix at sprite's current map location
04A66C CD 5D A6 04 0154*      call sprite_get_cell
04A670             0155*  ; set sprite table record to no sprite
04A670 21 FF FF FF 0156*      ld hl,0xFFFFFF ; a string of -1s
04A674 FD 2F 00    0157*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
04A677             0158*  
04A677             0159*  ; set map cell to no sprite and normal floor
04A677 21 01 FF 1D 0160*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
04A67B DD 2F 00    0161*      ld (ix),hl
04A67E 3E FF       0162*      ld a,0xFF ; no sprite
04A680 DD 77 03    0163*      ld (ix+map_sprite_id),a ; now sprite is truly dead
04A683 C9          0164*      ret
04A684             0165*  
04A684 00          0166*  sprite_new_x: db 0x00
04A685 00          0167*  sprite_new_y: db 0x00
04A686 00          0168*                db 0x00 ; padding
04A687             0169*  
04A687             0170*  ; checks if the sprite can move to the new position
04A687             0171*  ; inputs: iy pointed at sprite record, d,e = new y,x position
04A687             0172*  ; returns: a = 1 if move legal, 0 if not
04A687             0173*  ; modifies: sprite_new_x,y populated by de with new y,x position irrespecitve of legality
04A687             0174*  sprite_check_move:
04A687 ED 53 84 A6 0175*      ld (sprite_new_x),de ; save new y,x position
       04          
04A68C             0176*  ; check whether target cell is occupied by player
04A68C 2A D1 B8 04 0177*      ld hl,(cur_x) ; h,l = player y,x position
04A690 AF          0178*      xor a ; clear carry
04A691 ED 52       0179*      sbc hl,de ; zero if player is at target cell
04A693 C2 A0 A6 04 0180*      jp nz,@not_player
04A697 3E 01       0181*      ld a,sp_use ; TODO: add melee attack behavior to sprite routines
04A699 CD 88 A7 04 0182*      call do_sprite_behavior
04A69D 3E 01       0183*      ld a,1 ; signals caller that move was legal
04A69F C9          0184*      ret
04A6A0             0185*  @not_player:
04A6A0 CD D6 67 04 0186*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A6A4             0187*  ; check whether target cell contains a sprite
04A6A4 DD 7E 03    0188*      ld a,(ix+map_sprite_id)
04A6A7 FE FF       0189*      cp 255 ; value if not sprite
04A6A9 CA AF A6 04 0190*      jp z,@not_sprite
04A6AD AF          0191*      xor a ; signals caller that move was illegal
04A6AE C9          0192*      ret
04A6AF             0193*  @not_sprite:
04A6AF             0194*  ; read map type/status mask from target cell
04A6AF DD 7E 00    0195*      ld a,(ix+map_type_status)
04A6B2 E6 01       0196*      and render_type_floor
04A6B4 C8          0197*      ret z ; target cell is not a floor so we can't move there
04A6B5             0198*  ; we are cleared for movement
04A6B5 CD DF A6 04 0199*      call sprite_move
04A6B9 3E 01       0200*      ld a,1 ; signals caller that move was legal
04A6BB C9          0201*      ret
04A6BC             0202*  
04A6BC             0203*  ; creates a new sprite at the given map position
04A6BC             0204*  ; inputs: a = obj_id, ix pointing at map address, iy pointing at sprite address
04A6BC             0205*  sprite_spawn:
04A6BC             0206*  ; copy obj_id to map_obj_id
04A6BC DD 77 02    0207*      ld (ix+map_obj_id),a
04A6BF             0208*  ; lookup map_type_status and sprite_obj from obj_id
04A6BF D6 0A       0209*      sub 10 ; first record in list is 10
04A6C1 21 A2 81 04 0210*      ld hl,map_type_status_lut
04A6C5 47          0211*      ld b,a
04A6C6 0E 02       0212*      ld c,2 ; two bytes per record
04A6C8 ED 4C       0213*      mlt bc
04A6CA 09          0214*      add hl,bc ; hl points to lookup record
04A6CB ED 27       0215*      ld hl,(hl) ; l = map_type_status, h = sprite_obj
04A6CD             0216*  ; copy sprite_obj to sprite record
04A6CD FD 74 01    0217*      ld (iy+sprite_obj),h
04A6D0             0218*  ; copy map_type_status to map cell
04A6D0 DD 75 00    0219*      ld (ix+map_type_status),l
04A6D3             0220*  ; write sprite_id to map cell
04A6D3 FD 7E 00    0221*      ld a,(iy+sprite_id)
04A6D6 DD 77 03    0222*      ld (ix+map_sprite_id),a
04A6D9             0223*  ; write 255 to map_img_idx to indicate type sprite
04A6D9 3E FF       0224*      ld a,255
04A6DB DD 77 01    0225*      ld (ix+map_img_idx),a
04A6DE             0226*  ; ; TODO: this will be clunky to do until the sprite table layout is adjusted to better separate definitional from state data
04A6DE             0227*  ; ; initialize sprite data
04A6DE             0228*  ;     ld a,sp_init
04A6DE             0229*  ;     call sprite_init_data
04A6DE C9          0230*      ret
04A6DF             0231*  
04A6DF             0232*  ; moves the sprite to the given map position
04A6DF             0233*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
04A6DF             0234*  sprite_move:
04A6DF             0235*  ; point ix to old map cell
04A6DF FD 17 04    0236*      ld de,(iy+sprite_x) ; d,e = sprite old y,x position
04A6E2 CD D6 67 04 0237*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A6E6             0238*  ; update sprite record with new position
04A6E6 ED 5B 84 A6 0239*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
04A6EB FD 1F 04    0240*      ld (iy+sprite_x),de
04A6EE             0241*  ; point iy to old map cell, ix to new map cell
04A6EE DD E5       0242*      push ix ; old map cell
04A6F0 FD E1       0243*      pop iy ; new map cell
04A6F2 CD D6 67 04 0244*      call get_cell_from_coords ; d,e already had new y,x
04A6F6             0245*  ; copy old cell status to new
04A6F6 FD 27 00    0246*      ld hl,(iy+map_type_status)
04A6F9 DD 2F 00    0247*      ld (ix+map_type_status),hl
04A6FC FD 7E 03    0248*      ld a,(iy+map_sprite_id)
04A6FF DD 77 03    0249*      ld (ix+map_sprite_id),a
04A702             0250*  ; set old map cell to no sprite and normal floor
04A702 21 01 FF 1D 0251*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dynanmically based on the defs in tiles.txt at some point
04A706 FD 2F 00    0252*      ld (iy+map_type_status),hl
04A709 3E FF       0253*      ld a,0xFF ; no sprite
04A70B FD 77 03    0254*      ld (iy+map_sprite_id),a
04A70E C9          0255*      ret
04A70F             0256*  
04A70F             0257*  ; move a sprite in a random direction
04A70F             0258*  ; inputs: iy pointed at sprite record
04A70F             0259*  ; destroys: potentially everything
04A70F             0260*  sprite_move_random:
04A70F             0261*  ; point iy at sprite record
04A70F FD 2A D8 A5 0262*      ld iy,(sprite_table_pointer)
       04          
04A714             0263*  ; set number of times to try a random direction before giving up
04A714 06 08       0264*      ld b,8
04A716             0265*  @loop:
04A716 C5          0266*      push bc ; save loop counter
04A717             0267*  ; pick a random direction
04A717 CD 45 BE 04 0268*      call rand_8
04A71B E6 03       0269*      and 3 ; direction between 0 and 3
04A71D             0270*  ; get dy,dx for moving once cell in the chosen direction
04A71D 5F          0271*      ld e,a
04A71E 16 01       0272*      ld d,1 ; distance
04A720 CD FB 67 04 0273*      call get_dx_dy ; d,e = dy,dx
04A724             0274*  ; calculate new position
04A724 FD 7E 04    0275*      ld a,(iy+sprite_x)
04A727 83          0276*      add a,e
04A728 E6 0F       0277*      and 15 ; modulo 16
04A72A 5F          0278*      ld e,a
04A72B FD 7E 05    0279*      ld a,(iy+sprite_y)
04A72E 82          0280*      add a,d
04A72F E6 0F       0281*      and 15 ; modulo 16
04A731 57          0282*      ld d,a
04A732 CD 87 A6 04 0283*      call sprite_check_move
04A736 C1          0284*      pop bc ; get back loop counter
04A737 A7          0285*      and a
04A738 C0          0286*      ret nz ; move was legal so we're done
04A739 10 DB       0287*      djnz @loop ; try again
04A73B C9          0288*      ret ; no move found in 8 tries, so we're done
04A73C             0289*  
04A73C             0290*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A73C             0291*  sprite_behavior_lookup:
04A73C A5 A7 04    0292*      dl LAMP
04A73F D3 A7 04    0293*      dl BARREL
04A742 23 A8 04    0294*      dl TABLE
04A745 51 A8 04    0295*      dl OVERHEAD_LIGHT
04A748 7F A8 04    0296*      dl RADIOACTIVE_BARREL
04A74B CF A8 04    0297*      dl HEALTH_PACK
04A74E 07 A9 04    0298*      dl GOLD_CHALISE
04A751 47 A9 04    0299*      dl GOLD_CROSS
04A754 87 A9 04    0300*      dl PLATE_OF_FOOD
04A757 BF A9 04    0301*      dl KEYCARD
04A75A FA A9 04    0302*      dl GOLD_CHEST
04A75D 3A AA 04    0303*      dl MACHINE_GUN
04A760 87 AA 04    0304*      dl GATLING_GUN
04A763 D4 AA 04    0305*      dl DOG_FOOD
04A766 0C AB 04    0306*      dl GOLD_KEY
04A769 3A AB 04    0307*      dl DOG
04A76C C4 AB 04    0308*      dl GERMAN_TROOPER
04A76F 65 AC 04    0309*      dl SS_GUARD
04A772 06 AD 04    0310*      dl DEAD_GUARD
04A775 45 AD 04    0311*      dl EXPLOSION
04A778             0312*  
04A778             0313*  ; initializes sprite data for a particular sprite type and id
04A778             0314*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A778             0315*  sprite_init_data:
04A778 3E 00       0316*      ld a,sp_init ; index for sprite init routine
04A77A CD 88 A7 04 0317*      call do_sprite_behavior ; hl points at address to copy from
04A77E ED 13 02    0318*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A781 01 0E 00 00 0319*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A785 ED B0       0320*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A787 C9          0321*      ret ; done
04A788             0322*  
04A788             0323*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A788             0324*  ; sprite behavior indices
04A788             0325*  sp_init:   equ 0
04A788             0326*  sp_use:    equ 1
04A788             0327*  sp_hurt:  equ 2
04A788             0328*  sp_kill:   equ 3
04A788             0329*  sp_see:    equ 4
04A788             0330*  sp_move:  equ 5
04A788             0331*  sp_shoot:  equ 6
04A788             0332*  
04A788             0333*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A788             0334*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A788             0335*  ;         a = type index of routine to call
04A788             0336*  do_sprite_behavior:
04A788 FD 22 D8 A5 0337*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A78D FD 46 01    0338*      ld b,(iy+sprite_obj)
04A790 0E 03       0339*      ld c,3 ; three bytes per lookup record
04A792 ED 4C       0340*      mlt bc ; bc is offset from the base of the lookup table
04A794 21 3C A7 04 0341*      ld hl,sprite_behavior_lookup
04A798 09          0342*      add hl,bc
04A799 ED 27       0343*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A79B 47          0344*      ld b,a ; b holds the routine index
04A79C 0E 03       0345*      ld c,3 ; three bytes per lookup record
04A79E ED 4C       0346*      mlt bc ; bc is offset from the base of the lookup table
04A7A0 09          0347*      add hl,bc ; hl points to the label of the routine to call
04A7A1 ED 27       0348*      ld hl,(hl) ; hl points to the routine to call
04A7A3 E9          0349*      jp (hl) ; call the behavior routine
04A7A4 C9          0350*      ret
04A7A5             0351*  
04A7A5             0352*  LAMP:
04A7A5             0353*  ; behavior routine address lookup
04A7A5 BA A7 04    0354*      dl @init
04A7A8 CD A7 04    0355*      dl @use
04A7AB CE A7 04    0356*      dl @hurt
04A7AE CF A7 04    0357*      dl @kill
04A7B1 D0 A7 04    0358*      dl @see
04A7B4 D1 A7 04    0359*      dl @move
04A7B7 D2 A7 04    0360*      dl @shoot
04A7BA             0361*  @init:
04A7BA 21 BF A7 04 0362*      ld hl,@data ; address for LDIR to copy from
04A7BE C9          0363*      ret
04A7BF             0364*  @data:
04A7BF 64          0365*      db 100 ; sprite_health
04A7C0 00          0366*      db 000 ; sprite_triggers_mask
04A7C1 00          0367*      db 000 ; sprite_x
04A7C2 00          0368*      db 000 ; sprite_y
04A7C3 00          0369*      db 000 ; sprite_orientation
04A7C4 00          0370*      db 000 ; sprite_animation
04A7C5 00          0371*      db 000 ; sprite_anim_timer
04A7C6 01          0372*      db 001 ; sprite_move_timer
04A7C7 00          0373*      db 000 ; sprite_move_step
04A7C8 00          0374*      db 000 ; sprite_points
04A7C9 00          0375*      db 000 ; sprite_health_modifier
04A7CA 00          0376*      db 000 ; sprite_unassigned_0
04A7CB 00          0377*      db 000 ; sprite_unassigned_1
04A7CC 00          0378*      db 000 ; sprite_unassigned_2
04A7CD             0379*  @use:
04A7CD C9          0380*      ret
04A7CE             0381*  @hurt:
04A7CE C9          0382*      ret
04A7CF             0383*  @kill:
04A7CF C9          0384*      ret
04A7D0             0385*  @see:
04A7D0 C9          0386*      ret
04A7D1             0387*  @move:
04A7D1 C9          0388*      ret
04A7D2             0389*  @shoot:
04A7D2 C9          0390*      ret
04A7D3             0391*  
04A7D3             0392*  BARREL:
04A7D3             0393*  ; behavior routine address lookup
04A7D3 E8 A7 04    0394*      dl @init
04A7D6 FB A7 04    0395*      dl @use
04A7D9 FC A7 04    0396*      dl @hurt
04A7DC 0D A8 04    0397*      dl @kill
04A7DF 20 A8 04    0398*      dl @see
04A7E2 21 A8 04    0399*      dl @move
04A7E5 22 A8 04    0400*      dl @shoot
04A7E8             0401*  @init:
04A7E8 21 ED A7 04 0402*      ld hl,@data ; address for LDIR to copy from
04A7EC C9          0403*      ret
04A7ED             0404*  @data:
04A7ED 12          0405*      db 018 ; sprite_health
04A7EE 00          0406*      db 000 ; sprite_triggers_mask
04A7EF 00          0407*      db 000 ; sprite_x
04A7F0 00          0408*      db 000 ; sprite_y
04A7F1 00          0409*      db 000 ; sprite_orientation
04A7F2 00          0410*      db 000 ; sprite_animation
04A7F3 00          0411*      db 000 ; sprite_anim_timer
04A7F4 01          0412*      db 001 ; sprite_move_timer
04A7F5 00          0413*      db 000 ; sprite_move_step
04A7F6 00          0414*      db 000 ; sprite_points
04A7F7 CE          0415*      db -50 ; sprite_health_modifier
04A7F8 00          0416*      db 000 ; sprite_unassigned_0
04A7F9 00          0417*      db 000 ; sprite_unassigned_1
04A7FA 00          0418*      db 000 ; sprite_unassigned_2
04A7FB             0419*  @use:
04A7FB C9          0420*      ret
04A7FC             0421*  @hurt:
04A7FC 3E FF       0422*      ld a,255 ; kill player's shot
04A7FE 32 E1 B8 04 0423*      ld (plyr_shot_status),a
04A802 3A E5 B8 04 0424*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A806 FD 86 02    0425*      add a,(iy+sprite_health)
04A809 FD 77 02    0426*      ld (iy+sprite_health),a
04A80C F0          0427*      ret p ; if health is positive, return
04A80D             0428*      ; otherwise fall through to kill sprite
04A80D             0429*  @kill:
04A80D FD E5       0430*      push iy
04A80F CD 84 C5 04 0431*      call sfx_play_explode
04A813 FD E1       0432*      pop iy
04A815 3E 3C       0433*      ld a,OBJ_ID_EXPLOSION
04A817 CD BC A6 04 0434*      call sprite_spawn
04A81B FD 36 08 05 0435*      ld (iy+sprite_anim_timer),5
04A81F C9          0436*      ret
04A820             0437*  @see:
04A820 C9          0438*      ret
04A821             0439*  @move:
04A821 C9          0440*      ret
04A822             0441*  @shoot:
04A822 C9          0442*      ret
04A823             0443*  
04A823             0444*  TABLE:
04A823             0445*  ; behavior routine address lookup
04A823 38 A8 04    0446*      dl @init
04A826 4B A8 04    0447*      dl @use
04A829 4C A8 04    0448*      dl @hurt
04A82C 4D A8 04    0449*      dl @kill
04A82F 4E A8 04    0450*      dl @see
04A832 4F A8 04    0451*      dl @move
04A835 50 A8 04    0452*      dl @shoot
04A838             0453*  @init:
04A838 21 3D A8 04 0454*      ld hl,@data ; address for LDIR to copy from
04A83C C9          0455*      ret
04A83D             0456*  @data:
04A83D 64          0457*      db 100 ; sprite_health
04A83E 00          0458*      db 000 ; sprite_triggers_mask
04A83F 00          0459*      db 000 ; sprite_x
04A840 00          0460*      db 000 ; sprite_y
04A841 00          0461*      db 000 ; sprite_orientation
04A842 00          0462*      db 000 ; sprite_animation
04A843 00          0463*      db 000 ; sprite_anim_timer
04A844 01          0464*      db 001 ; sprite_move_timer
04A845 00          0465*      db 000 ; sprite_move_step
04A846 00          0466*      db 000 ; sprite_points
04A847 00          0467*      db 000 ; sprite_health_modifier
04A848 00          0468*      db 000 ; sprite_unassigned_0
04A849 00          0469*      db 000 ; sprite_unassigned_1
04A84A 00          0470*      db 000 ; sprite_unassigned_2
04A84B             0471*  @use:
04A84B C9          0472*      ret
04A84C             0473*  @hurt:
04A84C C9          0474*      ret
04A84D             0475*  @kill:
04A84D C9          0476*      ret
04A84E             0477*  @see:
04A84E C9          0478*      ret
04A84F             0479*  @move:
04A84F C9          0480*      ret
04A850             0481*  @shoot:
04A850 C9          0482*      ret
04A851             0483*  
04A851             0484*  OVERHEAD_LIGHT:
04A851             0485*  ; behavior routine address lookup
04A851 66 A8 04    0486*      dl @init
04A854 79 A8 04    0487*      dl @use
04A857 7A A8 04    0488*      dl @hurt
04A85A 7B A8 04    0489*      dl @kill
04A85D 7C A8 04    0490*      dl @see
04A860 7D A8 04    0491*      dl @move
04A863 7E A8 04    0492*      dl @shoot
04A866             0493*  @init:
04A866 21 6B A8 04 0494*      ld hl,@data ; address for LDIR to copy from
04A86A C9          0495*      ret
04A86B             0496*  @data:
04A86B 64          0497*      db 100 ; sprite_health
04A86C 00          0498*      db 000 ; sprite_triggers_mask
04A86D 00          0499*      db 000 ; sprite_x
04A86E 00          0500*      db 000 ; sprite_y
04A86F 00          0501*      db 000 ; sprite_orientation
04A870 00          0502*      db 000 ; sprite_animation
04A871 00          0503*      db 000 ; sprite_anim_timer
04A872 01          0504*      db 001 ; sprite_move_timer
04A873 00          0505*      db 000 ; sprite_move_step
04A874 00          0506*      db 000 ; sprite_points
04A875 00          0507*      db 000 ; sprite_health_modifier
04A876 00          0508*      db 000 ; sprite_unassigned_0
04A877 00          0509*      db 000 ; sprite_unassigned_1
04A878 00          0510*      db 000 ; sprite_unassigned_2
04A879             0511*  @use:
04A879 C9          0512*      ret
04A87A             0513*  @hurt:
04A87A C9          0514*      ret
04A87B             0515*  @kill:
04A87B C9          0516*      ret
04A87C             0517*  @see:
04A87C C9          0518*      ret
04A87D             0519*  @move:
04A87D C9          0520*      ret
04A87E             0521*  @shoot:
04A87E C9          0522*      ret
04A87F             0523*  
04A87F             0524*  RADIOACTIVE_BARREL:
04A87F             0525*  ; behavior routine address lookup
04A87F 94 A8 04    0526*      dl @init
04A882 A7 A8 04    0527*      dl @use
04A885 A8 A8 04    0528*      dl @hurt
04A888 B9 A8 04    0529*      dl @kill
04A88B CC A8 04    0530*      dl @see
04A88E CD A8 04    0531*      dl @move
04A891 CE A8 04    0532*      dl @shoot
04A894             0533*  @init:
04A894 21 99 A8 04 0534*      ld hl,@data ; address for LDIR to copy from
04A898 C9          0535*      ret
04A899             0536*  @data:
04A899 18          0537*      db 024 ; sprite_health
04A89A 00          0538*      db 000 ; sprite_triggers_mask
04A89B 00          0539*      db 000 ; sprite_x
04A89C 00          0540*      db 000 ; sprite_y
04A89D 00          0541*      db 000 ; sprite_orientation
04A89E 00          0542*      db 000 ; sprite_animation
04A89F 00          0543*      db 000 ; sprite_anim_timer
04A8A0 01          0544*      db 001 ; sprite_move_timer
04A8A1 00          0545*      db 000 ; sprite_move_step
04A8A2 00          0546*      db 000 ; sprite_points
04A8A3 B5          0547*      db -75 ; sprite_health_modifier
04A8A4 00          0548*      db 000 ; sprite_unassigned_0
04A8A5 00          0549*      db 000 ; sprite_unassigned_1
04A8A6 00          0550*      db 000 ; sprite_unassigned_2
04A8A7             0551*  @use:
04A8A7 C9          0552*      ret
04A8A8             0553*  @hurt:
04A8A8 3E FF       0554*      ld a,255 ; kill player's shot
04A8AA 32 E1 B8 04 0555*      ld (plyr_shot_status),a
04A8AE 3A E5 B8 04 0556*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A8B2 FD 86 02    0557*      add a,(iy+sprite_health)
04A8B5 FD 77 02    0558*      ld (iy+sprite_health),a
04A8B8 F0          0559*      ret p ; if health is positive, return
04A8B9             0560*      ; otherwise fall through to kill sprite
04A8B9             0561*  @kill:
04A8B9 FD E5       0562*      push iy
04A8BB CD 84 C5 04 0563*      call sfx_play_explode
04A8BF FD E1       0564*      pop iy
04A8C1 3E 3C       0565*      ld a,OBJ_ID_EXPLOSION
04A8C3 CD BC A6 04 0566*      call sprite_spawn
04A8C7 FD 36 08 05 0567*      ld (iy+sprite_anim_timer),5
04A8CB C9          0568*      ret
04A8CC             0569*  @see:
04A8CC C9          0570*      ret
04A8CD             0571*  @move:
04A8CD C9          0572*      ret
04A8CE             0573*  @shoot:
04A8CE C9          0574*      ret
04A8CF             0575*  
04A8CF             0576*  HEALTH_PACK:
04A8CF             0577*  ; behavior routine address lookup
04A8CF E4 A8 04    0578*      dl @init
04A8D2 F7 A8 04    0579*      dl @use
04A8D5 02 A9 04    0580*      dl @hurt
04A8D8 03 A9 04    0581*      dl @kill
04A8DB 04 A9 04    0582*      dl @see
04A8DE 05 A9 04    0583*      dl @move
04A8E1 06 A9 04    0584*      dl @shoot
04A8E4             0585*  @init:
04A8E4 21 E9 A8 04 0586*      ld hl,@data ; address for LDIR to copy from
04A8E8 C9          0587*      ret
04A8E9             0588*  @data:
04A8E9 64          0589*      db 100 ; sprite_health
04A8EA 00          0590*      db 000 ; sprite_triggers_mask
04A8EB 00          0591*      db 000 ; sprite_x
04A8EC 00          0592*      db 000 ; sprite_y
04A8ED 00          0593*      db 000 ; sprite_orientation
04A8EE 00          0594*      db 000 ; sprite_animation
04A8EF 00          0595*      db 000 ; sprite_anim_timer
04A8F0 01          0596*      db 001 ; sprite_move_timer
04A8F1 00          0597*      db 000 ; sprite_move_step
04A8F2 00          0598*      db 000 ; sprite_points
04A8F3 14          0599*      db 020 ; sprite_health_modifier
04A8F4 00          0600*      db 000 ; sprite_unassigned_0
04A8F5 00          0601*      db 000 ; sprite_unassigned_1
04A8F6 00          0602*      db 000 ; sprite_unassigned_2
04A8F7             0603*  @use:
04A8F7 FD 7E 0C    0604*      ld a,(iy+sprite_health_modifier)
04A8FA CD 04 BB 04 0605*      call plyr_add_health
04A8FE C3 6C A6 04 0606*      jp sprite_kill
04A902             0607*  @hurt:
04A902 C9          0608*      ret
04A903             0609*  @kill:
04A903 C9          0610*      ret
04A904             0611*  @see:
04A904 C9          0612*      ret
04A905             0613*  @move:
04A905 C9          0614*      ret
04A906             0615*  @shoot:
04A906 C9          0616*      ret
04A907             0617*  
04A907             0618*  GOLD_CHALISE:
04A907             0619*  ; behavior routine address lookup
04A907 1C A9 04    0620*      dl @init
04A90A 2F A9 04    0621*      dl @use
04A90D 42 A9 04    0622*      dl @hurt
04A910 43 A9 04    0623*      dl @kill
04A913 44 A9 04    0624*      dl @see
04A916 45 A9 04    0625*      dl @move
04A919 46 A9 04    0626*      dl @shoot
04A91C             0627*  @init:
04A91C 21 21 A9 04 0628*      ld hl,@data ; address for LDIR to copy from
04A920 C9          0629*      ret
04A921             0630*  @data:
04A921 64          0631*      db 100 ; sprite_health
04A922 00          0632*      db 000 ; sprite_triggers_mask
04A923 00          0633*      db 000 ; sprite_x
04A924 00          0634*      db 000 ; sprite_y
04A925 00          0635*      db 000 ; sprite_orientation
04A926 00          0636*      db 000 ; sprite_animation
04A927 00          0637*      db 000 ; sprite_anim_timer
04A928 01          0638*      db 001 ; sprite_move_timer
04A929 00          0639*      db 000 ; sprite_move_step
04A92A 64          0640*      db 100 ; sprite_points
04A92B 00          0641*      db 000 ; sprite_health_modifier
04A92C 00          0642*      db 000 ; sprite_unassigned_0
04A92D 00          0643*      db 000 ; sprite_unassigned_1
04A92E 00          0644*      db 000 ; sprite_unassigned_2
04A92F             0645*  @use:
04A92F FD E5       0646*      push iy
04A931 CD 90 C5 04 0647*      call sfx_play_got_treasure
04A935 FD E1       0648*      pop iy
04A937 FD 7E 0B    0649*      ld a,(iy+sprite_points)
04A93A CD 62 BB 04 0650*      call plyr_mod_score
04A93E C3 6C A6 04 0651*      jp sprite_kill
04A942             0652*  @hurt:
04A942 C9          0653*      ret
04A943             0654*  @kill:
04A943 C9          0655*      ret
04A944             0656*  @see:
04A944 C9          0657*      ret
04A945             0658*  @move:
04A945 C9          0659*      ret
04A946             0660*  @shoot:
04A946 C9          0661*      ret
04A947             0662*  
04A947             0663*  GOLD_CROSS:
04A947             0664*  ; behavior routine address lookup
04A947 5C A9 04    0665*      dl @init
04A94A 6F A9 04    0666*      dl @use
04A94D 82 A9 04    0667*      dl @hurt
04A950 83 A9 04    0668*      dl @kill
04A953 84 A9 04    0669*      dl @see
04A956 85 A9 04    0670*      dl @move
04A959 86 A9 04    0671*      dl @shoot
04A95C             0672*  @init:
04A95C 21 61 A9 04 0673*      ld hl,@data ; address for LDIR to copy from
04A960 C9          0674*      ret
04A961             0675*  @data:
04A961 64          0676*      db 100 ; sprite_health
04A962 00          0677*      db 000 ; sprite_triggers_mask
04A963 00          0678*      db 000 ; sprite_x
04A964 00          0679*      db 000 ; sprite_y
04A965 00          0680*      db 000 ; sprite_orientation
04A966 00          0681*      db 000 ; sprite_animation
04A967 00          0682*      db 000 ; sprite_anim_timer
04A968 01          0683*      db 001 ; sprite_move_timer
04A969 00          0684*      db 000 ; sprite_move_step
04A96A 32          0685*      db 050 ; sprite_points
04A96B 00          0686*      db 000 ; sprite_health_modifier
04A96C 00          0687*      db 000 ; sprite_unassigned_0
04A96D 00          0688*      db 000 ; sprite_unassigned_1
04A96E 00          0689*      db 000 ; sprite_unassigned_2
04A96F             0690*  @use:
04A96F FD E5       0691*      push iy
04A971 CD 90 C5 04 0692*      call sfx_play_got_treasure
04A975 FD E1       0693*      pop iy
04A977 FD 7E 0B    0694*      ld a,(iy+sprite_points)
04A97A CD 62 BB 04 0695*      call plyr_mod_score
04A97E C3 6C A6 04 0696*      jp sprite_kill
04A982             0697*  @hurt:
04A982 C9          0698*      ret
04A983             0699*  @kill:
04A983 C9          0700*      ret
04A984             0701*  @see:
04A984 C9          0702*      ret
04A985             0703*  @move:
04A985 C9          0704*      ret
04A986             0705*  @shoot:
04A986 C9          0706*      ret
04A987             0707*  
04A987             0708*  PLATE_OF_FOOD:
04A987             0709*  ; behavior routine address lookup
04A987 9C A9 04    0710*      dl @init
04A98A AF A9 04    0711*      dl @use
04A98D BA A9 04    0712*      dl @hurt
04A990 BB A9 04    0713*      dl @kill
04A993 BC A9 04    0714*      dl @see
04A996 BD A9 04    0715*      dl @move
04A999 BE A9 04    0716*      dl @shoot
04A99C             0717*  @init:
04A99C 21 A1 A9 04 0718*      ld hl,@data ; address for LDIR to copy from
04A9A0 C9          0719*      ret
04A9A1             0720*  @data:
04A9A1 64          0721*      db 100 ; sprite_health
04A9A2 00          0722*      db 000 ; sprite_triggers_mask
04A9A3 00          0723*      db 000 ; sprite_x
04A9A4 00          0724*      db 000 ; sprite_y
04A9A5 00          0725*      db 000 ; sprite_orientation
04A9A6 00          0726*      db 000 ; sprite_animation
04A9A7 00          0727*      db 000 ; sprite_anim_timer
04A9A8 01          0728*      db 001 ; sprite_move_timer
04A9A9 00          0729*      db 000 ; sprite_move_step
04A9AA 00          0730*      db 000 ; sprite_points
04A9AB 0A          0731*      db 010 ; sprite_health_modifier
04A9AC 00          0732*      db 000 ; sprite_unassigned_0
04A9AD 00          0733*      db 000 ; sprite_unassigned_1
04A9AE 00          0734*      db 000 ; sprite_unassigned_2
04A9AF             0735*  @use:
04A9AF FD 7E 0C    0736*      ld a,(iy+sprite_health_modifier)
04A9B2 CD 04 BB 04 0737*      call plyr_add_health
04A9B6 C3 6C A6 04 0738*      jp sprite_kill
04A9BA             0739*  @hurt:
04A9BA C9          0740*      ret
04A9BB             0741*  @kill:
04A9BB C9          0742*      ret
04A9BC             0743*  @see:
04A9BC C9          0744*      ret
04A9BD             0745*  @move:
04A9BD C9          0746*      ret
04A9BE             0747*  @shoot:
04A9BE C9          0748*      ret
04A9BF             0749*  
04A9BF             0750*  KEYCARD:
04A9BF             0751*  ; behavior routine address lookup
04A9BF D4 A9 04    0752*      dl @init
04A9C2 E7 A9 04    0753*      dl @use
04A9C5 F5 A9 04    0754*      dl @hurt
04A9C8 F6 A9 04    0755*      dl @kill
04A9CB F7 A9 04    0756*      dl @see
04A9CE F8 A9 04    0757*      dl @move
04A9D1 F9 A9 04    0758*      dl @shoot
04A9D4             0759*  @init:
04A9D4 21 D9 A9 04 0760*      ld hl,@data ; address for LDIR to copy from
04A9D8 C9          0761*      ret
04A9D9             0762*  @data:
04A9D9 64          0763*      db 100 ; sprite_health
04A9DA 00          0764*      db 000 ; sprite_triggers_mask
04A9DB 00          0765*      db 000 ; sprite_x
04A9DC 00          0766*      db 000 ; sprite_y
04A9DD 00          0767*      db 000 ; sprite_orientation
04A9DE 00          0768*      db 000 ; sprite_animation
04A9DF 00          0769*      db 000 ; sprite_anim_timer
04A9E0 01          0770*      db 001 ; sprite_move_timer
04A9E1 00          0771*      db 000 ; sprite_move_step
04A9E2 00          0772*      db 000 ; sprite_points
04A9E3 00          0773*      db 000 ; sprite_health_modifier
04A9E4 00          0774*      db 000 ; sprite_unassigned_0
04A9E5 00          0775*      db 000 ; sprite_unassigned_1
04A9E6 00          0776*      db 000 ; sprite_unassigned_2
04A9E7             0777*  @use:
04A9E7 3E 08       0778*      ld a,8
04A9E9 CD 71 BB 04 0779*      call plyr_add_ammo
04A9ED CD A8 C5 04 0780*      call sfx_play_gun_reload
04A9F1 C3 6C A6 04 0781*      jp sprite_kill
04A9F5             0782*  @hurt:
04A9F5 C9          0783*      ret
04A9F6             0784*  @kill:
04A9F6 C9          0785*      ret
04A9F7             0786*  @see:
04A9F7 C9          0787*      ret
04A9F8             0788*  @move:
04A9F8 C9          0789*      ret
04A9F9             0790*  @shoot:
04A9F9 C9          0791*      ret
04A9FA             0792*  
04A9FA             0793*  GOLD_CHEST:
04A9FA             0794*  ; behavior routine address lookup
04A9FA 0F AA 04    0795*      dl @init
04A9FD 22 AA 04    0796*      dl @use
04AA00 35 AA 04    0797*      dl @hurt
04AA03 36 AA 04    0798*      dl @kill
04AA06 37 AA 04    0799*      dl @see
04AA09 38 AA 04    0800*      dl @move
04AA0C 39 AA 04    0801*      dl @shoot
04AA0F             0802*  @init:
04AA0F 21 14 AA 04 0803*      ld hl,@data ; address for LDIR to copy from
04AA13 C9          0804*      ret
04AA14             0805*  @data:
04AA14 64          0806*      db 100 ; sprite_health
04AA15 00          0807*      db 000 ; sprite_triggers_mask
04AA16 00          0808*      db 000 ; sprite_x
04AA17 00          0809*      db 000 ; sprite_y
04AA18 00          0810*      db 000 ; sprite_orientation
04AA19 00          0811*      db 000 ; sprite_animation
04AA1A 00          0812*      db 000 ; sprite_anim_timer
04AA1B 01          0813*      db 001 ; sprite_move_timer
04AA1C 00          0814*      db 000 ; sprite_move_step
04AA1D FA          0815*      db 250 ; sprite_points
04AA1E 00          0816*      db 000 ; sprite_health_modifier
04AA1F 00          0817*      db 000 ; sprite_unassigned_0
04AA20 00          0818*      db 000 ; sprite_unassigned_1
04AA21 00          0819*      db 000 ; sprite_unassigned_2
04AA22             0820*  @use:
04AA22 FD E5       0821*      push iy
04AA24 CD 90 C5 04 0822*      call sfx_play_got_treasure
04AA28 FD E1       0823*      pop iy
04AA2A FD 7E 0B    0824*      ld a,(iy+sprite_points)
04AA2D CD 62 BB 04 0825*      call plyr_mod_score
04AA31 C3 6C A6 04 0826*      jp sprite_kill
04AA35             0827*  @hurt:
04AA35 C9          0828*      ret
04AA36             0829*  @kill:
04AA36 C9          0830*      ret
04AA37             0831*  @see:
04AA37 C9          0832*      ret
04AA38             0833*  @move:
04AA38 C9          0834*      ret
04AA39             0835*  @shoot:
04AA39 C9          0836*      ret
04AA3A             0837*  
04AA3A             0838*  MACHINE_GUN:
04AA3A             0839*  ; behavior routine address lookup
04AA3A 4F AA 04    0840*      dl @init
04AA3D 62 AA 04    0841*      dl @use
04AA40 82 AA 04    0842*      dl @hurt
04AA43 83 AA 04    0843*      dl @kill
04AA46 84 AA 04    0844*      dl @see
04AA49 85 AA 04    0845*      dl @move
04AA4C 86 AA 04    0846*      dl @shoot
04AA4F             0847*  @init:
04AA4F 21 54 AA 04 0848*      ld hl,@data ; address for LDIR to copy from
04AA53 C9          0849*      ret
04AA54             0850*  @data:
04AA54 64          0851*      db 100 ; sprite_health
04AA55 00          0852*      db 000 ; sprite_triggers_mask
04AA56 00          0853*      db 000 ; sprite_x
04AA57 00          0854*      db 000 ; sprite_y
04AA58 00          0855*      db 000 ; sprite_orientation
04AA59 00          0856*      db 000 ; sprite_animation
04AA5A 00          0857*      db 000 ; sprite_anim_timer
04AA5B 01          0858*      db 001 ; sprite_move_timer
04AA5C 00          0859*      db 000 ; sprite_move_step
04AA5D 00          0860*      db 000 ; sprite_points
04AA5E 00          0861*      db 000 ; sprite_health_modifier
04AA5F 00          0862*      db 000 ; sprite_unassigned_0
04AA60 00          0863*      db 000 ; sprite_unassigned_1
04AA61 00          0864*      db 000 ; sprite_unassigned_2
04AA62             0865*  @use:
04AA62 CD 6C A6 04 0866*      call sprite_kill
04AA66 3E 10       0867*      ld a,16
04AA68 CD 71 BB 04 0868*      call plyr_add_ammo
04AA6C CD A8 C5 04 0869*      call sfx_play_gun_reload
04AA70 3E 04       0870*      ld a,plyr_wpn_mg
04AA72 21 E6 B8 04 0871*      ld hl,plyr_wpns
04AA76 B6          0872*      or (hl)
04AA77 77          0873*      ld (hl),a
04AA78 3E 04       0874*      ld a,plyr_wpn_mg
04AA7A 32 E7 B8 04 0875*      ld (plyr_wpn_active),a
04AA7E CD 4B BA 04 0876*      call plyr_set_weapon_parameters
04AA82             0877*  @hurt:
04AA82 C9          0878*      ret
04AA83             0879*  @kill:
04AA83 C9          0880*      ret
04AA84             0881*  @see:
04AA84 C9          0882*      ret
04AA85             0883*  @move:
04AA85 C9          0884*      ret
04AA86             0885*  @shoot:
04AA86 C9          0886*      ret
04AA87             0887*  
04AA87             0888*  GATLING_GUN:
04AA87             0889*  ; behavior routine address lookup
04AA87 9C AA 04    0890*      dl @init
04AA8A AF AA 04    0891*      dl @use
04AA8D CF AA 04    0892*      dl @hurt
04AA90 D0 AA 04    0893*      dl @kill
04AA93 D1 AA 04    0894*      dl @see
04AA96 D2 AA 04    0895*      dl @move
04AA99 D3 AA 04    0896*      dl @shoot
04AA9C             0897*  @init:
04AA9C 21 A1 AA 04 0898*      ld hl,@data ; address for LDIR to copy from
04AAA0 C9          0899*      ret
04AAA1             0900*  @data:
04AAA1 64          0901*      db 100 ; sprite_health
04AAA2 00          0902*      db 000 ; sprite_triggers_mask
04AAA3 00          0903*      db 000 ; sprite_x
04AAA4 00          0904*      db 000 ; sprite_y
04AAA5 00          0905*      db 000 ; sprite_orientation
04AAA6 00          0906*      db 000 ; sprite_animation
04AAA7 00          0907*      db 000 ; sprite_anim_timer
04AAA8 01          0908*      db 001 ; sprite_move_timer
04AAA9 00          0909*      db 000 ; sprite_move_step
04AAAA 00          0910*      db 000 ; sprite_points
04AAAB 00          0911*      db 000 ; sprite_health_modifier
04AAAC 00          0912*      db 000 ; sprite_unassigned_0
04AAAD 00          0913*      db 000 ; sprite_unassigned_1
04AAAE 00          0914*      db 000 ; sprite_unassigned_2
04AAAF             0915*  @use:
04AAAF CD 6C A6 04 0916*      call sprite_kill
04AAB3 3E 20       0917*      ld a,32
04AAB5 CD 71 BB 04 0918*      call plyr_add_ammo
04AAB9 CD A8 C5 04 0919*      call sfx_play_gun_reload
04AABD 3E 08       0920*      ld a,plyr_wpn_gg
04AABF 21 E6 B8 04 0921*      ld hl,plyr_wpns
04AAC3 B6          0922*      or (hl)
04AAC4 77          0923*      ld (hl),a
04AAC5 3E 08       0924*      ld a,plyr_wpn_gg
04AAC7 32 E7 B8 04 0925*      ld (plyr_wpn_active),a
04AACB CD 4B BA 04 0926*      call plyr_set_weapon_parameters
04AACF             0927*  @hurt:
04AACF C9          0928*      ret
04AAD0             0929*  @kill:
04AAD0 C9          0930*      ret
04AAD1             0931*  @see:
04AAD1 C9          0932*      ret
04AAD2             0933*  @move:
04AAD2 C9          0934*      ret
04AAD3             0935*  @shoot:
04AAD3 C9          0936*      ret
04AAD4             0937*  
04AAD4             0938*  DOG_FOOD:
04AAD4             0939*  ; behavior routine address lookup
04AAD4 E9 AA 04    0940*      dl @init
04AAD7 FC AA 04    0941*      dl @use
04AADA 07 AB 04    0942*      dl @hurt
04AADD 08 AB 04    0943*      dl @kill
04AAE0 09 AB 04    0944*      dl @see
04AAE3 0A AB 04    0945*      dl @move
04AAE6 0B AB 04    0946*      dl @shoot
04AAE9             0947*  @init:
04AAE9 21 EE AA 04 0948*      ld hl,@data ; address for LDIR to copy from
04AAED C9          0949*      ret
04AAEE             0950*  @data:
04AAEE 64          0951*      db 100 ; sprite_health
04AAEF 00          0952*      db 000 ; sprite_triggers_mask
04AAF0 00          0953*      db 000 ; sprite_x
04AAF1 00          0954*      db 000 ; sprite_y
04AAF2 00          0955*      db 000 ; sprite_orientation
04AAF3 00          0956*      db 000 ; sprite_animation
04AAF4 00          0957*      db 000 ; sprite_anim_timer
04AAF5 01          0958*      db 001 ; sprite_move_timer
04AAF6 00          0959*      db 000 ; sprite_move_step
04AAF7 00          0960*      db 000 ; sprite_points
04AAF8 05          0961*      db 005 ; sprite_health_modifier
04AAF9 00          0962*      db 000 ; sprite_unassigned_0
04AAFA 00          0963*      db 000 ; sprite_unassigned_1
04AAFB 00          0964*      db 000 ; sprite_unassigned_2
04AAFC             0965*  @use:
04AAFC FD 7E 0C    0966*      ld a,(iy+sprite_health_modifier)
04AAFF CD 04 BB 04 0967*      call plyr_add_health
04AB03 C3 6C A6 04 0968*      jp sprite_kill
04AB07             0969*  @hurt:
04AB07 C9          0970*      ret
04AB08             0971*  @kill:
04AB08 C9          0972*      ret
04AB09             0973*  @see:
04AB09 C9          0974*      ret
04AB0A             0975*  @move:
04AB0A C9          0976*      ret
04AB0B             0977*  @shoot:
04AB0B C9          0978*      ret
04AB0C             0979*  
04AB0C             0980*  GOLD_KEY:
04AB0C             0981*  ; behavior routine address lookup
04AB0C 21 AB 04    0982*      dl @init
04AB0F 34 AB 04    0983*      dl @use
04AB12 35 AB 04    0984*      dl @hurt
04AB15 36 AB 04    0985*      dl @kill
04AB18 37 AB 04    0986*      dl @see
04AB1B 38 AB 04    0987*      dl @move
04AB1E 39 AB 04    0988*      dl @shoot
04AB21             0989*  @init:
04AB21 21 26 AB 04 0990*      ld hl,@data ; address for LDIR to copy from
04AB25 C9          0991*      ret
04AB26             0992*  @data:
04AB26 64          0993*      db 100 ; sprite_health
04AB27 00          0994*      db 000 ; sprite_triggers_mask
04AB28 00          0995*      db 000 ; sprite_x
04AB29 00          0996*      db 000 ; sprite_y
04AB2A 00          0997*      db 000 ; sprite_orientation
04AB2B 00          0998*      db 000 ; sprite_animation
04AB2C 00          0999*      db 000 ; sprite_anim_timer
04AB2D 01          1000*      db 001 ; sprite_move_timer
04AB2E 00          1001*      db 000 ; sprite_move_step
04AB2F 00          1002*      db 000 ; sprite_points
04AB30 00          1003*      db 000 ; sprite_health_modifier
04AB31 00          1004*      db 000 ; sprite_unassigned_0
04AB32 00          1005*      db 000 ; sprite_unassigned_1
04AB33 00          1006*      db 000 ; sprite_unassigned_2
04AB34             1007*  @use:
04AB34 C9          1008*      ret
04AB35             1009*  @hurt:
04AB35 C9          1010*      ret
04AB36             1011*  @kill:
04AB36 C9          1012*      ret
04AB37             1013*  @see:
04AB37 C9          1014*      ret
04AB38             1015*  @move:
04AB38 C9          1016*      ret
04AB39             1017*  @shoot:
04AB39 C9          1018*      ret
04AB3A             1019*  
04AB3A             1020*  DOG:
04AB3A             1021*  ; behavior routine address lookup
04AB3A 4F AB 04    1022*      dl @init
04AB3D 62 AB 04    1023*      dl @use
04AB40 72 AB 04    1024*      dl @hurt
04AB43 8E AB 04    1025*      dl @kill
04AB46 A2 AB 04    1026*      dl @see
04AB49 A7 AB 04    1027*      dl @move
04AB4C C3 AB 04    1028*      dl @shoot
04AB4F             1029*  @init:
04AB4F 21 54 AB 04 1030*      ld hl,@data ; address for LDIR to copy from
04AB53 C9          1031*      ret
04AB54             1032*  @data:
04AB54 32          1033*      db 050 ; sprite_health
04AB55 00          1034*      db 000 ; sprite_triggers_mask
04AB56 00          1035*      db 000 ; sprite_x
04AB57 00          1036*      db 000 ; sprite_y
04AB58 00          1037*      db 000 ; sprite_orientation
04AB59 00          1038*      db 000 ; sprite_animation
04AB5A 00          1039*      db 000 ; sprite_anim_timer
04AB5B 01          1040*      db 001 ; sprite_move_timer
04AB5C 00          1041*      db 000 ; sprite_move_step
04AB5D 0A          1042*      db 010 ; sprite_points
04AB5E F6          1043*      db -10 ; sprite_health_modifier
04AB5F 00          1044*      db 000 ; sprite_unassigned_0
04AB60 00          1045*      db 000 ; sprite_unassigned_1
04AB61 00          1046*      db 000 ; sprite_unassigned_2
04AB62             1047*  @use:
04AB62 FD E5       1048*      push iy
04AB64 CD 6C C5 04 1049*      call sfx_play_dog_woof_single
04AB68 FD E1       1050*      pop iy
04AB6A FD 7E 0C    1051*      ld a,(iy+sprite_health_modifier)
04AB6D CD 14 BB 04 1052*      call plyr_sub_health
04AB71 C9          1053*      ret
04AB72             1054*  @hurt:
04AB72 FD E5       1055*      push iy
04AB74 CD 78 C5 04 1056*      call sfx_play_dog_yelp
04AB78 FD E1       1057*      pop iy
04AB7A             1058*  @nosound:
04AB7A 3E FF       1059*      ld a,255 ; kill player's shot
04AB7C 32 E1 B8 04 1060*      ld (plyr_shot_status),a
04AB80 3A E5 B8 04 1061*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AB84 FD 86 02    1062*      add a,(iy+sprite_health)
04AB87 FD 77 02    1063*      ld (iy+sprite_health),a
04AB8A             1064*      ; ret p ; if health is positive, return
04AB8A F2 AE AB 04 1065*      jp p,@do_move
04AB8E             1066*      ; otherwise fall through to kill sprite
04AB8E             1067*  @kill:
04AB8E FD E5       1068*      push iy
04AB90 CD 78 C5 04 1069*      call sfx_play_dog_yelp
04AB94 FD E1       1070*      pop iy
04AB96 FD 7E 0B    1071*      ld a,(iy+sprite_points)
04AB99 CD 62 BB 04 1072*      call plyr_mod_score
04AB9D C3 6C A6 04 1073*      jp sprite_kill
04ABA1 C9          1074*      ret
04ABA2             1075*  @see:
04ABA2 18 03       1076*      jr @move
04ABA4             1077*  @seen:
04ABA4 AF          1078*      xor a
04ABA5 3C          1079*      inc a
04ABA6 C9          1080*      ret
04ABA7             1081*  @move:
04ABA7 FD 35 09    1082*      dec (iy+sprite_move_timer)
04ABAA 28 02       1083*      jr z,@do_move
04ABAC 18 F6       1084*      jr @seen
04ABAE             1085*  @do_move:
04ABAE CD 45 BE 04 1086*      call rand_8
04ABB2 E6 3F       1087*      and %00111111 ; between 0 and 63
04ABB4             1088*      ; or %00100000  ; at least 32
04ABB4 F6 10       1089*      or %00010000  ; at least 16
04ABB6 FD 77 09    1090*      ld (iy+sprite_move_timer),a
04ABB9 CD 0F A7 04 1091*      call sprite_move_random
04ABBD CD 60 C5 04 1092*      call sfx_play_dog_woof_double
04ABC1 18 E1       1093*      jr @seen
04ABC3             1094*  @shoot:
04ABC3 C9          1095*      ret
04ABC4             1096*  
04ABC4             1097*  GERMAN_TROOPER:
04ABC4             1098*  ; behavior routine address lookup
04ABC4 D9 AB 04    1099*      dl @init
04ABC7 EC AB 04    1100*      dl @use
04ABCA FB AB 04    1101*      dl @hurt
04ABCD 17 AC 04    1102*      dl @kill
04ABD0 2D AC 04    1103*      dl @see
04ABD3 49 AC 04    1104*      dl @move
04ABD6 5C AC 04    1105*      dl @shoot
04ABD9             1106*  @init:
04ABD9 21 DE AB 04 1107*      ld hl,@data ; address for LDIR to copy from
04ABDD C9          1108*      ret
04ABDE             1109*  @data:
04ABDE 4B          1110*      db 075 ; sprite_health
04ABDF 00          1111*      db 000 ; sprite_triggers_mask
04ABE0 00          1112*      db 000 ; sprite_x
04ABE1 00          1113*      db 000 ; sprite_y
04ABE2 00          1114*      db 000 ; sprite_orientation
04ABE3 00          1115*      db 000 ; sprite_animation
04ABE4 00          1116*      db 000 ; sprite_anim_timer
04ABE5 01          1117*      db 001 ; sprite_move_timer
04ABE6 00          1118*      db 000 ; sprite_move_step
04ABE7 14          1119*      db 020 ; sprite_points
04ABE8 EC          1120*      db -20 ; sprite_health_modifier
04ABE9 00          1121*      db 000 ; sprite_unassigned_0
04ABEA 00          1122*      db 000 ; sprite_unassigned_1
04ABEB 00          1123*      db 000 ; sprite_unassigned_2
04ABEC             1124*  @use:
04ABEC FD E5       1125*      push iy
04ABEE CD 24 C5 04 1126*      call sfx_play_achtung
04ABF2 FD E1       1127*      pop iy
04ABF4 3E FB       1128*      ld a,-5
04ABF6 CD 14 BB 04 1129*      call plyr_sub_health
04ABFA C9          1130*      ret
04ABFB             1131*  @hurt:
04ABFB FD E5       1132*      push iy
04ABFD CD 01 B4 04 1133*      call sfx_play_random_hurt
04AC01 FD E1       1134*      pop iy
04AC03             1135*  @nosound:
04AC03 3E FF       1136*      ld a,255 ; kill player's shot
04AC05 32 E1 B8 04 1137*      ld (plyr_shot_status),a
04AC09 3A E5 B8 04 1138*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AC0D FD 86 02    1139*      add a,(iy+sprite_health)
04AC10 FD 77 02    1140*      ld (iy+sprite_health),a
04AC13             1141*      ; ret p ; if health is positive, return
04AC13 F2 56 AC 04 1142*      jp p,@do_move
04AC17             1143*      ; otherwise fall through to kill sprite
04AC17             1144*  @kill:
04AC17 FD E5       1145*      push iy
04AC19 CD 20 C6 04 1146*      call sfx_play_wilhelm
04AC1D FD E1       1147*      pop iy
04AC1F FD 7E 0B    1148*      ld a,(iy+sprite_points)
04AC22 CD 62 BB 04 1149*      call plyr_mod_score
04AC26 3E 38       1150*      ld a,OBJ_ID_DEAD_GUARD
04AC28 CD BC A6 04 1151*      call sprite_spawn
04AC2C C9          1152*      ret
04AC2D             1153*  @see:
04AC2D FD 7E 03    1154*      ld a,(iy+sprite_triggers_mask)
04AC30 E6 01       1155*      and sprite_trigger_see
04AC32 C2 49 AC 04 1156*      jp nz,@move
04AC36 3E 01       1157*      ld a,sprite_trigger_see
04AC38 FD B6 03    1158*      or a,(iy+sprite_triggers_mask)
04AC3B FD 77 03    1159*      ld (iy+sprite_triggers_mask),a
04AC3E FD E5       1160*      push iy
04AC40 CD 24 C5 04 1161*      call sfx_play_achtung
04AC44 FD E1       1162*      pop iy
04AC46             1163*  @seen:
04AC46 AF          1164*      xor a
04AC47 3C          1165*      inc a
04AC48 C9          1166*      ret
04AC49             1167*  @move:
04AC49 FD 35 09    1168*      dec (iy+sprite_move_timer)
04AC4C CC 5C AC 04 1169*      call z,@shoot
04AC50 CC 56 AC 04 1170*      call z,@do_move
04AC54 18 F0       1171*      jr @seen
04AC56             1172*  @do_move:
04AC56 CD 0F A7 04 1173*      call sprite_move_random
04AC5A 18 EA       1174*      jr @seen
04AC5C             1175*  @shoot:
04AC5C CD 88 AD 04 1176*      call sprite_reset_move_timer
04AC60 CD 94 AD 04 1177*      call sprite_shoot
04AC64 C9          1178*      ret
04AC65             1179*  
04AC65             1180*  SS_GUARD:
04AC65             1181*  ; behavior routine address lookup
04AC65 7A AC 04    1182*      dl @init
04AC68 8D AC 04    1183*      dl @use
04AC6B 9C AC 04    1184*      dl @hurt
04AC6E B8 AC 04    1185*      dl @kill
04AC71 CE AC 04    1186*      dl @see
04AC74 EA AC 04    1187*      dl @move
04AC77 FD AC 04    1188*      dl @shoot
04AC7A             1189*  @init:
04AC7A 21 7F AC 04 1190*      ld hl,@data ; address for LDIR to copy from
04AC7E C9          1191*      ret
04AC7F             1192*  @data:
04AC7F 64          1193*      db 100 ; sprite_health
04AC80 00          1194*      db 000 ; sprite_triggers_mask
04AC81 00          1195*      db 000 ; sprite_x
04AC82 00          1196*      db 000 ; sprite_y
04AC83 00          1197*      db 000 ; sprite_orientation
04AC84 00          1198*      db 000 ; sprite_animation
04AC85 00          1199*      db 000 ; sprite_anim_timer
04AC86 01          1200*      db 001 ; sprite_move_timer
04AC87 00          1201*      db 000 ; sprite_move_step
04AC88 1E          1202*      db 030 ; sprite_points
04AC89 E2          1203*      db -30 ; sprite_health_modifier
04AC8A 00          1204*      db 000 ; sprite_unassigned_0
04AC8B 00          1205*      db 000 ; sprite_unassigned_1
04AC8C 00          1206*      db 000 ; sprite_unassigned_2
04AC8D             1207*  @use:
04AC8D FD E5       1208*      push iy
04AC8F CD D8 C5 04 1209*      call sfx_play_schusstaffel
04AC93 FD E1       1210*      pop iy
04AC95 3E F6       1211*      ld a,-10
04AC97 CD 14 BB 04 1212*      call plyr_sub_health
04AC9B C9          1213*      ret
04AC9C             1214*  @hurt:
04AC9C FD E5       1215*      push iy
04AC9E CD 01 B4 04 1216*      call sfx_play_random_hurt
04ACA2 FD E1       1217*      pop iy
04ACA4             1218*  @nosound:
04ACA4 3E FF       1219*      ld a,255 ; kill player's shot
04ACA6 32 E1 B8 04 1220*      ld (plyr_shot_status),a
04ACAA 3A E5 B8 04 1221*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04ACAE FD 86 02    1222*      add a,(iy+sprite_health)
04ACB1 FD 77 02    1223*      ld (iy+sprite_health),a
04ACB4             1224*      ; ret p ; if health is positive, return
04ACB4 F2 F7 AC 04 1225*      jp p,@do_move
04ACB8             1226*      ; otherwise fall through to kill sprite
04ACB8             1227*  @kill:
04ACB8 FD E5       1228*      push iy
04ACBA CD C0 C5 04 1229*      call sfx_play_mein_leben
04ACBE FD E1       1230*      pop iy
04ACC0 FD 7E 0B    1231*      ld a,(iy+sprite_points)
04ACC3 CD 62 BB 04 1232*      call plyr_mod_score
04ACC7 3E 38       1233*      ld a,OBJ_ID_DEAD_GUARD
04ACC9 CD BC A6 04 1234*      call sprite_spawn
04ACCD C9          1235*      ret
04ACCE             1236*  @see:
04ACCE FD 7E 03    1237*      ld a,(iy+sprite_triggers_mask)
04ACD1 E6 01       1238*      and sprite_trigger_see
04ACD3 C2 EA AC 04 1239*      jp nz,@move
04ACD7 3E 01       1240*      ld a,sprite_trigger_see
04ACD9 FD B6 03    1241*      or a,(iy+sprite_triggers_mask)
04ACDC FD 77 03    1242*      ld (iy+sprite_triggers_mask),a
04ACDF FD E5       1243*      push iy
04ACE1 CD D8 C5 04 1244*      call sfx_play_schusstaffel
04ACE5 FD E1       1245*      pop iy
04ACE7             1246*  @seen:
04ACE7 AF          1247*      xor a
04ACE8 3C          1248*      inc a
04ACE9 C9          1249*      ret
04ACEA             1250*  @move:
04ACEA FD 35 09    1251*      dec (iy+sprite_move_timer)
04ACED CC FD AC 04 1252*      call z,@shoot
04ACF1 CC F7 AC 04 1253*      call z,@do_move
04ACF5 18 F0       1254*      jr @seen
04ACF7             1255*  @do_move:
04ACF7 CD 0F A7 04 1256*      call sprite_move_random
04ACFB 18 EA       1257*      jr @seen
04ACFD             1258*  @shoot:
04ACFD CD 88 AD 04 1259*      call sprite_reset_move_timer
04AD01 CD 94 AD 04 1260*      call sprite_shoot
04AD05 C9          1261*      ret
04AD06             1262*  
04AD06             1263*  DEAD_GUARD:
04AD06             1264*  ; behavior routine address lookup
04AD06 1B AD 04    1265*      dl @init
04AD09 2E AD 04    1266*      dl @use
04AD0C 40 AD 04    1267*      dl @hurt
04AD0F 41 AD 04    1268*      dl @kill
04AD12 42 AD 04    1269*      dl @see
04AD15 43 AD 04    1270*      dl @move
04AD18 44 AD 04    1271*      dl @shoot
04AD1B             1272*  @init:
04AD1B 21 20 AD 04 1273*      ld hl,@data ; address for LDIR to copy from
04AD1F C9          1274*      ret
04AD20             1275*  @data:
04AD20 64          1276*      db 100 ; sprite_health
04AD21 00          1277*      db 000 ; sprite_triggers_mask
04AD22 00          1278*      db 000 ; sprite_x
04AD23 00          1279*      db 000 ; sprite_y
04AD24 00          1280*      db 000 ; sprite_orientation
04AD25 00          1281*      db 000 ; sprite_animation
04AD26 00          1282*      db 000 ; sprite_anim_timer
04AD27 01          1283*      db 001 ; sprite_move_timer
04AD28 00          1284*      db 000 ; sprite_move_step
04AD29 00          1285*      db 000 ; sprite_points
04AD2A 00          1286*      db 000 ; sprite_health_modifier
04AD2B 00          1287*      db 000 ; sprite_unassigned_0
04AD2C 00          1288*      db 000 ; sprite_unassigned_1
04AD2D 00          1289*      db 000 ; sprite_unassigned_2
04AD2E             1290*  @use:
04AD2E CD 45 BE 04 1291*      call rand_8
04AD32 E6 07       1292*      and %00000111
04AD34 CD 71 BB 04 1293*      call plyr_add_ammo
04AD38 CD A8 C5 04 1294*      call sfx_play_gun_reload
04AD3C C3 6C A6 04 1295*      jp sprite_kill
04AD40             1296*  @hurt:
04AD40 C9          1297*      ret
04AD41             1298*  @kill:
04AD41 C9          1299*      ret
04AD42             1300*  @see:
04AD42 C9          1301*      ret
04AD43             1302*  @move:
04AD43 C9          1303*      ret
04AD44             1304*  @shoot:
04AD44 C9          1305*      ret
04AD45             1306*  
04AD45             1307*  EXPLOSION:
04AD45             1308*  ; behavior routine address lookup
04AD45 5A AD 04    1309*      dl @init
04AD48 6D AD 04    1310*      dl @use
04AD4B 7C AD 04    1311*      dl @hurt
04AD4E 7D AD 04    1312*      dl @kill
04AD51 7E AD 04    1313*      dl @see
04AD54 86 AD 04    1314*      dl @move
04AD57 87 AD 04    1315*      dl @shoot
04AD5A             1316*  @init:
04AD5A 21 5F AD 04 1317*      ld hl,@data ; address for LDIR to copy from
04AD5E C9          1318*      ret
04AD5F             1319*  @data:
04AD5F 64          1320*      db 100 ; sprite_health
04AD60 00          1321*      db 000 ; sprite_triggers_mask
04AD61 00          1322*      db 000 ; sprite_x
04AD62 00          1323*      db 000 ; sprite_y
04AD63 00          1324*      db 000 ; sprite_orientation
04AD64 00          1325*      db 000 ; sprite_animation
04AD65 05          1326*      db 005 ; sprite_anim_timer
04AD66 01          1327*      db 001 ; sprite_move_timer
04AD67 00          1328*      db 000 ; sprite_move_step
04AD68 00          1329*      db 000 ; sprite_points
04AD69 9C          1330*      db -100; sprite_health_modifier
04AD6A 00          1331*      db 000 ; sprite_unassigned_0
04AD6B 00          1332*      db 000 ; sprite_unassigned_1
04AD6C 00          1333*      db 000 ; sprite_unassigned_2
04AD6D             1334*  @use:
04AD6D FD E5       1335*      push iy
04AD6F CD 84 C5 04 1336*      call sfx_play_explode
04AD73 FD E1       1337*      pop iy
04AD75 3E 9C       1338*      ld a,-100
04AD77 CD 14 BB 04 1339*      call plyr_sub_health
04AD7B C9          1340*      ret
04AD7C             1341*  @hurt:
04AD7C C9          1342*      ret
04AD7D             1343*  @kill:
04AD7D C9          1344*      ret
04AD7E             1345*  @see:
04AD7E FD 35 08    1346*      dec (iy+sprite_anim_timer)
04AD81 CC 6C A6 04 1347*      call z,sprite_kill
04AD85 C9          1348*      ret
04AD86             1349*  @move:
04AD86 C9          1350*      ret
04AD87             1351*  @shoot:
04AD87 C9          1352*      ret
04AD88             1353*  
04AD88             1354*  sprite_reset_move_timer:
04AD88 CD 45 BE 04 1355*      call rand_8
04AD8C E6 3F       1356*      and %00111111 ; between 0 and 63
04AD8E F6 10       1357*      or %00010000  ; at least 16
04AD90 FD 77 09    1358*      ld (iy+sprite_move_timer),a
04AD93 C9          1359*      ret
04AD94             1360*  
04AD94             1361*  ; determines whether an enemy sprite can shoot at the player
04AD94             1362*  ; and handles the shooting mechanics if so
04AD94             1363*  ; inputs: iy pointed at sprite record
04AD94             1364*  ; returns: a = 0 if the sprite didn't shoot, 1 if it did
04AD94             1365*  ; destroys: probably everything
04AD94             1366*  sprite_shoot:
04AD94             1367*  ; check whether sprite has the same x or y coordinate as player
04AD94 FD 27 04    1368*      ld hl,(iy+sprite_x) ; h,l = sprite y,x position
04AD97 ED 5B D1 B8 1369*      ld de,(cur_x) ; d,e = player y,x position
       04          
04AD9C 7D          1370*      ld a,l ; compare x
04AD9D BB          1371*      cp e
04AD9E 28 06       1372*      jr z,@shoot
04ADA0 7C          1373*      ld a,h ; compare y
04ADA1 BA          1374*      cp d
04ADA2 28 02       1375*      jr z,@shoot
04ADA4 AF          1376*      xor a ; no shot so return zero
04ADA5 C9          1377*      ret
04ADA6             1378*  @shoot:
04ADA6 CD 08 C6 04 1379*      call sfx_play_shot_pistol
04ADAA             1380*  ; generate randomized fractional damage multiplier
04ADAA CD 45 BE 04 1381*      call rand_8 ; a is a random fraction
04ADAE 5F          1382*      ld e,a
04ADAF FD 7E 0C    1383*      ld a,(iy+sprite_health_modifier)
04ADB2 ED 44       1384*      neg ; setting up an unsigned mlt
04ADB4 57          1385*      ld d,a
04ADB5 ED 5C       1386*      mlt de ; d.e is an 8.8 fixed point number
04ADB7 7A          1387*      ld a,d ; ... we only want the integer portion
04ADB8 ED 44       1388*      neg ; back to signed
04ADBA CD 14 BB 04 1389*      call plyr_sub_health
04ADBE 3E 01       1390*      ld a,1
04ADC0 C9          1391*      ret
04ADC1             1392*  
04ADC1 00          1393*  see_orientation: db 0x00
04ADC2             1394*  ; cycle through all cells visible to the player from the current position
04ADC2             1395*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04ADC2             1396*  ; inputs: cur_x, cur_y,
04ADC2             1397*  ; outputs: player-aware enemies
04ADC2             1398*  ; destroys: everything
04ADC2             1399*  sprites_see_plyr:
04ADC2             1400*  ; ; DEBUG: set up loop timer
04ADC2             1401*  ;     call prt_loop_reset
04ADC2             1402*  ; ; END DEBUG
04ADC2             1403*  ; ; DEBUG: start loop timer
04ADC2             1404*  ;     call prt_loop_start
04ADC2             1405*  ; ; END DEBUG
04ADC2             1406*  
04ADC2             1407*  ; intialize orientation
04ADC2 AF          1408*      xor a
04ADC3 32 C1 AD 04 1409*      ld (see_orientation),a
04ADC7             1410*  @loop_orientation:
04ADC7             1411*  ; get current map position and camera orientation
04ADC7 ED 5B D1 B8 1412*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04ADCC             1413*      ; 0-1 prt ticks, 4 loops
04ADCC CD D6 67 04 1414*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04ADD0             1415*  ; get cell_views address for this cell and orientation
04ADD0 3A C1 AD 04 1416*      ld a,(see_orientation)
04ADD4 5F          1417*      ld e,a
04ADD5 16 06       1418*      ld d,6 ; 6 bytes per orientation
04ADD7 ED 5C       1419*      mlt de ; de = orientation offset
04ADD9 EB          1420*      ex de,hl ; hl = orientation offset
04ADDA 06 18       1421*      ld b,24 ; 24 bytes per cell in cell_views lut
04ADDC ED 4C       1422*      mlt bc ; bc = offset from base address of cell_views lut
04ADDE 09          1423*      add hl,bc ; hl = total offset from cell_views base address
04ADDF EB          1424*      ex de,hl ; because we can't add iy to hl
04ADE0 FD 21 00 E4 1425*      ld iy,cell_views ; base address of cell_views lut
       B7          
04ADE5 FD 19       1426*      add iy,de ; iy = cell_views address
04ADE7 FD 22 5A 6A 1427*      ld (cur_cell_views),iy
       04          
04ADEC             1428*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04ADEC 01 00 46 28 1429*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04ADF0 AF          1430*      xor a ; poly_id
04ADF1 32 56 6A 04 1431*      ld (to_poly_id),a
04ADF5             1432*  @loop:
04ADF5 ED 43 01 AE 1433*      ld (@bit_iy+2),bc
       04          
04ADFA FD 2A 5A 6A 1434*      ld iy,(cur_cell_views)
       04          
04ADFF             1435*  @bit_iy:
04ADFF FD CB 00 46 1436*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04AE03 28 2E       1437*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04AE05             1438*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04AE05 3A 56 6A 04 1439*      ld a,(to_poly_id)
04AE09 4F          1440*      ld c,a ; poly_id
04AE0A 3A C1 AD 04 1441*      ld a,(see_orientation)
04AE0E CD AE 6C 04 1442*      call get_polys_deltas ; d,e = y,x deltas
04AE12 3A D1 B8 04 1443*      ld a,(cur_x)
04AE16 83          1444*      add a,e
04AE17 5F          1445*      ld e,a
04AE18 3A D2 B8 04 1446*      ld a,(cur_y)
04AE1C 82          1447*      add a,d
04AE1D 57          1448*      ld d,a
04AE1E CD D6 67 04 1449*      call get_cell_from_coords
04AE22 DD 7E 03    1450*      ld a,(ix+map_sprite_id)
04AE25 FE FF       1451*      cp 0xFF ; no sprite
04AE27 28 0A       1452*      jr z,@next_poly
04AE29 CD 4B A6 04 1453*      call sprite_set_pointer
04AE2D 3E 04       1454*      ld a,sp_see
04AE2F CD 88 A7 04 1455*      call do_sprite_behavior
04AE33             1456*  @next_poly:
04AE33 ED 4B 01 AE 1457*      ld bc,(@bit_iy+2)
       04          
04AE38 3A 56 6A 04 1458*      ld a,(to_poly_id)
04AE3C 3C          1459*      inc a ; a is next poly_id
04AE3D 32 56 6A 04 1460*      ld (to_poly_id),a
04AE41 FE 2D       1461*      cp num_polys
04AE43 28 0F       1462*      jr z,@next_orientation
04AE45 3E 08       1463*      ld a,8
04AE47 80          1464*      add a,b
04AE48 47          1465*      ld b,a ; bit tested codes to 0x46 + b/8
04AE49 FE 86       1466*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04AE4B C2 F5 AD 04 1467*      jp nz,@loop
04AE4F 06 46       1468*      ld b,0x46
04AE51 0C          1469*      inc c ; iy address offset
04AE52 18 A1       1470*      jr @loop
04AE54             1471*  @next_orientation:
04AE54 3A C1 AD 04 1472*      ld a,(see_orientation)
04AE58 3C          1473*      inc a
04AE59 E6 03       1474*      and 3 ; modulo 4
04AE5B 32 C1 AD 04 1475*      ld (see_orientation),a
04AE5F C2 C7 AD 04 1476*      jp nz,@loop_orientation
04AE63             1477*  
04AE63             1478*  ; full loop 1-2 prt ticks
04AE63             1479*  ; ; DEBUG: stop loop timer
04AE63             1480*  ;     call prt_loop_stop
04AE63             1481*  ; ; END DEBUG
04AE63 C9          1482*      ret
04AE64             0024   	include "src/asm/vdu.asm"
04AE64             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04AE64             0002*  ; VDU 0: Null (no operation)
04AE64             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AE64             0004*  ; VDU 2: Enable “printer” §§
04AE64             0005*  ; VDU 3: Disable “printer” §§
04AE64             0006*  ; VDU 4: Write text at text cursor
04AE64             0007*  ; VDU 5: Write text at graphics cursor
04AE64             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04AE64             0009*  ; VDU 7: Make a short beep (BEL)
04AE64             0010*  ; VDU 8: Move cursor back one character
04AE64             0011*  ; VDU 9: Move cursor forward one character
04AE64             0012*  ; VDU 10: Move cursor down one line
04AE64             0013*  ; VDU 11: Move cursor up one line
04AE64             0014*  ; VDU 12: Clear text area (CLS)
04AE64             0015*  ; VDU 13: Carriage return
04AE64             0016*  ; VDU 14: Page mode On *
04AE64             0017*  ; VDU 15: Page mode Off *
04AE64             0018*  ; VDU 16: Clear graphics area (CLG)
04AE64             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04AE64             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04AE64             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AE64             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AE64             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04AE64             0024*  ; VDU 22, n: Select screen mode (MODE n)
04AE64             0025*  ; VDU 23, n: Re-program display character / System Commands
04AE64             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04AE64             0027*  ; VDU 25, mode, x; y;: PLOT command
04AE64             0028*  ; VDU 26: Reset graphics and text viewports **
04AE64             0029*  ; VDU 27, char: Output character to screen §
04AE64             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04AE64             0031*  ; VDU 29, x; y;: Set graphics origin
04AE64             0032*  ; VDU 30: Home cursor
04AE64             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04AE64             0034*  ; VDU 127: Backspace
04AE64             0035*  
04AE64             0036*  ; VDU 0: Null (no operation)
04AE64             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04AE64             0038*  ;     This may be useful for padding out a VDU command sequence,
04AE64             0039*  ;     or for inserting a placeholder for a command that will be added later.
04AE64             0040*  ; inputs: none
04AE64             0041*  ; outputs: an empty byte somewhere in VDU
04AE64             0042*  ; destroys: a
04AE64             0043*  vdu_null:
04AE64 AF          0044*      xor a
04AE65 5B D7       0045*  	rst.lil $10
04AE67 C9          0046*  	ret
04AE68             0047*  
04AE68             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AE68             0049*  ;     Ensures that the next character received by the VDP is sent through to
04AE68             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04AE68             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04AE68             0052*  ;     intended to be displayed on the screen. It allows characters that would
04AE68             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04AE68             0054*  ;     If the “printer” has not been enabled then this command will just discard
04AE68             0055*  ;     the next byte sent to the VDP.
04AE68             0056*  ; inputs: a is the ascii code of the character to send
04AE68             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04AE68             0058*  ; outputs: a character on the serial terminal connected to the USB port
04AE68             0059*  ;           and the same character on the screen at the current text cursor location
04AE68             0060*  ; QUESTION: does it also advance the text cursor?
04AE68             0061*  ; destroys: hl, bc
04AE68             0062*  vdu_char_to_printer:
04AE68 32 78 AE 04 0063*  	ld (@arg),a
04AE6C 21 77 AE 04 0064*  	ld hl,@cmd
04AE70 01 02 00 00 0065*  	ld bc,@end-@cmd
04AE74 5B DF       0066*  	rst.lil $18
04AE76 C9          0067*  	ret
04AE77 01          0068*  @cmd: db 1
04AE78 00          0069*  @arg: db 0
04AE79             0070*  @end:
04AE79             0071*  
04AE79             0072*  ; VDU 2: Enable “printer” §§
04AE79             0073*  ;     Enables the “printer”.
04AE79             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04AE79             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04AE79             0076*  ;     this port is used for power, but it can also be used to send and
04AE79             0077*  ;     receive data to and from the VDP.
04AE79             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04AE79             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04AE79             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04AE79             0081*  ;     use the VDU 1 command.
04AE79             0082*  ;     The VDP will not send through other control codes to the printer,
04AE79             0083*  ;     and will will not send through data it receives as part of other commands.
04AE79             0084*  vdu_enable_printer:
04AE79 3E 02       0085*      ld a,2
04AE7B 5B D7       0086*  	rst.lil $10
04AE7D C9          0087*  	ret
04AE7E             0088*  
04AE7E             0089*  ; VDU 3: Disable “printer” §§
04AE7E             0090*  ; inputs: none
04AE7E             0091*  ; outputs: a USB port bereft of communication with the VDP
04AE7E             0092*  ; destroys: a
04AE7E             0093*  vdu_disable_printer:
04AE7E 3E 03       0094*      ld a,3
04AE80 5B D7       0095*  	rst.lil $10
04AE82 C9          0096*  	ret
04AE83             0097*  
04AE83             0098*  ; VDU 4: Write text at text cursor
04AE83             0099*  ;     This causes text to be written at the current text cursor position.
04AE83             0100*  ;     This is the default mode for text display.
04AE83             0101*  ;     Text is written using the current text foreground and background colours.
04AE83             0102*  ; inputs: a is the character to write to the screen
04AE83             0103*  ; prerequisites: the text cursor at the intended position on screen
04AE83             0104*  ; outputs: prints the character and moves text cursor right one position
04AE83             0105*  ; destroys: a, hl, bc
04AE83             0106*  vdu_char_to_text_cursor:
04AE83 32 93 AE 04 0107*  	ld (@arg),a
04AE87 21 92 AE 04 0108*  	ld hl,@cmd
04AE8B 01 02 00 00 0109*  	ld bc,@end-@cmd
04AE8F 5B DF       0110*  	rst.lil $18
04AE91 C9          0111*  	ret
04AE92 04          0112*  @cmd: db 4
04AE93 00          0113*  @arg: db 0
04AE94             0114*  @end:
04AE94             0115*  
04AE94             0116*  ; VDU 5: Write text at graphics cursor
04AE94             0117*  ;     This causes text to be written at the current graphics cursor position.
04AE94             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04AE94             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04AE94             0120*  ;     or for positioning text at a specific location on the screen.
04AE94             0121*  ;     Characters are plotted using the current graphics foreground colour,
04AE94             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04AE94             0123*  ;     The character background is transparent, and will not overwrite any
04AE94             0124*  ;     graphics that are already present at the character’s location.
04AE94             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04AE94             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04AE94             0127*  ;     graphics background colour.
04AE94             0128*  ; inputs: a is the character to write to the screen
04AE94             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04AE94             0130*  ; outputs: see the name of the function
04AE94             0131*  ; destroys: a, hl, bc
04AE94             0132*  vdu_char_to_gfx_cursor:
04AE94 32 A4 AE 04 0133*  	ld (@arg),a
04AE98 21 A3 AE 04 0134*  	ld hl,@cmd
04AE9C 01 02 00 00 0135*  	ld bc,@end-@cmd
04AEA0 5B DF       0136*  	rst.lil $18
04AEA2 C9          0137*  	ret
04AEA3 05          0138*  @cmd: db 5
04AEA4 00          0139*  @arg: db 0
04AEA5             0140*  @end:
04AEA5             0141*  
04AEA5             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04AEA5             0143*  ;     This enables the screen, and re-enables VDU command processing,
04AEA5             0144*  ;     reversing the effect of VDU 21.
04AEA5             0145*  ; inputs: none
04AEA5             0146*  ; outputs: a functioning screen and VDU
04AEA5             0147*  ; destroys: a
04AEA5             0148*  vdu_enable_screen:
04AEA5 3E 06       0149*      ld a,6
04AEA7 5B D7       0150*  	rst.lil $10
04AEA9 C9          0151*  	ret
04AEAA             0152*  
04AEAA             0153*  ; PASSES
04AEAA             0154*  ; VDU 7: Make a short beep (BEL)
04AEAA             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04AEAA             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04AEAA             0157*  ; inputs: none
04AEAA             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04AEAA             0159*  ; destroys: a
04AEAA             0160*  vdu_beep:
04AEAA 3E 07       0161*      ld a,7
04AEAC 5B D7       0162*  	rst.lil $10
04AEAE C9          0163*  	ret
04AEAF             0164*  
04AEAF             0165*  ; VDU 8: Move cursor back one character
04AEAF             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04AEAF             0167*  ;     By default, when at the start of a line it will move to the end of
04AEAF             0168*  ;     the previous line (as defined by the current text viewport).
04AEAF             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04AEAF             0170*  ;     The cursor remains constrained to the current text viewport.
04AEAF             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04AEAF             0172*  ;     The cursor is just moved left by one character width.
04AEAF             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04AEAF             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04AEAF             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04AEAF             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04AEAF             0177*  vdu_cursor_back:
04AEAF 3E 08       0178*      ld a,8
04AEB1 5B D7       0179*  	rst.lil $10
04AEB3 C9          0180*  	ret
04AEB4             0181*  
04AEB4             0182*  ; VDU 9: Move cursor forward one character
04AEB4             0183*  vdu_cursor_forward:
04AEB4 3E 09       0184*      ld a,9
04AEB6 5B D7       0185*  	rst.lil $10
04AEB8 C9          0186*  	ret
04AEB9             0187*  
04AEB9             0188*  ; VDU 10: Move cursor down one line
04AEB9             0189*  vdu_cursor_down:
04AEB9 3E 0A       0190*      ld a,10
04AEBB 5B D7       0191*  	rst.lil $10
04AEBD C9          0192*  	ret
04AEBE             0193*  
04AEBE             0194*  ; VDU 11: Move cursor up one line
04AEBE             0195*  vdu_cursor_up:
04AEBE 3E 0B       0196*      ld a,11
04AEC0 5B D7       0197*  	rst.lil $10
04AEC2 C9          0198*  	ret
04AEC3             0199*  
04AEC3             0200*  ; VDU 12: Clear text area (CLS)
04AEC3             0201*  vdu_cls:
04AEC3 3E 0C       0202*      ld a,12
04AEC5 5B D7       0203*  	rst.lil $10
04AEC7 C9          0204*  	ret
04AEC8             0205*  
04AEC8             0206*  ; VDU 13: Carriage return
04AEC8             0207*  vdu_cr:
04AEC8 3E 0D       0208*      ld a,13
04AECA 5B D7       0209*  	rst.lil $10
04AECC C9          0210*  	ret
04AECD             0211*  
04AECD             0212*  ; VDU 14: Page mode On *
04AECD             0213*  vdu_page_on:
04AECD 3E 0E       0214*      ld a,14
04AECF 5B D7       0215*  	rst.lil $10
04AED1 C9          0216*  	ret
04AED2             0217*  
04AED2             0218*  ; VDU 15: Page mode Off *
04AED2             0219*  vdu_page_off:
04AED2 3E 0F       0220*      ld a,15
04AED4 5B D7       0221*  	rst.lil $10
04AED6 C9          0222*  	ret
04AED7             0223*  
04AED7             0224*  ; VDU 16: Clear graphics area (CLG)
04AED7             0225*  vdu_clg:
04AED7 3E 10       0226*      ld a,16
04AED9 5B D7       0227*  	rst.lil $10
04AEDB C9          0228*  	ret
04AEDC             0229*  
04AEDC             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04AEDC             0231*  vdu_colour_text:
04AEDC 32 EC AE 04 0232*  	ld (@arg),a
04AEE0 21 EB AE 04 0233*  	ld hl,@cmd
04AEE4 01 02 00 00 0234*  	ld bc,@end-@cmd
04AEE8 5B DF       0235*  	rst.lil $18
04AEEA C9          0236*  	ret
04AEEB 11          0237*  @cmd: db 17
04AEEC 00          0238*  @arg: db 0
04AEED             0239*  @end:
04AEED             0240*  
04AEED             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04AEED             0242*  ; inputs: a is the plotting mode, c is the colour
04AEED             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04AEED             0244*  vdu_gcol_fg:
04AEED             0245*  ; This command will set both the current graphics colour,
04AEED             0246*  ; and the current graphics plotting mode.
04AEED             0247*  ; As with VDU 17 the colour number will set the foreground colour
04AEED             0248*  ; if it is in the range 0-127, or the background colour if it is
04AEED             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04AEED             0250*  ; Support for different plotting modes on Agon is currently very limited.
04AEED             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04AEED             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04AEED             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04AEED             0254*  ; very limited support for mode 4, which will invert the colour of any
04AEED             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04AEED             0256*  ; and may not work as expected.
04AEED             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04AEED             0258*  ; original VDU system, may be added in the future.
04AEED             0259*  ; This command is identical to the BASIC GCOL keyword.
04AEED 32 02 AF 04 0260*  	ld (@mode),a
04AEF1 79          0261*      ld a,c
04AEF2 32 03 AF 04 0262*      ld (@col),a
04AEF6 21 01 AF 04 0263*  	ld hl,@cmd
04AEFA 01 03 00 00 0264*  	ld bc,@end-@cmd
04AEFE 5B DF       0265*  	rst.lil $18
04AF00 C9          0266*  	ret
04AF01 12          0267*  @cmd: db 18
04AF02 00          0268*  @mode: db 0
04AF03 00          0269*  @col: db 0
04AF04             0270*  @end:
04AF04             0271*  
04AF04             0272*  vdu_gcol_bg:
04AF04 32 1B AF 04 0273*  	ld (@mode),a
04AF08 79          0274*      ld a,c
04AF09 C6 80       0275*      add a,128
04AF0B 32 1C AF 04 0276*      ld (@col),a
04AF0F 21 1A AF 04 0277*  	ld hl,@cmd
04AF13 01 03 00 00 0278*  	ld bc,@end-@cmd
04AF17 5B DF       0279*  	rst.lil $18
04AF19 C9          0280*  	ret
04AF1A 12          0281*  @cmd:  db 18
04AF1B 00          0282*  @mode: db 0
04AF1C 00          0283*  @col:  db 0
04AF1D             0284*  @end:
04AF1D             0285*  
04AF1D             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AF1D             0287*  ;     This command sets the colour palette, by mapping a logical colour
04AF1D             0288*  ;     to a physical colour. This is useful for defining custom colours,
04AF1D             0289*  ;     or for redefining the default colours.
04AF1D             0290*  ;     If the physical colour number is given as 255 then the colour will
04AF1D             0291*  ;     be defined using the red, green, and blue values given. If the physical
04AF1D             0292*  ;     colour number is given as any other value then the colour will be defined
04AF1D             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04AF1D             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04AF1D             0295*  ;     must still be provided, but will be ignored.
04AF1D             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04AF1D             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04AF1D             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04AF1D             0299*  ;     requested. The nearest colour will be chosen.
04AF1D             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04AF1D             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04AF1D             0302*  vdu_def_log_colour:
04AF1D 32 42 AF 04 0303*  	ld (@physical),a
04AF21 47          0304*      ld b,a
04AF22 32 41 AF 04 0305*      ld (@logical),a
04AF26 79          0306*      ld a,c
04AF27 32 43 AF 04 0307*      ld (@red),a
04AF2B 7C          0308*      ld a,h
04AF2C 32 44 AF 04 0309*      ld (@green),a
04AF30 7D          0310*      ld a,l
04AF31 32 45 AF 04 0311*      ld (@blue),a
04AF35 21 40 AF 04 0312*  	ld hl,@cmd
04AF39 01 06 00 00 0313*  	ld bc,@end-@cmd
04AF3D 5B DF       0314*  	rst.lil $18
04AF3F C9          0315*  	ret
04AF40 13          0316*  @cmd: db 19
04AF41 00          0317*  @logical: db 0
04AF42 00          0318*  @physical: db 0
04AF43 00          0319*  @red: db 0
04AF44 00          0320*  @green: db 0
04AF45 00          0321*  @blue: db 0
04AF46             0322*  @end:
04AF46             0323*  
04AF46             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AF46             0325*  vdu_reset_gfx:
04AF46 3E 14       0326*      ld a,20
04AF48 5B D7       0327*  	rst.lil $10
04AF4A C9          0328*  	ret
04AF4B             0329*  
04AF4B             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04AF4B             0331*  ; except for VDU 1 and VDU 6) §§
04AF4B             0332*  vdu_disable_screen:
04AF4B 3E 15       0333*      ld a,21
04AF4D 5B D7       0334*  	rst.lil $10
04AF4F C9          0335*  	ret
04AF50             0336*  
04AF50             0337*  ; VDU 22, n: Select screen mode (MODE n)
04AF50             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04AF50             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04AF50             0340*  ; Screen modes
04AF50             0341*  ; Modes over 128 are double-buffered
04AF50             0342*  ; From Version 1.04 or greater
04AF50             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04AF50             0344*  ; 0 	640 	480 	16 	    60hz
04AF50             0345*  ; * 1 	640 	480 	4 	    60hz
04AF50             0346*  ; 2 	640 	480 	2 	    60hz
04AF50             0347*  ; 3 	640 	240 	64 	    60hz
04AF50             0348*  ; 4 	640 	240 	16 	    60hz
04AF50             0349*  ; 5 	640 	240 	4 	    60hz
04AF50             0350*  ; 6 	640 	240 	2 	    60hz
04AF50             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04AF50             0352*  ; 8 	320 	240 	64 	    60hz
04AF50             0353*  ; 9 	320 	240 	16 	    60hz
04AF50             0354*  ; 10 	320 	240 	4 	    60hz
04AF50             0355*  ; 11 	320 	240 	2 	    60hz
04AF50             0356*  ; 12 	320 	200 	64 	    70hz
04AF50             0357*  ; 13 	320 	200 	16 	    70hz
04AF50             0358*  ; 14 	320 	200 	4 	    70hz
04AF50             0359*  ; 15 	320 	200 	2 	    70hz
04AF50             0360*  ; 16 	800 	600 	4 	    60hz
04AF50             0361*  ; 17 	800 	600 	2 	    60hz
04AF50             0362*  ; 18 	1024 	768 	2 	    60hz
04AF50             0363*  ; 129 	640 	480 	4 	    60hz
04AF50             0364*  ; 130 	640 	480 	2 	    60hz
04AF50             0365*  ; 132 	640 	240 	16 	    60hz
04AF50             0366*  ; 133 	640 	240 	4 	    60hz
04AF50             0367*  ; 134 	640 	240 	2 	    60hz
04AF50             0368*  ; 136 	320 	240 	64 	    60hz
04AF50             0369*  ; 137 	320 	240 	16 	    60hz
04AF50             0370*  ; 138 	320 	240 	4 	    60hz
04AF50             0371*  ; 139 	320 	240 	2 	    60hz
04AF50             0372*  ; 140 	320 	200 	64 	    70hz
04AF50             0373*  ; 141 	320 	200 	16 	    70hz
04AF50             0374*  ; 142 	320 	200 	4 	    70hz
04AF50             0375*  ; 143 	320 	200 	2 	    70hz
04AF50             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04AF50             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04AF50             0378*  ; change to the requested mode.
04AF50             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04AF50             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04AF50             0381*  vdu_set_screen_mode:
04AF50 32 60 AF 04 0382*  	ld (@arg),a
04AF54 21 5F AF 04 0383*  	ld hl,@cmd
04AF58 01 02 00 00 0384*  	ld bc,@end-@cmd
04AF5C 5B DF       0385*  	rst.lil $18
04AF5E C9          0386*  	ret
04AF5F 16          0387*  @cmd: db 22 ; set screen mode
04AF60 00          0388*  @arg: db 0  ; screen mode parameter
04AF61             0389*  @end:
04AF61             0390*  
04AF61             0391*  ; VDU 23, n: Re-program display character / System Commands
04AF61             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04AF61             0393*  vdu_define_character:
04AF61 32 7D AF 04 0394*  	ld (@ascii),a
04AF65 11 7E AF 04 0395*  	ld de,@data
04AF69 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04AF6B             0397*  @loop:
04AF6B 7E          0398*  	ld a,(hl)
04AF6C 12          0399*  	ld (de),a
04AF6D 23          0400*  	inc hl
04AF6E 13          0401*  	inc de
04AF6F 10 FA       0402*  	djnz @loop
04AF71 21 7C AF 04 0403*  	ld hl,@cmd
04AF75 01 0A 00 00 0404*  	ld bc,@end-@cmd
04AF79 5B DF       0405*  	rst.lil $18
04AF7B C9          0406*  	ret
04AF7C 17          0407*  @cmd:   db 23
04AF7D 00          0408*  @ascii: db 0
04AF7E             0409*  @data:  ds 8
04AF86             0410*  @end:
04AF86             0411*  
04AF86             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04AF86             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04AF86             0414*  ; 	because we have turned off logical screen scaling
04AF86             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04AF86             0416*  ; outputs; nothing
04AF86             0417*  ; destroys: a might make it out alive
04AF86             0418*  vdu_set_gfx_viewport:
04AF86 ED 43 A6 AF 0419*      ld (@x0),bc
       04          
04AF8B FD 22 A8 AF 0420*      ld (@y1),iy
       04          
04AF90 DD 22 AA AF 0421*  	ld (@x1),ix
       04          
04AF95 ED 53 AC AF 0422*  	ld (@y0),de
       04          
04AF9A 21 A5 AF 04 0423*  	ld hl,@cmd
04AF9E 01 09 00 00 0424*  	ld bc,@end-@cmd
04AFA2 5B DF       0425*  	rst.lil $18
04AFA4 C9          0426*  	ret
04AFA5 18          0427*  @cmd:   db 24 ; set graphics viewport command
04AFA6 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04AFA8 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04AFAA 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04AFAC 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04AFAE 00          0432*  @end:   db 0x00	  ; padding
04AFAF             0433*  
04AFAF             0434*  ; VDU 25, mode, x; y;: PLOT command
04AFAF             0435*  ; Implemented in vdu_plot.asm
04AFAF             0436*  
04AFAF             0437*  ; VDU 26: Reset graphics and text viewports **
04AFAF             0438*  vdu_reset_txt_gfx_view:
04AFAF 3E 1A       0439*      ld a,26
04AFB1 5B D7       0440*  	rst.lil $10
04AFB3 C9          0441*  	ret
04AFB4             0442*  
04AFB4             0443*  ; PASSES
04AFB4             0444*  ; VDU 27, char: Output character to screen §
04AFB4             0445*  ; inputs: a is the ascii code of the character to draw
04AFB4             0446*  vdu_draw_char:
04AFB4 32 C4 AF 04 0447*  	ld (@arg),a
04AFB8 21 C3 AF 04 0448*  	ld hl,@cmd
04AFBC 01 02 00 00 0449*  	ld bc,@end-@cmd
04AFC0 5B DF       0450*  	rst.lil $18
04AFC2 C9          0451*  	ret
04AFC3 1B          0452*  @cmd: db 27
04AFC4 00          0453*  @arg: db 0  ; ascii code of character to draw
04AFC5             0454*  @end:
04AFC5             0455*  
04AFC5             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04AFC5             0457*  ; MIND THE LITTLE-ENDIANESS
04AFC5             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04AFC5             0459*  ; outputs; nothing
04AFC5             0460*  ; destroys: a might make it out alive
04AFC5             0461*  vdu_set_txt_viewport:
04AFC5 ED 43 DB AF 0462*      ld (@lb),bc
       04          
04AFCA ED 53 DD AF 0463*  	ld (@rt),de
       04          
04AFCF 21 DA AF 04 0464*  	ld hl,@cmd
04AFD3 01 05 00 00 0465*  	ld bc,@end-@cmd
04AFD7 5B DF       0466*  	rst.lil $18
04AFD9 C9          0467*  	ret
04AFDA 1C          0468*  @cmd:   db 28 ; set text viewport command
04AFDB 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04AFDD 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04AFDF 00          0471*  @end:   db 0x00	  ; padding
04AFE0             0472*  
04AFE0             0473*  ; PASSES
04AFE0             0474*  ; VDU 29, x; y;: Set graphics origin
04AFE0             0475*  ; inputs: bc,de x,y coordinates
04AFE0             0476*  vdu_set_gfx_origin:
04AFE0 ED 43 F6 AF 0477*      ld (@x0),bc
       04          
04AFE5 ED 53 F8 AF 0478*      ld (@y0),de
       04          
04AFEA 21 F5 AF 04 0479*  	ld hl,@cmd
04AFEE 01 05 00 00 0480*  	ld bc,@end-@cmd
04AFF2 5B DF       0481*  	rst.lil $18
04AFF4 C9          0482*  	ret
04AFF5 1D          0483*  @cmd:	db 29
04AFF6 00 00       0484*  @x0: 	dw 0
04AFF8 00 00       0485*  @y0: 	dw 0
04AFFA 00          0486*  @end: 	db 0 ; padding
04AFFB             0487*  
04AFFB             0488*  ; PASSES
04AFFB             0489*  ; VDU 30: Home cursor
04AFFB             0490*  vdu_home_cursor:
04AFFB 3E 1E       0491*      ld a,30
04AFFD 5B D7       0492*  	rst.lil $10
04AFFF C9          0493*  	ret
04B000             0494*  
04B000             0495*  ; PASSES
04B000             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04B000             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04B000             0498*  vdu_move_cursor:
04B000 ED 43 11 B0 0499*      ld (@x0),bc
       04          
04B005 21 10 B0 04 0500*  	ld hl,@cmd
04B009 01 03 00 00 0501*  	ld bc,@end-@cmd
04B00D 5B DF       0502*  	rst.lil $18
04B00F C9          0503*  	ret
04B010 1F          0504*  @cmd: 	db 31
04B011 00          0505*  @x0:	db 0
04B012 00          0506*  @y0: 	db 0
04B013 00          0507*  @end: 	db 0 ; padding
04B014             0508*  
04B014             0509*  
04B014             0510*  ; VDU 127: Backspace
04B014             0511*  vdu_bksp:
04B014 3E 7F       0512*      ld a,127
04B016 5B D7       0513*  	rst.lil $10
04B018 C9          0514*  	ret
04B019             0515*  
04B019             0516*  ; activate a bitmap in preparation to draw it
04B019             0517*  ; inputs: a holding the bitmap index
04B019             0518*  vdu_bmp_select:
04B019 32 2B B0 04 0519*  	ld (@bmp),a
04B01D 21 28 B0 04 0520*  	ld hl,@cmd
04B021 01 04 00 00 0521*  	ld bc,@end-@cmd
04B025 5B DF       0522*  	rst.lil $18
04B027 C9          0523*  	ret
04B028 17 1B 00    0524*  @cmd: db 23,27,0
04B02B 00          0525*  @bmp: db 0
04B02C             0526*  @end:
04B02C             0527*  
04B02C             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B02C             0529*  ; inputs: hl=bufferId
04B02C             0530*  vdu_buff_select:
04B02C 22 3E B0 04 0531*  	ld (@bufferId),hl
04B030 21 3B B0 04 0532*  	ld hl,@cmd
04B034 01 05 00 00 0533*  	ld bc,@end-@cmd
04B038 5B DF       0534*  	rst.lil $18
04B03A C9          0535*  	ret
04B03B 17 1B 20    0536*  @cmd: db 23,27,0x20
04B03E 00 00       0537*  @bufferId: dw 0x0000
04B040 00          0538*  @end: db 0x00 ; padding
04B041             0539*  
04B041             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04B041             0541*  ; inputs: a=format; bc=width; de=height
04B041             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04B041             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04B041             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04B041             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04B041             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04B041             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04B041             0548*  vdu_bmp_create:
04B041 ED 43 5D B0 0549*      ld (@width),bc
       04          
04B046 ED 53 5F B0 0550*      ld (@height),de
       04          
04B04B 32 61 B0 04 0551*      ld (@fmt),a
04B04F 21 5A B0 04 0552*  	ld hl,@cmd
04B053 01 08 00 00 0553*  	ld bc,@end-@cmd
04B057 5B DF       0554*  	rst.lil $18
04B059 C9          0555*  	ret
04B05A 17 1B 21    0556*  @cmd:       db 23,27,0x21
04B05D 00 00       0557*  @width:     dw 0x0000
04B05F 00 00       0558*  @height:    dw 0x0000
04B061 00          0559*  @fmt:       db 0x00
04B062             0560*  @end:
04B062             0561*  
04B062             0562*  ; Draw a bitmap on the screen
04B062             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04B062             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04B062             0565*  vdu_bmp_draw:
04B062 ED 43 7A B0 0566*      ld (@x0),bc
       04          
04B067 ED 53 7C B0 0567*      ld (@y0),de
       04          
04B06C 21 77 B0 04 0568*  	ld hl,@cmd
04B070 01 07 00 00 0569*  	ld bc,@end-@cmd
04B074 5B DF       0570*  	rst.lil $18
04B076 C9          0571*  	ret
04B077 17 1B 03    0572*  @cmd: db 23,27,3
04B07A 00 00       0573*  @x0:  dw 0x0000
04B07C 00 00       0574*  @y0:  dw 0x0000
04B07E 00          0575*  @end: db 0x00 ; padding
04B07F             0576*  
04B07F             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04B07F             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04B07F             0579*  ; note: default setting on boot is scaling ON
04B07F             0580*  vdu_set_scaling:
04B07F 32 91 B0 04 0581*  	ld (@arg),a
04B083 21 8E B0 04 0582*  	ld hl,@cmd
04B087 01 04 00 00 0583*  	ld bc,@end-@cmd
04B08B 5B DF       0584*  	rst.lil $18
04B08D C9          0585*  	ret
04B08E 17 00 C0    0586*  @cmd: db 23,0,0xC0
04B091 00          0587*  @arg: db 0  ; scaling on/off
04B092             0588*  @end:
04B092             0589*  
04B092             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04B092             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04B092             0592*  ; 	(all modes).
04B092             0593*  
04B092             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04B092             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04B092             0596*  ; 	mode is not double-buffered then this command will wait for the next
04B092             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04B092             0598*  ; 	screen with the vertical refresh rate of the monitor.
04B092             0599*  
04B092             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04B092             0601*  ; 	as it will prevent tearing of the screen.
04B092             0602*  ; inputs: none
04B092             0603*  ; outputs: none
04B092             0604*  ; destroys: hl, bc
04B092             0605*  vdu_flip:
04B092 21 9D B0 04 0606*  	ld hl,@cmd
04B096 01 03 00 00 0607*  	ld bc,@end-@cmd
04B09A 5B DF       0608*  	rst.lil $18
04B09C C9          0609*  	ret
04B09D 17 00 C3    0610*  @cmd: db 23,0,0xC3
04B0A0             0611*  @end:
04B0A0             0612*  
04B0A0             0613*  ; Command 64: Compress a buffer
04B0A0             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04B0A0             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B0A0             0616*  
04B0A0             0617*  
04B0A0             0618*  ; Command 65: Decompress a buffer
04B0A0             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04B0A0             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B0A0             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04B0A0             0622*  vdu_decompress_buffer:
04B0A0 22 BC B0 04 0623*  	ld (@targetBufferId),hl
04B0A4 22 BF B0 04 0624*  	ld (@sourceBufferId),hl
04B0A8 3E 41       0625*  	ld a,65
04B0AA 32 BE B0 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04B0AE 21 B9 B0 04 0627*  	ld hl,@cmd
04B0B2 01 08 00 00 0628*  	ld bc,@end-@cmd
04B0B6 5B DF       0629*  	rst.lil $18
04B0B8 C9          0630*  	ret
04B0B9 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04B0BC 00 00       0632*  @targetBufferId: dw 0x0000
04B0BE 41          0633*  @cmd1:	db 65
04B0BF 00 00       0634*  @sourceBufferId: dw 0x0000
04B0C1 00          0635*  @end: 	db 0x00 ; padding
04B0C2             0636*  
04B0C2             0637*  ; Command 65: Decompress a buffer
04B0C2             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04B0C2             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B0C2             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04B0C2             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04B0C2             0642*  vdu_decompress_buffer_different:
04B0C2 22 E2 B0 04 0643*  	ld (@targetBufferId),hl
04B0C6 21 FF 7F 00 0644*      ld hl,0x7FFF
04B0CA 22 E5 B0 04 0645*  	ld (@sourceBufferId),hl
04B0CE 3E 41       0646*  	ld a,65
04B0D0 32 E4 B0 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04B0D4 21 DF B0 04 0648*  	ld hl,@cmd
04B0D8 01 08 00 00 0649*  	ld bc,@end-@cmd
04B0DC 5B DF       0650*  	rst.lil $18
04B0DE C9          0651*  	ret
04B0DF 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04B0E2 00 00       0653*  @targetBufferId: dw 0x0000
04B0E4 41          0654*  @cmd1:	db 65
04B0E5 00 00       0655*  @sourceBufferId: dw 0x0000
04B0E7 00          0656*  @end: 	db 0x00 ; padding
04B0E8             0657*  
04B0E8             0658*  ; #### from vdp.asm ####
04B0E8             0659*  
04B0E8             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04B0E8             0661*  ; VDU 23, 7: Scrolling
04B0E8             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04B0E8             0663*  ; inputs: a, extent; l, direction; h; speed
04B0E8             0664*  vdu_scroll_down:
04B0E8 32 FD B0 04 0665*  	ld (@extent),a
04B0EC 22 FE B0 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04B0F0 21 FB B0 04 0667*  	ld hl,@cmd
04B0F4 01 05 00 00 0668*  	ld bc,@end-@cmd
04B0F8 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04B0FA C9          0670*  	ret
04B0FB 17 07       0671*  @cmd:       db 23,7
04B0FD 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04B0FE 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04B0FF 00          0674*  @speed:     db 0x00 ; pixels
04B100 00          0675*  @end:		db 0x00 ; padding
04B101             0676*  
04B101             0677*  cursor_on:
04B101 21 0C B1 04 0678*  	ld hl,@cmd
04B105 01 03 00 00 0679*  	ld bc,@end-@cmd
04B109 5B DF       0680*  	rst.lil $18
04B10B C9          0681*  	ret
04B10C             0682*  @cmd:
04B10C 17 01 01    0683*  	db 23,1,1
04B10F             0684*  @end:
04B10F             0685*  
04B10F             0686*  cursor_off:
04B10F 21 1A B1 04 0687*  	ld hl,@cmd
04B113 01 03 00 00 0688*  	ld bc,@end-@cmd
04B117 5B DF       0689*  	rst.lil $18
04B119 C9          0690*  	ret
04B11A             0691*  @cmd:
04B11A 17 01 00    0692*  	db 23,1,0
04B11D             0693*  @end:
04B11D             0694*  
04B11D DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04B11F             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04B11F 3E 08       0001*M 			LD	A, function
04B121 5B CF       0002*M 			RST.LIL	08h
04B123 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04B126 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04B129 28 FB       0699*  			JR	Z, @wait
04B12B DD E1       0700*  			POP	IX
04B12D C9          0701*  			RET
04B12E             0702*  
04B12E             0703*  ; #### from vdu_bmp.asm ####
04B12E             0704*  ; =========================================================================
04B12E             0705*  ; Bitmaps
04B12E             0706*  ; -------------------------------------------------------------------------
04B12E             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04B12E             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04B12E             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04B12E             0710*  
04B12E             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04B12E             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04B12E             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04B12E             0714*  ; typically "move" style plot commands are used to define the rectangle.
04B12E             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04B12E             0716*  ; inputs: hl; target bufferId
04B12E             0717*  ; all the following are in 16.8 fixed point format
04B12E             0718*  ;   ub.c; top-left x coordinate
04B12E             0719*  ;   ud.e; top-left y coordinate
04B12E             0720*  ;   ui.x; width
04B12E             0721*  ;   ui.y; height
04B12E             0722*  vdu_buff_screen_capture168:
04B12E ED 53 65 B1 0723*          ld (@y0-1),de
       04          
04B133 ED 43 63 B1 0724*          ld (@x0-1),bc
       04          
04B138 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04B13A 32 63 B1 04 0726*          ld (@x0-1),a
04B13E             0727*  
04B13E DD 22 6A B1 0728*          ld (@x1),ix
       04          
04B143 FD 22 6C B1 0729*          ld (@y1),iy
       04          
04B148 3E 17       0730*          ld a,23
04B14A 32 6E B1 04 0731*          ld (@y1+2),a
04B14E             0732*  
04B14E 22 71 B1 04 0733*          ld (@bufId),hl
04B152 AF          0734*          xor a
04B153 32 73 B1 04 0735*          ld (@bufId+2),a
04B157             0736*  
04B157 21 62 B1 04 0737*          ld hl,@begin
04B15B 01 13 00 00 0738*          ld bc,@end-@begin
04B15F 5B DF       0739*          rst.lil $18
04B161 C9          0740*          ret
04B162             0741*  @begin:
04B162             0742*  ; absolute move gfx cursor to top-left screen coordinate
04B162             0743*  ; VDU 25, mode, x; y;: PLOT command
04B162 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04B164 40 00       0745*  @x0: 	dw 64
04B166 40 00       0746*  @y0: 	dw 64
04B168             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04B168             0748*  ; VDU 25, mode, x; y;: PLOT command
04B168 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04B16A 0F 00       0750*  @x1: 	dw 15
04B16C 0F 00       0751*  @y1: 	dw 15
04B16E             0752*  ; now the main event
04B16E             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04B16E 17 1B 21    0754*          db 23,27,0x21
04B171 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04B175             0756*  @end: ; no padding required
04B175             0757*  
04B175             0758*  vdu_buff_screen_capture_full:
04B175 21 80 B1 04 0759*          ld hl,@begin
04B179 01 13 00 00 0760*          ld bc,@end-@begin
04B17D 5B DF       0761*          rst.lil $18
04B17F C9          0762*          ret
04B180             0763*  @begin:
04B180             0764*  ; absolute move gfx cursor to top-left screen coordinate
04B180             0765*  ; VDU 25, mode, x; y;: PLOT command
04B180 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04B182 00 00       0767*  @x0: 	dw 0
04B184 00 00       0768*  @y0: 	dw 0
04B186             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04B186             0770*  ; VDU 25, mode, x; y;: PLOT command
04B186 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04B188 3F 01       0772*  @x1: 	dw 319
04B18A EF 00       0773*  @y1: 	dw 239
04B18C             0774*  ; now the main event
04B18C             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04B18C 17 1B 21    0776*          db 23,27,0x21
04B18F 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04B193             0778*  @end: ; no padding required
04B193             0779*  
04B193             0780*  vdu_buff_screen_paste_full:
04B193 21 9E B1 04 0781*          ld hl,@begin
04B197 01 0B 00 00 0782*          ld bc,@end-@begin
04B19B 5B DF       0783*          rst.lil $18
04B19D C9          0784*          ret
04B19E             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B19E 17 1B 20    0786*  @begin:    db 23,27,0x20
04B1A1 00 20       0787*  @bufferId: dw 0x2000
04B1A3             0788*  ; VDU 25, mode, x; y;: PLOT command
04B1A3 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04B1A5 00 00 00 00 0790*             dw 0x0000,0x0000
04B1A9             0791*  @end: ; no padding required
04B1A9             0792*  
04B1A9             0793*  vdu_buff_screen_capture_tiles:
04B1A9 21 B4 B1 04 0794*          ld hl,@begin
04B1AD 01 13 00 00 0795*          ld bc,@end-@begin
04B1B1 5B DF       0796*          rst.lil $18
04B1B3 C9          0797*          ret
04B1B4             0798*  @begin:
04B1B4             0799*  ; absolute move gfx cursor to top-left screen coordinate
04B1B4             0800*  ; VDU 25, mode, x; y;: PLOT command
04B1B4 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04B1B6 00 00       0802*  @x0: 	dw 0
04B1B8 00 00       0803*  @y0: 	dw 0
04B1BA             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04B1BA             0805*  ; VDU 25, mode, x; y;: PLOT command
04B1BA 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04B1BC FF 00       0807*  @x1: 	dw 319-64
04B1BE EF 00       0808*  @y1: 	dw 239
04B1C0             0809*  ; now the main event
04B1C0             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04B1C0 17 1B 21    0811*          db 23,27,0x21
04B1C3 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04B1C7             0813*  @end: ; no padding required
04B1C7             0814*  
04B1C7             0815*  vdu_buff_screen_paste_tiles:
04B1C7 21 D2 B1 04 0816*          ld hl,@begin
04B1CB 01 0B 00 00 0817*          ld bc,@end-@begin
04B1CF 5B DF       0818*          rst.lil $18
04B1D1 C9          0819*          ret
04B1D2             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B1D2 17 1B 20    0821*  @begin:    db 23,27,0x20
04B1D5 00 20       0822*  @bufferId: dw 0x2000
04B1D7             0823*  ; VDU 25, mode, x; y;: PLOT command
04B1D7 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04B1D9 00 00 01 00 0825*             dw 0x0000,0x0001
04B1DD             0826*  @end: ; no padding required
04B1DD             0827*  
04B1DD             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04B1DD             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04B1DD             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04B1DD             0831*  ; Value	Meaning
04B1DD             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04B1DD             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04B1DD             0834*  ; 2	Mono/Mask (1-bit per pixel)
04B1DD             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04B1DD             0836*  ;     They have some significant limitations, and are not intended for general use.
04B1DD             0837*  
04B1DD             0838*  ; =========================================================================
04B1DD             0839*  ; Sprites
04B1DD             0840*  ; -------------------------------------------------------------------------
04B1DD             0841*  ; VDU 23, 27, 4, n: Select sprite n
04B1DD             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04B1DD             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B1DD             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04B1DD             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04B1DD             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04B1DD             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04B1DD             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B1DD             0849*  ; VDU 23, 27, 11: Show current sprite
04B1DD             0850*  ; VDU 23, 27, 12: Hide current sprite
04B1DD             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B1DD             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B1DD             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B1DD             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B1DD             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B1DD             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B1DD             0857*  
04B1DD             0858*  ; =========================================================================
04B1DD             0859*  ; Mouse cursor
04B1DD             0860*  ; -------------------------------------------------------------------------
04B1DD             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04B1DD             0862*  
04B1DD             0863*  ; #### from vdu_plot.asm ####
04B1DD             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B1DD             0865*  ; PLOT code 	(Decimal) 	Effect
04B1DD             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04B1DD             0867*  plot_sl_both: equ 0x00
04B1DD             0868*  
04B1DD             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04B1DD             0870*  plot_sl_first: equ 0x08
04B1DD             0871*  
04B1DD             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04B1DD             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04B1DD             0874*  
04B1DD             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04B1DD             0876*  plot_sl_last: equ 0x20
04B1DD             0877*  
04B1DD             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04B1DD             0879*  plot_sl_none: equ 0x28
04B1DD             0880*  
04B1DD             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04B1DD             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04B1DD             0883*  
04B1DD             0884*  ; &40-&47 	64-71 	Point plot
04B1DD             0885*  plot_pt: equ 0x40
04B1DD             0886*  
04B1DD             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04B1DD             0888*  plot_lf_lr_non_bg: equ 0x48
04B1DD             0889*  
04B1DD             0890*  ; &50-&57 	80-87 	Triangle fill
04B1DD             0891*  plot_tf: equ 0x50
04B1DD             0892*  
04B1DD             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04B1DD             0894*  plot_lf_r_bg: equ 0x58
04B1DD             0895*  
04B1DD             0896*  ; &60-&67 	96-103 	Rectangle fill
04B1DD             0897*  plot_rf: equ 0x60
04B1DD             0898*  
04B1DD             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04B1DD             0900*  plot_lf_lr_fg: equ 0x60
04B1DD             0901*  
04B1DD             0902*  ; &70-&77 	112-119 	Parallelogram fill
04B1DD             0903*  plot_pf: equ 0x70
04B1DD             0904*  
04B1DD             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04B1DD             0906*  plot_lf_r_non_fg: equ 0x78
04B1DD             0907*  
04B1DD             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04B1DD             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04B1DD             0910*  
04B1DD             0911*  ; &90-&97 	144-151 	Circle outline
04B1DD             0912*  plot_co: equ 0x90
04B1DD             0913*  
04B1DD             0914*  ; &98-&9F 	152-159 	Circle fill
04B1DD             0915*  plot_cf: equ 0x98
04B1DD             0916*  
04B1DD             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04B1DD             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04B1DD             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04B1DD             0920*  
04B1DD             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04B1DD             0922*  plot_rcm: equ 0xB8
04B1DD             0923*  
04B1DD             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04B1DD             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04B1DD             0926*  ; &D0-&D7 	208-215 	Not defined
04B1DD             0927*  ; &D8-&DF 	216-223 	Not defined
04B1DD             0928*  ; &E0-&E7 	224-231 	Not defined
04B1DD             0929*  
04B1DD             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04B1DD             0931*  plot_bmp: equ 0xE8
04B1DD             0932*  
04B1DD             0933*  ; &F0-&F7 	240-247 	Not defined
04B1DD             0934*  ; &F8-&FF 	248-255 	Not defined
04B1DD             0935*  
04B1DD             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04B1DD             0937*  ; Agon Console8 VDP 2.2.0
04B1DD             0938*  
04B1DD             0939*  ; Within each group of eight plot codes, the effects are as follows:
04B1DD             0940*  ; Plot code 	Effect
04B1DD             0941*  ; 0 	Move relative
04B1DD             0942*  mv_rel: equ 0
04B1DD             0943*  
04B1DD             0944*  ; 1 	Plot relative in current foreground colour
04B1DD             0945*  dr_rel_fg: equ 1
04B1DD             0946*  
04B1DD             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04B1DD             0948*  ; 3 	Plot relative in current background colour
04B1DD             0949*  dr_rel_bg: equ 3
04B1DD             0950*  
04B1DD             0951*  ; 4 	Move absolute
04B1DD             0952*  mv_abs: equ 4
04B1DD             0953*  
04B1DD             0954*  ; 5 	Plot absolute in current foreground colour
04B1DD             0955*  dr_abs_fg: equ 5
04B1DD             0956*  
04B1DD             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04B1DD             0958*  ; 7 	Plot absolute in current background colour
04B1DD             0959*  dr_abs_bg: equ 7
04B1DD             0960*  
04B1DD             0961*  ; Codes 0-3 use the position data provided as part of the command
04B1DD             0962*  ; as a relative position, adding the position given to the current
04B1DD             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04B1DD             0964*  ; as part of the command as an absolute position, setting the current
04B1DD             0965*  ; graphical cursor position to the position given.
04B1DD             0966*  
04B1DD             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04B1DD             0968*  ; current pixel colour. These operations cannot currently be supported
04B1DD             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04B1DD             0970*  ; supported. Support for these codes may be added in a future version
04B1DD             0971*  ; of the VDP firmware.
04B1DD             0972*  
04B1DD             0973*  ; 16 colour palette constants
04B1DD             0974*  c_black: equ 0
04B1DD             0975*  c_red_dk: equ 1
04B1DD             0976*  c_green_dk: equ 2
04B1DD             0977*  c_yellow_dk: equ 3
04B1DD             0978*  c_blue_dk: equ 4
04B1DD             0979*  c_magenta_dk: equ 5
04B1DD             0980*  c_cyan_dk: equ 6
04B1DD             0981*  c_grey: equ 7
04B1DD             0982*  c_grey_dk: equ 8
04B1DD             0983*  c_red: equ 9
04B1DD             0984*  c_green: equ 10
04B1DD             0985*  c_yellow: equ 11
04B1DD             0986*  c_blue: equ 12
04B1DD             0987*  c_magenta: equ 13
04B1DD             0988*  c_cyan: equ 14
04B1DD             0989*  c_white: equ 15
04B1DD             0990*  
04B1DD             0991*  ; VDU 25, mode, x; y;: PLOT command
04B1DD             0992*  ; inputs: a=mode, bc=x0, de=y0
04B1DD             0993*  vdu_plot:
04B1DD 32 F7 B1 04 0994*      ld (@mode),a
04B1E1 ED 43 F8 B1 0995*      ld (@x0),bc
       04          
04B1E6 ED 53 FA B1 0996*      ld (@y0),de
       04          
04B1EB 21 F6 B1 04 0997*  	ld hl,@cmd
04B1EF 01 06 00 00 0998*  	ld bc,@end-@cmd
04B1F3 5B DF       0999*  	rst.lil $18
04B1F5 C9          1000*  	ret
04B1F6 19          1001*  @cmd:   db 25
04B1F7 00          1002*  @mode:  db 0
04B1F8 00 00       1003*  @x0: 	dw 0
04B1FA 00 00       1004*  @y0: 	dw 0
04B1FC 00          1005*  @end:   db 0 ; extra byte to soak up deu
04B1FD             1006*  
04B1FD             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B1FD             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04B1FD             1009*  ; VDU 25, mode, x; y;: PLOT command
04B1FD             1010*  ; inputs: bc=x0, de=y0
04B1FD             1011*  ; prerequisites: vdu_buff_select
04B1FD             1012*  vdu_plot_bmp:
04B1FD ED 43 14 B2 1013*      ld (@x0),bc
       04          
04B202 ED 53 16 B2 1014*      ld (@y0),de
       04          
04B207 21 12 B2 04 1015*  	ld hl,@cmd
04B20B 01 06 00 00 1016*  	ld bc,@end-@cmd
04B20F 5B DF       1017*  	rst.lil $18
04B211 C9          1018*  	ret
04B212 19          1019*  @cmd:   db 25
04B213 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B214 00 00       1021*  @x0: 	dw 0x0000
04B216 00 00       1022*  @y0: 	dw 0x0000
04B218 00          1023*  @end:   db 0x00 ; padding
04B219             1024*  
04B219             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B219             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04B219             1027*  ; VDU 25, mode, x; y;: PLOT command
04B219             1028*  ; inputs: bc=x0, de=y0
04B219             1029*  ; USING 16.8 FIXED POINT COORDINATES
04B219             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B219             1031*  ;   the fractional portiion of the inputs are truncated
04B219             1032*  ;   leaving only the 16-bit integer portion
04B219             1033*  ; prerequisites: vdu_buff_select
04B219             1034*  vdu_plot_bmp168:
04B219             1035*  ; populate in the reverse of normal to keep the
04B219             1036*  ; inputs from stomping on each other
04B219 ED 53 37 B2 1037*      ld (@y0-1),de
       04          
04B21E ED 43 35 B2 1038*      ld (@x0-1),bc
       04          
04B223 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04B225 32 35 B2 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04B229 21 34 B2 04 1041*  	ld hl,@cmd
04B22D 01 06 00 00 1042*  	ld bc,@end-@cmd
04B231 5B DF       1043*  	rst.lil $18
04B233 C9          1044*  	ret
04B234 19          1045*  @cmd:   db 25
04B235 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B236 00 00       1047*  @x0: 	dw 0x0000
04B238 00 00       1048*  @y0: 	dw 0x0000
04B23A             1049*  @end:  ; no padding required b/c we shifted de right
04B23A             1050*  
04B23A             1051*  ; draw a filled rectangle
04B23A             1052*  vdu_plot_rf:
04B23A ED 43 61 B2 1053*      ld (@x0),bc
       04          
04B23F ED 53 63 B2 1054*      ld (@y0),de
       04          
04B244 DD 22 67 B2 1055*      ld (@x1),ix
       04          
04B249 FD 22 69 B2 1056*      ld (@y1),iy
       04          
04B24E 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04B250 32 65 B2 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B254 21 5F B2 04 1059*  	ld hl,@cmd0
04B258 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04B25C 5B DF       1061*  	rst.lil $18
04B25E C9          1062*      ret
04B25F 19          1063*  @cmd0:  db 25 ; plot
04B260 04          1064*  @arg0:  db plot_sl_both+mv_abs
04B261 00 00       1065*  @x0:    dw 0x0000
04B263 00 00       1066*  @y0:    dw 0x0000
04B265 19          1067*  @cmd1:  db 25 ; plot
04B266 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04B267 00 00       1069*  @x1:    dw 0x0000
04B269 00 00       1070*  @y1:    dw 0x0000
04B26B 00          1071*  @end:   db 0x00 ; padding
04B26C             1072*  
04B26C             1073*  ; draw a filled circle
04B26C             1074*  vdu_plot_cf:
04B26C ED 43 93 B2 1075*      ld (@x0),bc
       04          
04B271 ED 53 95 B2 1076*      ld (@y0),de
       04          
04B276 DD 22 99 B2 1077*      ld (@x1),ix
       04          
04B27B FD 22 9B B2 1078*      ld (@y1),iy
       04          
04B280 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04B282 32 97 B2 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B286 21 91 B2 04 1081*  	ld hl,@cmd0
04B28A 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04B28E 5B DF       1083*  	rst.lil $18
04B290 C9          1084*      ret
04B291 19          1085*  @cmd0:  db 25 ; plot
04B292 04          1086*  @arg0:  db plot_sl_both+mv_abs
04B293 00 00       1087*  @x0:    dw 0x0000
04B295 00 00       1088*  @y0:    dw 0x0000
04B297 19          1089*  @cmd1:  db 25 ; plot
04B298 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04B299 00 00       1091*  @x1:    dw 0x0000
04B29B 00 00       1092*  @y1:    dw 0x0000
04B29D 00          1093*  @end:   db 0x00 ; padding
04B29E             1094*  
04B29E             1095*  ; #### from vdu_sprites.asm ####
04B29E             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04B29E             1097*  ; the VDP can support up to 256 sprites. They must be defined
04B29E             1098*  ; contiguously, and so the first sprite is sprite 0.
04B29E             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04B29E             1100*  ; Once a selection of sprites have been defined, you can activate
04B29E             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04B29E             1102*  ; of sprites to activate. This will activate the first n sprites,
04B29E             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04B29E             1104*  
04B29E             1105*  ; A single sprite can have multiple "frames", referring to
04B29E             1106*  ; different bitmaps.
04B29E             1107*  ; (These bitmaps do not need to be the same size.)
04B29E             1108*  ; This allows a sprite to include an animation sequence,
04B29E             1109*  ; which can be stepped through one frame at a time, or picked
04B29E             1110*  ; in any order.
04B29E             1111*  
04B29E             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04B29E             1113*  ; be noted however that "native" format bitmaps are not
04B29E             1114*  ; recommended for use as sprite frames, as they cannot get
04B29E             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04B29E             1116*  ; format is not really intended for general use.) This is part
04B29E             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04B29E             1118*  ; screen are now stored in RGBA2222 format.
04B29E             1119*  
04B29E             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04B29E             1121*  ; and then later shown again.
04B29E             1122*  
04B29E             1123*  ; Moving sprites around the screen is done by changing the
04B29E             1124*  ; position of the sprite. This can be done either by setting
04B29E             1125*  ; the absolute position of the sprite, or by moving the sprite
04B29E             1126*  ; by a given number of pixels. (Sprites are positioned using
04B29E             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04B29E             1128*  ; In the current sprite system, sprites will not update their
04B29E             1129*  ; position on-screen until either another drawing operation is
04B29E             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04B29E             1131*  
04B29E             1132*  ; Here are the sprite commands:
04B29E             1133*  ;
04B29E             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04B29E             1135*  ; inputs: a is the 8-bit sprite id
04B29E             1136*  ; vdu_sprite_select:
04B29E             1137*  
04B29E             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04B29E             1139*  ; inputs: none
04B29E             1140*  ; prerequisites: vdu_sprite_select
04B29E             1141*  ; vdu_sprite_clear_frames:
04B29E             1142*  
04B29E             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B29E             1144*  ; inputs: a is the 8-bit bitmap number
04B29E             1145*  ; prerequisites: vdu_sprite_select
04B29E             1146*  ; vdu_sprite_add_bmp:
04B29E             1147*  
04B29E             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04B29E             1149*  ; inputs: a is the number of sprites to activate
04B29E             1150*  ; vdu_sprite_activate:
04B29E             1151*  
04B29E             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04B29E             1153*  ; inputs: none
04B29E             1154*  ; prerequisites: vdu_sprite_select
04B29E             1155*  ; vdu_sprite_next_frame:
04B29E             1156*  
04B29E             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04B29E             1158*  ; inputs: none
04B29E             1159*  ; prerequisites: vdu_sprite_select
04B29E             1160*  ; vdu_sprite_prev_frame:
04B29E             1161*  
04B29E             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B29E             1163*  ; inputs: a is frame number to select
04B29E             1164*  ; prerequisites: vdu_sprite_select
04B29E             1165*  ; vdu_sprite_select_frame:
04B29E             1166*  
04B29E             1167*  ; VDU 23, 27, 11: Show current sprite
04B29E             1168*  ; inputs: none
04B29E             1169*  ; prerequisites: vdu_sprite_select
04B29E             1170*  ; vdu_sprite_show:
04B29E             1171*  
04B29E             1172*  ; VDU 23, 27, 12: Hide current sprite
04B29E             1173*  ; inputs: none
04B29E             1174*  ; prerequisites: vdu_sprite_select
04B29E             1175*  ; vdu_sprite_hide:
04B29E             1176*  
04B29E             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B29E             1178*  ; inputs: bc is x coordinate, de is y coordinate
04B29E             1179*  ; prerequisites: vdu_sprite_select
04B29E             1180*  ; vdu_sprite_move_abs:
04B29E             1181*  ;
04B29E             1182*  ; USING 16.8 FIXED POINT COORDINATES
04B29E             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B29E             1184*  ;   the fractional portiion of the inputs are truncated
04B29E             1185*  ;   leaving only the 16-bit integer portion
04B29E             1186*  ; prerequisites: vdu_sprite_select
04B29E             1187*  ; vdu_sprite_move_abs168:
04B29E             1188*  
04B29E             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B29E             1190*  ; inputs: bc is x coordinate, de is y coordinate
04B29E             1191*  ; prerequisites: vdu_sprite_select
04B29E             1192*  ; vdu_sprite_move_rel:
04B29E             1193*  ;
04B29E             1194*  ; USING 16.8 FIXED POINT COORDINATES
04B29E             1195*  ; inputs: ub.c is dx, ud.e is dy
04B29E             1196*  ;   the fractional portiion of the inputs are truncated
04B29E             1197*  ;   leaving only the 16-bit integer portion
04B29E             1198*  ; prerequisites: vdu_sprite_select
04B29E             1199*  ; vdu_sprite_move_rel168:
04B29E             1200*  
04B29E             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B29E             1202*  ; inputs: none
04B29E             1203*  ; vdu_sprite_update:
04B29E             1204*  
04B29E             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B29E             1206*  ; inputs: none
04B29E             1207*  ; vdu_sprite_bmp_reset:
04B29E             1208*  
04B29E             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B29E             1210*  ; inputs: none
04B29E             1211*  ; vdu_sprite_reset:
04B29E             1212*  
04B29E             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B29E             1214*  ; inputs: a is the GCOL paint mode
04B29E             1215*  ; prerequisites: vdu_sprite_select
04B29E             1216*  ; vdu_sprite_set_gcol:
04B29E             1217*  
04B29E             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04B29E             1219*  ; inputs: hl=bufferId
04B29E             1220*  ; prerequisites: vdu_sprite_select
04B29E             1221*  ; vdu_sprite_add_buff:
04B29E             1222*  
04B29E             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04B29E             1224*  
04B29E             1225*  ; VDU 23, 27, 4, n: Select sprite n
04B29E             1226*  ; inputs: a is the 8-bit sprite id
04B29E             1227*  vdu_sprite_select:
04B29E 32 B0 B2 04 1228*      ld (@sprite),a
04B2A2 21 AD B2 04 1229*      ld hl,@cmd
04B2A6 01 04 00 00 1230*      ld bc,@end-@cmd
04B2AA 5B DF       1231*      rst.lil $18
04B2AC C9          1232*      ret
04B2AD 17 1B 04    1233*  @cmd:    db 23,27,4
04B2B0 00          1234*  @sprite: db 0x00
04B2B1             1235*  @end:
04B2B1             1236*  
04B2B1             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04B2B1             1238*  ; inputs: none
04B2B1             1239*  ; prerequisites: vdu_sprite_select
04B2B1             1240*  vdu_sprite_clear_frames:
04B2B1 21 BC B2 04 1241*      ld hl,@cmd
04B2B5 01 03 00 00 1242*      ld bc,@end-@cmd
04B2B9 5B DF       1243*      rst.lil $18
04B2BB C9          1244*      ret
04B2BC 17 1B 05    1245*  @cmd: db 23,27,5
04B2BF             1246*  @end:
04B2BF             1247*  
04B2BF             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B2BF             1249*  ; inputs: a is the 8-bit bitmap number
04B2BF             1250*  ; prerequisites: vdu_sprite_select
04B2BF             1251*  vdu_sprite_add_bmp:
04B2BF 32 D1 B2 04 1252*      ld (@bmp),a
04B2C3 21 CE B2 04 1253*      ld hl,@cmd
04B2C7 01 04 00 00 1254*      ld bc,@end-@cmd
04B2CB 5B DF       1255*      rst.lil $18
04B2CD C9          1256*      ret
04B2CE 17 1B 06    1257*  @cmd: db 23,27,6
04B2D1 00          1258*  @bmp: db 0x00
04B2D2             1259*  @end:
04B2D2             1260*  
04B2D2             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04B2D2             1262*  ; inputs: a is the number of sprites to activate
04B2D2             1263*  vdu_sprite_activate:
04B2D2 32 E4 B2 04 1264*      ld (@num),a
04B2D6 21 E1 B2 04 1265*      ld hl,@cmd
04B2DA 01 04 00 00 1266*      ld bc,@end-@cmd
04B2DE 5B DF       1267*      rst.lil $18
04B2E0 C9          1268*      ret
04B2E1 17 1B 07    1269*  @cmd: db 23,27,7
04B2E4 00          1270*  @num: db 0x00
04B2E5             1271*  @end:
04B2E5             1272*  
04B2E5             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04B2E5             1274*  ; inputs: none
04B2E5             1275*  ; prerequisites: vdu_sprite_select
04B2E5             1276*  vdu_sprite_next_frame:
04B2E5 21 F0 B2 04 1277*      ld hl,@cmd
04B2E9 01 03 00 00 1278*      ld bc,@end-@cmd
04B2ED 5B DF       1279*      rst.lil $18
04B2EF C9          1280*      ret
04B2F0 17 1B 08    1281*  @cmd: db 23,27,8
04B2F3             1282*  @end:
04B2F3             1283*  
04B2F3             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04B2F3             1285*  ; inputs: none
04B2F3             1286*  ; prerequisites: vdu_sprite_select
04B2F3             1287*  vdu_sprite_prev_frame:
04B2F3 21 FE B2 04 1288*      ld hl,@cmd
04B2F7 01 03 00 00 1289*      ld bc,@end-@cmd
04B2FB 5B DF       1290*      rst.lil $18
04B2FD C9          1291*      ret
04B2FE 17 1B 09    1292*  @cmd: db 23,27,9
04B301             1293*  @end:
04B301             1294*  
04B301             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B301             1296*  ; inputs: a is frame number to select
04B301             1297*  ; prerequisites: vdu_sprite_select
04B301             1298*  vdu_sprite_select_frame:
04B301 32 13 B3 04 1299*      ld (@frame),a
04B305 21 10 B3 04 1300*      ld hl,@cmd
04B309 01 04 00 00 1301*      ld bc,@end-@cmd
04B30D 5B DF       1302*      rst.lil $18
04B30F C9          1303*      ret
04B310 17 1B 0A    1304*  @cmd:    db 23,27,10
04B313 00          1305*  @frame:  db 0x00
04B314             1306*  @end:
04B314             1307*  
04B314             1308*  ; VDU 23, 27, 11: Show current sprite
04B314             1309*  ; inputs: none
04B314             1310*  ; prerequisites: vdu_sprite_select
04B314             1311*  vdu_sprite_show:
04B314 21 1F B3 04 1312*      ld hl,@cmd
04B318 01 03 00 00 1313*      ld bc,@end-@cmd
04B31C 5B DF       1314*      rst.lil $18
04B31E C9          1315*      ret
04B31F 17 1B 0B    1316*  @cmd: db 23,27,11
04B322             1317*  @end:
04B322             1318*  
04B322             1319*  ; VDU 23, 27, 12: Hide current sprite
04B322             1320*  ; inputs: none
04B322             1321*  ; prerequisites: vdu_sprite_select
04B322             1322*  vdu_sprite_hide:
04B322 21 2D B3 04 1323*      ld hl,@cmd
04B326 01 03 00 00 1324*      ld bc,@end-@cmd
04B32A 5B DF       1325*      rst.lil $18
04B32C C9          1326*      ret
04B32D 17 1B 0C    1327*  @cmd: db 23,27,12
04B330             1328*  @end:
04B330             1329*  
04B330             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B330             1331*  ; inputs: bc is x coordinate, de is y coordinate
04B330             1332*  ; prerequisites: vdu_sprite_select
04B330             1333*  vdu_sprite_move_abs:
04B330 ED 43 48 B3 1334*      ld (@xpos),bc
       04          
04B335 ED 53 4A B3 1335*      ld (@ypos),de
       04          
04B33A 21 45 B3 04 1336*      ld hl,@cmd
04B33E 01 07 00 00 1337*      ld bc,@end-@cmd
04B342 5B DF       1338*      rst.lil $18
04B344 C9          1339*      ret
04B345 17 1B 0D    1340*  @cmd:  db 23,27,13
04B348 00 00       1341*  @xpos: dw 0x0000
04B34A 00 00       1342*  @ypos: dw 0x0000
04B34C 00          1343*  @end:  db 0x00 ; padding
04B34D             1344*  
04B34D             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B34D             1346*  ; inputs: bc is x coordinate, de is y coordinate
04B34D             1347*  ; prerequisites: vdu_sprite_select
04B34D             1348*  vdu_sprite_move_rel:
04B34D ED 43 65 B3 1349*      ld (@dx),bc
       04          
04B352 ED 53 67 B3 1350*      ld (@dy),de
       04          
04B357 21 62 B3 04 1351*      ld hl,@cmd
04B35B 01 07 00 00 1352*      ld bc,@end-@cmd
04B35F 5B DF       1353*      rst.lil $18
04B361 C9          1354*      ret
04B362 17 1B 0E    1355*  @cmd: db 23,27,14
04B365 00 00       1356*  @dx:  dw 0x0000
04B367 00 00       1357*  @dy:  dw 0x0000
04B369 00          1358*  @end: db 0x00 ; padding
04B36A             1359*  
04B36A             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B36A             1361*  ; USING 16.8 FIXED POINT COORDINATES
04B36A             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B36A             1363*  ;   the fractional portiion of the inputs are truncated
04B36A             1364*  ;   leaving only the 16-bit integer portion
04B36A             1365*  ; prerequisites: vdu_sprite_select
04B36A             1366*  vdu_sprite_move_abs168:
04B36A             1367*  ; populate in the reverse of normal to keep the
04B36A             1368*  ; inputs from stomping on each other
04B36A ED 53 89 B3 1369*      ld (@ypos-1),de
       04          
04B36F ED 43 87 B3 1370*      ld (@xpos-1),bc
       04          
04B374 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04B376 32 87 B3 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04B37A 21 85 B3 04 1373*      ld hl,@cmd
04B37E 01 07 00 00 1374*      ld bc,@end-@cmd
04B382 5B DF       1375*      rst.lil $18
04B384 C9          1376*      ret
04B385 17 1B 0D    1377*  @cmd:  db 23,27,13
04B388 00 00       1378*  @xpos: dw 0x0000
04B38A 00 00       1379*  @ypos: dw 0x0000
04B38C             1380*  @end:  ; no padding required b/c we shifted de right
04B38C             1381*  
04B38C             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B38C             1383*  ; USING 16.8 FIXED POINT COORDINATES
04B38C             1384*  ; inputs: ub.c is dx, ud.e is dy
04B38C             1385*  ;   the fractional portiion of the inputs are truncated
04B38C             1386*  ;   leaving only the 16-bit integer portion
04B38C             1387*  ; prerequisites: vdu_sprite_select
04B38C             1388*  vdu_sprite_move_rel168:
04B38C             1389*  ; populate in the reverse of normal to keep the
04B38C             1390*  ; inputs from stomping on each other
04B38C ED 53 AB B3 1391*      ld (@dy-1),de
       04          
04B391 ED 43 A9 B3 1392*      ld (@dx-1),bc
       04          
04B396 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04B398 32 A9 B3 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04B39C 21 A7 B3 04 1395*      ld hl,@cmd
04B3A0 01 07 00 00 1396*      ld bc,@end-@cmd
04B3A4 5B DF       1397*      rst.lil $18
04B3A6 C9          1398*      ret
04B3A7 17 1B 0E    1399*  @cmd:  db 23,27,14
04B3AA 00 00       1400*  @dx: dw 0x0000
04B3AC 00 00       1401*  @dy: dw 0x0000
04B3AE             1402*  @end:  ; no padding required b/c we shifted de right
04B3AE             1403*  
04B3AE             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B3AE             1405*  ; inputs: none
04B3AE             1406*  vdu_sprite_update:
04B3AE 21 B9 B3 04 1407*      ld hl,@cmd
04B3B2 01 03 00 00 1408*      ld bc,@end-@cmd
04B3B6 5B DF       1409*      rst.lil $18
04B3B8 C9          1410*      ret
04B3B9 17 1B 0F    1411*  @cmd: db 23,27,15
04B3BC             1412*  @end:
04B3BC             1413*  
04B3BC             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B3BC             1415*  ; inputs: none
04B3BC             1416*  vdu_sprite_bmp_reset:
04B3BC 21 C7 B3 04 1417*      ld hl,@cmd
04B3C0 01 03 00 00 1418*      ld bc,@end-@cmd
04B3C4 5B DF       1419*      rst.lil $18
04B3C6 C9          1420*      ret
04B3C7 17 1B 10    1421*  @cmd: db 23,27,16
04B3CA             1422*  @end:
04B3CA             1423*  
04B3CA             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B3CA             1425*  ; inputs: none
04B3CA             1426*  vdu_sprite_reset:
04B3CA 21 D5 B3 04 1427*      ld hl,@cmd
04B3CE 01 03 00 00 1428*      ld bc,@end-@cmd
04B3D2 5B DF       1429*      rst.lil $18
04B3D4 C9          1430*      ret
04B3D5 17 1B 11    1431*  @cmd: db 23,27,17
04B3D8             1432*  @end:
04B3D8             1433*  
04B3D8             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B3D8             1435*  ; inputs: a is the GCOL paint mode
04B3D8             1436*  ; prerequisites: vdu_sprite_select
04B3D8             1437*  vdu_sprite_set_gcol:
04B3D8 32 EA B3 04 1438*      ld (@mode),a
04B3DC 21 E7 B3 04 1439*      ld hl,@cmd
04B3E0 01 04 00 00 1440*      ld bc,@end-@cmd
04B3E4 5B DF       1441*      rst.lil $18
04B3E6 C9          1442*      ret
04B3E7 17 1B 12    1443*  @cmd:  db 23,27,18
04B3EA 00          1444*  @mode: db 0x00
04B3EB             1445*  @end:
04B3EB             1446*  
04B3EB             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04B3EB             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04B3EB             1449*  ; inputs: hl=bufferId
04B3EB             1450*  ; prerequisites: vdu_sprite_select
04B3EB             1451*  vdu_sprite_add_buff:
04B3EB 22 FD B3 04 1452*      ld (@bufferId),hl
04B3EF 21 FA B3 04 1453*      ld hl,@cmd
04B3F3 01 05 00 00 1454*      ld bc,@end-@cmd
04B3F7 5B DF       1455*      rst.lil $18
04B3F9 C9          1456*      ret
04B3FA 17 1B 26    1457*  @cmd:      db 23,27,0x26
04B3FD 00 00       1458*  @bufferId: dw 0x0000
04B3FF 00          1459*  @end:      db 0x00 ; padding
04B400             1460*  
04B400             1461*  
04B400             1462*  ; #### from sfx.asm ####
04B400 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04B401             1464*  
04B401             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04B401             1466*  ; ; inputs: hl = bufferId
04B401             1467*  ; sfx_play:
04B401             1468*  ; 	ld iy,sfx_last_channel
04B401             1469*  ; 	ld a,(iy+0)
04B401             1470*  ; 	ld (@bufferId),hl
04B401             1471*  ; @find_next_channel:
04B401             1472*  ; 	inc a ; bump to next channel
04B401             1473*  ; 	and 31 ; modulo 32 channel
04B401             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04B401             1475*  ; 	ret z ; so we return to caller without doing anything
04B401             1476*  ; 	push af ; back up channel
04B401             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04B401             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04B401             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04B401             1480*  ; 	pop af ; restore channel
04B401             1481*  ; 	jr @find_next_channel ; try the next channel
04B401             1482*  ; @play_sfx:
04B401             1483*  ; 	pop af ; restore channel
04B401             1484*  ; 	ld (iy+0),a ; store channel
04B401             1485*  ; 	ld hl,(@bufferId)
04B401             1486*  ; 	ld c,a ; channel
04B401             1487*  ; 	ld b,127 ; full volume
04B401             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04B401             1489*  ; 	jp vdu_play_sample
04B401             1490*  ; @bufferId:
04B401             1491*  ; 	dw 0x0000 ; 16-bit value
04B401             1492*  
04B401             1493*  sfx_play_random_hurt:
04B401 CD 45 BE 04 1494*  	call rand_8
04B405 E6 03       1495*  	and 3
04B407 FE 00       1496*  	cp 0
04B409 CA 30 C5 04 1497*  	jp z,sfx_play_ahh
04B40D FE 01       1498*  	cp 1
04B40F CA 3C C5 04 1499*  	jp z,sfx_play_augh
04B413 FE 02       1500*  	cp 2
04B415 CA 48 C5 04 1501*  	jp z,sfx_play_ayee
04B419 C3 14 C6 04 1502*  	jp sfx_play_ugh
04B41D             1503*  
04B41D             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B41D             1505*  sfx_load_main:
04B41D 21 00 00 00 1506*      ld hl,0
04B421 22 5A BE 04 1507*      ld (cur_file_idx),hl
04B425             1508*  sfx_load_main_loop:
04B425             1509*  ; back up loop counter
04B425 C5          1510*      push bc
04B426             1511*  ; load the next sound
04B426 CD 7A B4 04 1512*      call load_next_sound
04B42A             1513*  ; draw all the things
04B42A CD C3 BF 04 1514*      call tmp_draw_all_the_things
04B42E             1515*  ; move bj
04B42E CD 4B BF 04 1516*  	call move_bj
04B432             1517*  ; print welcome message
04B432 DD 21 56 82 1518*  	ld ix,font_itc_honda
       04          
04B437 21 2D C8 04 1519*  	ld hl,hello_world
04B43B 01 20 00 00 1520*  	ld bc,32
04B43F 11 02 00 00 1521*  	ld de,2
04B443 CD B3 67 04 1522*  	call font_bmp_print
04B447             1523*  ; print current filename
04B447 CD C3 AE 04 1524*  	call vdu_cls
04B44B 2A 5D BE 04 1525*  	ld hl,(cur_filename)
04B44F CD C2 B4 04 1526*  	call printString
04B453 CD D7 B4 04 1527*  	call printNewLine
04B457             1528*  
04B457             1529*  ; print current load stopwatch
04B457 21 4F C8 04 1530*  	ld hl,loading_time
04B45B CD C2 B4 04 1531*  	call printString
04B45F CD DF C7 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B463 CD 10 B5 04 1533*  	call printDec
04B467             1534*  
04B467             1535*  ; flip screen
04B467 CD 92 B0 04 1536*      call vdu_flip
04B46B             1537*  ; ; delay for a bit so sound can play
04B46B             1538*  ;     ld a,%10000000 ; 1 second delay
04B46B             1539*  ;     call multiPurposeDelay
04B46B             1540*  ; decrement loop counter
04B46B C1          1541*      pop bc
04B46C 0B          1542*  	dec bc
04B46D             1543*  ; ; DEBUG: DUMP REGISTERS
04B46D             1544*  ; 	push bc
04B46D             1545*  ; 	call dumpRegistersHex
04B46D             1546*  ; 	call vdu_flip
04B46D             1547*  ; 	pop bc
04B46D             1548*  ; ; END DEBUG
04B46D 79          1549*      ld a,c
04B46E B7          1550*      or a
04B46F C2 25 B4 04 1551*      jp nz,sfx_load_main_loop
04B473 78          1552*      ld a,b
04B474 B7          1553*      or a
04B475 C2 25 B4 04 1554*      jp nz,sfx_load_main_loop
04B479 C9          1555*      ret
04B47A             1556*  
04B47A             1557*  load_next_sound:
04B47A             1558*  ; look up the load routine for the current file index
04B47A 2A 5A BE 04 1559*  	ld hl,(cur_file_idx)
04B47E 29          1560*  	add hl,hl ; multiply current index by 2 ...
04B47F ED 5B 5A BE 1561*  	ld de,(cur_file_idx)
       04          
04B484 19          1562*  	add hl,de ; ... now by 3
04B485 ED 5B 66 BE 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B48A 19          1564*  	add hl,de
04B48B ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04B48D 22 92 B4 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B491             1567*  @jump_addr:
04B491 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04B495             1569*  ; look up the buffer id for the current file
04B495 2A 5A BE 04 1570*  	ld hl,(cur_file_idx)
04B499 29          1571*  	add hl,hl ; multiply current index by 2 ...
04B49A ED 5B 5A BE 1572*  	ld de,(cur_file_idx)
       04          
04B49F 19          1573*  	add hl,de ; ... now by 3
04B4A0 ED 5B 63 BE 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B4A5 19          1575*  	add hl,de
04B4A6 ED 27       1576*  	ld hl,(hl)
04B4A8 22 60 BE 04 1577*  	ld (cur_buffer_id),hl
04B4AC             1578*  ; bump the current file index
04B4AC 2A 5A BE 04 1579*  	ld hl,(cur_file_idx)
04B4B0 23          1580*  	inc hl
04B4B1 22 5A BE 04 1581*  	ld (cur_file_idx),hl
04B4B5 C9          1582*  	ret
04B4B6             1583*  
04B4B6             1584*  ; load a sound file to a buffer
04B4B6             1585*  ; inputs: hl = bufferId ; ix = file size
04B4B6             1586*  vdu_load_sfx:
04B4B6             1587*  ; back up input parameters
04B4B6 E5          1588*      push hl ; bufferId
04B4B7             1589*  ; load the sound
04B4B7 CD 40 CA 04 1590*  	call vdu_load_buffer_from_file
04B4BB             1591*  ; now make the buffer a sound sample
04B4BB E1          1592*      pop hl ; bufferId
04B4BC AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04B4BD             1594*      ; push hl ; bufferId
04B4BD CD 55 01 04 1595*  	call vdu_buffer_to_sound
04B4C1             1596*  ; ; play the loaded sound
04B4C1             1597*  ;     ld c,0 ; channel
04B4C1             1598*  ;     ld b,127 ; full volume
04B4C1             1599*  ;     ld de,1000 ; 1 second duration
04B4C1             1600*  ;     pop hl ; bufferId
04B4C1             1601*  ;     call vdu_play_sample
04B4C1 C9          1602*      ret
04B4C2             0025       include "src/asm/functions.asm"
04B4C2             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04B4C2             0002*  ; Print a zero-terminated string
04B4C2             0003*  ; HL: Pointer to string
04B4C2             0004*  printString:
04B4C2 C5          0005*  	PUSH	BC
04B4C3 01 00 00 00 0006*  	LD		BC,0
04B4C7 3E 00       0007*  	LD 	 	A,0
04B4C9 5B DF       0008*  	RST.LIL 18h
04B4CB C1          0009*  	POP		BC
04B4CC C9          0010*  	RET
04B4CD             0011*  ; print a VDU sequence
04B4CD             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04B4CD             0013*  sendVDUsequence:
04B4CD C5          0014*  	PUSH	BC
04B4CE 01 00 00 00 0015*  	LD		BC, 0
04B4D2 4E          0016*  	LD		C, (HL)
04B4D3 5B DF       0017*  	RST.LIL	18h
04B4D5 C1          0018*  	POP		BC
04B4D6 C9          0019*  	RET
04B4D7             0020*  ; Print Newline sequence to VDP
04B4D7             0021*  printNewLine:
04B4D7 3E 0D       0022*  	LD	A, '\r'
04B4D9 5B D7       0023*  	RST.LIL 10h
04B4DB 3E 0A       0024*  	LD	A, '\n'
04B4DD 5B D7       0025*  	RST.LIL 10h
04B4DF C9          0026*  	RET
04B4E0             0027*  ; Print a 24-bit HEX number
04B4E0             0028*  ; HLU: Number to print
04B4E0             0029*  printHex24:
04B4E0 E5          0030*  	PUSH	HL
04B4E1 21 02 00 00 0031*  	LD		HL, 2
04B4E5 39          0032*  	ADD		HL, SP
04B4E6 7E          0033*  	LD		A, (HL)
04B4E7 E1          0034*  	POP		HL
04B4E8 CD F2 B4 04 0035*  	CALL	printHex8
04B4EC             0036*  ; Print a 16-bit HEX number
04B4EC             0037*  ; HL: Number to print
04B4EC             0038*  printHex16:
04B4EC 7C          0039*  	LD		A,H
04B4ED CD F2 B4 04 0040*  	CALL	printHex8
04B4F1 7D          0041*  	LD		A,L
04B4F2             0042*  ; Print an 8-bit HEX number
04B4F2             0043*  ; A: Number to print
04B4F2             0044*  printHex8:
04B4F2 4F          0045*  	LD		C,A
04B4F3 1F          0046*  	RRA
04B4F4 1F          0047*  	RRA
04B4F5 1F          0048*  	RRA
04B4F6 1F          0049*  	RRA
04B4F7 CD FC B4 04 0050*  	CALL	@F
04B4FB 79          0051*  	LD		A,C
04B4FC             0052*  @@:
04B4FC E6 0F       0053*  	AND		0Fh
04B4FE C6 90       0054*  	ADD		A,90h
04B500 27          0055*  	DAA
04B501 CE 40       0056*  	ADC		A,40h
04B503 27          0057*  	DAA
04B504 5B D7       0058*  	RST.LIL	10h
04B506 C9          0059*  	RET
04B507             0060*  
04B507             0061*  ; Print a 0x HEX prefix
04B507             0062*  DisplayHexPrefix:
04B507 3E 30       0063*  	LD	A, '0'
04B509 5B D7       0064*  	RST.LIL 10h
04B50B 3E 78       0065*  	LD	A, 'x'
04B50D 5B D7       0066*  	RST.LIL 10h
04B50F C9          0067*  	RET
04B510             0068*  
04B510             0069*  
04B510             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04B510             0071*  ; HL : Value to print
04B510             0072*  printDec:
04B510 11 34 B5 04 0073*  	LD	 DE, _printDecBuffer
04B514 CD 3D B5 04 0074*  	CALL Num2String
04B518             0075*  ; BEGIN MY CODE
04B518             0076*  ; replace leading zeroes with spaces
04B518 21 34 B5 04 0077*      LD	 HL, _printDecBuffer
04B51C 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04B51E             0079*  @loop:
04B51E 7E          0080*      LD	 A, (HL)
04B51F FE 30       0081*      CP	 '0'
04B521 C2 2F B5 04 0082*      JP	 NZ, @done
04B525 3E 20       0083*      LD   A, ' '
04B527 77          0084*      LD	 (HL), A
04B528 23          0085*      INC	 HL
04B529 CD B4 AE 04 0086*      CALL vdu_cursor_forward
04B52D 10 EF       0087*      DJNZ @loop
04B52F             0088*  @done:
04B52F             0089*  ; END MY CODE
04B52F             0090*  	; LD	 HL, _printDecBuffer
04B52F CD C2 B4 04 0091*  	CALL printString
04B533 C9          0092*  	RET
04B534 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04B53D             0094*  
04B53D             0095*  ; This routine converts the value from HL into it's ASCII representation,
04B53D             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04B53D             0097*  ; so it will allways be 8 characters length
04B53D             0098*  ; HL : Value to convert to string
04B53D             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04B53D             0100*  Num2String:
04B53D 01 80 69 67 0101*  	LD	 BC,-10000000
04B541 CD 74 B5 04 0102*  	CALL OneDigit
04B545 01 C0 BD F0 0103*  	LD	 BC,-1000000
04B549 CD 74 B5 04 0104*  	CALL OneDigit
04B54D 01 60 79 FE 0105*  	LD	 BC,-100000
04B551 CD 74 B5 04 0106*  	CALL OneDigit
04B555 01 F0 D8 FF 0107*  	LD   BC,-10000
04B559 CD 74 B5 04 0108*  	CALL OneDigit
04B55D 01 18 FC FF 0109*  	LD   BC,-1000
04B561 CD 74 B5 04 0110*  	CALL OneDigit
04B565 01 9C FF FF 0111*  	LD   BC,-100
04B569 CD 74 B5 04 0112*  	CALL OneDigit
04B56D 0E F6       0113*  	LD   C,-10
04B56F CD 74 B5 04 0114*  	CALL OneDigit
04B573 48          0115*  	LD   C,B
04B574             0116*  OneDigit:
04B574 3E 2F       0117*  	LD   A,'0'-1
04B576             0118*  DivideMe:
04B576 3C          0119*  	INC  A
04B577 09          0120*  	ADD  HL,BC
04B578 38 FC       0121*  	JR   C,DivideMe
04B57A ED 42       0122*  	SBC  HL,BC
04B57C 12          0123*  	LD   (DE),A
04B57D 13          0124*  	INC  DE
04B57E C9          0125*  	RET
04B57F             0126*  
04B57F             0127*  
04B57F             0128*  ; #### new functions added by Brandon R. Gates ####
04B57F             0129*  
04B57F             0130*  ; print the binary representation of the 8-bit value in a
04B57F             0131*  ; destroys a, hl, bc
04B57F             0132*  printBin8:
04B57F 06 08       0133*      ld b,8      ; loop counter for 8 bits
04B581 21 9C B5 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04B585             0135*                  ; (which will be the high bit of the value in a)
04B585             0136*  @loop:
04B585 07          0137*      rlca ; put the next highest bit into carry
04B586 38 04       0138*      jr c,@one
04B588 36 30       0139*      ld (hl),'0'
04B58A 18 02       0140*      jr @next_bit
04B58C             0141*  @one:
04B58C 36 31       0142*      ld (hl),'1'
04B58E             0143*  @next_bit:
04B58E 23          0144*      inc hl
04B58F 10 F4       0145*      djnz @loop
04B591             0146*  ; print it
04B591 21 9C B5 04 0147*  	ld hl,@cmd
04B595 01 08 00 00 0148*  	ld bc,@end-@cmd
04B599 5B DF       0149*  	rst.lil $18
04B59B C9          0150*  	ret
04B59C             0151*  @cmd: ds 8 ; eight bytes for eight bits
04B5A4             0152*  @end:
04B5A4             0153*  
04B5A4             0154*  ; print the binary representation of the 8-bit value in a
04B5A4             0155*  ; in reverse order (lsb first)
04B5A4             0156*  ; destroys a, hl, bc
04B5A4             0157*  printBin8Rev:
04B5A4 06 08       0158*      ld b,8      ; loop counter for 8 bits
04B5A6 21 C1 B5 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
04B5AA             0160*                  ; (which will be the high bit of the value in a)
04B5AA             0161*  @loop:
04B5AA 0F          0162*      rrca ; put the next lowest bit into carry
04B5AB 38 04       0163*      jr c,@one
04B5AD 36 30       0164*      ld (hl),'0'
04B5AF 18 02       0165*      jr @next_bit
04B5B1             0166*  @one:
04B5B1 36 31       0167*      ld (hl),'1'
04B5B3             0168*  @next_bit:
04B5B3 23          0169*      inc hl
04B5B4 10 F4       0170*      djnz @loop
04B5B6             0171*  ; print it
04B5B6 21 C1 B5 04 0172*  	ld hl,@cmd
04B5BA 01 08 00 00 0173*  	ld bc,@end-@cmd
04B5BE 5B DF       0174*  	rst.lil $18
04B5C0 C9          0175*  	ret
04B5C1             0176*  @cmd: ds 8 ; eight bytes for eight bits
04B5C9             0177*  @end:
04B5C9             0178*  
04B5C9             0179*  ; print registers to screen in hexidecimal format
04B5C9             0180*  ; inputs: none
04B5C9             0181*  ; outputs: values of every register printed to screen
04B5C9             0182*  ;    values of each register in global scratch memory
04B5C9             0183*  ; destroys: nothing
04B5C9             0184*  stepRegistersHex:
04B5C9             0185*  ; store everything in scratch
04B5C9 22 CC B7 04 0186*      ld (uhl),hl
04B5CD ED 43 CF B7 0187*      ld (ubc),bc
       04          
04B5D2 ED 53 D2 B7 0188*      ld (ude),de
       04          
04B5D7 DD 22 D5 B7 0189*      ld (uix),ix
       04          
04B5DC FD 22 D8 B7 0190*      ld (uiy),iy
       04          
04B5E1 F5          0191*      push af ; fml
04B5E2 E1          0192*      pop hl  ; thanks, zilog
04B5E3 22 C9 B7 04 0193*      ld (uaf),hl
04B5E7 F5          0194*      push af ; dammit
04B5E8             0195*  
04B5E8             0196*  ; home the cursor
04B5E8 CD FB AF 04 0197*      call vdu_home_cursor
04B5EC             0198*  
04B5EC             0199*  ; print each register
04B5EC 21 55 B7 04 0200*      ld hl,str_afu
04B5F0 CD C2 B4 04 0201*      call printString
04B5F4 2A C9 B7 04 0202*      ld hl,(uaf)
04B5F8 CD E0 B4 04 0203*      call printHex24
04B5FC CD D7 B4 04 0204*      call printNewLine
04B600             0205*  
04B600 21 59 B7 04 0206*      ld hl,str_hlu
04B604 CD C2 B4 04 0207*      call printString
04B608 2A CC B7 04 0208*      ld hl,(uhl)
04B60C CD E0 B4 04 0209*      call printHex24
04B610 CD D7 B4 04 0210*      call printNewLine
04B614             0211*  
04B614 21 5D B7 04 0212*      ld hl,str_bcu
04B618 CD C2 B4 04 0213*      call printString
04B61C 2A CF B7 04 0214*      ld hl,(ubc)
04B620 CD E0 B4 04 0215*      call printHex24
04B624 CD D7 B4 04 0216*      call printNewLine
04B628             0217*  
04B628 21 61 B7 04 0218*      ld hl,str_deu
04B62C CD C2 B4 04 0219*      call printString
04B630 2A D2 B7 04 0220*      ld hl,(ude)
04B634 CD E0 B4 04 0221*      call printHex24
04B638 CD D7 B4 04 0222*      call printNewLine
04B63C             0223*  
04B63C 21 65 B7 04 0224*      ld hl,str_ixu
04B640 CD C2 B4 04 0225*      call printString
04B644 2A D5 B7 04 0226*      ld hl,(uix)
04B648 CD E0 B4 04 0227*      call printHex24
04B64C CD D7 B4 04 0228*      call printNewLine
04B650             0229*  
04B650 21 69 B7 04 0230*      ld hl,str_iyu
04B654 CD C2 B4 04 0231*      call printString
04B658 2A D8 B7 04 0232*      ld hl,(uiy)
04B65C CD E0 B4 04 0233*      call printHex24
04B660 CD D7 B4 04 0234*      call printNewLine
04B664             0235*  
04B664             0236*      ; call vsync
04B664             0237*  
04B664 CD D7 B4 04 0238*      call printNewLine
04B668             0239*  
04B668             0240*  ; check for right shift key and quit if pressed
04B668             0241*  	MOSCALL mos_getkbmap
04B668 3E 1E       0001*M 			LD	A, function
04B66A 5B CF       0002*M 			RST.LIL	08h
04B66C             0242*  @stayhere:
04B66C             0243*  ; 7 RightShift
04B66C DD CB 00 76 0244*      bit 6,(ix+0)
04B670 20 02       0245*      jr nz,@RightShift
04B672 18 F8       0246*      jr @stayhere
04B674             0247*  @RightShift:
04B674 DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
04B678 3E 80       0249*      ld a,%10000000
04B67A CD F2 C7 04 0250*      call multiPurposeDelay
04B67E             0251*  
04B67E             0252*  ; restore everything
04B67E 2A CC B7 04 0253*      ld hl, (uhl)
04B682 ED 4B CF B7 0254*      ld bc, (ubc)
       04          
04B687 ED 5B D2 B7 0255*      ld de, (ude)
       04          
04B68C DD 2A D5 B7 0256*      ld ix, (uix)
       04          
04B691 FD 2A D8 B7 0257*      ld iy, (uiy)
       04          
04B696 F1          0258*      pop af
04B697             0259*  ; all done
04B697 C9          0260*      ret
04B698             0261*  
04B698             0262*  ; print registers to screen in hexidecimal format
04B698             0263*  ; inputs: none
04B698             0264*  ; outputs: values of every register printed to screen
04B698             0265*  ;    values of each register in global scratch memory
04B698             0266*  ; destroys: nothing
04B698             0267*  dumpRegistersHex:
04B698             0268*  ; store everything in scratch
04B698 22 CC B7 04 0269*      ld (uhl),hl
04B69C ED 43 CF B7 0270*      ld (ubc),bc
       04          
04B6A1 ED 53 D2 B7 0271*      ld (ude),de
       04          
04B6A6 DD 22 D5 B7 0272*      ld (uix),ix
       04          
04B6AB FD 22 D8 B7 0273*      ld (uiy),iy
       04          
04B6B0 F5          0274*      push af ; fml
04B6B1 E1          0275*      pop hl  ; thanks, zilog
04B6B2 22 C9 B7 04 0276*      ld (uaf),hl
04B6B6 F5          0277*      push af ; dammit
04B6B7             0278*  
04B6B7             0279*  ; home the cursor
04B6B7 CD FB AF 04 0280*      call vdu_home_cursor
04B6BB             0281*  
04B6BB             0282*  ; print each register
04B6BB 21 55 B7 04 0283*      ld hl,str_afu
04B6BF CD C2 B4 04 0284*      call printString
04B6C3 2A C9 B7 04 0285*      ld hl,(uaf)
04B6C7 CD E0 B4 04 0286*      call printHex24
04B6CB CD D7 B4 04 0287*      call printNewLine
04B6CF             0288*  
04B6CF 21 59 B7 04 0289*      ld hl,str_hlu
04B6D3 CD C2 B4 04 0290*      call printString
04B6D7 2A CC B7 04 0291*      ld hl,(uhl)
04B6DB CD E0 B4 04 0292*      call printHex24
04B6DF CD D7 B4 04 0293*      call printNewLine
04B6E3             0294*  
04B6E3 21 5D B7 04 0295*      ld hl,str_bcu
04B6E7 CD C2 B4 04 0296*      call printString
04B6EB 2A CF B7 04 0297*      ld hl,(ubc)
04B6EF CD E0 B4 04 0298*      call printHex24
04B6F3 CD D7 B4 04 0299*      call printNewLine
04B6F7             0300*  
04B6F7 21 61 B7 04 0301*      ld hl,str_deu
04B6FB CD C2 B4 04 0302*      call printString
04B6FF 2A D2 B7 04 0303*      ld hl,(ude)
04B703 CD E0 B4 04 0304*      call printHex24
04B707 CD D7 B4 04 0305*      call printNewLine
04B70B             0306*  
04B70B 21 65 B7 04 0307*      ld hl,str_ixu
04B70F CD C2 B4 04 0308*      call printString
04B713 2A D5 B7 04 0309*      ld hl,(uix)
04B717 CD E0 B4 04 0310*      call printHex24
04B71B CD D7 B4 04 0311*      call printNewLine
04B71F             0312*  
04B71F 21 69 B7 04 0313*      ld hl,str_iyu
04B723 CD C2 B4 04 0314*      call printString
04B727 2A D8 B7 04 0315*      ld hl,(uiy)
04B72B CD E0 B4 04 0316*      call printHex24
04B72F CD D7 B4 04 0317*      call printNewLine
04B733             0318*  
04B733 CD 1D B1 04 0319*      call vdu_vblank
04B737             0320*  
04B737 CD D7 B4 04 0321*      call printNewLine
04B73B             0322*  ; restore everything
04B73B 2A CC B7 04 0323*      ld hl, (uhl)
04B73F ED 4B CF B7 0324*      ld bc, (ubc)
       04          
04B744 ED 5B D2 B7 0325*      ld de, (ude)
       04          
04B749 DD 2A D5 B7 0326*      ld ix, (uix)
       04          
04B74E FD 2A D8 B7 0327*      ld iy, (uiy)
       04          
04B753 F1          0328*      pop af
04B754             0329*  ; all done
04B754 C9          0330*      ret
04B755             0331*  
04B755 61 66 3D 00 0332*  str_afu: db "af=",0
04B759 68 6C 3D 00 0333*  str_hlu: db "hl=",0
04B75D 62 63 3D 00 0334*  str_bcu: db "bc=",0
04B761 64 65 3D 00 0335*  str_deu: db "de=",0
04B765 69 78 3D 00 0336*  str_ixu: db "ix=",0
04B769 69 79 3D 00 0337*  str_iyu: db "iy=",0
04B76D             0338*  
04B76D             0339*  ; print udeuhl to screen in hexidecimal format
04B76D             0340*  ; inputs: none
04B76D             0341*  ; outputs: concatenated hexidecimal udeuhl
04B76D             0342*  ; destroys: nothing
04B76D             0343*  dumpUDEUHLHex:
04B76D             0344*  ; store everything in scratch
04B76D 22 CC B7 04 0345*      ld (uhl),hl
04B771 ED 43 CF B7 0346*      ld (ubc),bc
       04          
04B776 ED 53 D2 B7 0347*      ld (ude),de
       04          
04B77B DD 22 D5 B7 0348*      ld (uix),ix
       04          
04B780 FD 22 D8 B7 0349*      ld (uiy),iy
       04          
04B785 F5          0350*      push af
04B786             0351*  
04B786             0352*  ; print each register
04B786             0353*  
04B786 21 C0 B7 04 0354*      ld hl,str_udeuhl
04B78A CD C2 B4 04 0355*      call printString
04B78E 2A D2 B7 04 0356*      ld hl,(ude)
04B792 CD E0 B4 04 0357*      call printHex24
04B796 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
04B798 5B D7       0359*  	rst.lil 10h
04B79A 2A CC B7 04 0360*      ld hl,(uhl)
04B79E CD E0 B4 04 0361*      call printHex24
04B7A2 CD D7 B4 04 0362*      call printNewLine
04B7A6             0363*  
04B7A6             0364*  ; restore everything
04B7A6 2A CC B7 04 0365*      ld hl, (uhl)
04B7AA ED 4B CF B7 0366*      ld bc, (ubc)
       04          
04B7AF ED 5B D2 B7 0367*      ld de, (ude)
       04          
04B7B4 DD 2A D5 B7 0368*      ld ix, (uix)
       04          
04B7B9 FD 2A D8 B7 0369*      ld iy, (uiy)
       04          
04B7BE F1          0370*      pop af
04B7BF             0371*  ; all done
04B7BF C9          0372*      ret
04B7C0             0373*  
04B7C0 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B7C9             0375*  
04B7C9             0376*  ; global scratch memory for registers
04B7C9 00 00 00    0377*  uaf: dl 0
04B7CC 00 00 00    0378*  uhl: dl 0
04B7CF 00 00 00    0379*  ubc: dl 0
04B7D2 00 00 00    0380*  ude: dl 0
04B7D5 00 00 00    0381*  uix: dl 0
04B7D8 00 00 00    0382*  uiy: dl 0
04B7DB 00 00 00    0383*  usp: dl 0
04B7DE 00 00 00    0384*  upc: dl 0
04B7E1             0385*  
04B7E1             0386*  ; inputs: whatever is in the flags register
04B7E1             0387*  ; outputs: binary representation of flags
04B7E1             0388*  ;          with a header so we know which is what
04B7E1             0389*  ; destroys: nothing
04B7E1             0390*  ; preserves: everything
04B7E1             0391*  dumpFlags:
04B7E1             0392*  ; first we curse zilog for not giving direct access to flags
04B7E1 F5          0393*      push af ; this is so we can send it back unharmed
04B7E2 F5          0394*      push af ; this is so we can pop it to hl
04B7E3             0395*  ; store everything in scratch
04B7E3 22 CC B7 04 0396*      ld (uhl),hl
04B7E7 ED 43 CF B7 0397*      ld (ubc),bc
       04          
04B7EC ED 53 D2 B7 0398*      ld (ude),de
       04          
04B7F1 DD 22 D5 B7 0399*      ld (uix),ix
       04          
04B7F6 FD 22 D8 B7 0400*      ld (uiy),iy
       04          
04B7FB             0401*  ; next we print the header
04B7FB 21 27 B8 04 0402*      ld hl,@header
04B7FF CD C2 B4 04 0403*      call printString
04B803 E1          0404*      pop hl ; flags are now in l
04B804 7D          0405*      ld a,l ; flags are now in a
04B805 CD 7F B5 04 0406*      call printBin8
04B809 CD D7 B4 04 0407*  	call printNewLine
04B80D             0408*  ; restore everything
04B80D 2A CC B7 04 0409*      ld hl, (uhl)
04B811 ED 4B CF B7 0410*      ld bc, (ubc)
       04          
04B816 ED 5B D2 B7 0411*      ld de, (ude)
       04          
04B81B DD 2A D5 B7 0412*      ld ix, (uix)
       04          
04B820 FD 2A D8 B7 0413*      ld iy, (uiy)
       04          
04B825 F1          0414*      pop af ; send her home the way she came
04B826 C9          0415*      ret
04B827             0416*  ; Bit 7 (S): Sign flag
04B827             0417*  ; Bit 6 (Z): Zero flag
04B827             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B827             0419*  ; Bit 4 (H): Half Carry flag
04B827             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B827             0421*  ; Bit 2 (PV): Parity/Overflow flag
04B827             0422*  ; Bit 1 (N): Subtract flag
04B827             0423*  ; Bit 0 (C): Carry flag
04B827 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B832             0425*  
04B832             0426*  ; set all the bits in the flag register
04B832             0427*  ; more of an academic exercise than anything useful
04B832             0428*  ; inputs; none
04B832             0429*  ; outputs; a=0,f=255
04B832             0430*  ; destroys: flags, hl
04B832             0431*  ; preserves: a, because why not
04B832             0432*  setAllFlags:
04B832 21 FF 00 00 0433*      ld hl,255
04B836 67          0434*      ld h,a ; four cycles to preserve a is cheap
04B837 E5          0435*      push hl
04B838 F1          0436*      pop af
04B839 C9          0437*      ret
04B83A             0438*  
04B83A             0439*  ; reset all the bits in the flag register
04B83A             0440*  ; unlike its inverse counterpart, this may actually be useful
04B83A             0441*  ; inputs; none
04B83A             0442*  ; outputs; a=0,f=0
04B83A             0443*  ; destroys: flags, hl
04B83A             0444*  ; preserves: a, because why not
04B83A             0445*  resetAllFlags:
04B83A 21 00 00 00 0446*      ld hl,0
04B83E 67          0447*      ld h,a ; four cycles to preserve a is cheap
04B83F E5          0448*      push hl
04B840 F1          0449*      pop af
04B841 C9          0450*      ret
04B842             0451*  
04B842             0452*  ; wait until user presses a key
04B842             0453*  ; inputs: none
04B842             0454*  ; outputs: none
04B842             0455*  ; destroys: af,ix
04B842             0456*  waitKeypress:
04B842             0457*      MOSCALL mos_sysvars
04B842 3E 08       0001*M 			LD	A, function
04B844 5B CF       0002*M 			RST.LIL	08h
04B846 AF          0458*      xor a ; zero out any prior keypresses
04B847 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
04B84A             0460*  @loop:
04B84A DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
04B84D A7          0462*      and a
04B84E C0          0463*      ret nz
04B84F 18 F9       0464*      jr @loop
04B851             0465*  
04B851             0466*  
04B851             0467*  ; print bytes from an address to the screen in hexidecimal format
04B851             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B851             0469*  ; outputs: values of each byte printed to screen separated by spaces
04B851             0470*  ; destroys: nothing
04B851             0471*  dumpMemoryHex:
04B851             0472*  ; save all registers to the stack
04B851 F5          0473*      push af
04B852 C5          0474*      push bc
04B853 D5          0475*      push de
04B854 E5          0476*      push hl
04B855 DD E5       0477*      push ix
04B857 FD E5       0478*      push iy
04B859             0479*  
04B859             0480*  ; set b to be our loop counter
04B859 47          0481*      ld b,a
04B85A             0482*  @loop:
04B85A             0483*  ; print the byte
04B85A 7E          0484*      ld a,(hl)
04B85B CD F2 B4 04 0485*      call printHex8
04B85F             0486*  ; print a space
04B85F 3E 20       0487*      ld a,' '
04B861 5B D7       0488*      rst.lil 10h
04B863 23          0489*      inc hl
04B864 10 F4       0490*      djnz @loop
04B866 CD D7 B4 04 0491*      call printNewLine
04B86A             0492*  
04B86A             0493*  ; restore everything
04B86A FD E1       0494*      pop iy
04B86C DD E1       0495*      pop ix
04B86E E1          0496*      pop hl
04B86F D1          0497*      pop de
04B870 C1          0498*      pop bc
04B871 F1          0499*      pop af
04B872             0500*  ; all done
04B872 C9          0501*      ret
04B873             0502*  
04B873             0503*  
04B873             0504*  ; print bytes from an address to the screen in binary format
04B873             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B873             0506*  ; outputs: values of each byte printed to screen separated by spaces
04B873             0507*  ; destroys: nothing
04B873             0508*  dumpMemoryBin:
04B873             0509*  ; save all registers to the stack
04B873 F5          0510*      push af
04B874 C5          0511*      push bc
04B875 D5          0512*      push de
04B876 E5          0513*      push hl
04B877 DD E5       0514*      push ix
04B879 FD E5       0515*      push iy
04B87B             0516*  
04B87B             0517*  ; set b to be our loop counter
04B87B 47          0518*      ld b,a
04B87C             0519*  @loop:
04B87C             0520*  ; print the byte
04B87C 7E          0521*      ld a,(hl)
04B87D E5          0522*      push hl
04B87E C5          0523*      push bc
04B87F CD 7F B5 04 0524*      call printBin8
04B883 C1          0525*      pop bc
04B884             0526*  ; print a space
04B884 3E 20       0527*      ld a,' '
04B886 5B D7       0528*      rst.lil 10h
04B888 E1          0529*      pop hl
04B889 23          0530*      inc hl
04B88A 10 F0       0531*      djnz @loop
04B88C CD D7 B4 04 0532*      call printNewLine
04B890             0533*  
04B890             0534*  ; restore everything
04B890 FD E1       0535*      pop iy
04B892 DD E1       0536*      pop ix
04B894 E1          0537*      pop hl
04B895 D1          0538*      pop de
04B896 C1          0539*      pop bc
04B897 F1          0540*      pop af
04B898             0541*  ; all done
04B898 C9          0542*      ret
04B899             0543*  
04B899             0544*  ; print bytes from an address to the screen in binary format
04B899             0545*  ; with the bits of each byte in reverse order (lsb first)
04B899             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B899             0547*  ; outputs: values of each byte printed to screen separated by spaces
04B899             0548*  ; destroys: nothing
04B899             0549*  dumpMemoryBinRev:
04B899             0550*  ; save all registers to the stack
04B899 F5          0551*      push af
04B89A C5          0552*      push bc
04B89B D5          0553*      push de
04B89C E5          0554*      push hl
04B89D DD E5       0555*      push ix
04B89F FD E5       0556*      push iy
04B8A1             0557*  
04B8A1             0558*  ; set b to be our loop counter
04B8A1 47          0559*      ld b,a
04B8A2             0560*  @loop:
04B8A2             0561*  ; print the byte
04B8A2 7E          0562*      ld a,(hl)
04B8A3 E5          0563*      push hl
04B8A4 C5          0564*      push bc
04B8A5 CD A4 B5 04 0565*      call printBin8Rev
04B8A9 C1          0566*      pop bc
04B8AA             0567*  ; print a space
04B8AA 3E 20       0568*      ld a,' '
04B8AC 5B D7       0569*      rst.lil 10h
04B8AE E1          0570*      pop hl
04B8AF 23          0571*      inc hl
04B8B0 10 F0       0572*      djnz @loop
04B8B2 CD D7 B4 04 0573*      call printNewLine
04B8B6             0574*  
04B8B6             0575*  ; restore everything
04B8B6 FD E1       0576*      pop iy
04B8B8 DD E1       0577*      pop ix
04B8BA E1          0578*      pop hl
04B8BB D1          0579*      pop de
04B8BC C1          0580*      pop bc
04B8BD F1          0581*      pop af
04B8BE             0582*  ; all done
04B8BE C9          0583*      ret
04B8BF             0026   	include "src/asm/player.asm"
04B8BF             0001*  ; ######## GAME STATE VARIABLES #######
04B8BF             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B8BF 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B8C2             0004*  ; player current health,binary
04B8C2             0005*  ; when < 0 player splodes
04B8C2             0006*  ; restores to plyr_max_health when new ship spawns
04B8C2 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B8C5             0008*  ; max player health,binary
04B8C5             0009*  ; can increase with power-ups (todo)
04B8C5 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B8C8             0011*  ; when reaches zero,game ends
04B8C8             0012*  ; can increase based on TODO
04B8C8 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B8CB             0014*  
04B8CB             0015*  ; ######### Player Variables ##########
04B8CB             0016*  ; player position on the map and orientation
04B8CB 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B8CC 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B8CD 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B8CE 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B8CF 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B8D0 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B8D1 00          0023*  cur_x: db 0x00
04B8D2 00          0024*  cur_y: db 0x00
04B8D3 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B8D4 00          0026*  xvel:  db 0x00
04B8D5 00          0027*  yvel:  db 0x00
04B8D6 00          0028*         db 0x00 ; padding
04B8D7 00          0029*  dy:    db 0x00
04B8D8 00          0030*  dx:    db 0x00
04B8D9 00          0031*         db 0x00 ; padding
04B8DA 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B8DB             0033*  
04B8DB 00          0034*  plyr_shot_x:      db 0x00
04B8DC 00          0035*  plyr_shot_y:      db 0x00
04B8DD 00          0036*                      db 0x00 ; padding
04B8DE 00          0037*  plyr_shot_xvel:   db 0x00
04B8DF 00          0038*  plyr_shot_yvel:   db 0x00
04B8E0 00          0039*                      db 0x00 ; padding
04B8E1 FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B8E2 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B8E5 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B8E6             0043*  
04B8E6 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B8E7 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B8E8             0046*  plyr_wpn_knife: equ %00000001
04B8E8             0047*  plyr_wpn_pistol: equ %00000010
04B8E8             0048*  plyr_wpn_mg: equ %00000100
04B8E8             0049*  plyr_wpn_gg: equ %00001000
04B8E8 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B8E9 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B8EC 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B8EF             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B8F5             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B8FB 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B8FE             0056*  
04B8FE             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B8FE 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B901             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B901             0060*  
04B901             0061*  
04B901 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B904             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B90C 00          0064*                   db 0 ; string terminator
04B90D             0065*  
04B90D             0066*  ; ######### PLAYER CONSTANTS ##########
04B90D             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B90D             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B913             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B913             0070*  
04B913             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B913             0072*  ; uses the same offsets from its table base as the main sprite table:
04B913             0073*  plyr_start_variables: ; label marking beginning of table
04B913 40          0074*  plyr_id:               db table_max_records
04B914 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B915 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B918 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B91B 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B91C 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B91D 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B91E 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B921 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B924 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B927 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B92A 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B92D 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B930 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B933 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B934 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B935             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B935 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B936 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B937 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B938             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B938             0095*  
04B938             0096*  
04B938             0097*  ; set initial player position
04B938             0098*  ; inputs: none,everything is hardcoded
04B938             0099*  ; outputs: player set to the first valid position on the map
04B938             0100*  ; destroys: a
04B938             0101*  plyr_init:
04B938 CD 12 69 04 0102*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04B93C 32 CD B8 04 0103*      ld (cur_cell),a
04B940 ED 53 D1 B8 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B945 AF          0105*      xor a ; north is default orientation
04B946 32 D0 B8 04 0106*      ld (orientation),a
04B94A 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B94E FD 21 0D B9 0108*      ld iy,plyr_move_timer
       04          
04B953 CD B6 C7 04 0109*      call timestamp_tmr_set
04B957 3E 03       0110*      ld a,3
04B959 32 C8 B8 04 0111*      ld (plyr_lives),a
04B95D 3E 64       0112*      ld a,100
04B95F 32 C2 B8 04 0113*      ld (plyr_health),a
04B963 3E 08       0114*      ld a,8
04B965 32 01 B9 04 0115*      ld (plyr_ammo),a
04B969 3E 01       0116*      ld a,plyr_wpn_knife
04B96B F6 02       0117*      or plyr_wpn_pistol
04B96D 32 E6 B8 04 0118*      ld (plyr_wpns),a
04B971 3E 01       0119*      ld a,plyr_wpn_knife
04B973 32 E7 B8 04 0120*      ld (plyr_wpn_active),a
04B977 CD 4B BA 04 0121*      call plyr_set_weapon_parameters
04B97B FD 21 EF B8 0122*      ld iy,plyr_wpn_select_tmr
       04          
04B980 21 00 00 00 0123*      ld hl,0
04B984 CD B6 C7 04 0124*      call timestamp_tmr_set
04B988 C9          0125*      ret
04B989             0126*  
04B989             0127*  ; restart player after dying
04B989             0128*  ; inputs: none,everything is hardcoded
04B989             0129*  ; outputs: player set to the first valid position on the map
04B989             0130*  ; destroys: a
04B989             0131*  plyr_restart:
04B989 3A CC B8 04 0132*      ld a,(cur_room)
04B98D A7          0133*      and a
04B98E 28 3A       0134*      jr z,@no_load
04B990             0135*  ; not in room zero so save state of current room
04B990 21 E8 69 04 0136*      ld hl,room_flags
04B994 11 00 00 00 0137*  	ld de,0 ; make sure deu and d are zero
04B998 5F          0138*  	ld e,a
04B999 19          0139*  	add hl,de ; hl = address of room flags entry
04B99A 3E 01       0140*  	ld a,room_flag_visited
04B99C B6          0141*  	or (hl)
04B99D 77          0142*  	ld (hl),a
04B99E             0143*  ; update from_room
04B99E 3A CC B8 04 0144*  	ld a,(cur_room)
04B9A2 32 CF B8 04 0145*  	ld (from_room),a
04B9A6             0146*  ; save old room state to room dat memory location
04B9A6 21 F2 69 04 0147*  	ld hl,room_dat_lut
04B9AA 57          0148*  	ld d,a
04B9AB 1E 03       0149*  	ld e,3 ; three bytes per lookup record
04B9AD ED 5C       0150*  	mlt de ; de = offset to room dat entry
04B9AF 19          0151*  	add hl,de ; hl = address of room dat entry
04B9B0 ED 17       0152*  	ld de,(hl) ; destination address for room data
04B9B2 21 00 E0 B7 0153*  	ld hl,cell_status ; source address for room data
04B9B6 01 00 20 00 0154*  	ld bc,8*1024 ; size of room data
04B9BA ED B0       0155*  	ldir
04B9BC             0156*  ; fetch room zero state from room dat memory location
04B9BC 2A F2 69 04 0157*  	ld hl,(room_00_dat) ; source address for room data
04B9C0 11 00 E0 B7 0158*  	ld de,cell_status ; destination address for room data
04B9C4 01 00 20 00 0159*  	ld bc,8*1024 ; size of room data
04B9C8 ED B0       0160*  	ldir
04B9CA             0161*  @no_load:
04B9CA AF          0162*      xor a
04B9CB 32 CC B8 04 0163*      ld (cur_room),a
04B9CF 32 D0 B8 04 0164*      ld (orientation),a ; north is default orientation
04B9D3 21 1E 00 00 0165*      ld hl,plyr_move_rate
04B9D7 FD 21 0D B9 0166*      ld iy,plyr_move_timer
       04          
04B9DC             0167*  
04B9DC 3A C8 B8 04 0168*      ld a,(plyr_lives)
04B9E0 3D          0169*      dec a
04B9E1 32 C8 B8 04 0170*      ld (plyr_lives),a
04B9E5 3E 64       0171*      ld a,100
04B9E7 32 C2 B8 04 0172*      ld (plyr_health),a
04B9EB 3E 08       0173*      ld a,8
04B9ED CD 71 BB 04 0174*      call plyr_add_ammo
04B9F1             0175*  
04B9F1 CD 12 69 04 0176*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04B9F5 32 CD B8 04 0177*      ld (cur_cell),a
04B9F9 ED 53 D1 B8 0178*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B9FE             0179*  
04B9FE C9          0180*      ret
04B9FF             0181*  
04B9FF             0182*  plyr_next_weapon:
04B9FF             0183*  ; check if select weapons timer has expired
04B9FF FD 21 EF B8 0184*      ld iy,plyr_wpn_select_tmr
       04          
04BA04 CD C1 C7 04 0185*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BA08 F0          0186*      ret p ; time left on timer so no weapon select
04BA09             0187*  ; reset weapon select timer
04BA09 21 14 00 00 0188*      ld hl,120/6 ; 1/6 second
04BA0D CD B6 C7 04 0189*      call timestamp_tmr_set
04BA11             0190*  ; select next weapon
04BA11 21 E6 B8 04 0191*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04BA15 ED 07       0192*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04BA17             0193*  @loop:
04BA17 3A E7 B8 04 0194*      ld a,(plyr_wpn_active)
04BA1B 07          0195*      rlca ; rotate left
04BA1C 32 E7 B8 04 0196*      ld (plyr_wpn_active),a
04BA20 A6          0197*      and (hl) ; check inventory mask
04BA21 28 F4       0198*      jr z,@loop
04BA23 C3 4B BA 04 0199*      jp plyr_set_weapon_parameters
04BA27             0200*  
04BA27             0201*  plyr_previous_weapon:
04BA27             0202*  ; check if select weapons timer has expired
04BA27 FD 21 EF B8 0203*      ld iy,plyr_wpn_select_tmr
       04          
04BA2C CD C1 C7 04 0204*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BA30 F0          0205*      ret p ; time left on timer so no weapon select
04BA31             0206*  ; reset weapon select timer
04BA31 21 14 00 00 0207*      ld hl,120/6 ; 1/6 second
04BA35 CD B6 C7 04 0208*      call timestamp_tmr_set
04BA39             0209*  ; select next weapon
04BA39 21 E6 B8 04 0210*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04BA3D ED 07       0211*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04BA3F             0212*  @loop:
04BA3F 3A E7 B8 04 0213*      ld a,(plyr_wpn_active)
04BA43 0F          0214*      rrca ; rotate right
04BA44 32 E7 B8 04 0215*      ld (plyr_wpn_active),a
04BA48 A6          0216*      and (hl) ; check inventory mask
04BA49 28 F4       0217*      jr z,@loop
04BA4B             0218*      ; fall through to plyr_set_weapon_parameters
04BA4B             0219*  
04BA4B             0220*  plyr_set_weapon_parameters:
04BA4B FE 01       0221*      cp %00000001 ; knife
04BA4D CA 64 BA 04 0222*      jp z,@knife
04BA51 FE 02       0223*      cp %00000010 ; pistol
04BA53 CA 8C BA 04 0224*      jp z,@pistol
04BA57 FE 04       0225*      cp %00000100 ; machine gun
04BA59 CA B4 BA 04 0226*      jp z,@machine_gun
04BA5D FE 08       0227*      cp %00001000 ; gatling gun
04BA5F CA DC BA 04 0228*      jp z,@gatling_gun
04BA63 C9          0229*      ret ; if none of the above do nothing
04BA64             0230*  @knife:
04BA64 21 05 21 00 0231*      ld hl,BUF_UI_BJ_KNIFE_00
04BA68 22 EC B8 04 0232*      ld (plyr_wpn_ui_lg),hl
04BA6C 21 07 20 00 0233*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04BA70 22 E9 B8 04 0234*      ld (plyr_wpn_ui_sm),hl
04BA74 3E 14       0235*      ld a,20 ; dps = 60
04BA76 32 E8 B8 04 0236*      ld (plyr_wpn_damage),a
04BA7A 21 3C 00 00 0237*      ld hl,120/2 ; 3 times/second
04BA7E 22 FB B8 04 0238*      ld (plyr_wpn_fire_rate),hl
04BA82 FD 21 F5 B8 0239*      ld iy,plyr_wpn_fire_tmr
       04          
04BA87 CD B6 C7 04 0240*      call timestamp_tmr_set
04BA8B C9          0241*      ret
04BA8C             0242*  @pistol:
04BA8C 21 0F 21 00 0243*      ld hl,BUF_UI_BJ_PISTOL_00
04BA90 22 EC B8 04 0244*      ld (plyr_wpn_ui_lg),hl
04BA94 21 09 20 00 0245*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04BA98 22 E9 B8 04 0246*      ld (plyr_wpn_ui_sm),hl
04BA9C             0247*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04BA9C 3E 1E       0248*      ld a,30 ; damage/burst
04BA9E 32 E8 B8 04 0249*      ld (plyr_wpn_damage),a
04BAA2 21 28 00 00 0250*      ld hl,120/3 ; 3 bursts/second
04BAA6 22 FB B8 04 0251*      ld (plyr_wpn_fire_rate),hl
04BAAA FD 21 F5 B8 0252*      ld iy,plyr_wpn_fire_tmr
       04          
04BAAF CD B6 C7 04 0253*      call timestamp_tmr_set
04BAB3 C9          0254*      ret
04BAB4             0255*  @machine_gun:
04BAB4 21 0A 21 00 0256*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04BAB8 22 EC B8 04 0257*      ld (plyr_wpn_ui_lg),hl
04BABC 21 08 20 00 0258*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04BAC0 22 E9 B8 04 0259*      ld (plyr_wpn_ui_sm),hl
04BAC4             0260*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04BAC4 3E 50       0261*      ld a,80 ; damage/burst
04BAC6 32 E8 B8 04 0262*      ld (plyr_wpn_damage),a
04BACA 21 28 00 00 0263*      ld hl,120/3 ; 3 bursts/second
04BACE 22 FB B8 04 0264*      ld (plyr_wpn_fire_rate),hl
04BAD2 FD 21 F5 B8 0265*      ld iy,plyr_wpn_fire_tmr
       04          
04BAD7 CD B6 C7 04 0266*      call timestamp_tmr_set
04BADB C9          0267*      ret
04BADC             0268*  @gatling_gun:
04BADC 21 00 21 00 0269*      ld hl,BUF_UI_BJ_GATLING_00
04BAE0 22 EC B8 04 0270*      ld (plyr_wpn_ui_lg),hl
04BAE4 21 06 20 00 0271*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04BAE8 22 E9 B8 04 0272*      ld (plyr_wpn_ui_sm),hl
04BAEC             0273*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04BAEC 3E 78       0274*      ld a,120 ; damage/burst
04BAEE 32 E8 B8 04 0275*      ld (plyr_wpn_damage),a
04BAF2 21 28 00 00 0276*      ld hl,120/3 ; 3 bursts/second
04BAF6 22 FB B8 04 0277*      ld (plyr_wpn_fire_rate),hl
04BAFA FD 21 F5 B8 0278*      ld iy,plyr_wpn_fire_tmr
       04          
04BAFF CD B6 C7 04 0279*      call timestamp_tmr_set
04BB03 C9          0280*      ret
04BB04             0281*  
04BB04             0282*  ; adds to player's health by a set amount
04BB04             0283*  ; inputs: a is the signed amount to modify health
04BB04             0284*  ; outputs: a will contain amount of health remaining
04BB04             0285*  ;          carry will be set if health maxes out to 255
04BB04             0286*  plyr_add_health:
04BB04 21 C2 B8 04 0287*      ld hl,plyr_health
04BB08 86          0288*      add a,(hl)
04BB09 D2 0F BB 04 0289*      jp nc,@update ; if we roll over to zero when adding
04BB0D 3E FF       0290*      ld a,255 ; ... set health remaining to max
04BB0F             0291*  @update:
04BB0F 77          0292*      ld (hl),a
04BB10 C3 38 BB 04 0293*      jp plyr_health_image
04BB14             0294*  
04BB14             0295*  ; subtracts from player's health by a set amount
04BB14             0296*  ; inputs: a is the signed amount to modify health
04BB14             0297*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04BB14             0298*  ;        a contains remaining health
04BB14             0299*  plyr_sub_health:
04BB14 A7          0300*      and a
04BB15 C8          0301*      ret z
04BB16             0302*  ; DEBUG
04BB16 ED 44       0303*      neg
04BB18 32 5F BB 04 0304*      ld (last_damage),a
04BB1C ED 44       0305*      neg
04BB1E             0306*  ; END DEBUG
04BB1E 21 C2 B8 04 0307*      ld hl,plyr_health
04BB22 86          0308*      add a,(hl)
04BB23 CA 2B BB 04 0309*      jp z,@zero
04BB27 DA 37 BB 04 0310*      jp c,@update
04BB2B             0311*  @zero:
04BB2B 21 03 20 00 0312*      ld hl,BUF_UI_BJ_100
04BB2F 22 5D 6A 04 0313*      ld (bj_health_image),hl
04BB33 C3 89 B9 04 0314*      jp plyr_restart ; will go the right place from there
04BB37             0315*  @update:
04BB37 77          0316*      ld (hl),a
04BB38             0317*  ; fall through to plyr_health_image
04BB38             0318*  
04BB38             0319*  plyr_health_image:
04BB38 FE 19       0320*      cp 25
04BB3A 38 0E       0321*      jr c,@less_than_25
04BB3C FE 32       0322*      cp 50
04BB3E 38 10       0323*      jr c,@less_than_50
04BB40 FE 4B       0324*      cp 75
04BB42 38 12       0325*      jr c,@less_than_75
04BB44 21 03 20 00 0326*      ld hl,BUF_UI_BJ_100
04BB48 18 10       0327*      jr @update
04BB4A             0328*  @less_than_25:
04BB4A 21 00 20 00 0329*      ld hl,BUF_UI_BJ_025
04BB4E 18 0A       0330*      jr @update
04BB50             0331*  @less_than_50:
04BB50 21 01 20 00 0332*      ld hl,BUF_UI_BJ_050
04BB54 18 04       0333*      jr @update
04BB56             0334*  @less_than_75:
04BB56 21 02 20 00 0335*      ld hl,BUF_UI_BJ_075
04BB5A             0336*  @update:
04BB5A 22 5D 6A 04 0337*      ld (bj_health_image),hl
04BB5E C9          0338*      ret
04BB5F             0339*  
04BB5F 00 00 00    0340*  last_damage: dl 0x00 ; last damage dealt to player
04BB62             0341*  
04BB62             0342*  ; modifies the players score by a set amount
04BB62             0343*  ; inputs: a is the signed amount to modify score
04BB62             0344*  plyr_mod_score:
04BB62 11 00 00 00 0345*      ld de,0 ; make sure deu is zero
04BB66 5F          0346*      ld e,a
04BB67 2A BF B8 04 0347*      ld hl,(plyr_score)
04BB6B 19          0348*      add hl,de
04BB6C 22 BF B8 04 0349*      ld (plyr_score),hl
04BB70 C9          0350*      ret
04BB71             0351*  
04BB71             0352*  ; adds to player's ammo by a set amount
04BB71             0353*  ; inputs: a is the signed amount to modify ammo
04BB71             0354*  ; outputs: a will contain amount of ammo remaining
04BB71             0355*  ;          carry will be set if ammo maxes out to 255
04BB71             0356*  plyr_add_ammo:
04BB71 21 01 B9 04 0357*      ld hl,plyr_ammo
04BB75 86          0358*      add a,(hl)
04BB76 D2 7C BB 04 0359*      jp nc,@update ; if we roll over to zero when adding
04BB7A 3E FF       0360*      ld a,255 ; ... set ammo remaining to max
04BB7C             0361*  @update:
04BB7C 77          0362*      ld (hl),a
04BB7D C9          0363*      ret
04BB7E             0364*  
04BB7E             0365*  ; subtracts from player's ammo by a set amount
04BB7E             0366*  ; inputs: a is the signed amount to modify ammo
04BB7E             0367*  ; outputs: carry reset if player was out of ammo before firing
04BB7E             0368*  ;          a will also contain amount of ammo remaining after shot
04BB7E             0369*  plyr_sub_ammo:
04BB7E 21 01 B9 04 0370*      ld hl,plyr_ammo
04BB82 86          0371*      add a,(hl)
04BB83 DA 96 BB 04 0372*      jp c,@update
04BB87 3E 01       0373*      ld a,%00000001 ; knife
04BB89 32 E7 B8 04 0374*      ld (plyr_wpn_active),a
04BB8D CD 4B BA 04 0375*      call plyr_set_weapon_parameters
04BB91 AF          0376*      xor a ; clear carry, set ammo to zero
04BB92 21 01 B9 04 0377*      ld hl,plyr_ammo
04BB96             0378*  @update:
04BB96 77          0379*      ld (hl),a
04BB97 C9          0380*      ret
04BB98             0381*  
04BB98             0382*  plyr_shoot_knife:
04BB98 CD B4 C5 04 0383*      call sfx_play_knife
04BB9C             0384*      ; check whether the player hit anything
04BB9C 3A D0 B8 04 0385*      ld a,(orientation) ; direction knife is moving
04BBA0 5F          0386*      ld e,a
04BBA1 16 01       0387*      ld d,1 ; shot "velocity" in map units
04BBA3 CD FB 67 04 0388*      call get_dx_dy ; d,e = dy,dx
04BBA7 ED 53 DE B8 0389*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04BBAC 2A D1 B8 04 0390*      ld hl,(cur_x) ; h,l = player y,x
04BBB0 22 DB B8 04 0391*      ld (plyr_shot_x),hl ; initial shot position
04BBB4 ED 5B DE B8 0392*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04BBB9 2A DB B8 04 0393*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04BBBD             0394*      ; bump bullet position one map unit in direction of travel
04BBBD 7D          0395*      ld a,l ; player shot x
04BBBE 83          0396*      add a,e ; add xvel
04BBBF 6F          0397*      ld l,a ; save new x
04BBC0 7C          0398*      ld a,h ; player shot y
04BBC1 82          0399*      add a,d ; add yvel
04BBC2 67          0400*      ld h,a ; save new y
04BBC3 22 DB B8 04 0401*      ld (plyr_shot_x),hl ; and save that position
04BBC7 EB          0402*      ex de,hl ; d,e = bullet y,x
04BBC8 CD D6 67 04 0403*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04BBCC             0404*  ; check whether target cell contains a sprite
04BBCC DD 7E 03    0405*      ld a,(ix+map_sprite_id)
04BBCF FE FF       0406*      cp 255 ; value if not sprite
04BBD1 C8          0407*      ret z ; if we hit a non-sprite, we're done
04BBD2             0408*  ; is a sprite so run its "hurt" behavior routine
04BBD2 CD 4B A6 04 0409*      call sprite_set_pointer
04BBD6 3E 02       0410*      ld a,sp_hurt
04BBD8 CD 88 A7 04 0411*      call do_sprite_behavior ; a = sprite behavior return code
04BBDC C9          0412*      ret
04BBDD             0413*  
04BBDD             0414*  plyr_shoot_pistol:
04BBDD 3E FF       0415*      ld a,-1
04BBDF CD 7E BB 04 0416*      call plyr_sub_ammo
04BBE3 DA EC BB 04 0417*      jp c,@shoot
04BBE7 CD 9C C5 04 0418*      call sfx_play_gun_empty
04BBEB C9          0419*      ret
04BBEC             0420*  @shoot:
04BBEC CD 08 C6 04 0421*      call sfx_play_shot_pistol
04BBF0 C3 22 BC 04 0422*      jp plyr_move_bullet
04BBF4             0423*  
04BBF4             0424*  plyr_shoot_machine_gun:
04BBF4 3E FC       0425*      ld a,-4
04BBF6 CD 7E BB 04 0426*      call plyr_sub_ammo
04BBFA DA 03 BC 04 0427*      jp c,@shoot
04BBFE CD 9C C5 04 0428*      call sfx_play_gun_empty
04BC02 C9          0429*      ret
04BC03             0430*  @shoot:
04BC03 CD FC C5 04 0431*      call sfx_play_shot_machine_gun_burst
04BC07 C3 22 BC 04 0432*      jp plyr_move_bullet
04BC0B             0433*  
04BC0B             0434*  plyr_shoot_gatling_gun:
04BC0B 3E F8       0435*      ld a,-8
04BC0D CD 7E BB 04 0436*      call plyr_sub_ammo
04BC11 DA 1A BC 04 0437*      jp c,@shoot
04BC15 CD 9C C5 04 0438*      call sfx_play_gun_empty
04BC19 C9          0439*      ret
04BC1A             0440*  @shoot:
04BC1A CD F0 C5 04 0441*      call sfx_play_shot_gatling_burst
04BC1E C3 22 BC 04 0442*      jp plyr_move_bullet
04BC22             0443*  
04BC22             0444*  plyr_move_bullet:
04BC22             0445*      ; check whether the player hit anything
04BC22 3A D0 B8 04 0446*      ld a,(orientation) ; direction shot is moving
04BC26 32 E1 B8 04 0447*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04BC2A 5F          0448*      ld e,a
04BC2B 16 01       0449*      ld d,1 ; shot "velocity" in map units
04BC2D CD FB 67 04 0450*      call get_dx_dy ; d,e = dy,dx
04BC31 ED 53 DE B8 0451*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04BC36 2A D1 B8 04 0452*      ld hl,(cur_x) ; h,l = player y,x
04BC3A 22 DB B8 04 0453*      ld (plyr_shot_x),hl ; initial shot position
04BC3E 06 05       0454*      ld b,view_distance ; loop counter so player can't shoot past view distance
04BC40             0455*  @loop:
04BC40 C5          0456*      push bc ; save loop counter
04BC41 ED 5B DE B8 0457*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04BC46 2A DB B8 04 0458*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04BC4A             0459*      ; bump bullet position one map unit in direction of travel
04BC4A 7D          0460*      ld a,l ; player shot x
04BC4B 83          0461*      add a,e ; add xvel
04BC4C 6F          0462*      ld l,a ; save new x
04BC4D 7C          0463*      ld a,h ; player shot y
04BC4E 82          0464*      add a,d ; add yvel
04BC4F 67          0465*      ld h,a ; save new y
04BC50 22 DB B8 04 0466*      ld (plyr_shot_x),hl ; and save that position
04BC54 EB          0467*      ex de,hl ; d,e = bullet y,x
04BC55 CD D6 67 04 0468*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04BC59             0469*  ; check whether target cell contains a sprite
04BC59 DD 7E 03    0470*      ld a,(ix+map_sprite_id)
04BC5C FE FF       0471*      cp 255 ; value if not sprite
04BC5E 28 14       0472*      jr z,@not_sprite
04BC60             0473*  ; is a sprite so run its "hurt" behavior routine
04BC60 CD 4B A6 04 0474*      call sprite_set_pointer
04BC64 3E 02       0475*      ld a,sp_hurt
04BC66 CD 88 A7 04 0476*      call do_sprite_behavior ; a = sprite behavior return code
04BC6A 3A E1 B8 04 0477*      ld a,(plyr_shot_status)
04BC6E FE FF       0478*      cp 255 ; value if shot hit a shootable sprite
04BC70 28 10       0479*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04BC72 18 16       0480*      jr @move_bullet ; otherwise keep moving bullet
04BC74             0481*  @not_sprite:
04BC74 ED 5B DE B8 0482*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04BC79             0483*  ; read map type/status mask from target cell
04BC79 DD 7E 00    0484*      ld a,(ix+map_type_status)
04BC7C E6 03       0485*      and %00000011 ; mask off everything but the render type mask bits
04BC7E             0486*  ; branch on the values in the bitmask
04BC7E FE 01       0487*      cp render_type_floor
04BC80 28 08       0488*      jr z,@move_bullet ; keep going if map cell is a floor
04BC82             0489*  @stop_bullet:
04BC82 C1          0490*      pop bc ; dummy pop to balance stack
04BC83 3E FF       0491*      ld a,255
04BC85 32 E1 B8 04 0492*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BC89 C9          0493*      ret ; combat ended
04BC8A             0494*  @move_bullet:
04BC8A C1          0495*      pop bc ; restore loop counter
04BC8B 10 B3       0496*      djnz @loop ; keep moving bullet if we have more distance to cover
04BC8D 3E FF       0497*      ld a,255
04BC8F 32 E1 B8 04 0498*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BC93 C9          0499*      ret ; combat ended
04BC94             0500*  
04BC94             0501*  plyr_shoot:
04BC94             0502*  ; check if fire weapons timer has expired
04BC94 FD 21 F5 B8 0503*      ld iy,plyr_wpn_fire_tmr
       04          
04BC99 CD C1 C7 04 0504*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BC9D CA A6 BC 04 0505*      jp z,@time_up ; timer zero so fire weapon
04BCA1 FA A6 BC 04 0506*      jp m,@time_up ; timer negative so fire weapon
04BCA5 C9          0507*      ret ; timer not expired so don't fire weapon
04BCA6             0508*  @time_up:
04BCA6             0509*  ; reset fire weapon timer
04BCA6 FD 21 F5 B8 0510*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04BCAB 2A FB B8 04 0511*      ld hl,(plyr_wpn_fire_rate)
04BCAF CD B6 C7 04 0512*      call timestamp_tmr_set
04BCB3             0513*  ; check animation frame for zero
04BCB3 21 FE B8 04 0514*      ld hl,plyr_wpn_anim_fr
04BCB7 7E          0515*      ld a,(hl)
04BCB8 A7          0516*      and a
04BCB9 20 01       0517*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04BCBB 34          0518*      inc (hl) ; is zero so bump to first animation frame
04BCBC             0519*  @shoot:
04BCBC             0520*  ; roll for damage modifier
04BCBC CD 45 BE 04 0521*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04BCC0 21 E8 B8 04 0522*      ld hl,plyr_wpn_damage
04BCC4 A6          0523*      and a,(hl) ; a contains modified damage value
04BCC5 ED 44       0524*      neg ; so we can add the negative
04BCC7 32 E5 B8 04 0525*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04BCCB             0526*  ; determine active weapon and shoot it
04BCCB 3A E7 B8 04 0527*      ld a,(plyr_wpn_active)
04BCCF FE 02       0528*      cp plyr_wpn_pistol
04BCD1 CA DD BB 04 0529*      jp z,plyr_shoot_pistol
04BCD5 FE 04       0530*      cp plyr_wpn_mg
04BCD7 CA F4 BB 04 0531*      jp z,plyr_shoot_machine_gun
04BCDB FE 08       0532*      cp plyr_wpn_gg
04BCDD CA 0B BC 04 0533*      jp z,plyr_shoot_gatling_gun
04BCE1 FE 01       0534*      cp plyr_wpn_knife
04BCE3 CA 98 BB 04 0535*      jp z,plyr_shoot_knife
04BCE7 C9          0536*      ret
04BCE8             0537*  
04BCE8             0538*  ; process player keyboard input
04BCE8             0539*  ; Inputs: plyr_x/y set at desired position
04BCE8             0540*  ; Returns: player position updated
04BCE8             0541*  ; Destroys: probably everything
04BCE8             0542*  plyr_input:
04BCE8             0543*  ; check weapon anmation frame for zero
04BCE8 3A FE B8 04 0544*      ld a,(plyr_wpn_anim_fr)
04BCEC E6 03       0545*      and 3 ; modulo 4
04BCEE 32 FE B8 04 0546*      ld (plyr_wpn_anim_fr),a
04BCF2 28 05       0547*      jr z,@get_input
04BCF4             0548*  ; ; animation frame is not zero so check animation timer
04BCF4             0549*  ;     ld iy,plyr_wpn_anim_tmr
04BCF4             0550*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BCF4             0551*  ;     jp z,@animate ; timer zero so animate
04BCF4             0552*  ;     jp m,@animate ; timer negative so animate
04BCF4             0553*  ;     jp @get_input ; time left on timer so no animation
04BCF4             0554*  ; bump animation frame
04BCF4             0555*  @animate:
04BCF4 21 FE B8 04 0556*      ld hl,plyr_wpn_anim_fr
04BCF8 34          0557*      inc (hl) ; next frame
04BCF9             0558*  ; ; reset animation timer
04BCF9             0559*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04BCF9             0560*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04BCF9             0561*  ;     call timestamp_tmr_set
04BCF9             0562*  
04BCF9             0563*  @get_input:
04BCF9             0564*  ; reset player component velocities to zero as the default
04BCF9 21 00 00 00 0565*      ld hl,0
04BCFD 22 D4 B8 04 0566*      ld (xvel),hl ; implicitly sets yvel
04BD01 AF          0567*      xor a ;
04BD02 32 DA B8 04 0568*      ld (avel),a ; set player angular velocity to zero as default
04BD06             0569*  
04BD06             0570*  ; check for keypresses and branch accordingly
04BD06             0571*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04BD06 3E 1E       0001*M 			LD	A, function
04BD08 5B CF       0002*M 			RST.LIL	08h
04BD0A             0572*  
04BD0A             0573*  ; CHECK WEAPON CONTROL KEYS
04BD0A             0574*  ; 58 Up player selects next weapon
04BD0A DD CB 07 4E 0575*      bit 1,(ix+7)
04BD0E 28 08       0576*      jr z,@Up
04BD10 DD E5       0577*      push ix ; it gets clobbered by the weapon select routine
04BD12 CD FF B9 04 0578*      call plyr_next_weapon
04BD16 DD E1       0579*      pop ix
04BD18             0580*  @Up:
04BD18             0581*  
04BD18             0582*  ; 42 Down
04BD18 DD CB 05 4E 0583*      bit 1,(ix+5)
04BD1C 28 08       0584*      jr z,@Down
04BD1E DD E5       0585*      push ix ; it gets clobbered by the weapon select routine
04BD20 CD 27 BA 04 0586*      call plyr_previous_weapon
04BD24 DD E1       0587*      pop ix
04BD26             0588*  @Down:
04BD26             0589*  
04BD26             0590*  ; =====================
04BD26             0591*  ; 99 Space FIRE ZEE MISSILES!!!111
04BD26 DD CB 0C 56 0592*      bit 2,(ix+12)
04BD2A 28 08       0593*      jr z,@Space
04BD2C DD E5       0594*      push ix ; it gets clobbered by the weapon firing
04BD2E CD 94 BC 04 0595*      call plyr_shoot
04BD32 DD E1       0596*      pop ix ; restore ix
04BD34             0597*  @Space:
04BD34             0598*  
04BD34             0599*  ; CHECK MOVEMENT KEYS
04BD34             0600*  ; non-zero means no movement key was pressed
04BD34 3E FF       0601*      ld a,-1
04BD36             0602*  
04BD36             0603*  ; 34 W player moves forward
04BD36 DD CB 04 4E 0604*      bit 1,(ix+4)
04BD3A 28 07       0605*      jr z,@W
04BD3C 3E 01       0606*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BD3E 32 D5 B8 04 0607*      ld (yvel),a
04BD42 AF          0608*      xor a
04BD43             0609*  @W:
04BD43             0610*  
04BD43             0611*  ; 82 S player moves backward
04BD43 DD CB 0A 4E 0612*      bit 1,(ix+10)
04BD47 28 0C       0613*      jr z,@S
04BD49 16 FF       0614*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BD4B 3A D5 B8 04 0615*      ld a,(yvel)
04BD4F 82          0616*      add a,d
04BD50 32 D5 B8 04 0617*      ld (yvel),a
04BD54 AF          0618*      xor a
04BD55             0619*  @S:
04BD55             0620*  
04BD55             0621*  ; 66 A plyer moves left
04BD55 DD CB 08 4E 0622*      bit 1,(ix+8)
04BD59 28 07       0623*      jr z,@A
04BD5B 3E FF       0624*      ld a,-speed_plyr ; no funky axis conversion here
04BD5D 32 D4 B8 04 0625*      ld (xvel),a
04BD61 AF          0626*      xor a
04BD62             0627*  @A:
04BD62             0628*  
04BD62             0629*  ; 51 D player moves right
04BD62 DD CB 06 56 0630*      bit 2,(ix+6)
04BD66 28 0C       0631*      jr z,@D
04BD68 16 01       0632*      ld d,speed_plyr ; no funky axis conversion here
04BD6A 3A D4 B8 04 0633*      ld a,(xvel)
04BD6E 82          0634*      add a,d
04BD6F 32 D4 B8 04 0635*      ld (xvel),a
04BD73 AF          0636*      xor a
04BD74             0637*  @D:
04BD74             0638*  
04BD74             0639*  ; 26 Left player rotates anti-clockwise
04BD74 DD CB 03 4E 0640*      bit 1,(ix+3)
04BD78 28 06       0641*      jr z,@Left
04BD7A 21 DA B8 04 0642*      ld hl,avel
04BD7E 35          0643*      dec (hl)
04BD7F AF          0644*      xor a
04BD80             0645*  @Left:
04BD80             0646*  
04BD80             0647*  ; 122 Right player rotates clockwise
04BD80 DD CB 0F 4E 0648*      bit 1,(ix+15)
04BD84 28 06       0649*      jr z,@Right
04BD86 21 DA B8 04 0650*      ld hl,avel
04BD8A 34          0651*      inc (hl)
04BD8B AF          0652*      xor a
04BD8C             0653*  @Right:
04BD8C             0654*  
04BD8C             0655*  ; KEYPRESS DETECTION DONE
04BD8C A7          0656*      and a ; this will zero if player pressed a movement key
04BD8D C0          0657*      ret nz ; non zero so no key pressed
04BD8E             0658*  ; check move timer
04BD8E FD 21 0D B9 0659*      ld iy,plyr_move_timer
       04          
04BD93 CD C1 C7 04 0660*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BD97 F0          0661*      ret p ; time left on timer so no movement
04BD98             0662*  ; reset_move_timer
04BD98 21 1E 00 00 0663*      ld hl,plyr_move_rate
04BD9C FD 21 0D B9 0664*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04BDA1 CD B6 C7 04 0665*      call timestamp_tmr_set
04BDA5             0666*  ; move player according to velocities set by keypresses
04BDA5 ED 5B D4 B8 0667*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04BDAA 3A DA B8 04 0668*      ld a,(avel)
04BDAE 21 D0 B8 04 0669*      ld hl,orientation
04BDB2 86          0670*      add a,(hl)
04BDB3 E6 03       0671*      and 0x03 ; modulo 4
04BDB5 77          0672*      ld (hl),a
04BDB6 CD 43 68 04 0673*      call trans_dx_dy ; d = dy, e = dx
04BDBA ED 53 D8 B8 0674*      ld (dx),de
       04          
04BDBF 3A D1 B8 04 0675*      ld a,(cur_x)
04BDC3 83          0676*      add a,e
04BDC4 5F          0677*      ld e,a
04BDC5 3A D2 B8 04 0678*      ld a,(cur_y)
04BDC9 82          0679*      add a,d
04BDCA 57          0680*      ld d,a
04BDCB ED 53 D4 B8 0681*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04BDD0 CD D6 67 04 0682*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04BDD4             0683*  ; check whether target cell contains a sprite
04BDD4 DD 7E 03    0684*      ld a,(ix+map_sprite_id)
04BDD7 FE FF       0685*      cp 255 ; value if not sprite
04BDD9 28 0A       0686*      jr z,@not_sprite
04BDDB             0687*  ; is a sprite so run its "use" behavior routine
04BDDB CD 4B A6 04 0688*      call sprite_set_pointer
04BDDF 3E 01       0689*      ld a,sp_use
04BDE1 CD 88 A7 04 0690*      call do_sprite_behavior
04BDE5             0691*  ; fall through because we still need to check out what's going on in the target cell
04BDE5             0692*  @not_sprite:
04BDE5 ED 5B D4 B8 0693*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04BDEA             0694*  ; read map type/status mask from target cell
04BDEA DD 7E 00    0695*      ld a,(ix+map_type_status)
04BDED 47          0696*      ld b,a ; b = target cell type/status
04BDEE             0697*  ; branch on the values in the bitmask
04BDEE 3E 40       0698*      ld a,cell_is_wall
04BDF0 A0          0699*      and b
04BDF1 C0          0700*      ret nz ; can't move thru walls
04BDF2 3E 04       0701*      ld a,cell_is_to_room
04BDF4 A0          0702*      and b
04BDF5 C2 4E 69 04 0703*      jp nz,change_room
04BDF9             0704*      ; fall through to @move_it
04BDF9             0705*  @move_it:
04BDF9             0706*  ; we are cleared for movement so update player position
04BDF9 11 00 00 00 0707*      ld de,0 ; make sure deu is zero
04BDFD ED 4B D8 B8 0708*      ld bc,(dx) ; b = dy, c = dx
       04          
04BE02 3A D1 B8 04 0709*      ld a,(cur_x)
04BE06 81          0710*      add a,c
04BE07 5F          0711*      ld e,a
04BE08 32 D1 B8 04 0712*      ld (cur_x),a
04BE0C 3A D2 B8 04 0713*      ld a,(cur_y)
04BE10 80          0714*      add a,b
04BE11 57          0715*      ld d,a
04BE12 32 D2 B8 04 0716*      ld (cur_y),a
04BE16 C9          0717*      ret
04BE17             0027   	include "src/asm/maths.asm"
04BE17 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04BE1B 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04BE1F             0003*  
04BE1F             0004*  ; set bcd values in a scratch memory address from registers bcde
04BE1F             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04BE1F             0006*  ; destroys ; hl
04BE1F             0007*  set_bcd:
04BE1F 73          0008*      ld (hl),e
04BE20 23          0009*      inc hl
04BE21 72          0010*      ld (hl),d
04BE22 23          0011*      inc hl
04BE23 71          0012*      ld (hl),c
04BE24 23          0013*      inc hl
04BE25 70          0014*      ld (hl),b
04BE26 C9          0015*      ret
04BE27             0016*  
04BE27             0017*  ; load bcd values from a scratch memory address to bcde
04BE27             0018*  ; input: hl; scratch address
04BE27             0019*  ; output: bcde; 8-place bcd number
04BE27             0020*  ; destroys: hl
04BE27             0021*  get_bcd:
04BE27 5E          0022*      ld e,(hl)
04BE28 23          0023*      inc hl
04BE29 56          0024*      ld d,(hl)
04BE2A 23          0025*      inc hl
04BE2B 4E          0026*      ld c,(hl)
04BE2C 23          0027*      inc hl
04BE2D 46          0028*      ld b,(hl)
04BE2E C9          0029*      ret
04BE2F             0030*  
04BE2F             0031*  ; BCD addition
04BE2F             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BE2F             0033*  ;       a is the number of bytes holding each number (number of places/2)
04BE2F             0034*  ; outputs: (hl) + (de) --> (hl)
04BE2F             0035*  ; destroys: a,b,de,hl
04BE2F             0036*  add_bcd:
04BE2F 47          0037*      ld b,a ; loop counter
04BE30 AF          0038*      xor a ; reset a, clear carry flag
04BE31             0039*  adcec:
04BE31 1A          0040*      ld a,(de) ; addend to acc
04BE32 8E          0041*      adc a,(hl) ; add (hl) to acc
04BE33 27          0042*      daa ; adjust result to bcd
04BE34 77          0043*      ld (hl),a ; store result
04BE35 23          0044*      inc hl ; advance memory pointers
04BE36 13          0045*      inc de
04BE37 10 F8       0046*      djnz adcec ; loop until b == 0
04BE39 C9          0047*      ret
04BE3A             0048*  
04BE3A             0049*  ; BCD subtraction
04BE3A             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BE3A             0051*  ;       a is the number of bytes holding each number (number of places/2)
04BE3A             0052*  ; outputs: (hl) - (de) --> (hl)
04BE3A             0053*  ; destroys: a,b,de,hl
04BE3A             0054*  sub_bcd:
04BE3A 47          0055*      ld b,a ; loop counter
04BE3B AF          0056*      xor a ; reset a,clear carry flag
04BE3C             0057*  subdec:
04BE3C 1A          0058*      ld a,(de) ; subtrahend to acc
04BE3D 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04BE3E 27          0060*      daa ; adjust result to bcd
04BE3F 77          0061*      ld (hl),a ; store result
04BE40 23          0062*      inc hl ; advance memory pointers
04BE41 13          0063*      inc de
04BE42 10 F8       0064*      djnz subdec ; loop until b == 0
04BE44 C9          0065*      ret
04BE45             0066*  
04BE45             0067*  ; http://www.z80.info/pseudo-random.txt
04BE45             0068*  rand_8:
04BE45 C5          0069*      push bc
04BE46 3A 59 BE 04 0070*      ld a,(r_seed)
04BE4A 4F          0071*      ld c,a
04BE4B             0072*  
04BE4B 0F          0073*      rrca ; multiply by 32
04BE4C 0F          0074*      rrca
04BE4D 0F          0075*      rrca
04BE4E EE 1F       0076*      xor 0x1f
04BE50             0077*  
04BE50 81          0078*      add a,c
04BE51 DE FF       0079*      sbc a,255 ; carry
04BE53             0080*  
04BE53 32 59 BE 04 0081*      ld (r_seed),a
04BE57 C1          0082*      pop bc
04BE58 C9          0083*      ret
04BE59 50          0084*  r_seed: defb $50
04BE5A             0028   	include "src/asm/img_load.asm"
04BE5A 00 00 00    0001*  cur_file_idx: dl 0
04BE5D 00 00 00    0002*  cur_filename: dl 0
04BE60 00 00 00    0003*  cur_buffer_id: dl 0
04BE63 00 00 00    0004*  cur_buffer_id_lut: dl 0
04BE66 00 00 00    0005*  cur_load_jump_table: dl 0
04BE69             0006*  
04BE69             0007*  img_load_init:
04BE69             0008*  ; initialize bj's position parameters
04BE69 21 00 00 00 0009*  	ld hl,0
04BE6D 22 B7 BF 04 0010*  	ld (bj_yvel),hl
04BE71             0011*  
04BE71 21 2D 00 00 0012*      ld hl,45
04BE75 22 BA BF 04 0013*  	ld (bj_y_cur),hl
04BE79 22 BD BF 04 0014*  	ld (bj_y_min),hl
04BE7D 22 C0 BF 04 0015*      ld (bj_y_max),hl
04BE81             0016*  
04BE81 21 01 00 00 0017*  	ld hl,1
04BE85 22 AB BF 04 0018*  	ld (bj_xvel),hl
04BE89             0019*  
04BE89 21 0A 00 00 0020*  	ld hl,10
04BE8D 22 AE BF 04 0021*  	ld (bj_x_cur),hl
04BE91 22 B1 BF 04 0022*  	ld (bj_x_min),hl
04BE95             0023*  
04BE95 21 C8 00 00 0024*  	ld hl,320-120
04BE99 22 B4 BF 04 0025*  	ld (bj_x_max),hl
04BE9D             0026*  
04BE9D C9          0027*      ret
04BE9E             0028*  
04BE9E             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04BE9E             0030*  img_load_main:
04BE9E 21 00 00 00 0031*      ld hl,0
04BEA2 22 5A BE 04 0032*      ld (cur_file_idx),hl
04BEA6             0033*  img_load_main_loop:
04BEA6             0034*  ; back up loop counter
04BEA6 C5          0035*      push bc
04BEA7             0036*  ; load the next panel
04BEA7 CD 0F BF 04 0037*      call load_next_panel
04BEAB             0038*  ; draw all the things
04BEAB CD C3 BF 04 0039*      call tmp_draw_all_the_things
04BEAF             0040*  ; draw the most recently loaded panel
04BEAF 2A 60 BE 04 0041*  	ld hl,(cur_buffer_id)
04BEB3 CD 2C B0 04 0042*  	call vdu_buff_select
04BEB7 01 00 00 00 0043*  	ld bc,0
04BEBB 11 00 00 00 0044*  	ld de,0
04BEBF CD FD B1 04 0045*  	call vdu_plot_bmp
04BEC3             0046*  ; move bj
04BEC3 CD 4B BF 04 0047*  	call move_bj
04BEC7             0048*  ; print welcome message
04BEC7 DD 21 56 82 0049*  	ld ix,font_itc_honda
       04          
04BECC 21 2D C8 04 0050*  	ld hl,hello_world
04BED0 01 20 00 00 0051*  	ld bc,32
04BED4 11 02 00 00 0052*  	ld de,2
04BED8 CD B3 67 04 0053*  	call font_bmp_print
04BEDC             0054*  ; print current filename
04BEDC CD C3 AE 04 0055*  	call vdu_cls
04BEE0 2A 5D BE 04 0056*  	ld hl,(cur_filename)
04BEE4 CD C2 B4 04 0057*  	call printString
04BEE8 CD D7 B4 04 0058*  	call printNewLine
04BEEC             0059*  
04BEEC             0060*  ; print current load stopwatch
04BEEC 21 4F C8 04 0061*  	ld hl,loading_time
04BEF0 CD C2 B4 04 0062*  	call printString
04BEF4 CD DF C7 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04BEF8 CD 10 B5 04 0064*  	call printDec
04BEFC             0065*  
04BEFC             0066*  ; flip screen
04BEFC CD 92 B0 04 0067*      call vdu_flip
04BF00             0068*  ; decrement loop counter
04BF00 C1          0069*      pop bc
04BF01 0B          0070*  	dec bc
04BF02             0071*  ; ; DEBUG: DUMP REGISTERS
04BF02             0072*  ; 	push bc
04BF02             0073*  ; 	call dumpRegistersHex
04BF02             0074*  ; 	call vdu_flip
04BF02             0075*  ; 	pop bc
04BF02             0076*  ; ; END DEBUG
04BF02 79          0077*      ld a,c
04BF03 B7          0078*      or a
04BF04 C2 A6 BE 04 0079*      jp nz,img_load_main_loop
04BF08 78          0080*      ld a,b
04BF09 B7          0081*      or a
04BF0A C2 A6 BE 04 0082*      jp nz,img_load_main_loop
04BF0E C9          0083*      ret
04BF0F             0084*  
04BF0F             0085*  load_next_panel:
04BF0F             0086*  ; look up the load routine for the current file index
04BF0F 2A 5A BE 04 0087*  	ld hl,(cur_file_idx)
04BF13 29          0088*  	add hl,hl ; multiply current index by 2 ...
04BF14 ED 5B 5A BE 0089*  	ld de,(cur_file_idx)
       04          
04BF19 19          0090*  	add hl,de ; ... now by 3
04BF1A ED 5B 66 BE 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04BF1F 19          0092*  	add hl,de
04BF20 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04BF22 22 27 BF 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04BF26             0095*  @jump_addr:
04BF26 CD 00 00 00 0096*  	call 0 ; call the panel load routine
04BF2A             0097*  ; look up the buffer id for the current file
04BF2A 2A 5A BE 04 0098*  	ld hl,(cur_file_idx)
04BF2E 29          0099*  	add hl,hl ; multiply current index by 2 ...
04BF2F ED 5B 5A BE 0100*  	ld de,(cur_file_idx)
       04          
04BF34 19          0101*  	add hl,de ; ... now by 3
04BF35 ED 5B 63 BE 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04BF3A 19          0103*  	add hl,de
04BF3B ED 27       0104*  	ld hl,(hl)
04BF3D 22 60 BE 04 0105*  	ld (cur_buffer_id),hl
04BF41             0106*  ; bump the current file index
04BF41 2A 5A BE 04 0107*  	ld hl,(cur_file_idx)
04BF45 23          0108*  	inc hl
04BF46 22 5A BE 04 0109*  	ld (cur_file_idx),hl
04BF4A C9          0110*  	ret
04BF4B             0111*  
04BF4B             0112*  move_bj:
04BF4B             0113*  ; activate bj bitmap
04BF4B 21 04 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04BF4F CD 2C B0 04 0115*  	call vdu_buff_select
04BF53             0116*  ; update position based on velocity parameters
04BF53 2A AE BF 04 0117*  	ld hl, (bj_x_cur)
04BF57 ED 5B AB BF 0118*  	ld de, (bj_xvel)
       04          
04BF5C 19          0119*  	add hl, de
04BF5D 22 AE BF 04 0120*  	ld (bj_x_cur), hl
04BF61 EB          0121*  	ex de,hl ; store x_cur in de
04BF62             0122*  ; check if we're < x_min
04BF62 2A B1 BF 04 0123*  	ld hl,(bj_x_min)
04BF66 AF          0124*  	xor a ; clear carry
04BF67 ED 52       0125*  	sbc hl,de ; x_min - x_cur
04BF69 F2 87 BF 04 0126*  	jp p, move_bj_x_min
04BF6D             0127*  ; check if we're > x_max
04BF6D 2A B4 BF 04 0128*  	ld hl,(bj_x_max)
04BF71 AF          0129*  	xor a ; clear carry
04BF72 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04BF74 FA 99 BF 04 0131*  	jp m, move_bj_x_max
04BF78             0132*  ; if not at either boundary, fall through to draw bj's
04BF78             0133*  draw_bj:
04BF78 ED 4B AE BF 0134*  	ld bc,(bj_x_cur)
       04          
04BF7D ED 5B BA BF 0135*  	ld de,(bj_y_cur)
       04          
04BF82 CD FD B1 04 0136*  	call vdu_plot_bmp
04BF86 C9          0137*  	ret
04BF87             0138*  move_bj_x_min:
04BF87 21 01 00 00 0139*  	ld hl,1
04BF8B 22 AB BF 04 0140*  	ld (bj_xvel),hl
04BF8F 2A B1 BF 04 0141*  	ld hl,(bj_x_min)
04BF93 22 AE BF 04 0142*  	ld (bj_x_cur),hl
04BF97 18 DF       0143*  	jr draw_bj
04BF99             0144*  move_bj_x_max:
04BF99 21 FF FF FF 0145*  	ld hl,-1
04BF9D 22 AB BF 04 0146*  	ld (bj_xvel),hl
04BFA1 2A B4 BF 04 0147*  	ld hl,(bj_x_max)
04BFA5 22 AE BF 04 0148*  	ld (bj_x_cur),hl
04BFA9 18 CD       0149*  	jr draw_bj
04BFAB 00 00 00    0150*  bj_xvel: dl 0
04BFAE 00 00 00    0151*  bj_x_cur: dl 0
04BFB1 00 00 00    0152*  bj_x_min: dl 0
04BFB4 00 00 00    0153*  bj_x_max: dl 0
04BFB7             0154*  
04BFB7 00 00 00    0155*  bj_yvel: dl 0
04BFBA 00 00 00    0156*  bj_y_cur: dl 0
04BFBD 00 00 00    0157*  bj_y_min: dl 0
04BFC0 00 00 00    0158*  bj_y_max: dl 0
04BFC3             0159*  
04BFC3             0160*  tmp_draw_all_the_things:
04BFC3 21 0A 20 00 0161*      ld hl,BUF_UI_SPLASH
04BFC7 CD 2C B0 04 0162*      call vdu_buff_select
04BFCB 01 00 00 00 0163*      ld bc,0
04BFCF 11 00 00 00 0164*      ld de,0
04BFD3 CD FD B1 04 0165*      call vdu_plot_bmp
04BFD7 C9          0166*  	ret
04BFD8             0167*  
04BFD8             0168*  ; load an uncompressed rgba2222 image file to a buffer
04BFD8             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04BFD8             0170*  vdu_load_img:
04BFD8             0171*  ; back up image dimension parameters
04BFD8 C5          0172*  	push bc
04BFD9 D5          0173*  	push de
04BFDA             0174*  ; load the image
04BFDA CD 40 CA 04 0175*  	call vdu_load_buffer_from_file
04BFDE             0176*  ; now make it a bitmap
04BFDE D1          0177*  	pop de
04BFDF C1          0178*  	pop bc
04BFE0 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04BFE2 C3 41 B0 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04BFE6             0181*  
04BFE6             0182*  ; load a compressed rgba2222 image file to a buffer
04BFE6             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04BFE6             0184*  vdu_load_img_cmp:
04BFE6             0185*  ; back up image dimension parameters
04BFE6 C5          0186*  	push bc
04BFE7 D5          0187*  	push de
04BFE8             0188*  ; back up the buffer id
04BFE8 E5          0189*  	push hl
04BFE9             0190*  ; load the image
04BFE9 CD 40 CA 04 0191*  	call vdu_load_buffer_from_file
04BFED             0192*  ; decompress the buffer
04BFED E1          0193*  	pop hl ; bufferId
04BFEE CD A0 B0 04 0194*  	call vdu_decompress_buffer
04BFF2             0195*  ; now make it a bitmap
04BFF2 D1          0196*  	pop de ; image height
04BFF3 C1          0197*  	pop bc ; image width
04BFF4 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04BFF6 C3 41 B0 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04BFFA             0029   	include "src/asm/sfx.asm"
04BFFA             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04BFFA             0002*  
04BFFA             0003*  SFX_num_buffers: equ 22
04BFFA             0004*  ; SFX buffer ids:
04BFFA             0005*  BUF_ACHTUNG: equ 0xFB00
04BFFA             0006*  BUF_AHH: equ 0xFB01
04BFFA             0007*  BUF_AUGH: equ 0xFB02
04BFFA             0008*  BUF_AYEE: equ 0xFB03
04BFFA             0009*  BUF_AYEE_HIGH: equ 0xFB04
04BFFA             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04BFFA             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04BFFA             0012*  BUF_DOG_YELP: equ 0xFB07
04BFFA             0013*  BUF_EXPLODE: equ 0xFB08
04BFFA             0014*  BUF_GOT_TREASURE: equ 0xFB09
04BFFA             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04BFFA             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04BFFA             0017*  BUF_KNIFE: equ 0xFB0C
04BFFA             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04BFFA             0019*  BUF_OOF: equ 0xFB0E
04BFFA             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04BFFA             0021*  BUF_SCREAM: equ 0xFB10
04BFFA             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04BFFA             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04BFFA             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04BFFA             0025*  BUF_UGH: equ 0xFB14
04BFFA             0026*  BUF_WILHELM: equ 0xFB15
04BFFA             0027*  
04BFFA             0028*  ; SFX buffer id reverse lookup:
04BFFA             0029*  SFX_buffer_id_lut:
04BFFA 00 FB 00    0030*  	dl BUF_ACHTUNG
04BFFD 01 FB 00    0031*  	dl BUF_AHH
04C000 02 FB 00    0032*  	dl BUF_AUGH
04C003 03 FB 00    0033*  	dl BUF_AYEE
04C006 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04C009 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04C00C 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04C00F 07 FB 00    0037*  	dl BUF_DOG_YELP
04C012 08 FB 00    0038*  	dl BUF_EXPLODE
04C015 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04C018 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04C01B 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04C01E 0C FB 00    0042*  	dl BUF_KNIFE
04C021 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04C024 0E FB 00    0044*  	dl BUF_OOF
04C027 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04C02A 10 FB 00    0046*  	dl BUF_SCREAM
04C02D 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04C030 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04C033 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04C036 14 FB 00    0050*  	dl BUF_UGH
04C039 15 FB 00    0051*  	dl BUF_WILHELM
04C03C             0052*  
04C03C             0053*  ; SFX duration lookup:
04C03C             0054*  SFX_duration_lut:
04C03C 58 03       0055*  	dw 856 ; ACHTUNG
04C03E 91 01       0056*  	dw 401 ; AHH
04C040 FC 02       0057*  	dw 764 ; AUGH
04C042 E6 01       0058*  	dw 486 ; AYEE
04C044 40 04       0059*  	dw 1088 ; AYEE_HIGH
04C046 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04C048 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04C04A B0 01       0062*  	dw 432 ; DOG_YELP
04C04C 13 05       0063*  	dw 1299 ; EXPLODE
04C04E A7 05       0064*  	dw 1447 ; GOT_TREASURE
04C050 24 01       0065*  	dw 292 ; GUN_EMPTY
04C052 BA 01       0066*  	dw 442 ; GUN_RELOAD
04C054 F2 00       0067*  	dw 242 ; KNIFE
04C056 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04C058 CE 03       0069*  	dw 974 ; OOF
04C05A 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04C05C E0 02       0071*  	dw 736 ; SCREAM
04C05E B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04C060 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04C062 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04C064 77 01       0075*  	dw 375 ; UGH
04C066 FD 04       0076*  	dw 1277 ; WILHELM
04C068             0077*  
04C068             0078*  ; SFX load routines jump table:
04C068             0079*  SFX_load_routines_table:
04C068 AA C0 04    0080*  	dl load_sfx_ACHTUNG
04C06B CC C0 04    0081*  	dl load_sfx_AHH
04C06E EE C0 04    0082*  	dl load_sfx_AUGH
04C071 10 C1 04    0083*  	dl load_sfx_AYEE
04C074 32 C1 04    0084*  	dl load_sfx_AYEE_HIGH
04C077 54 C1 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04C07A 76 C1 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04C07D 98 C1 04    0087*  	dl load_sfx_DOG_YELP
04C080 BA C1 04    0088*  	dl load_sfx_EXPLODE
04C083 DC C1 04    0089*  	dl load_sfx_GOT_TREASURE
04C086 FE C1 04    0090*  	dl load_sfx_GUN_EMPTY
04C089 20 C2 04    0091*  	dl load_sfx_GUN_RELOAD
04C08C 42 C2 04    0092*  	dl load_sfx_KNIFE
04C08F 64 C2 04    0093*  	dl load_sfx_MEIN_LEBEN
04C092 86 C2 04    0094*  	dl load_sfx_OOF
04C095 A8 C2 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04C098 CA C2 04    0096*  	dl load_sfx_SCREAM
04C09B EC C2 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04C09E 0E C3 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04C0A1 30 C3 04    0099*  	dl load_sfx_SHOT_PISTOL
04C0A4 52 C3 04    0100*  	dl load_sfx_UGH
04C0A7 74 C3 04    0101*  	dl load_sfx_WILHELM
04C0AA             0102*  
04C0AA             0103*  ; Import sfx .raw files and load them into VDP buffers
04C0AA             0104*  
04C0AA             0105*  load_sfx_ACHTUNG:
04C0AA 21 96 C3 04 0106*  	ld hl,FACHTUNG
04C0AE 22 5D BE 04 0107*  	ld (cur_filename),hl
04C0B2 11 8D CA 04 0108*  	ld de,filedata
04C0B6 01 00 00 01 0109*  	ld bc,65536
04C0BA 3E 01       0110*  	ld a,mos_load
04C0BC 5B CF       0111*  	RST.LIL 08h
04C0BE 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04C0C2 DD 21 3A 38 0113*  	ld ix,14394
       00          
04C0C7 CD B6 B4 04 0114*  	call vdu_load_sfx
04C0CB C9          0115*  	ret
04C0CC             0116*  
04C0CC             0117*  load_sfx_AHH:
04C0CC 21 A6 C3 04 0118*  	ld hl,FAHH
04C0D0 22 5D BE 04 0119*  	ld (cur_filename),hl
04C0D4 11 8D CA 04 0120*  	ld de,filedata
04C0D8 01 00 00 01 0121*  	ld bc,65536
04C0DC 3E 01       0122*  	ld a,mos_load
04C0DE 5B CF       0123*  	RST.LIL 08h
04C0E0 21 01 FB 00 0124*  	ld hl,BUF_AHH
04C0E4 DD 21 63 1A 0125*  	ld ix,6755
       00          
04C0E9 CD B6 B4 04 0126*  	call vdu_load_sfx
04C0ED C9          0127*  	ret
04C0EE             0128*  
04C0EE             0129*  load_sfx_AUGH:
04C0EE 21 B2 C3 04 0130*  	ld hl,FAUGH
04C0F2 22 5D BE 04 0131*  	ld (cur_filename),hl
04C0F6 11 8D CA 04 0132*  	ld de,filedata
04C0FA 01 00 00 01 0133*  	ld bc,65536
04C0FE 3E 01       0134*  	ld a,mos_load
04C100 5B CF       0135*  	RST.LIL 08h
04C102 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04C106 DD 21 39 32 0137*  	ld ix,12857
       00          
04C10B CD B6 B4 04 0138*  	call vdu_load_sfx
04C10F C9          0139*  	ret
04C110             0140*  
04C110             0141*  load_sfx_AYEE:
04C110 21 BF C3 04 0142*  	ld hl,FAYEE
04C114 22 5D BE 04 0143*  	ld (cur_filename),hl
04C118 11 8D CA 04 0144*  	ld de,filedata
04C11C 01 00 00 01 0145*  	ld bc,65536
04C120 3E 01       0146*  	ld a,mos_load
04C122 5B CF       0147*  	RST.LIL 08h
04C124 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04C128 DD 21 00 20 0149*  	ld ix,8192
       00          
04C12D CD B6 B4 04 0150*  	call vdu_load_sfx
04C131 C9          0151*  	ret
04C132             0152*  
04C132             0153*  load_sfx_AYEE_HIGH:
04C132 21 CC C3 04 0154*  	ld hl,FAYEE_HIGH
04C136 22 5D BE 04 0155*  	ld (cur_filename),hl
04C13A 11 8D CA 04 0156*  	ld de,filedata
04C13E 01 00 00 01 0157*  	ld bc,65536
04C142 3E 01       0158*  	ld a,mos_load
04C144 5B CF       0159*  	RST.LIL 08h
04C146 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04C14A DD 21 77 47 0161*  	ld ix,18295
       00          
04C14F CD B6 B4 04 0162*  	call vdu_load_sfx
04C153 C9          0163*  	ret
04C154             0164*  
04C154             0165*  load_sfx_DOG_WOOF_DOUBLE:
04C154 21 DE C3 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04C158 22 5D BE 04 0167*  	ld (cur_filename),hl
04C15C 11 8D CA 04 0168*  	ld de,filedata
04C160 01 00 00 01 0169*  	ld bc,65536
04C164 3E 01       0170*  	ld a,mos_load
04C166 5B CF       0171*  	RST.LIL 08h
04C168 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04C16C DD 21 24 28 0173*  	ld ix,10276
       00          
04C171 CD B6 B4 04 0174*  	call vdu_load_sfx
04C175 C9          0175*  	ret
04C176             0176*  
04C176             0177*  load_sfx_DOG_WOOF_SINGLE:
04C176 21 F6 C3 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04C17A 22 5D BE 04 0179*  	ld (cur_filename),hl
04C17E 11 8D CA 04 0180*  	ld de,filedata
04C182 01 00 00 01 0181*  	ld bc,65536
04C186 3E 01       0182*  	ld a,mos_load
04C188 5B CF       0183*  	RST.LIL 08h
04C18A 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04C18E DD 21 10 23 0185*  	ld ix,8976
       00          
04C193 CD B6 B4 04 0186*  	call vdu_load_sfx
04C197 C9          0187*  	ret
04C198             0188*  
04C198             0189*  load_sfx_DOG_YELP:
04C198 21 0E C4 04 0190*  	ld hl,FDOG_YELP
04C19C 22 5D BE 04 0191*  	ld (cur_filename),hl
04C1A0 11 8D CA 04 0192*  	ld de,filedata
04C1A4 01 00 00 01 0193*  	ld bc,65536
04C1A8 3E 01       0194*  	ld a,mos_load
04C1AA 5B CF       0195*  	RST.LIL 08h
04C1AC 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04C1B0 DD 21 60 1C 0197*  	ld ix,7264
       00          
04C1B5 CD B6 B4 04 0198*  	call vdu_load_sfx
04C1B9 C9          0199*  	ret
04C1BA             0200*  
04C1BA             0201*  load_sfx_EXPLODE:
04C1BA 21 1F C4 04 0202*  	ld hl,FEXPLODE
04C1BE 22 5D BE 04 0203*  	ld (cur_filename),hl
04C1C2 11 8D CA 04 0204*  	ld de,filedata
04C1C6 01 00 00 01 0205*  	ld bc,65536
04C1CA 3E 01       0206*  	ld a,mos_load
04C1CC 5B CF       0207*  	RST.LIL 08h
04C1CE 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04C1D2 DD 21 48 55 0209*  	ld ix,21832
       00          
04C1D7 CD B6 B4 04 0210*  	call vdu_load_sfx
04C1DB C9          0211*  	ret
04C1DC             0212*  
04C1DC             0213*  load_sfx_GOT_TREASURE:
04C1DC 21 2F C4 04 0214*  	ld hl,FGOT_TREASURE
04C1E0 22 5D BE 04 0215*  	ld (cur_filename),hl
04C1E4 11 8D CA 04 0216*  	ld de,filedata
04C1E8 01 00 00 01 0217*  	ld bc,65536
04C1EC 3E 01       0218*  	ld a,mos_load
04C1EE 5B CF       0219*  	RST.LIL 08h
04C1F0 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04C1F4 DD 21 07 5F 0221*  	ld ix,24327
       00          
04C1F9 CD B6 B4 04 0222*  	call vdu_load_sfx
04C1FD C9          0223*  	ret
04C1FE             0224*  
04C1FE             0225*  load_sfx_GUN_EMPTY:
04C1FE 21 44 C4 04 0226*  	ld hl,FGUN_EMPTY
04C202 22 5D BE 04 0227*  	ld (cur_filename),hl
04C206 11 8D CA 04 0228*  	ld de,filedata
04C20A 01 00 00 01 0229*  	ld bc,65536
04C20E 3E 01       0230*  	ld a,mos_load
04C210 5B CF       0231*  	RST.LIL 08h
04C212 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04C216 DD 21 3F 13 0233*  	ld ix,4927
       00          
04C21B CD B6 B4 04 0234*  	call vdu_load_sfx
04C21F C9          0235*  	ret
04C220             0236*  
04C220             0237*  load_sfx_GUN_RELOAD:
04C220 21 56 C4 04 0238*  	ld hl,FGUN_RELOAD
04C224 22 5D BE 04 0239*  	ld (cur_filename),hl
04C228 11 8D CA 04 0240*  	ld de,filedata
04C22C 01 00 00 01 0241*  	ld bc,65536
04C230 3E 01       0242*  	ld a,mos_load
04C232 5B CF       0243*  	RST.LIL 08h
04C234 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04C238 DD 21 0F 1D 0245*  	ld ix,7439
       00          
04C23D CD B6 B4 04 0246*  	call vdu_load_sfx
04C241 C9          0247*  	ret
04C242             0248*  
04C242             0249*  load_sfx_KNIFE:
04C242 21 69 C4 04 0250*  	ld hl,FKNIFE
04C246 22 5D BE 04 0251*  	ld (cur_filename),hl
04C24A 11 8D CA 04 0252*  	ld de,filedata
04C24E 01 00 00 01 0253*  	ld bc,65536
04C252 3E 01       0254*  	ld a,mos_load
04C254 5B CF       0255*  	RST.LIL 08h
04C256 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04C25A DD 21 F3 0F 0257*  	ld ix,4083
       00          
04C25F CD B6 B4 04 0258*  	call vdu_load_sfx
04C263 C9          0259*  	ret
04C264             0260*  
04C264             0261*  load_sfx_MEIN_LEBEN:
04C264 21 77 C4 04 0262*  	ld hl,FMEIN_LEBEN
04C268 22 5D BE 04 0263*  	ld (cur_filename),hl
04C26C 11 8D CA 04 0264*  	ld de,filedata
04C270 01 00 00 01 0265*  	ld bc,65536
04C274 3E 01       0266*  	ld a,mos_load
04C276 5B CF       0267*  	RST.LIL 08h
04C278 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04C27C DD 21 81 35 0269*  	ld ix,13697
       00          
04C281 CD B6 B4 04 0270*  	call vdu_load_sfx
04C285 C9          0271*  	ret
04C286             0272*  
04C286             0273*  load_sfx_OOF:
04C286 21 8A C4 04 0274*  	ld hl,FOOF
04C28A 22 5D BE 04 0275*  	ld (cur_filename),hl
04C28E 11 8D CA 04 0276*  	ld de,filedata
04C292 01 00 00 01 0277*  	ld bc,65536
04C296 3E 01       0278*  	ld a,mos_load
04C298 5B CF       0279*  	RST.LIL 08h
04C29A 21 0E FB 00 0280*  	ld hl,BUF_OOF
04C29E DD 21 00 40 0281*  	ld ix,16384
       00          
04C2A3 CD B6 B4 04 0282*  	call vdu_load_sfx
04C2A7 C9          0283*  	ret
04C2A8             0284*  
04C2A8             0285*  load_sfx_SCHUSSTAFFEL:
04C2A8 21 96 C4 04 0286*  	ld hl,FSCHUSSTAFFEL
04C2AC 22 5D BE 04 0287*  	ld (cur_filename),hl
04C2B0 11 8D CA 04 0288*  	ld de,filedata
04C2B4 01 00 00 01 0289*  	ld bc,65536
04C2B8 3E 01       0290*  	ld a,mos_load
04C2BA 5B CF       0291*  	RST.LIL 08h
04C2BC 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04C2C0 DD 21 63 26 0293*  	ld ix,9827
       00          
04C2C5 CD B6 B4 04 0294*  	call vdu_load_sfx
04C2C9 C9          0295*  	ret
04C2CA             0296*  
04C2CA             0297*  load_sfx_SCREAM:
04C2CA 21 AB C4 04 0298*  	ld hl,FSCREAM
04C2CE 22 5D BE 04 0299*  	ld (cur_filename),hl
04C2D2 11 8D CA 04 0300*  	ld de,filedata
04C2D6 01 00 00 01 0301*  	ld bc,65536
04C2DA 3E 01       0302*  	ld a,mos_load
04C2DC 5B CF       0303*  	RST.LIL 08h
04C2DE 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04C2E2 DD 21 5E 30 0305*  	ld ix,12382
       00          
04C2E7 CD B6 B4 04 0306*  	call vdu_load_sfx
04C2EB C9          0307*  	ret
04C2EC             0308*  
04C2EC             0309*  load_sfx_SHOT_GATLING_BURST:
04C2EC 21 BA C4 04 0310*  	ld hl,FSHOT_GATLING_BURST
04C2F0 22 5D BE 04 0311*  	ld (cur_filename),hl
04C2F4 11 8D CA 04 0312*  	ld de,filedata
04C2F8 01 00 00 01 0313*  	ld bc,65536
04C2FC 3E 01       0314*  	ld a,mos_load
04C2FE 5B CF       0315*  	RST.LIL 08h
04C300 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04C304 DD 21 00 60 0317*  	ld ix,24576
       00          
04C309 CD B6 B4 04 0318*  	call vdu_load_sfx
04C30D C9          0319*  	ret
04C30E             0320*  
04C30E             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04C30E 21 D5 C4 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04C312 22 5D BE 04 0323*  	ld (cur_filename),hl
04C316 11 8D CA 04 0324*  	ld de,filedata
04C31A 01 00 00 01 0325*  	ld bc,65536
04C31E 3E 01       0326*  	ld a,mos_load
04C320 5B CF       0327*  	RST.LIL 08h
04C322 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C326 DD 21 C4 42 0329*  	ld ix,17092
       00          
04C32B CD B6 B4 04 0330*  	call vdu_load_sfx
04C32F C9          0331*  	ret
04C330             0332*  
04C330             0333*  load_sfx_SHOT_PISTOL:
04C330 21 F4 C4 04 0334*  	ld hl,FSHOT_PISTOL
04C334 22 5D BE 04 0335*  	ld (cur_filename),hl
04C338 11 8D CA 04 0336*  	ld de,filedata
04C33C 01 00 00 01 0337*  	ld bc,65536
04C340 3E 01       0338*  	ld a,mos_load
04C342 5B CF       0339*  	RST.LIL 08h
04C344 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04C348 DD 21 61 4B 0341*  	ld ix,19297
       00          
04C34D CD B6 B4 04 0342*  	call vdu_load_sfx
04C351 C9          0343*  	ret
04C352             0344*  
04C352             0345*  load_sfx_UGH:
04C352 21 08 C5 04 0346*  	ld hl,FUGH
04C356 22 5D BE 04 0347*  	ld (cur_filename),hl
04C35A 11 8D CA 04 0348*  	ld de,filedata
04C35E 01 00 00 01 0349*  	ld bc,65536
04C362 3E 01       0350*  	ld a,mos_load
04C364 5B CF       0351*  	RST.LIL 08h
04C366 21 14 FB 00 0352*  	ld hl,BUF_UGH
04C36A DD 21 A9 18 0353*  	ld ix,6313
       00          
04C36F CD B6 B4 04 0354*  	call vdu_load_sfx
04C373 C9          0355*  	ret
04C374             0356*  
04C374             0357*  load_sfx_WILHELM:
04C374 21 14 C5 04 0358*  	ld hl,FWILHELM
04C378 22 5D BE 04 0359*  	ld (cur_filename),hl
04C37C 11 8D CA 04 0360*  	ld de,filedata
04C380 01 00 00 01 0361*  	ld bc,65536
04C384 3E 01       0362*  	ld a,mos_load
04C386 5B CF       0363*  	RST.LIL 08h
04C388 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04C38C DD 21 D7 53 0365*  	ld ix,21463
       00          
04C391 CD B6 B4 04 0366*  	call vdu_load_sfx
04C395 C9          0367*  	ret
04C396             0368*  
04C396             0369*  ; File name lookups:
04C396 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04C3A6 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04C3B2 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04C3BF 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04C3CC 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04C3DE 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04C3F6 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04C40E 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04C41F 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04C42F 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04C444 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04C456 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04C469 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04C477 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04C48A 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04C496 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04C4AB 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04C4BA 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C4D5 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C4F4 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04C508 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04C514 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04C524             0392*  
04C524             0393*  ; Play sfx routines
04C524             0394*  
04C524             0395*  sfx_play_achtung:
04C524 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04C528 01 58 03 00 0397*  	ld bc,856
04C52C C3 46 00 04 0398*  	jp vdu_play_sfx
04C530             0399*  
04C530             0400*  sfx_play_ahh:
04C530 21 01 FB 00 0401*  	ld hl,BUF_AHH
04C534 01 91 01 00 0402*  	ld bc,401
04C538 C3 46 00 04 0403*  	jp vdu_play_sfx
04C53C             0404*  
04C53C             0405*  sfx_play_augh:
04C53C 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04C540 01 FC 02 00 0407*  	ld bc,764
04C544 C3 46 00 04 0408*  	jp vdu_play_sfx
04C548             0409*  
04C548             0410*  sfx_play_ayee:
04C548 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04C54C 01 E6 01 00 0412*  	ld bc,486
04C550 C3 46 00 04 0413*  	jp vdu_play_sfx
04C554             0414*  
04C554             0415*  sfx_play_ayee_high:
04C554 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04C558 01 40 04 00 0417*  	ld bc,1088
04C55C C3 46 00 04 0418*  	jp vdu_play_sfx
04C560             0419*  
04C560             0420*  sfx_play_dog_woof_double:
04C560 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04C564 01 63 02 00 0422*  	ld bc,611
04C568 C3 46 00 04 0423*  	jp vdu_play_sfx
04C56C             0424*  
04C56C             0425*  sfx_play_dog_woof_single:
04C56C 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04C570 01 15 02 00 0427*  	ld bc,533
04C574 C3 46 00 04 0428*  	jp vdu_play_sfx
04C578             0429*  
04C578             0430*  sfx_play_dog_yelp:
04C578 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04C57C 01 B0 01 00 0432*  	ld bc,432
04C580 C3 46 00 04 0433*  	jp vdu_play_sfx
04C584             0434*  
04C584             0435*  sfx_play_explode:
04C584 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04C588 01 13 05 00 0437*  	ld bc,1299
04C58C C3 46 00 04 0438*  	jp vdu_play_sfx
04C590             0439*  
04C590             0440*  sfx_play_got_treasure:
04C590 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04C594 01 A7 05 00 0442*  	ld bc,1447
04C598 C3 46 00 04 0443*  	jp vdu_play_sfx
04C59C             0444*  
04C59C             0445*  sfx_play_gun_empty:
04C59C 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04C5A0 01 24 01 00 0447*  	ld bc,292
04C5A4 C3 46 00 04 0448*  	jp vdu_play_sfx
04C5A8             0449*  
04C5A8             0450*  sfx_play_gun_reload:
04C5A8 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04C5AC 01 BA 01 00 0452*  	ld bc,442
04C5B0 C3 46 00 04 0453*  	jp vdu_play_sfx
04C5B4             0454*  
04C5B4             0455*  sfx_play_knife:
04C5B4 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04C5B8 01 F2 00 00 0457*  	ld bc,242
04C5BC C3 46 00 04 0458*  	jp vdu_play_sfx
04C5C0             0459*  
04C5C0             0460*  sfx_play_mein_leben:
04C5C0 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04C5C4 01 2E 03 00 0462*  	ld bc,814
04C5C8 C3 46 00 04 0463*  	jp vdu_play_sfx
04C5CC             0464*  
04C5CC             0465*  sfx_play_oof:
04C5CC 21 0E FB 00 0466*  	ld hl,BUF_OOF
04C5D0 01 CE 03 00 0467*  	ld bc,974
04C5D4 C3 46 00 04 0468*  	jp vdu_play_sfx
04C5D8             0469*  
04C5D8             0470*  sfx_play_schusstaffel:
04C5D8 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04C5DC 01 48 02 00 0472*  	ld bc,584
04C5E0 C3 46 00 04 0473*  	jp vdu_play_sfx
04C5E4             0474*  
04C5E4             0475*  sfx_play_scream:
04C5E4 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04C5E8 01 E0 02 00 0477*  	ld bc,736
04C5EC C3 46 00 04 0478*  	jp vdu_play_sfx
04C5F0             0479*  
04C5F0             0480*  sfx_play_shot_gatling_burst:
04C5F0 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04C5F4 01 B6 05 00 0482*  	ld bc,1462
04C5F8 C3 46 00 04 0483*  	jp vdu_play_sfx
04C5FC             0484*  
04C5FC             0485*  sfx_play_shot_machine_gun_burst:
04C5FC 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C600 01 F9 03 00 0487*  	ld bc,1017
04C604 C3 46 00 04 0488*  	jp vdu_play_sfx
04C608             0489*  
04C608             0490*  sfx_play_shot_pistol:
04C608 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04C60C 01 7C 04 00 0492*  	ld bc,1148
04C610 C3 46 00 04 0493*  	jp vdu_play_sfx
04C614             0494*  
04C614             0495*  sfx_play_ugh:
04C614 21 14 FB 00 0496*  	ld hl,BUF_UGH
04C618 01 77 01 00 0497*  	ld bc,375
04C61C C3 46 00 04 0498*  	jp vdu_play_sfx
04C620             0499*  
04C620             0500*  sfx_play_wilhelm:
04C620 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04C624 01 FD 04 00 0502*  	ld bc,1277
04C628 C3 46 00 04 0503*  	jp vdu_play_sfx
04C62C             0030   	include "src/asm/timer.asm"
04C62C             0001*  ; Table 32. Timer Control Registers
04C62C             0002*  ; this constant is the base address of the timer control registers
04C62C             0003*  ; each timer takes three bytes:
04C62C             0004*  ;   0: control register
04C62C             0005*  ;   1: low byte of timer reset value
04C62C             0006*  ;   2: high byte of timer reset value
04C62C             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04C62C             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04C62C             0009*  TMR_CTL:     equ 80h
04C62C             0010*  
04C62C             0011*  ; Timer Control Register Bit Definitions
04C62C             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04C62C             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04C62C             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04C62C             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04C62C             0016*                              ; the TMRx_CTL register is read.
04C62C             0017*  
04C62C             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04C62C             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04C62C             0020*  
04C62C             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04C62C             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04C62C             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04C62C             0024*                              ; written to the counter when the end-of-count value is reached.
04C62C             0025*  
04C62C             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04C62C             0027*  CLK_DIV_256:  equ %00001100 ;
04C62C             0028*  CLK_DIV_64:   equ %00001000 ;
04C62C             0029*  CLK_DIV_16:   equ %00000100 ;
04C62C             0030*  CLK_DIV_4:    equ %00000000 ;
04C62C             0031*  
04C62C             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04C62C             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04C62C             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04C62C             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04C62C             0036*                              ; programmer must ensure that this bit is set to 1 each time
04C62C             0037*                              ; SINGLE-PASS mode is used.
04C62C             0038*  
04C62C             0039*  ; disable/enable the programmable reload timer
04C62C             0040*  PRT_EN_0:     equ %00000000 ;
04C62C             0041*  PRT_EN_1:     equ %00000001 ;
04C62C             0042*  
04C62C             0043*  ; Table 37. Timer Input Source Select Register
04C62C             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04C62C             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04C62C             0046*  ;   00: System clock / CLK_DIV
04C62C             0047*  ;   01: RTC / CLK_DIV
04C62C             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04C62C             0049*  ;   10: GPIO port B pin 1.
04C62C             0050*  ;   11: GPIO port B pin 1.
04C62C             0051*  TMR_ISS:   equ 92h ; register address
04C62C             0052*  
04C62C             0053*  ; Table 51. Real-Time Clock Control Register
04C62C             0054*  RTC_CTRL: equ EDh ; register address
04C62C             0055*  
04C62C             0056*  ; alarm interrupt disable/enable
04C62C             0057*  RTC_ALARM_0:    equ %00000000
04C62C             0058*  RTC_ALARM_1:    equ %10000000
04C62C             0059*  
04C62C             0060*  ; interrupt on alarm disable/enable
04C62C             0061*  RTC_INT_ENT_0:  equ %00000000
04C62C             0062*  RTC_INT_ENT_1:  equ %01000000
04C62C             0063*  
04C62C             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04C62C             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04C62C             0066*  
04C62C             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04C62C             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04C62C             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04C62C             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04C62C             0071*  
04C62C             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04C62C             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04C62C             0074*  
04C62C             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04C62C             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04C62C             0077*  
04C62C             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04C62C             0079*                                  ; RTC counter is enabled.
04C62C             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04C62C             0081*                                  ; RTC counter is disabled.
04C62C             0082*  
04C62C             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04C62C             0084*  
04C62C             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04C62C             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04C62C 00 00 00    0087*  prt_reload: dl 0x000000
04C62F             0088*  
04C62F             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04C62F             0090*  ;          de = number PRT interrupts during test interval
04C62F             0091*  prt_calibrate:
04C62F CD 1D B1 04 0092*      call vdu_vblank
04C633             0093*  ; set a MOS timer
04C633 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04C637 FD 21 8A C7 0095*      ld iy,tmr_test
       04          
04C63C CD 68 C7 04 0096*      call tmr_set
04C640             0097*  ; set a PRT timer
04C640             0098*      ; ld hl,prt_reload_hardware
04C640             0099*      ; ld hl,prt_reload_emulator
04C640 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04C644 22 2C C6 04 0101*      ld (prt_reload),hl
04C648 CD A3 C6 04 0102*      call prt_set
04C64C             0103*  @loop:
04C64C             0104*  ; check time remaining on MOS timer
04C64C CD 76 C7 04 0105*      call tmr_get
04C650 CA 5A C6 04 0106*      jp z,@done ; time expired,so quit
04C654 FA 5A C6 04 0107*      jp m,@done ; time past expiration (negative),so quit
04C658 18 F2       0108*      jr @loop
04C65A             0109*  @done:
04C65A ED 5B F1 C6 0110*      ld de,(prt_irq_counter)
       04          
04C65F 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04C663 ED 43 2C C6 0112*      ld (prt_reload),bc
       04          
04C668 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04C66C AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04C66D 32 7A C8 04 0115*      ld (is_emulator),a
04C671 ED 52       0116*      sbc hl,de
04C673 21 92 C8 04 0117*      ld hl,on_hardware ; default message for running on hardware
04C677 CA 2F C6 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04C67B F8          0119*      ret m ; negative result means we're on hardware
04C67C 3C          0120*      inc a ; we're on emulator
04C67D 32 7A C8 04 0121*      ld (is_emulator),a
04C681 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04C685 ED 43 2C C6 0123*      ld (prt_reload),bc
       04          
04C68A 21 7B C8 04 0124*      ld hl,on_emulator
04C68E C9          0125*      ret
04C68F             0126*  
04C68F 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04C6A3             0128*  
04C6A3             0129*  ; set PRT timer
04C6A3             0130*  prt_set:
04C6A3 21 00 00 00 0131*      ld hl,0
04C6A7 22 F1 C6 04 0132*      ld (prt_irq_counter),hl
04C6AB 2A 2C C6 04 0133*      ld hl,(prt_reload)
04C6AF ED 29 84    0134*      out0 ($84),l
04C6B2 ED 21 85    0135*  	out0 ($85),h
04C6B5             0136*  ; disable timer
04C6B5 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04C6B7 ED 39 83    0138*  	out0 ($83),a
04C6BA             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04C6BA 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04C6BC ED 39 83    0141*  	out0 ($83),a
04C6BF C9          0142*      ret
04C6C0             0143*  
04C6C0             0144*  ; ===============================================
04C6C0             0145*  ; PRT Timer Interrupt Handling
04C6C0             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04C6C0             0147*  ; -----------------------------------------------
04C6C0             0148*  prt_irq_init:
04C6C0             0149*      ; set up interrupt vector table 2
04C6C0 21 00 00 00 0150*  	ld hl,0
04C6C4 3A 0C 01 00 0151*  	ld a,($10c)
04C6C8 6F          0152*  	ld l,a
04C6C9 3A 0D 01 00 0153*  	ld a,($10d)
04C6CD 67          0154*  	ld h,a
04C6CE             0155*  
04C6CE             0156*  	; skip over CALL ($c3)
04C6CE 23          0157*  	inc hl
04C6CF             0158*  	; load address of jump into vector table 2 (in ram)
04C6CF ED 27       0159*  	ld hl,(hl)
04C6D1             0160*  
04C6D1             0161*  	; write CALL prt_irq_handler to vector table 2
04C6D1 3E C3       0162*  	ld a,$c3
04C6D3 77          0163*  	ld (hl),a
04C6D4 23          0164*  	inc hl
04C6D5 11 DC C6 04 0165*  	ld de,prt_irq_handler
04C6D9 ED 1F       0166*  	ld (hl),de
04C6DB             0167*  
04C6DB C9          0168*      ret
04C6DC             0169*  
04C6DC             0170*  prt_irq_handler:
04C6DC F3          0171*  	di
04C6DD F5          0172*  	push af
04C6DE E5          0173*      push hl
04C6DF ED 38 83    0174*  	in0 a,($83)
04C6E2 2A F1 C6 04 0175*  	ld hl,(prt_irq_counter)
04C6E6 23          0176*  	inc hl
04C6E7 22 F1 C6 04 0177*  	ld (prt_irq_counter),hl
04C6EB E1          0178*      pop hl
04C6EC F1          0179*  	pop af
04C6ED FB          0180*  	ei
04C6EE 5B ED 4D    0181*  	reti.l
04C6F1             0182*  
04C6F1             0183*  prt_irq_counter:
04C6F1 00 00 00    0184*  	.dl 0
04C6F4             0185*  prt_irq_counter_saved:
04C6F4 00 00 00    0186*      .dl 0
04C6F7             0187*  
04C6F7             0188*  prt_loop_reset:
04C6F7 E5          0189*      push hl
04C6F8 21 00 00 00 0190*  	ld hl,0
04C6FC 22 F1 C6 04 0191*  	ld (prt_irq_counter),hl
04C700 22 62 C7 04 0192*      ld (prt_loop_counter),hl
04C704 22 65 C7 04 0193*      ld (prt_loops),hl
04C708 CD A3 C6 04 0194*      call prt_set
04C70C E1          0195*      pop hl
04C70D C9          0196*      ret
04C70E             0197*  
04C70E             0198*  prt_loop_start:
04C70E E5          0199*      push hl
04C70F 21 00 00 00 0200*  	ld hl,0
04C713 22 F1 C6 04 0201*  	ld (prt_irq_counter),hl
04C717 E1          0202*      pop hl
04C718 C9          0203*      ret
04C719             0204*  
04C719             0205*  prt_loop_stop:
04C719 E5          0206*      push hl
04C71A D5          0207*      push de
04C71B 2A F1 C6 04 0208*      ld hl,(prt_irq_counter)
04C71F ED 5B 62 C7 0209*      ld de,(prt_loop_counter)
       04          
04C724 19          0210*      add hl,de
04C725 22 62 C7 04 0211*      ld (prt_loop_counter),hl
04C729 21 00 00 00 0212*      ld hl,0
04C72D 22 F1 C6 04 0213*      ld (prt_irq_counter),hl
04C731 2A 65 C7 04 0214*      ld hl,(prt_loops)
04C735 23          0215*      inc hl
04C736 22 65 C7 04 0216*      ld (prt_loops),hl
04C73A D1          0217*      pop de
04C73B E1          0218*      pop hl
04C73C C9          0219*      ret
04C73D             0220*  
04C73D             0221*  ; inputs: bc = y,x text coordinates to print
04C73D             0222*  prt_loop_print:
04C73D F5          0223*      push af
04C73E E5          0224*      push hl
04C73F C5          0225*      push bc
04C740 D5          0226*      push de
04C741 DD E5       0227*      push ix
04C743 FD E5       0228*      push iy
04C745 CD 00 B0 04 0229*      call vdu_move_cursor
04C749             0230*  
04C749 2A 62 C7 04 0231*      ld hl,(prt_loop_counter)
04C74D CD 10 B5 04 0232*      call printDec
04C751             0233*  
04C751 2A 65 C7 04 0234*      ld hl,(prt_loops)
04C755 CD 10 B5 04 0235*      call printDec
04C759             0236*  
04C759 FD E1       0237*      pop iy
04C75B DD E1       0238*      pop ix
04C75D D1          0239*      pop de
04C75E C1          0240*      pop bc
04C75F E1          0241*      pop hl
04C760 F1          0242*      pop af
04C761 C9          0243*      ret
04C762             0244*  
04C762             0245*  prt_loop_counter:
04C762 00 00 00    0246*      .dl 0
04C765             0247*  prt_loops:
04C765 00 00 00    0248*      .dl 0
04C768             0249*  
04C768             0250*  ; ===============================================
04C768             0251*  ; Timer functions
04C768             0252*  ; -----------------------------------------------
04C768             0253*  ; set a countdown timer
04C768             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C768             0255*  ; returns: hl = current time
04C768             0256*  tmr_set:
04C768 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C76B             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C76B 3E 08       0001*M 			LD	A, function
04C76D 5B CF       0002*M 			RST.LIL	08h
04C76F DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C772 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C775 C9          0261*      ret
04C776             0262*  
04C776             0263*  ; gets time remaining on a countdown timer
04C776             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C776             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C776             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C776             0267*  tmr_get:
04C776             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C776 3E 08       0001*M 			LD	A, function
04C778 5B CF       0002*M 			RST.LIL	08h
04C77A DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C77D FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C780 AF          0271*      xor a                   ; clear carry
04C781 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C783 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C786 AF          0274*      xor a                   ; clear carry
04C787 ED 5A       0275*      adc hl,de               ; hl = time remaining
04C789             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C789 C9          0277*      ret
04C78A             0278*  
04C78A             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C790             0280*  
04C790 00 00 00    0281*  timestamp_now: dl 0
04C793 00 00 00    0282*  timestamp_old: dl 0
04C796 00 00 00    0283*  timestamp_chg: dl 0
04C799             0284*  
04C799             0285*  ; update the global timestamp from the system clock
04C799             0286*  ; inputs: none
04C799             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C799             0288*  ;          de = current time
04C799             0289*  ;          ix = pointer to syvars table
04C799             0290*  ; destroys: af,hl,de,ix
04C799             0291*  timestamp_tick:
04C799 ED 5B 90 C7 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C79E ED 53 93 C7 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C7A3             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C7A3 3E 08       0001*M 			LD	A, function
04C7A5 5B CF       0002*M 			RST.LIL	08h
04C7A7 DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C7AA 22 90 C7 04 0296*      ld (timestamp_now),hl   ; save current time
04C7AE AF          0297*      xor a                   ; clear carry
04C7AF ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C7B1 22 96 C7 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C7B5 C9          0300*      ret
04C7B6             0301*  
04C7B6             0302*  ; set a countdown timer
04C7B6             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C7B6             0304*  ; requires: timestamp_tick to be called at least once before this function
04C7B6             0305*  ; returns: hl = current time
04C7B6             0306*  ; destroys: hl
04C7B6             0307*  timestamp_tmr_set:
04C7B6 FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C7B9 2A 90 C7 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C7BD FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C7C0 C9          0311*      ret
04C7C1             0312*  
04C7C1             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C7C1             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C7C1             0315*  ; requires: timestamp_tick to be called at least once before this function
04C7C1             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C7C1             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C7C1             0318*  ; destroys: af,hl,de
04C7C1             0319*  timestamp_tmr_get:
04C7C1 ED 5B 90 C7 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C7C6 FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C7C9 AF          0322*      xor a                   ; clear carry
04C7CA ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C7CC FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C7CF AF          0325*      xor a                   ; clear carry
04C7D0 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C7D2             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C7D2 C9          0328*      ret
04C7D3             0329*  
04C7D3             0330*  ; set a stopwatch
04C7D3             0331*  ; returns: hl = start time
04C7D3             0332*  ; destroys: hl,ix
04C7D3             0333*  stopwatch_set:
04C7D3             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C7D3 3E 08       0001*M 			LD	A, function
04C7D5 5B CF       0002*M 			RST.LIL	08h
04C7D7 DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C7DA 22 EF C7 04 0336*      ld (stopwatch_started),hl            ; set start time
04C7DE C9          0337*      ret
04C7DF             0338*  
04C7DF             0339*  ; gets time elapsed on a stopwatch
04C7DF             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C7DF             0341*  ; destroys: af,hl,de,ix
04C7DF             0342*  stopwatch_get:
04C7DF             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C7DF 3E 08       0001*M 			LD	A, function
04C7E1 5B CF       0002*M 			RST.LIL	08h
04C7E3 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C7E6 ED 5B EF C7 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C7EB AF          0346*      xor a                   ; clear carry
04C7EC ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C7EE C9          0348*      ret
04C7EF             0349*  
04C7EF             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C7F2             0351*  
04C7F2             0352*  ; ------------------
04C7F2             0353*  ; delay routine
04C7F2             0354*  ; Author: Richard Turrnidge
04C7F2             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C7F2             0356*  ; routine waits a fixed time,then returns
04C7F2             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C7F2             0358*  ; eg. ld A,00000100b
04C7F2             0359*  
04C7F2             0360*  multiPurposeDelay:
04C7F2 F5          0361*      push af
04C7F3 C5          0362*      push bc
04C7F4 DD E5       0363*      push ix
04C7F6 47          0364*      ld b,a
04C7F7 3E 08       0365*      ld a,$08
04C7F9 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C7FB             0367*  
04C7FB             0368*  waitLoop:
04C7FB             0369*  
04C7FB DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C7FE             0371*  
04C7FE             0372*                                  ;   we check if bit set is same as last time we checked.
04C7FE             0373*                                  ;   bit 0 - don't use
04C7FE             0374*                                  ;   bit 1 - changes 64 times per second
04C7FE             0375*                                  ;   bit 2 - changes 32 times per second
04C7FE             0376*                                  ;   bit 3 - changes 16 times per second
04C7FE             0377*  
04C7FE             0378*                                  ;   bit 4 - changes 8 times per second
04C7FE             0379*                                  ;   bit 5 - changes 4 times per second
04C7FE             0380*                                  ;   bit 6 - changes 2 times per second
04C7FE             0381*                                  ;   bit 7 - changes 1 times per second
04C7FE A0          0382*      and b
04C7FF 4F          0383*      ld c,a
04C800 3A 11 C8 04 0384*      ld a,(oldTimeStamp)
04C804 B9          0385*      cp c                        ; is A same as last value?
04C805 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C807 79          0387*      ld a,c
04C808 32 11 C8 04 0388*      ld (oldTimeStamp),a        ; set new value
04C80C             0389*  
04C80C DD E1       0390*      pop ix
04C80E C1          0391*      pop bc
04C80F F1          0392*      pop af
04C810 C9          0393*      ret
04C811             0394*  
04C811 00          0395*  oldTimeStamp:   .db 00h
04C812             0031   
04C812             0032   
04C812             0033   start:
04C812 F5          0034       push af
04C813 C5          0035       push bc
04C814 D5          0036       push de
04C815 DD E5       0037       push ix
04C817 FD E5       0038       push iy
04C819             0039   
04C819 CD A9 C8 04 0040   	call init ; Initialization code
04C81D CD F0 C9 04 0041       call main ; Call the main function
04C821             0042   
04C821             0043   exit:
04C821             0044   
04C821 FD E1       0045       pop iy
04C823 DD E1       0046       pop ix
04C825 D1          0047       pop de
04C826 C1          0048       pop bc
04C827 F1          0049       pop af
04C828 21 00 00 00 0050       ld hl,0
04C82C             0051   
04C82C C9          0052       ret
04C82D             0053   
04C82D 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C844 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C84F 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C85D 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C87A 00          0058   is_emulator: defb 0
04C87B 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04C892 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04C8A9             0061   
04C8A9             0062   init:
04C8A9             0063   ; enable additional sound channels
04C8A9 CD 8C 00 04 0064   	call vdu_enable_channels
04C8AD             0065   
04C8AD             0066   ; start generic stopwatch to time setup loop
04C8AD             0067   ; so we can determine if we're running on emulator or hardware
04C8AD CD D3 C7 04 0068   	call stopwatch_set
04C8B1             0069   
04C8B1             0070   ; initialize global timestamp
04C8B1 DD 27 00    0071       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C8B4 22 90 C7 04 0072       ld (timestamp_now),hl
04C8B8             0073   
04C8B8             0074   ; set the cursor off
04C8B8 CD 0F B1 04 0075   	call cursor_off
04C8BC             0076   
04C8BC             0077   ; print loading ui message
04C8BC 21 44 C8 04 0078   	ld hl,loading_ui
04C8C0 CD C2 B4 04 0079   	call printString
04C8C4             0080   
04C8C4             0081   ; load fonts
04C8C4 CD 78 84 04 0082   	call load_font_itc_honda
04C8C8 CD 5B 95 04 0083   	call load_font_retro_computer
04C8CC             0084   
04C8CC             0085   ; load UI images
04C8CC CD E4 9D 04 0086   	call load_ui_images
04C8D0 CD 96 A0 04 0087   	call load_ui_images_bj
04C8D4             0088   
04C8D4             0089   ; set up the display
04C8D4 3E 88       0090       ld a,8+128 ; 320x240x64 double-buffered
04C8D6 CD 50 AF 04 0091       call vdu_set_screen_mode
04C8DA AF          0092       xor a
04C8DB CD 7F B0 04 0093       call vdu_set_scaling
04C8DF             0094   
04C8DF             0095   ; set text background color
04C8DF 3E 84       0096   	ld a,4 + 128
04C8E1 CD DC AE 04 0097   	call vdu_colour_text
04C8E5             0098   
04C8E5             0099   ; set text foreground color
04C8E5 3E 2F       0100   	ld a,47 ; aaaaff lavenderish
04C8E7 CD DC AE 04 0101   	call vdu_colour_text
04C8EB             0102   
04C8EB             0103   ; set gfx bg color
04C8EB AF          0104   	xor a ; plotting mode 0
04C8EC 0E 04       0105   	ld c,4 ; dark blue
04C8EE CD 04 AF 04 0106   	call vdu_gcol_bg
04C8F2 CD D7 AE 04 0107   	call vdu_clg
04C8F6             0108   
04C8F6             0109   ; set the cursor off again since we changed screen modes
04C8F6 CD 0F B1 04 0110   	call cursor_off
04C8FA             0111   
04C8FA             0112   ; VDU 28, left, bottom, right, top: Set text viewport **
04C8FA             0113   ; MIND THE LITTLE-ENDIANESS
04C8FA             0114   ; inputs: c=left,b=bottom,e=right,d=top
04C8FA 0E 00       0115   	ld c,0 ; left
04C8FC 16 14       0116   	ld d,20 ; top
04C8FE 1E 27       0117   	ld e,39 ; right
04C900 06 1D       0118   	ld b,29; bottom
04C902 CD C5 AF 04 0119   	call vdu_set_txt_viewport
04C906             0120   
04C906             0121   ; initialize image load routine
04C906 CD 69 BE 04 0122   	call img_load_init
04C90A             0123   
04C90A             0124   ; load panels
04C90A 01 13 01 00 0125   	ld bc,cube_num_panels
04C90E 21 AC 01 04 0126   	ld hl,cube_buffer_id_lut
04C912 22 63 BE 04 0127   	ld (cur_buffer_id_lut),hl
04C916 21 E5 04 04 0128   	ld hl,cube_load_panels_table
04C91A 22 66 BE 04 0129   	ld (cur_load_jump_table),hl
04C91E CD 9E BE 04 0130   	call img_load_main
04C922             0131   
04C922             0132   ; load sprites
04C922 01 64 00 00 0133   	ld bc,sprite_num_panels
04C926 21 B8 4A 04 0134   	ld hl,sprite_buffer_id_lut
04C92A 22 63 BE 04 0135   	ld (cur_buffer_id_lut),hl
04C92E 21 E4 4B 04 0136   	ld hl,sprite_load_panels_table
04C932 22 66 BE 04 0137   	ld (cur_load_jump_table),hl
04C936 CD 9E BE 04 0138   	call img_load_main
04C93A             0139   
04C93A             0140   ; load distance walls
04C93A 01 09 00 00 0141   	ld bc,dws_num_panels
04C93E 21 48 65 04 0142   	ld hl,dws_buffer_id_lut
04C942 22 63 BE 04 0143   	ld (cur_buffer_id_lut),hl
04C946 21 63 65 04 0144   	ld hl,dws_load_panels_table
04C94A 22 66 BE 04 0145   	ld (cur_load_jump_table),hl
04C94E CD 9E BE 04 0146   	call img_load_main
04C952             0147   
04C952             0148   ; load sound effects
04C952 01 16 00 00 0149   	ld bc,SFX_num_buffers
04C956 21 FA BF 04 0150   	ld hl,SFX_buffer_id_lut
04C95A 22 63 BE 04 0151   	ld (cur_buffer_id_lut),hl
04C95E 21 68 C0 04 0152   	ld hl,SFX_load_routines_table
04C962 22 66 BE 04 0153   	ld (cur_load_jump_table),hl
04C966 CD 1D B4 04 0154   	call sfx_load_main
04C96A             0155   
04C96A             0156   ; self modify vdu_play_sfx to enable sound
04C96A AF          0157   	xor a
04C96B 32 46 00 04 0158   	ld (vdu_play_sfx_disable),a
04C96F             0159   
04C96F             0160   ; use loading time to determine if we're running on emulator or hardware
04C96F CD DF C7 04 0161   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C973 11 40 1F 00 0162   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C977 AF          0163   	xor a ; clear carry, default is running on hardware
04C978 32 7A C8 04 0164   	ld (is_emulator),a
04C97C ED 52       0165   	sbc hl,de
04C97E FA 92 C9 04 0166   	jp m,@on_emulator
04C982 CD FB AF 04 0167   	call vdu_home_cursor
04C986 21 92 C8 04 0168   	ld hl,on_hardware
04C98A CD C2 B4 04 0169   	call printString
04C98E C3 A4 C9 04 0170   	jp @test_done
04C992             0171   
04C992             0172   @on_emulator:
04C992             0173   ; print emulator message
04C992 3E 01       0174   	ld a,1
04C994 32 7A C8 04 0175   	ld (is_emulator),a
04C998 CD FB AF 04 0176   	call vdu_home_cursor
04C99C 21 7B C8 04 0177   	ld hl,on_emulator
04C9A0 CD C2 B4 04 0178   	call printString
04C9A4             0179   
04C9A4             0180   @test_done:
04C9A4             0181   ; print final loading time
04C9A4 21 4F C8 04 0182   	ld hl,loading_time
04C9A8 CD C2 B4 04 0183   	call printString
04C9AC CD DF C7 04 0184   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C9B0 CD 10 B5 04 0185   	call printDec
04C9B4 CD D7 B4 04 0186   	call printNewLine
04C9B8             0187   
04C9B8             0188   ; print loading complete message and wait for user keypress
04C9B8 21 5D C8 04 0189   	ld hl,loading_complete
04C9BC CD C2 B4 04 0190   	call printString
04C9C0 CD 92 B0 04 0191   	call vdu_flip
04C9C4 CD 42 B8 04 0192   	call waitKeypress
04C9C8             0193   
04C9C8             0194   ; initialization done
04C9C8 C9          0195   	ret
04C9C9             0196   
04C9C9             0197   ; DEBUG: set up a simple countdown timer
04C9C9 01          0198   debug_timer: db 0x01
04C9CA             0199   
04C9CA             0200   main_loop_tmr: ds 6
04C9D0             0201   framerate: equ 30
04C9D0             0202   
04C9D0             0203   new_game:
04C9D0             0204   ; initialize map variables and load map file
04C9D0 21 E8 69 04 0205   	ld hl,room_flags
04C9D4 AF          0206   	xor a
04C9D5 06 0A       0207   	ld b,10
04C9D7             0208   @room_flags_loop:
04C9D7 77          0209   	ld (hl),a
04C9D8 23          0210   	inc hl
04C9D9 10 FC       0211   	djnz @room_flags_loop
04C9DB             0212   ; map_init:
04C9DB 32 CB B8 04 0213   	ld (cur_floor),a
04C9DF 32 CC B8 04 0214   	ld (cur_room),a
04C9E3             0215   ; load room file
04C9E3 CD 7E 68 04 0216   	call map_load
04C9E7             0217   ; initialize sprite data
04C9E7 CD AF 68 04 0218   	call map_init_sprites
04C9EB             0219   ; initialize player position
04C9EB CD 38 B9 04 0220   	call plyr_init
04C9EF             0221   
04C9EF C9          0222   	ret
04C9F0             0223   
04C9F0             0224   main:
04C9F0 CD D0 C9 04 0225   	call new_game
04C9F4             0226   
04C9F4             0227   ; main:
04C9F4             0228   ; ; set map variables and load initial map file
04C9F4             0229   ; 	call map_init
04C9F4             0230   ; ; initialize player position
04C9F4             0231   ; 	call plyr_init
04C9F4             0232   
04C9F4             0233   
04C9F4             0234   main_loop:
04C9F4             0235   ; update global timestamp
04C9F4 CD 99 C7 04 0236       call timestamp_tick
04C9F8             0237   
04C9F8             0238   ; move enemies
04C9F8 CD C2 AD 04 0239   	call sprites_see_plyr ; 220-285  prt ticks
04C9FC             0240   
04C9FC             0241   ; get player input and update sprite position
04C9FC             0242   	; 0-1 prt ticks
04C9FC CD E8 BC 04 0243   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04CA00             0244   
04CA00             0245   ; render the updated scene
04CA00 CD 65 6B 04 0246   	call render_scene ; 6-12 prt ticks
04CA04             0247   ; full loop 12-16 prt ticks
04CA04             0248   
04CA04             0249   ; flip the screen
04CA04 CD 92 B0 04 0250   	call vdu_flip
04CA08             0251   
04CA08             0252   @wait:
04CA08 FD 21 CA C9 0253   	ld iy,main_loop_tmr
       04          
04CA0D CD 76 C7 04 0254   	call tmr_get
04CA11 CA 1D CA 04 0255   	jp z,@continue
04CA15 FA 1D CA 04 0256   	jp m,@continue
04CA19 C3 08 CA 04 0257   	jp @wait
04CA1D             0258   @continue:
04CA1D             0259   
04CA1D             0260   ; reset main loop timer
04CA1D FD 21 CA C9 0261   	ld iy,main_loop_tmr
       04          
04CA22 21 04 00 00 0262   	ld hl,120/framerate
04CA26 CD 68 C7 04 0263   	call tmr_set
04CA2A             0264   
04CA2A             0265   ; check for escape key and quit if pressed
04CA2A             0266   	MOSCALL mos_getkbmap
04CA2A 3E 1E       0001M  			LD	A, function
04CA2C 5B CF       0002M  			RST.LIL	08h
04CA2E             0267   ; 113 Escape
04CA2E DD CB 0E 46 0268       bit 0,(ix+14)
04CA32 20 02       0269   	jr nz,main_end
04CA34             0270   @Escape:
04CA34 18 BE       0271   	jr main_loop
04CA36             0272   
04CA36             0273   main_end:
04CA36             0274   	; call do_outro
04CA36             0275   ; restore screen to something normalish
04CA36 AF          0276   	xor a
04CA37 CD 50 AF 04 0277   	call vdu_set_screen_mode
04CA3B CD 01 B1 04 0278   	call cursor_on
04CA3F C9          0279   	ret
04CA40             0280   
04CA40             0281   ; files.asm must go here so that filedata doesn't stomp on program data
04CA40             0282   	include "src/asm/files.asm"
04CA40             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04CA40             0002*  ; inputs: hl = bufferId, ix = file size
04CA40             0003*  vdu_load_buffer_from_file:
04CA40             0004*  	; load buffer ids
04CA40 22 7D CA 04 0005*  		ld (@id0),hl
04CA44 22 83 CA 04 0006*  		ld (@id1),hl
04CA48 22 88 CA 04 0007*  		ld (@id2),hl
04CA4C             0008*  	; clean up bytes that got stomped on by the ID loads
04CA4C 3E 02       0009*  		ld a,2
04CA4E 32 7F CA 04 0010*  		ld (@id0+2),a
04CA52 3E 17       0011*  		ld a,23
04CA54 32 85 CA 04 0012*  		ld (@id1+2),a
04CA58 AF          0013*  		xor a
04CA59 32 8A CA 04 0014*  		ld (@id2+2),a
04CA5D             0015*  	; read size from ix
04CA5D DD 7D       0016*  		ld a,ixl
04CA5F 32 8B CA 04 0017*  		ld (@size),a
04CA63 DD 7C       0018*  		ld a,ixh
04CA65 32 8C CA 04 0019*  		ld (@size+1),a
04CA69             0020*  	; get all the ducks in a row for the vdu call
04CA69 01 13 00 00 0021*  		ld bc,filedata-@start
04CA6D DD 09       0022*  		add ix,bc
04CA6F DD 44       0023*  		ld b,ixh
04CA71 DD 4D       0024*  		ld c,ixl
04CA73 21 7A CA 04 0025*  		ld hl,@start
04CA77             0026*  	; push the button
04CA77 5B DF       0027*  		rst.lil $18
04CA79             0028*  	; back to caller
04CA79 C9          0029*  		ret
04CA7A             0030*  ; vdp command string:
04CA7A 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04CA7D 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04CA7F 02          0033*  		db 2
04CA80             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04CA80 17 1B 20    0035*  		db 23,27,0x20
04CA83 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04CA85             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04CA85 17 00 A0    0038*  		db 23,0,0xA0
04CA88 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04CA8A 00          0040*  		db 0
04CA8B             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04CA8B 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04CA8D             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04CA8D             0044*  	; ds 65536 ; placeholder for file data	DEBUG
